{
  "current_date": "2023-09-15",
  "author": "John Mathews",
  "url": "http://johnmathews.is/posts",
  "length": 366380,
  "tokens": 80466,
  "posts": [
    {
      "title": "About",
      "url": "https://www.johnmathews.is/about",
      "date": "",
      "content": "This site is a mixture of my notes, a portfolio and a record of my hobbies and interests. It might be morphing into a Zettelkasten. It's a personal project and somewhere I can experiment with web and cloud technologies. Most of my work is as a freelance data-scientist. I also do web development and blockchain infrastructure work. More information about my work can be found here. If you have questions, comments or find a mistake, you can find me on twitter or email. Thanks for reading! LinkedIn | Github Zettelkasten data-scientist web development blockchain here twitter email LinkedIn Github",
      "length": 597,
      "tokens": 126,
      "chunks": [
        {
          "blog_title": "About",
          "blog_url": "https://www.johnmathews.is/about",
          "blog_date": "",
          "content": "This site is a mixture of my notes, a portfolio and a record of my hobbies and interests. It might be morphing into a Zettelkasten. It's a personal project and somewhere I can experiment with web and cloud technologies. Most of my work is as a freelance data-scientist. I also do web development and blockchain infrastructure work. More information about my work can be found here. If you have questions, comments or find a mistake, you can find me on twitter or email. Thanks for reading! LinkedIn | Github Zettelkasten data-scientist web development blockchain here twitter email LinkedIn Github",
          "content_length": 597,
          "content_tokens": 126,
          "embedding": []
        }
      ]
    },
    {
      "title": "Experience",
      "url": "https://www.johnmathews.is/experience",
      "date": "",
      "content": "Blockchain integrations for a cryptocurrency broker. Deploying and managing nodes for networks including Ethereum, Binance Smart Chain, Polkadot, Cardano, Tron, and others. Ansible and Docker were used to configuration and deployment. The Rosetta API was used to create workflows including generating batches of addresses, notifying services about deposits, and treasury management. PipPip.email: Event-driven and long-term scheduled email delivery. Focus on writing then relax knowing that scheduled delivery is guaranteed. MoneyBar.nl Personal financial dashboard and data driven web-app. \"John is a creative and conscientious software engineer, who understands business requirements well and translating those into applications under tight deadlines. Highly recommended.\" - ** Principal Geoscientist** NLP, data driven web-apps, mentoring. Working as an internal consultant I developed and delivered a range of tools. I worked with a wide variety of stakeholders and prioritized understanding business needs and defining scopes, whilst using agile development practices. I advised my team on software development practices and tooling decisions, and mentored junior members to improve their coding and business skills. Tools included Python, and used Plot.ly Dash, WSL, and Azure \"John played a big role helping my team get our biggest and most challenging analytics tool across the line. He ramped up quickly, communicated well and was always responsive.\" - Sankari Nair, Lead Analytics Manager Developed an analytics tool using Python and Plot.ly Dash. The tool has a broad scope covering multiple regions, scales and business lines. I re-designed the app for scalability, maintainability and performance whilst increasing functionality, and provided a flexible foundation for new features to be developed after I left the project. Challenges included building custom visualizations, refactoring legacy code, and processing large data sets efficiently. Design, create and maintain internal data tools for a cryptocurrency exchange. As the only data specialist, I did whatever needed to be done. I delivered tools to provide business insights including management information, fraud analysis, tax reporting, KPI tracking, regulatory compliance and marketing and growth. I also delivered sentiment analysis of key social media channels. I worked with stakeholders across the business including back-end, founders, customer support, finance, DevOps and growth teams. Tools included: Python, Bokeh, Google Cloud Platform (BigQuery, DataStore, Data Studio), PostgreSQL. Blockport has been bought by Bux Technical design and execution of a novel cryptographic crowd-funding method. Whilst working with a tech startup as a financial accountant, I worked with stakeholders and external developers to design, test and execute an initial coin offering (ICO). I also led investor relations throughout the funding round and provided book-keeping services. Data engineering and analytics Deliver the ETL pipeline, analysis and visualization of large financial datasets including financial journals and loan books. As a chartered accountant and external financial auditor of clients in banking and capital markets in London (HSBC, Barclays, Lloyds, BNP Paribas) I facilitated the transfer of data from client systems before transforming and loading them into our on-prem SQL environments. We recalculated clients' financial statements and mined the data for additional value-add insights. I also qualified as a chartered accountant with the ICAEW. In 2010 I began my PhD researching granular materials at the University of Natural Resources and Life Sciences in Vienna, Austria. Information about my research of silos and granular flows can be found here. During my final year at Edinburgh University the Great Recession arrived. After I graduated I found a job at Starbucks and became curious about finance. I resolved to one day understand \"how banks work\". — @johnmathews Wayfair Bitladon Blockchain integrations for a cryptocurrency broker. Rosetta API PipPip.email scheduled email delivery MoneyBar.nl Personal financial dashboard Shell (Exploration) \"John is a creative and conscientious software engineer, who understands business requirements well and translating those into applications under tight deadlines. Highly recommended.\" NLP, data driven web-apps, mentoring. Python Plot.ly Dash WSL Azure Uber \"John played a big role helping my team get our biggest and most challenging analytics tool across the line. He ramped up quickly, communicated well and was always responsive.\" Sankari Nair, Lead Analytics Manager Developed an analytics tool using Python and Plot.ly Dash. Blockport Design, create and maintain internal data tools for a cryptocurrency exchange. I worked with stakeholders across the business including back-end, founders, customer support, finance, DevOps and growth teams. Python Bokeh Google Cloud Platform PostgreSQL Bux Technical design and execution of a novel cryptographic crowd-funding method. Data engineering and analytics ICAEW University of Natural Resources and Life Sciences here Great Recession \"how banks work\" @johnmathews",
      "length": 5160,
      "tokens": 981,
      "chunks": [
        {
          "blog_title": "Experience",
          "blog_url": "https://www.johnmathews.is/experience",
          "blog_date": "",
          "content": "Blockchain integrations for a cryptocurrency broker. Deploying and managing nodes for networks including Ethereum, Binance Smart Chain, Polkadot, Cardano, Tron, and others. Ansible and Docker were used to configuration and deployment. The Rosetta API was used to create workflows including generating batches of addresses, notifying services about deposits, and treasury management. PipPip.email: Event-driven and long-term scheduled email delivery. Focus on writing then relax knowing that scheduled delivery is guaranteed. MoneyBar.nl Personal financial dashboard and data driven web-app. \"John is a creative and conscientious software engineer, who understands business requirements well and translating those into applications under tight deadlines. Highly recommended.\" - ** Principal Geoscientist** NLP, data driven web-apps, mentoring. Working as an internal consultant I developed and delivered a range of tools.",
          "content_length": 920,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "Experience",
          "blog_url": "https://www.johnmathews.is/experience",
          "blog_date": "",
          "content": "I worked with a wide variety of stakeholders and prioritized understanding business needs and defining scopes, whilst using agile development practices. I advised my team on software development practices and tooling decisions, and mentored junior members to improve their coding and business skills. Tools included Python, and used Plot.ly Dash, WSL, and Azure \"John played a big role helping my team get our biggest and most challenging analytics tool across the line. He ramped up quickly, communicated well and was always responsive.\" - Sankari Nair, Lead Analytics Manager Developed an analytics tool using Python and Plot.ly Dash. The tool has a broad scope covering multiple regions, scales and business lines. I re-designed the app for scalability, maintainability and performance whilst increasing functionality, and provided a flexible foundation for new features to be developed after I left the project. Challenges included building custom visualizations, refactoring legacy code, and processing large data sets efficiently.",
          "content_length": 1036,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Experience",
          "blog_url": "https://www.johnmathews.is/experience",
          "blog_date": "",
          "content": "Design, create and maintain internal data tools for a cryptocurrency exchange. As the only data specialist, I did whatever needed to be done. I delivered tools to provide business insights including management information, fraud analysis, tax reporting, KPI tracking, regulatory compliance and marketing and growth. I also delivered sentiment analysis of key social media channels. I worked with stakeholders across the business including back-end, founders, customer support, finance, DevOps and growth teams. Tools included: Python, Bokeh, Google Cloud Platform (BigQuery, DataStore, Data Studio), PostgreSQL. Blockport has been bought by Bux Technical design and execution of a novel cryptographic crowd-funding method. Whilst working with a tech startup as a financial accountant, I worked with stakeholders and external developers to design, test and execute an initial coin offering (ICO) I also led investor relations throughout the funding round and provided book-keeping services.",
          "content_length": 989,
          "content_tokens": 184,
          "embedding": []
        },
        {
          "blog_title": "Experience",
          "blog_url": "https://www.johnmathews.is/experience",
          "blog_date": "",
          "content": "Data engineering and analytics Deliver the ETL pipeline, analysis and visualization of large financial datasets including financial journals and loan books. As a chartered accountant and external financial auditor of clients in banking and capital markets in London (HSBC, Barclays, Lloyds, BNP Paribas) I facilitated the transfer of data from client systems before transforming and loading them into our on-prem SQL environments. We recalculated clients' financial statements and mined the data for additional value-add insights. I also qualified as a chartered accountant with the ICAEW. In 2010 I began my PhD researching granular materials at the University of Natural Resources and Life Sciences in Vienna, Austria. Information about my research of silos and granular flows can be found here. During my final year at Edinburgh University the Great Recession arrived. After I graduated I found a job at Starbucks and became curious about finance. I resolved to one day understand \"how banks work\"",
          "content_length": 1000,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Experience",
          "blog_url": "https://www.johnmathews.is/experience",
          "blog_date": "",
          "content": "— @johnmathews Wayfair Bitladon Blockchain integrations for a cryptocurrency broker. Rosetta API PipPip.email scheduled email delivery MoneyBar.nl Personal financial dashboard Shell (Exploration) \"John is a creative and conscientious software engineer, who understands business requirements well and translating those into applications under tight deadlines. Highly recommended.\" NLP, data driven web-apps, mentoring. Python Plot.ly Dash WSL Azure Uber \"John played a big role helping my team get our biggest and most challenging analytics tool across the line. He ramped up quickly, communicated well and was always responsive.\" Sankari Nair, Lead Analytics Manager Developed an analytics tool using Python and Plot.ly Dash. Blockport Design, create and maintain internal data tools for a cryptocurrency exchange. I worked with stakeholders across the business including back-end, founders, customer support, finance, DevOps and growth teams. Python Bokeh Google Cloud Platform PostgreSQL Bux Technical design and execution of a novel cryptographic crowd-funding method. Data engineering and analytics ICAEW University of Natural Resources and Life Sciences here Great Recession \"how banks work\" @johnmathews.",
          "content_length": 1209,
          "content_tokens": 236,
          "embedding": []
        }
      ]
    },
    {
      "title": "Thoughts on the Fujifilm x100v",
      "url": "https://www.johnmathews.is/blog/x100v-thoughts",
      "date": "August 11, 2023",
      "content": "Contents: > Background > HP850 > Nikon D80 > Fujifilm XT-5 > The X100V > Thoughts after 1 week > Improvements I bought my first camera 20 years ago when I was 17, and as I've grown older I've realised that my memories of past events are influenced by other events. An everyday moment that seems normal can with hindsight become rare and precious. Knowing this motives me to pursue photography. It offers the possibility to curate my past and add depth to the stories I tell about my life and the lives of others. It requires recognising the value of a present moment, and offers the chance to show my adult children and grandchildren what I experienced and the times I lived through. I gravitate towards documentation and aspire to be an environmental portrait photographer. HP850 The next camera I bought was a smaller Ricoh point-and-shoot, probably around 2005. I can't remember the model. It was sold with promises of much improved low light capabilities, and competent autofocus. Maybe it had a much higher maximum ISO setting, but unfortunately it was still useless in low light and the auto focus was terrible. Cameras with interchangeable lenses were too expensive, but were becoming cheaper. I decided that if I really wanted to do photography then I would need a DSLR. At the time, \"photography\" meant using film, and you had to say \"digital\" if you weren't using film. That seems to have reversed now, since \"film photography\" appears to be having a moment. Nikon D80 This was probably a mistake. I'd received a university scholarship but hadn't spent the cash - it had been sitting in an account earning enough interest to fund most of my textbooks. Once I graduated I spent almost everything on the camera body and 3 zooms. It's painful to think about, but I have a hunch the experience led to other good things, and was a good lesson to learn early. Nonetheless, that money could have been better used on other experiences that would probably have been more beneficial. This was around 2010, and my way of learning photography was the occasional book from Amazon and reading about ~100 photography blogs. Most of these blogs were pure marketing, and I didn't realise this until much later. I don't recall knowing any professional (or semi-professional) photographers personally, and after a few years I became frustrated with my photography skills. I also disliked how the act of photography made me an observer and took me out of the moment. Carrying a big heavy camera with a big heavy lens is a statement that has consequences. The quality and utility of camera phones was increasing and I enjoyed using the camera on my iPhone far more than my cumbersome Nikon. I decided to let professional photography slide and make photographs only when I felt like it. More fun, no pressure. Be present in the moment. German couple bikepack Henry was using a Fujifilm X-T4, an external mic, and a smartphone. I wondered how much photography had changed in the last decade, and I was amazed how much I could learn from other photographer's YouTube channels. This brings us to 2023. 1 2 A good photograph often looks simple and beauty often hides complexity. But the act of photography - including editing - is not simple at all. You need stuff, you need time, you need opportunity and you need to try hard. In addition to the camera and the lenses I now have a new laptop. I would have needed to buy eventually, anyway. (The old laptop was almost 4 years old.) A laptop that takes several seconds to process edits or to show another photo doesn't encourage nascent creative flow. It's frustrating how complex the feedback loop can be - make some photos, cull and edit them, reflect, repeat. X100V I visited family in London recently and despite knowing that many moments would make a nice photograph or were worthy of being documented, my XT-5 stayed in its bag.I didn't want to change the moment by putting a large (maybe only medium) lump of metal and glass on the table, or point it at someone and interrupt them. Photography is art and full of intangible reactions. Qualitative considerations have consequences and a small playful camera like the X100V leads to different photographs that something larger like an XT-5. I run a lot - slow and far - and I often see things I'd like to photograph. I tried putting the XT-5 in my pack whilst running, but this requires stopping, taking the pack off, unzipping it and then beginning to photograph. Its arduous, slow, laborious. And then you have to do it all in reverse when you're ready to move on. Hopefully you haven't cooled down too much, and hopefully its easy to get back into the surprisingly blissful flow of running whilst hungry and tired. I love to run because it feels like perpetual motion - moving forward through changing and remote (ish) landscapes whilst relying on tired legs and limited calories. I wish I could have carried my XT-5 whilst keeping it accessible. I've sold the XT-5, and the three prime lenses. I imported a second hand X100V from Seoul. I thought I was getting a deal but that was before the import tax. My bad. The net difference in cost is almost zero. I am surprised that a 3 year old, fixed lens camera, with half hearted video capabilities, no IBIS, a short lived battery and a mere 24 megapixel sensor, could be better (to me, in almost every meaningful sense) than the latest flagship camera body and some incredible lenses. 3 After two weeks of fun and frequent photography of the streets, my village, my kids, my house... here are some thoughts. fun It's small(er) and that's a really big deal, more than I expected. Most of the people who will be in your photographs will think it looks good. It's very right-handed. Probably the most right-handed thing I've ever owned. I am left handed. You can use it with one hand, this has a lot of benefits. Having any camera in your hand, or pocket, is totally different to having a better camera in a bag. The built-in flash is fun and engaging. It's a fun \"look\", and sometimes it improves the experience of being photographed. The subject knows when the photo has been taken and from their perspective a photograph becomes more of an \"event\", and therefore more special. It feels like they've had their photo taken because something obvious has happened. The lens is wonderful. It makes beautiful photos. The controls are great - the aperture ring, shutter speed dial and exposure compensation dials in particular feel sturdy and well made. It feels good to hold and operate. The dials are strong, firm, and clicky. They feel premium. The camera feels like it'll last a long time. The view finder is fun. The flip screen is great for waste height shots If and when a successor arrives, I'd like it to have.. A bigger battery A quieter lens More megapixels. Seriously. It's a prime lens and sometimes I want to crop a lot. It was nice to have 40 on the XT-5. Better autofocus when there is bright light behind the subject. The Fuji UI isn't intuitive. I have to google so many menu items to figure out what it does. Better video - 4k 60, 6k 30 would be nice. Recording for more than 10 minutes would be useful for interviews and conversations. IBIS. But not at the expense of size. A dedicated switch or button to go into video mode - I really want to use this camera for video too! Don't bury the switch in a menu. Different sets of custom modes for video and stills - like on the XT-5. A screen that can tilt \"vertically\" as well as horizontally. I'd also like it to flip all the way around - through 180 degrees - so that I can see the screen whilst standing in front of the camera. That is all. ↩ massive zooms ↩ ↩",
      "length": 7662,
      "tokens": 1653,
      "chunks": [
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "Contents: > Background > HP850 > Nikon D80 > Fujifilm XT-5 > The X100V > Thoughts after 1 week > Improvements I bought my first camera 20 years ago when I was 17, and as I've grown older I've realised that my memories of past events are influenced by other events. An everyday moment that seems normal can with hindsight become rare and precious. Knowing this motives me to pursue photography. It offers the possibility to curate my past and add depth to the stories I tell about my life and the lives of others. It requires recognising the value of a present moment, and offers the chance to show my adult children and grandchildren what I experienced and the times I lived through. I gravitate towards documentation and aspire to be an environmental portrait photographer. HP850 The next camera I bought was a smaller Ricoh point-and-shoot, probably around 2005. I can't remember the model.",
          "content_length": 892,
          "content_tokens": 188,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "It was sold with promises of much improved low light capabilities, and competent autofocus. Maybe it had a much higher maximum ISO setting, but unfortunately it was still useless in low light and the auto focus was terrible. Cameras with interchangeable lenses were too expensive, but were becoming cheaper. I decided that if I really wanted to do photography then I would need a DSLR. At the time, \"photography\" meant using film, and you had to say \"digital\" if you weren't using film. That seems to have reversed now, since \"film photography\" appears to be having a moment. Nikon D80 This was probably a mistake. I'd received a university scholarship but hadn't spent the cash - it had been sitting in an account earning enough interest to fund most of my textbooks. Once I graduated I spent almost everything on the camera body and 3 zooms.",
          "content_length": 843,
          "content_tokens": 177,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "It's painful to think about, but I have a hunch the experience led to other good things, and was a good lesson to learn early. Nonetheless, that money could have been better used on other experiences that would probably have been more beneficial. This was around 2010, and my way of learning photography was the occasional book from Amazon and reading about ~100 photography blogs. Most of these blogs were pure marketing, and I didn't realise this until much later. I don't recall knowing any professional (or semi-professional) photographers personally, and after a few years I became frustrated with my photography skills. I also disliked how the act of photography made me an observer and took me out of the moment. Carrying a big heavy camera with a big heavy lens is a statement that has consequences. The quality and utility of camera phones was increasing and I enjoyed using the camera on my iPhone far more than my cumbersome Nikon.",
          "content_length": 942,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "I decided to let professional photography slide and make photographs only when I felt like it. More fun, no pressure. Be present in the moment. German couple bikepack Henry was using a Fujifilm X-T4, an external mic, and a smartphone. I wondered how much photography had changed in the last decade, and I was amazed how much I could learn from other photographer's YouTube channels. This brings us to 2023. 1 2 A good photograph often looks simple and beauty often hides complexity. But the act of photography - including editing - is not simple at all. You need stuff, you need time, you need opportunity and you need to try hard. In addition to the camera and the lenses I now have a new laptop. I would have needed to buy eventually, anyway. (The old laptop was almost 4 years old.) A laptop that takes several seconds to process edits or to show another photo doesn't encourage nascent creative flow.",
          "content_length": 904,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "It's frustrating how complex the feedback loop can be - make some photos, cull and edit them, reflect, repeat. X100V I visited family in London recently and despite knowing that many moments would make a nice photograph or were worthy of being documented, my XT-5 stayed in its bag.I didn't want to change the moment by putting a large (maybe only medium) lump of metal and glass on the table, or point it at someone and interrupt them. Photography is art and full of intangible reactions. Qualitative considerations have consequences and a small playful camera like the X100V leads to different photographs that something larger like an XT-5. I run a lot - slow and far - and I often see things I'd like to photograph. I tried putting the XT-5 in my pack whilst running, but this requires stopping, taking the pack off, unzipping it and then beginning to photograph. Its arduous, slow, laborious.",
          "content_length": 897,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "And then you have to do it all in reverse when you're ready to move on. Hopefully you haven't cooled down too much, and hopefully its easy to get back into the surprisingly blissful flow of running whilst hungry and tired. I love to run because it feels like perpetual motion - moving forward through changing and remote (ish) landscapes whilst relying on tired legs and limited calories. I wish I could have carried my XT-5 whilst keeping it accessible. I've sold the XT-5, and the three prime lenses. I imported a second hand X100V from Seoul. I thought I was getting a deal but that was before the import tax. My bad. The net difference in cost is almost zero.",
          "content_length": 663,
          "content_tokens": 144,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "I am surprised that a 3 year old, fixed lens camera, with half hearted video capabilities, no IBIS, a short lived battery and a mere 24 megapixel sensor, could be better (to me, in almost every meaningful sense) than the latest flagship camera body and some incredible lenses. 3 After two weeks of fun and frequent photography of the streets, my village, my kids, my house.. here are some thoughts. fun It's small(er) and that's a really big deal, more than I expected. Most of the people who will be in your photographs will think it looks good. It's very right-handed. Probably the most right-handed thing I've ever owned. I am left handed. You can use it with one hand, this has a lot of benefits. Having any camera in your hand, or pocket, is totally different to having a better camera in a bag. The built-in flash is fun and engaging.",
          "content_length": 840,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "It's a fun \"look\", and sometimes it improves the experience of being photographed. The subject knows when the photo has been taken and from their perspective a photograph becomes more of an \"event\", and therefore more special. It feels like they've had their photo taken because something obvious has happened. The lens is wonderful. It makes beautiful photos. The controls are great - the aperture ring, shutter speed dial and exposure compensation dials in particular feel sturdy and well made. It feels good to hold and operate. The dials are strong, firm, and clicky. They feel premium. The camera feels like it'll last a long time. The view finder is fun. The flip screen is great for waste height shots If and when a successor arrives, I'd like it to have. A bigger battery A quieter lens More megapixels. Seriously. It's a prime lens and sometimes I want to crop a lot. It was nice to have 40 on the XT-5.",
          "content_length": 912,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Thoughts on the Fujifilm x100v",
          "blog_url": "https://www.johnmathews.is/blog/x100v-thoughts",
          "blog_date": "August 11, 2023",
          "content": "Better autofocus when there is bright light behind the subject. The Fuji UI isn't intuitive. I have to google so many menu items to figure out what it does. Better video - 4k 60, 6k 30 would be nice. Recording for more than 10 minutes would be useful for interviews and conversations. IBIS. But not at the expense of size. A dedicated switch or button to go into video mode - I really want to use this camera for video too! Don't bury the switch in a menu. Different sets of custom modes for video and stills - like on the XT-5. A screen that can tilt \"vertically\" as well as horizontally. I'd also like it to flip all the way around - through 180 degrees - so that I can see the screen whilst standing in front of the camera. That is all. ↩ massive zooms ↩ ↩",
          "content_length": 759,
          "content_tokens": 181,
          "embedding": []
        }
      ]
    },
    {
      "title": "Content Creation: Things I learned The Hard Way",
      "url": "https://www.johnmathews.is/blog/19-things-i-learned-the-hard-way",
      "date": "July 07, 2023",
      "content": "email Fear obscurity, not rejection. You will be rejected; that's a fact and a part of running a business. So, focus on what you can control: being seen. Don't make assumptions on top of assumptions. It's so easy to live in your head and treat half-truths as THE truth. But it's like a house of cards that can collapse any second. Instead, ship small, and learn fast. You can't change people's minds, so don't try to. I used to love debating with friends in high school, but the world has become more polarized (at least, I think it has!). Work with people who already believe what you believe. It’s never going to feel “perfect.” It’s always going to be chaotic. If you’re looking for stability, this isn’t it. You'll never feel ready; everything always feels like work-in-progress. A 4-day workweek is more productive than a 5-day. I was skeptical at first, but it works. I use my Fridays to spend time with my daughter and run errands (doctor's appointments, etc.). I feel way more productive. Anyone can do anything for a week. Everyone can start a podcast, a weekly newsletter, or wake up at 5 AM to attend a networking event. But can you sustain this pace for six months? A year? Five years? Caricature yourself to be understood quickly by your people. I don't mean physically. I mean, don't expect your audience to grasp the nuances of your personality after coming across your Twitter profile for the first time. Do the emotional labor on their behalf so they get the 5% of information that matters. Your biggest challenge is closing the gap between what you are/believe and how you come across to the outside world. Unless you're a creative genius with decades of experience, you first need to do a lot of stuff to see what sticks. And then you can focus on quality. Always be marketing. This is your primary job. Serving customers and creating products come second. Why? Because, if you have more demand that you can handle, you can afford to make mistakes and invest into the other areas supporting marketing. Be in demand, and all your other problems become small challenges.",
      "length": 2087,
      "tokens": 471,
      "chunks": [
        {
          "blog_title": "Content Creation: Things I learned The Hard Way",
          "blog_url": "https://www.johnmathews.is/blog/19-things-i-learned-the-hard-way",
          "blog_date": "July 07, 2023",
          "content": "email Fear obscurity, not rejection. You will be rejected; that's a fact and a part of running a business. So, focus on what you can control: being seen. Don't make assumptions on top of assumptions. It's so easy to live in your head and treat half-truths as THE truth. But it's like a house of cards that can collapse any second. Instead, ship small, and learn fast. You can't change people's minds, so don't try to. I used to love debating with friends in high school, but the world has become more polarized (at least, I think it has!) Work with people who already believe what you believe. It’s never going to feel “perfect.” It’s always going to be chaotic. If you’re looking for stability, this isn’t it. You'll never feel ready; everything always feels like work-in-progress.",
          "content_length": 782,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Content Creation: Things I learned The Hard Way",
          "blog_url": "https://www.johnmathews.is/blog/19-things-i-learned-the-hard-way",
          "blog_date": "July 07, 2023",
          "content": "A 4-day workweek is more productive than a 5-day. I was skeptical at first, but it works. I use my Fridays to spend time with my daughter and run errands (doctor's appointments, etc.) I feel way more productive. Anyone can do anything for a week. Everyone can start a podcast, a weekly newsletter, or wake up at 5 AM to attend a networking event. But can you sustain this pace for six months? A year? Five years? Caricature yourself to be understood quickly by your people. I don't mean physically. I mean, don't expect your audience to grasp the nuances of your personality after coming across your Twitter profile for the first time. Do the emotional labor on their behalf so they get the 5% of information that matters. Your biggest challenge is closing the gap between what you are/believe and how you come across to the outside world. Unless you're a creative genius with decades of experience, you first need to do a lot of stuff to see what sticks. And then you can focus on quality. Always be marketing. This is your primary job. Serving customers and creating products come second. Why? Because, if you have more demand that you can handle, you can afford to make mistakes and invest into the other areas supporting marketing. Be in demand, and all your other problems become small challenges.",
          "content_length": 1301,
          "content_tokens": 277,
          "embedding": []
        }
      ]
    },
    {
      "title": "The Simplest Math Problem No One Can Solve",
      "url": "https://www.johnmathews.is/blog/collatz-conjecture",
      "date": "July 06, 2023",
      "content": "A Veritasium video about the Collatz Conjecture — it is easy enough for almost anyone to understand but notoriously difficult to solve.",
      "length": 135,
      "tokens": 28,
      "chunks": [
        {
          "blog_title": "The Simplest Math Problem No One Can Solve",
          "blog_url": "https://www.johnmathews.is/blog/collatz-conjecture",
          "blog_date": "July 06, 2023",
          "content": "A Veritasium video about the Collatz Conjecture — it is easy enough for almost anyone to understand but notoriously difficult to solve.",
          "content_length": 135,
          "content_tokens": 28,
          "embedding": []
        }
      ]
    },
    {
      "title": "Photography",
      "url": "https://www.johnmathews.is/blog/photography",
      "date": "July 06, 2023",
      "content": "Photography is visual communication, which is some kinds of universal language. something There must be a subject, a very obvious \"thing\" that the photo is about. Have respect for the subject - isolate it, and arrange the other elements depending on their relationship to the subject. Leaving as much other stuff out of the frame will increase subject isolation and convey intentionality. Can you see what the photographer was trying to say?",
      "length": 441,
      "tokens": 84,
      "chunks": [
        {
          "blog_title": "Photography",
          "blog_url": "https://www.johnmathews.is/blog/photography",
          "blog_date": "July 06, 2023",
          "content": "Photography is visual communication, which is some kinds of universal language. something There must be a subject, a very obvious \"thing\" that the photo is about. Have respect for the subject - isolate it, and arrange the other elements depending on their relationship to the subject. Leaving as much other stuff out of the frame will increase subject isolation and convey intentionality. Can you see what the photographer was trying to say?",
          "content_length": 441,
          "content_tokens": 84,
          "embedding": []
        }
      ]
    },
    {
      "title": "Bootstrapped SaaS",
      "url": "https://www.johnmathews.is/blog/bootstrapped-saas",
      "date": "May 05, 2023",
      "content": "For whatever reason, I find there is often more noise than signal when trying to learn or research entrepreneurship. This talk is outstanding because it covers a lot of factors and has a lot of examples.",
      "length": 203,
      "tokens": 39,
      "chunks": [
        {
          "blog_title": "Bootstrapped SaaS",
          "blog_url": "https://www.johnmathews.is/blog/bootstrapped-saas",
          "blog_date": "May 05, 2023",
          "content": "For whatever reason, I find there is often more noise than signal when trying to learn or research entrepreneurship. This talk is outstanding because it covers a lot of factors and has a lot of examples.",
          "content_length": 203,
          "content_tokens": 39,
          "embedding": []
        }
      ]
    },
    {
      "title": "A short 100 question diligence checklist",
      "url": "https://www.johnmathews.is/blog/100-due-diligence-questions",
      "date": "March 27, 2023",
      "content": "blog post Due diligence is ostensibly about an investor carefully checking out a potential investment in order to make sure everything is in order, but since investment theses already start with real-world data that leads to a thesis, the actual goal is a hostile cross-examination of your own thought process.",
      "length": 310,
      "tokens": 58,
      "chunks": [
        {
          "blog_title": "A short 100 question diligence checklist",
          "blog_url": "https://www.johnmathews.is/blog/100-due-diligence-questions",
          "blog_date": "March 27, 2023",
          "content": "blog post Due diligence is ostensibly about an investor carefully checking out a potential investment in order to make sure everything is in order, but since investment theses already start with real-world data that leads to a thesis, the actual goal is a hostile cross-examination of your own thought process.",
          "content_length": 310,
          "content_tokens": 58,
          "embedding": []
        }
      ]
    },
    {
      "title": "AI prompt engineering",
      "url": "https://www.johnmathews.is/blog/ai-prompt-engineering",
      "date": "March 22, 2023",
      "content": "blog post Persona Tell the AI who you want it to be \"you are an X with 'defining characteristic y\" Format Tell the AI what output format you want \"you produce bullet points with no more than 12 words\", \"you produce valid JSON\", etc Task Give it the thing you want done \"Write a summary of this article\", \"Create a blog post about Joe Blogs using their linkedIn and social media accounts\" Steps Give the steps you want it to take to complete the task \"Break down this input from a journalism standpoint, then look at its entertainment value, and then evaluate its humor level\" Output Tell it exactly how you want the output to look \"I want three sections: Introduction, followed by 2 paragraphs of analysis, Main Points, followed by 1 set of 5 bullets, and Takeaways, which gives you 3 things to immediately start doing tomorrow\" Examples Show 1 - 5 examples of ideal output \"Here’s an example poem that you should try to capture the feel of in your responses\", \"The JSON should have this exact format\", \"The story should have this character to it\" Tweaking Tell it what to include or what to exclude \"Don’t start with a preamble sentence; just create the output\", \"Make sure you always capitalize the output\"",
      "length": 1208,
      "tokens": 262,
      "chunks": [
        {
          "blog_title": "AI prompt engineering",
          "blog_url": "https://www.johnmathews.is/blog/ai-prompt-engineering",
          "blog_date": "March 22, 2023",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        },
        {
          "blog_title": "AI prompt engineering",
          "blog_url": "https://www.johnmathews.is/blog/ai-prompt-engineering",
          "blog_date": "March 22, 2023",
          "content": "blog post Persona Tell the AI who you want it to be \"you are an X with 'defining characteristic y\" Format Tell the AI what output format you want \"you produce bullet points with no more than 12 words\", \"you produce valid JSON\", etc Task Give it the thing you want done \"Write a summary of this article\", \"Create a blog post about Joe Blogs using their linkedIn and social media accounts\" Steps Give the steps you want it to take to complete the task \"Break down this input from a journalism standpoint, then look at its entertainment value, and then evaluate its humor level\" Output Tell it exactly how you want the output to look \"I want three sections: Introduction, followed by 2 paragraphs of analysis, Main Points, followed by 1 set of 5 bullets, and Takeaways, which gives you 3 things to immediately start doing tomorrow\" Examples Show 1 - 5 examples of ideal output \"Here’s an example poem that you should try to capture the feel of in your responses\", \"The JSON should have this exact format\", \"The story should have this character to it\" Tweaking Tell it what to include or what to exclude \"Don’t start with a preamble sentence; just create the output\", \"Make sure you always capitalize the output\"",
          "content_length": 1208,
          "content_tokens": 262,
          "embedding": []
        }
      ]
    },
    {
      "title": "Chat GPT prompt engineering",
      "url": "https://www.johnmathews.is/blog/chat-gpt-prompt",
      "date": "March 21, 2023",
      "content": "Use this prompt to create better prompts... I want you to become my Prompt Creator. Your goal is to help me craft the best possible prompt for my needs. The prompt will be used by you, ChatGPT. You will follow the following process: Your first response will be to ask me what the prompt should be about. I will provide my answer, but we will need to improve it through continual iterations by going through the next steps. Based on my input, you will generate 3 sections: a) Revised prompt (provide your rewritten prompt. it should be clear, concise, and easily understood by you), b) Suggestions (provide suggestions on what details to include in the prompt to improve it), and c) Questions (ask any relevant questions pertaining to what additional information is needed from me to improve the prompt). We will continue this iterative process with me providing additional information to you and you updating the prompt in the Revised prompt section until it's complete. source",
      "length": 977,
      "tokens": 197,
      "chunks": [
        {
          "blog_title": "Chat GPT prompt engineering",
          "blog_url": "https://www.johnmathews.is/blog/chat-gpt-prompt",
          "blog_date": "March 21, 2023",
          "content": "Use this prompt to create better prompts... I want you to become my Prompt Creator. Your goal is to help me craft the best possible prompt for my needs. The prompt will be used by you, ChatGPT. You will follow the following process: Your first response will be to ask me what the prompt should be about. I will provide my answer, but we will need to improve it through continual iterations by going through the next steps. Based on my input, you will generate 3 sections: a) Revised prompt (provide your rewritten prompt. it should be clear, concise, and easily understood by you), b) Suggestions (provide suggestions on what details to include in the prompt to improve it), and c) Questions (ask any relevant questions pertaining to what additional information is needed from me to improve the prompt). We will continue this iterative process with me providing additional information to you and you updating the prompt in the Revised prompt section until it's complete. source",
          "content_length": 977,
          "content_tokens": 197,
          "embedding": []
        }
      ]
    },
    {
      "title": "Thinking about risk",
      "url": "https://www.johnmathews.is/blog/measuring-risk-factors",
      "date": "March 21, 2023",
      "content": "Risk is highest when everything seems perfect. Do you feel safe, successful, relaxed, clever? What systems are you trusting? What assumptions are taking for granted? The conditions that create prosperous outcomes often plant the seeds of their own unwindings. Risk happens fast. Ask a turkey how it thinks its life is progressing 1 day before slaughter. Never better... Boring is often a feature, not a flaw. Leaving money on the table isn't a bad thing if it provides a margin for error. This is the same as point 4 but its so important to stress this. You must leave a margin for error. You must leave money on the table. There is never one single catalyst to any existential risk. The biggest risks, by their very nature, can’t be forecasted. The next crisis wont look like a past crisis. When you have already achieved “success,” no terminal tail risk is worth it, regardless of the probability. Regardless of the probability, don't risk upside that you can't afford to lose. Lock it in, cash out, leave money on the table. See points 4 and 5. Warren Buffett once said, “It’s insane to risk what you have and need for something you don’t really need.” If the downside risk is acceptable, then you can take big risks. If the downside risk is not OK, take smaller risks. For example, if you're investing €100 and it wont ruin your life if you lose it then you can take a big risk. But if you've turned that €100 into €100,000 and you're financial security is much improved, then don't take big risks. You have much more to lose and much less to gain. The biggest risks always look obvious in hindsight, yet we never catch them beforehand. You will be blind to your blindness, you cannot know what you don't know. But you can work hard and take rest. You can do diligent research and take time to reflect. If you know your thoughts and actions aren't clouded by fear or greed, and you were not compelled to make a rushed decision, then accept that you did your best.",
      "length": 1967,
      "tokens": 443,
      "chunks": [
        {
          "blog_title": "Thinking about risk",
          "blog_url": "https://www.johnmathews.is/blog/measuring-risk-factors",
          "blog_date": "March 21, 2023",
          "content": "Risk is highest when everything seems perfect. Do you feel safe, successful, relaxed, clever? What systems are you trusting? What assumptions are taking for granted? The conditions that create prosperous outcomes often plant the seeds of their own unwindings. Risk happens fast. Ask a turkey how it thinks its life is progressing 1 day before slaughter. Never better.. Boring is often a feature, not a flaw. Leaving money on the table isn't a bad thing if it provides a margin for error. This is the same as point 4 but its so important to stress this. You must leave a margin for error. You must leave money on the table. There is never one single catalyst to any existential risk. The biggest risks, by their very nature, can’t be forecasted. The next crisis wont look like a past crisis. When you have already achieved “success,” no terminal tail risk is worth it, regardless of the probability.",
          "content_length": 898,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Thinking about risk",
          "blog_url": "https://www.johnmathews.is/blog/measuring-risk-factors",
          "blog_date": "March 21, 2023",
          "content": "Regardless of the probability, don't risk upside that you can't afford to lose. Lock it in, cash out, leave money on the table. See points 4 and 5. Warren Buffett once said, “It’s insane to risk what you have and need for something you don’t really need.” If the downside risk is acceptable, then you can take big risks. If the downside risk is not OK, take smaller risks. For example, if you're investing €100 and it wont ruin your life if you lose it then you can take a big risk. But if you've turned that €100 into €100,000 and you're financial security is much improved, then don't take big risks. You have much more to lose and much less to gain. The biggest risks always look obvious in hindsight, yet we never catch them beforehand. You will be blind to your blindness, you cannot know what you don't know. But you can work hard and take rest. You can do diligent research and take time to reflect. If you know your thoughts and actions aren't clouded by fear or greed, and you were not compelled to make a rushed decision, then accept that you did your best.",
          "content_length": 1066,
          "content_tokens": 249,
          "embedding": []
        }
      ]
    },
    {
      "title": "Using AI for social media content creation.",
      "url": "https://www.johnmathews.is/blog/midjourney-ai-image-generation",
      "date": "March 17, 2023",
      "content": "lettergun.com 1 Chat GPT to write tweets, blog posts and anything else I can think of. An image generation model to create header images for blog posts, tweets, and anything else I can think of. I asked Chat GPT to recommend social media management services, and the explanation and links it provided were useful and coherent. I went with Hootsuit because, despite being very expensive at about €100/month, it's designed to do exactly what I want - manage, plan and post lots of social media as effortlessly as possible. Last year I used UpWork to work with copy writers and social media content creators to generate blogs, tweets and LinkedIn posts. I think I can do all of this myself now, using the AI models to generate ideas, do research, create images, maybe even short videos. The costs this month will be about 10% of the monthly costs I incurred last year working with humans. Literally a 10x cost reduction. I'm using Chat GPT from within Bing in the Edge browser, and its intuitive. Maybe I will find that I need to refine the style of answer or increase fact checking, but for now its as simple as typing what I would say to a... genie? servant? I'm not sure how to think of it. Initially I found it felt weird to type prompts as if I was talking to a human. I would naturally factor in the effort involved and ask for simpler things. So instead of saying \"recommend me the best X\" I would ask \"which is the better X, product A or product B?\", but I should go further still and ask how to solve the problem that I assume using product X would. Having enough imagination to use the model is a key skill, and I know that children will be better at this than adults. I'm so used to working within the confines of google search (being able to google effectively has been a key life skill and has benefited me enormously) that its going to take some deliberate practice to adjust to this new paradigm. article I've tried using DALL-E2 from OpenAI, and the results are OK but I couldnt get the kind of images I wanted. I've had more success with Midjourney but I need to use some parameters in the prompt. Here are a few I want to remember: --v 5 -- no x a more descriptive prompt is better for a unique look Concentrate on the main concepts you want to create. The Midjourney Bot does not understand grammar, sentence structure, or words like humans. specific synonyms work better in many circumstances. Instead of big, try gigantic, Remove words when possible. Fewer words mean each word has a more powerful influence. Use commas, brackets, and hyphens to help organize your thoughts, but know the Midjourney Bot will not reliably interpret them. Anything left unsaid may suprise you. Be as specific or vague as you want, but anything you leave out will be randomized. Being vague is a great way to get variety, Try specific numbers. \"Three cats\" is more specific than \"cats.\", “flock of birds” instead of \"birds.\" source :: hot::2 dog hot dog hot dog vibrant tulip fields:: red::-.5 vibrant tulip fields --no source Use Remix Mode to change prompts, parameters, model versions, or aspect ratios between variations. Remix will take the general composition of your starting image and use it as part of the new Job. Remixing can help change the setting or lighting of an image, evolve a subject, or achieve tricky compositions. /prefer /settings Make Variations line-art stack of pumpkins Remix pile of cartoon owls You can use images as part of a prompt to influence a Job's composition, style, and colors. Images prompts can be used alone or with text prompts. doc blend images together increase quality /prefer option list you can set a custom option name that can be used to easily include a set of options ↩",
      "length": 3718,
      "tokens": 812,
      "chunks": [
        {
          "blog_title": "Using AI for social media content creation.",
          "blog_url": "https://www.johnmathews.is/blog/midjourney-ai-image-generation",
          "blog_date": "March 17, 2023",
          "content": "lettergun.com 1 Chat GPT to write tweets, blog posts and anything else I can think of. An image generation model to create header images for blog posts, tweets, and anything else I can think of. I asked Chat GPT to recommend social media management services, and the explanation and links it provided were useful and coherent. I went with Hootsuit because, despite being very expensive at about €100/month, it's designed to do exactly what I want - manage, plan and post lots of social media as effortlessly as possible. Last year I used UpWork to work with copy writers and social media content creators to generate blogs, tweets and LinkedIn posts. I think I can do all of this myself now, using the AI models to generate ideas, do research, create images, maybe even short videos. The costs this month will be about 10% of the monthly costs I incurred last year working with humans. Literally a 10x cost reduction.",
          "content_length": 917,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Using AI for social media content creation.",
          "blog_url": "https://www.johnmathews.is/blog/midjourney-ai-image-generation",
          "blog_date": "March 17, 2023",
          "content": "I'm using Chat GPT from within Bing in the Edge browser, and its intuitive. Maybe I will find that I need to refine the style of answer or increase fact checking, but for now its as simple as typing what I would say to a.. genie? servant? I'm not sure how to think of it. Initially I found it felt weird to type prompts as if I was talking to a human. I would naturally factor in the effort involved and ask for simpler things. So instead of saying \"recommend me the best X\" I would ask \"which is the better X, product A or product B?\", but I should go further still and ask how to solve the problem that I assume using product X would. Having enough imagination to use the model is a key skill, and I know that children will be better at this than adults.",
          "content_length": 756,
          "content_tokens": 172,
          "embedding": []
        },
        {
          "blog_title": "Using AI for social media content creation.",
          "blog_url": "https://www.johnmathews.is/blog/midjourney-ai-image-generation",
          "blog_date": "March 17, 2023",
          "content": "I'm so used to working within the confines of google search (being able to google effectively has been a key life skill and has benefited me enormously) that its going to take some deliberate practice to adjust to this new paradigm. article I've tried using DALL-E2 from OpenAI, and the results are OK but I couldnt get the kind of images I wanted. I've had more success with Midjourney but I need to use some parameters in the prompt. Here are a few I want to remember: --v 5 -- no x a more descriptive prompt is better for a unique look Concentrate on the main concepts you want to create. The Midjourney Bot does not understand grammar, sentence structure, or words like humans. specific synonyms work better in many circumstances. Instead of big, try gigantic, Remove words when possible. Fewer words mean each word has a more powerful influence.",
          "content_length": 850,
          "content_tokens": 183,
          "embedding": []
        },
        {
          "blog_title": "Using AI for social media content creation.",
          "blog_url": "https://www.johnmathews.is/blog/midjourney-ai-image-generation",
          "blog_date": "March 17, 2023",
          "content": "Use commas, brackets, and hyphens to help organize your thoughts, but know the Midjourney Bot will not reliably interpret them. Anything left unsaid may suprise you. Be as specific or vague as you want, but anything you leave out will be randomized. Being vague is a great way to get variety, Try specific numbers. \"Three cats\" is more specific than \"cats.\", “flock of birds” instead of \"birds.\" source :: hot::2 dog hot dog hot dog vibrant tulip fields:: red::-.5 vibrant tulip fields --no source Use Remix Mode to change prompts, parameters, model versions, or aspect ratios between variations. Remix will take the general composition of your starting image and use it as part of the new Job. Remixing can help change the setting or lighting of an image, evolve a subject, or achieve tricky compositions. /prefer /settings Make Variations line-art stack of pumpkins Remix pile of cartoon owls You can use images as part of a prompt to influence a Job's composition, style, and colors. Images prompts can be used alone or with text prompts. doc blend images together increase quality /prefer option list you can set a custom option name that can be used to easily include a set of options ↩",
          "content_length": 1190,
          "content_tokens": 263,
          "embedding": []
        }
      ]
    },
    {
      "title": "Lessons from history in tackling climate change",
      "url": "https://www.johnmathews.is/blog/ft-climate-change",
      "date": "March 03, 2023",
      "content": "An FT article quantifying climate changing activities and contrasting them with otherwise familiar benchmarks What can we learn from studying thousands of years of humanity’s response to natural disasters? Article in the FT If any of this is true then it seems silly to not think about it or be actively concerned with it I don't know how to start Day to day (or month to month) life seems a bit precarious. I'd like more security before doing something that feels unknown. I have decided, for me, that I would rather be poor and fulfilled than rich and unfulfilled. I would prefer to suffer financial stress and have a balanced healthy lifestyle, than have an unfulfilling and stressful life that is financially secure. Focussing on avoiding financial stress to the detriment of all else feels weak, cowardly, and stupid. Time outdoors in natural environments. A community of friends and slow relationships. Agency to choose how I spend some of my time. Activities driven by curiosity, reflection, intellectual pursuits, what is valuable. A reasonable degree of modest financial security. Transactional relationships. Making decisions based on fear of the unknown, what-ifs, maybes, and poorly defined \"bad things\". Lack of exercise. Time in built-up urban environments. Doing things because that is how they're done. Fitting in. Going with the flow, etc. this blog post unordered notes posted on the fridge Look for people to talk to Make it easy for people to talk to you Enjoy the process",
      "length": 1492,
      "tokens": 303,
      "chunks": [
        {
          "blog_title": "Lessons from history in tackling climate change",
          "blog_url": "https://www.johnmathews.is/blog/ft-climate-change",
          "blog_date": "March 03, 2023",
          "content": "An FT article quantifying climate changing activities and contrasting them with otherwise familiar benchmarks What can we learn from studying thousands of years of humanity’s response to natural disasters? Article in the FT If any of this is true then it seems silly to not think about it or be actively concerned with it I don't know how to start Day to day (or month to month) life seems a bit precarious. I'd like more security before doing something that feels unknown. I have decided, for me, that I would rather be poor and fulfilled than rich and unfulfilled. I would prefer to suffer financial stress and have a balanced healthy lifestyle, than have an unfulfilling and stressful life that is financially secure. Focussing on avoiding financial stress to the detriment of all else feels weak, cowardly, and stupid. Time outdoors in natural environments. A community of friends and slow relationships. Agency to choose how I spend some of my time.",
          "content_length": 954,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Lessons from history in tackling climate change",
          "blog_url": "https://www.johnmathews.is/blog/ft-climate-change",
          "blog_date": "March 03, 2023",
          "content": "Activities driven by curiosity, reflection, intellectual pursuits, what is valuable. A reasonable degree of modest financial security. Transactional relationships. Making decisions based on fear of the unknown, what-ifs, maybes, and poorly defined \"bad things\" Lack of exercise. Time in built-up urban environments. Doing things because that is how they're done. Fitting in. Going with the flow, etc. this blog post unordered notes posted on the fridge Look for people to talk to Make it easy for people to talk to you Enjoy the process.",
          "content_length": 537,
          "content_tokens": 114,
          "embedding": []
        }
      ]
    },
    {
      "title": "Most Data Work Seems Fundamentally Worthless",
      "url": "https://www.johnmathews.is/blog/job-despair-lasagne",
      "date": "February 27, 2023",
      "content": "blog article \"A project of ones own\" What I like about this article is that the author has managed to speak to others and advance his understanding of the problems and various solutions - I have not. I also like the honesty and frank nature of the writing. I want to prioritise meaningful work and a balanced lifestyle above being financially rich and stressed. It's important to me to create something useful. My work needs to have meaning. Normal isn't OK. I've been thinking about non-profit work, or academia. After reading this, I'm more likely to consider academia. Goodbye, Data Science the author trades data science for data engineering does publicising a view make it more likely that others will publish similar views?",
      "length": 729,
      "tokens": 145,
      "chunks": [
        {
          "blog_title": "Most Data Work Seems Fundamentally Worthless",
          "blog_url": "https://www.johnmathews.is/blog/job-despair-lasagne",
          "blog_date": "February 27, 2023",
          "content": "blog article \"A project of ones own\" What I like about this article is that the author has managed to speak to others and advance his understanding of the problems and various solutions - I have not. I also like the honesty and frank nature of the writing. I want to prioritise meaningful work and a balanced lifestyle above being financially rich and stressed. It's important to me to create something useful. My work needs to have meaning. Normal isn't OK. I've been thinking about non-profit work, or academia. After reading this, I'm more likely to consider academia. Goodbye, Data Science the author trades data science for data engineering does publicising a view make it more likely that others will publish similar views?",
          "content_length": 729,
          "content_tokens": 145,
          "embedding": []
        }
      ]
    },
    {
      "title": "Everything you can't have",
      "url": "https://www.johnmathews.is/blog/everything-you-cant-have",
      "date": "February 07, 2023",
      "content": "Collabfund blog I like the article because it clearly articulates a psychological process that we all experience. I think that the mechanisms described in the article are a default condition that we can grow out of if we are wise, and that the article assumes implicitly that we are all slaves to our selfish wants, or need for dopamine. The beginning of the article is such a nice description of the foolishness that we begin with, that I have copied it here: === In fact for most people there’s a hierarchy of wants that goes something like this: A few years after leaving office, Richard Nixon mentioned that the richest people in the world are some of the unhappiest, because they can afford to never struggle. “Drinking too much. Talking too much. Thinking too little. Retired. No purpose,” he said. To ordinary people, it sounds amazing. To those who can afford to do anything, it often falls flat. Nixon elaborated: You feel that, gee, isn’t it just great to have enough money to afford to live in a very nice house, to be able to play golf, to have nice parties, to wear good clothes, to travel if you want to? And the answer is: If you don’t have those things, then they can mean a great deal to you. When you do have them, they mean nothing to you. This is a little exaggerated. But the idea of valuing only what you’ve struggled for is real. The Quest for The Simple Life He went on: There is a subtle pleasure … in the anxious debates which we hold with ourselves whether we can or cannot afford a certain thing; in our attempts to justify our wisdom; in the risk and recklessness of our operations; in the long deferred and final joy of our possession. But this is a kind of pleasure which the man of boundless means never knows. The buying of pictures affords us an excellent illustration on this point. [Ordinary people] … have to walk weary miles and wait long weeks to get upon the track of their treasure; to use all their knowledge of art and men to circumvent the malignity of dealers; to experience the extremes of trepidation and of hope; to deny themselves comforts, and perhaps food, that they may pay the price which has at last, after infinite dispute, reached an irreducible minimum; and the pleasure of their possession is in the ratio of their pains. But the man who enters a sale-room with the knowledge that he can have everything he wishes by the signing of a cheque feels none of these emotions.",
      "length": 2428,
      "tokens": 536,
      "chunks": [
        {
          "blog_title": "Everything you can't have",
          "blog_url": "https://www.johnmathews.is/blog/everything-you-cant-have",
          "blog_date": "February 07, 2023",
          "content": "Collabfund blog I like the article because it clearly articulates a psychological process that we all experience. I think that the mechanisms described in the article are a default condition that we can grow out of if we are wise, and that the article assumes implicitly that we are all slaves to our selfish wants, or need for dopamine. The beginning of the article is such a nice description of the foolishness that we begin with, that I have copied it here: === In fact for most people there’s a hierarchy of wants that goes something like this: A few years after leaving office, Richard Nixon mentioned that the richest people in the world are some of the unhappiest, because they can afford to never struggle. “Drinking too much. Talking too much. Thinking too little. Retired. No purpose,” he said. To ordinary people, it sounds amazing. To those who can afford to do anything, it often falls flat.",
          "content_length": 904,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "Everything you can't have",
          "blog_url": "https://www.johnmathews.is/blog/everything-you-cant-have",
          "blog_date": "February 07, 2023",
          "content": "Nixon elaborated: You feel that, gee, isn’t it just great to have enough money to afford to live in a very nice house, to be able to play golf, to have nice parties, to wear good clothes, to travel if you want to? And the answer is: If you don’t have those things, then they can mean a great deal to you. When you do have them, they mean nothing to you. This is a little exaggerated. But the idea of valuing only what you’ve struggled for is real. The Quest for The Simple Life He went on: There is a subtle pleasure … in the anxious debates which we hold with ourselves whether we can or cannot afford a certain thing; in our attempts to justify our wisdom; in the risk and recklessness of our operations; in the long deferred and final joy of our possession. But this is a kind of pleasure which the man of boundless means never knows.",
          "content_length": 837,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "Everything you can't have",
          "blog_url": "https://www.johnmathews.is/blog/everything-you-cant-have",
          "blog_date": "February 07, 2023",
          "content": "The buying of pictures affords us an excellent illustration on this point. [Ordinary people] … have to walk weary miles and wait long weeks to get upon the track of their treasure; to use all their knowledge of art and men to circumvent the malignity of dealers; to experience the extremes of trepidation and of hope; to deny themselves comforts, and perhaps food, that they may pay the price which has at last, after infinite dispute, reached an irreducible minimum; and the pleasure of their possession is in the ratio of their pains. But the man who enters a sale-room with the knowledge that he can have everything he wishes by the signing of a cheque feels none of these emotions.",
          "content_length": 685,
          "content_tokens": 147,
          "embedding": []
        }
      ]
    },
    {
      "title": "Money is a negative art",
      "url": "https://www.johnmathews.is/blog/money-negative-art",
      "date": "February 07, 2023",
      "content": "Collabfund blog A funny thing about money is that it’s a negative art. You often have a better chance of accumulating more of it by getting rid of bad traits vs. acquiring good ones. Most ambitious people’s intuition is to ask, “How can I get smarter? More informed? Find new skills?” In many fields those are the right questions. Money is a rare exception where asking questions like, “How can I be less dumb, less greedy, less impatient?” can be more effective. And there’s one trait whose removal from your personality can do more to improve your financial situation than anything else: The fear of missing out. Having no FOMO might be the most important investing skill. Being immune to the siren song of other people’s success – especially when that success is sudden, extreme, and caused by factors outside their control – is so powerful and important that it’s practically impossible to do well over time without it. When strategizing, Dwight Eisenhower used to quote Napoleon, who said a military genius is “the man who can do the average thing when everyone else around him is losing his mind.” Same with money. FOMO is recklessness masked as ambition. You see someone else getting rich and think, “If they can do it, I can too.” That feels like a good emotion – it feels like you’re learning through observation and following a data-driven path to success. But what’s actually occurring is you are outsourcing your emotions to people whose quick windfall has probably left them in a fragile emotional state to begin with. FOMO is also ruinous because it forces you into short-termism. If you only bought an investment because it went up, you’ll be the first to panic when it inevitably goes down. Charlie Munger once said: Someone will always be getting richer faster than you. This is not a tragedy… The idea of caring that someone is making money faster than you are is one of the deadly sins. Remove FOMO from the equation, and what’s left? You only care about your own goals. You tend to avoid getting sucked into bubbles. You tend to think long term. And you don’t need much else to do well over time.",
      "length": 2116,
      "tokens": 480,
      "chunks": [
        {
          "blog_title": "Money is a negative art",
          "blog_url": "https://www.johnmathews.is/blog/money-negative-art",
          "blog_date": "February 07, 2023",
          "content": "Collabfund blog A funny thing about money is that it’s a negative art. You often have a better chance of accumulating more of it by getting rid of bad traits vs. acquiring good ones. Most ambitious people’s intuition is to ask, “How can I get smarter? More informed? Find new skills?” In many fields those are the right questions. Money is a rare exception where asking questions like, “How can I be less dumb, less greedy, less impatient?” can be more effective. And there’s one trait whose removal from your personality can do more to improve your financial situation than anything else: The fear of missing out. Having no FOMO might be the most important investing skill.",
          "content_length": 674,
          "content_tokens": 154,
          "embedding": []
        },
        {
          "blog_title": "Money is a negative art",
          "blog_url": "https://www.johnmathews.is/blog/money-negative-art",
          "blog_date": "February 07, 2023",
          "content": "Being immune to the siren song of other people’s success – especially when that success is sudden, extreme, and caused by factors outside their control – is so powerful and important that it’s practically impossible to do well over time without it. When strategizing, Dwight Eisenhower used to quote Napoleon, who said a military genius is “the man who can do the average thing when everyone else around him is losing his mind.” Same with money. FOMO is recklessness masked as ambition. You see someone else getting rich and think, “If they can do it, I can too.” That feels like a good emotion – it feels like you’re learning through observation and following a data-driven path to success. But what’s actually occurring is you are outsourcing your emotions to people whose quick windfall has probably left them in a fragile emotional state to begin with.",
          "content_length": 856,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Money is a negative art",
          "blog_url": "https://www.johnmathews.is/blog/money-negative-art",
          "blog_date": "February 07, 2023",
          "content": "FOMO is also ruinous because it forces you into short-termism. If you only bought an investment because it went up, you’ll be the first to panic when it inevitably goes down. Charlie Munger once said: Someone will always be getting richer faster than you. This is not a tragedy… The idea of caring that someone is making money faster than you are is one of the deadly sins. Remove FOMO from the equation, and what’s left? You only care about your own goals. You tend to avoid getting sucked into bubbles. You tend to think long term. And you don’t need much else to do well over time.",
          "content_length": 584,
          "content_tokens": 139,
          "embedding": []
        }
      ]
    },
    {
      "title": "How to learn another language",
      "url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
      "date": "February 04, 2023",
      "content": "Contents: > Background > Why now > My name is \"two loaves of bread\" > The traditional approach hasn't worked > Learning how to learn > How to learn > Priorities > Feelings > Pre-storytelling Methods > Beginning > Intermediate > Advanced > Storytelling and speaking with tutors > Useful Videos I've lived in the Netherlands for 5 years now. I've bought a house, changed jobs, and my son was born here. Through all these experiences I haven't needed to learn Dutch. But as my children get older it will become increasingly useful to speak Dutch socially, and my children will likely consider themselves more Dutch than British. I live and work in the Netherlands, but I am not part of the culture. I want this to change, and I've decided that I will learn to speak Dutch fluently. Learning needs to become a fun hobby, something that I enjoy and look forward to. To me, language learning has always been either intimidating or boring. It started off badly when sometime around the age of ten I walked into a bakery in France and announced that my name was \"two loaves of bread\". Everyone laughed. Later on at secondary school I was so shy that the thought of trying to speak French or German to another person was terrifying. Despite not loving language learning, I spent a couple of months in Mexico when I was ~20 and I somehow went from not being able to order food, to discussing politics (badly) with a local. I'm still not sure how. I've never taken a Spanish class, but did try some conversational \"teach-yourself\" courses, and watched some movies. When I lived in Vienna I took German classes and spent quite a lot of effort trying to memorize vocabulary and grammar. Despite reaching level B1 in a classroom, I couldn't understand what people were saying in daily conversations, and if I asked a question I had to hope that they would answer it the exact way I was expecting them to. All it really did was make me feel self-conscious and inadequate. These experiences have taught me how to not learn a language - it's very clear that it's not like learning math or engineering. Rules could be broken, things didn't need to be completely right to be useful. If an apparently random word or phrase appears in my head in a certain context, it's probably correct and should be used without thinking about it too much. I've recently taken up running and enjoy it a lot, even though many people consider it \"hard work\", or something they could never do. I've tried to think about why my experience of running is so different to most other people's, and apply those learnings to language learning (and also photography, but that's for another post). As with most things, YouTube is a fantastic way to teach yourself, and before I jump into learning Dutch, I watched a few videos about how to learn a language. This post summarizes what I've learned, and what I need to remember to keep doing or keep avoiding. Part of me likes flashcard and vocab drills, even though it doesn't seem to help fluency at all. LingQ Be the owner of your own journey and come up with your own strategy Prioritize the phrases you use and hear the most Prioritize how to express yourself, and your normal situations. Don't use someone else's structure Don't try to learn \"the basics\" first or stick to a rigid order of progression, there is an order that will feel right. Go with the feeling. It doesn't matter if you make some mistakes on something for a while, you'll figure it out just like a child does. Language discovery is a personal process. People will disagree about what the best methods are, the experts don't agree. If you are good at listening, you will eventually be good at speaking. Accept uncertainty and that you don't and won't understand everything. Don't try to understand too much in one go, it's like mowing a lawn. Even though you are always the same person, language learning is about imitating culture and therefore you superficially change a bit. It's normal that different parts of your personality come through differently in different languages. Listen a lot - you cannot pronounce what you cannot hear, and after a while your brain will get used to the new sounds of a new language. Phrases imply the intonation Massive amounts of repetitive reading and listening Listen and speak a lot 1 hour/day Write down useful vocab when you come across it Review your notes Type don't write natural conversational not news, not audiobooks Go for a walk everyday and listen and quietly repeat what you hear Translate common phrases that stand out to you. Talk to real people Don't use English at all It's normal that this would be uncomfortable and exhausting Accents are OK, don't worry about it. Start using a tutor when you want to start using a tutor. You should be comfortable and want to do it, not apprehensive or embarrassed. Use a tutor after learning 3000 - 5000 words, the exact amount varies depending on the language. Find the right instructor (for you). Get many partners, tutors or language parents. Input+1 (I+1): Input is what you know, the +1 is something a bit extra, beyond your level. Ask for some i+1. Apps are better than nothing, but they're not as good as storytelling with a human Record your lessons and listen back to them. Repetition is great. Storytelling is a great language acquisition method. Avoid reading and writing, just tell stories and describe pictures Use magazines and children's books with pictures of things that are relevant to you Ask the expert to lovingly describe the pictures and ask you simple yes or no questions about the picture. Then ask the expert simple questions like \"what is this?\" \"what is he doing?\" \"why..?\" Why questions are really good. Act it out, (whilst sitting if you want, with hand motions etc) - Total Physical Response (TPR) is effective at making language more memorable. If you get stuck, you can draw. If you get really stuck, just say \"Het is niet belangrijk\" and then move on. Ask your tutor to never speak about grammar, it doesn't help. Don't bother with corrections, they don't work. No English",
      "length": 6073,
      "tokens": 1300,
      "chunks": [
        {
          "blog_title": "How to learn another language",
          "blog_url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
          "blog_date": "February 04, 2023",
          "content": "Contents: > Background > Why now > My name is \"two loaves of bread\" > The traditional approach hasn't worked > Learning how to learn > How to learn > Priorities > Feelings > Pre-storytelling Methods > Beginning > Intermediate > Advanced > Storytelling and speaking with tutors > Useful Videos I've lived in the Netherlands for 5 years now. I've bought a house, changed jobs, and my son was born here. Through all these experiences I haven't needed to learn Dutch. But as my children get older it will become increasingly useful to speak Dutch socially, and my children will likely consider themselves more Dutch than British. I live and work in the Netherlands, but I am not part of the culture. I want this to change, and I've decided that I will learn to speak Dutch fluently. Learning needs to become a fun hobby, something that I enjoy and look forward to. To me, language learning has always been either intimidating or boring.",
          "content_length": 932,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "How to learn another language",
          "blog_url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
          "blog_date": "February 04, 2023",
          "content": "It started off badly when sometime around the age of ten I walked into a bakery in France and announced that my name was \"two loaves of bread\" Everyone laughed. Later on at secondary school I was so shy that the thought of trying to speak French or German to another person was terrifying. Despite not loving language learning, I spent a couple of months in Mexico when I was ~20 and I somehow went from not being able to order food, to discussing politics (badly) with a local. I'm still not sure how. I've never taken a Spanish class, but did try some conversational \"teach-yourself\" courses, and watched some movies. When I lived in Vienna I took German classes and spent quite a lot of effort trying to memorize vocabulary and grammar.",
          "content_length": 739,
          "content_tokens": 160,
          "embedding": []
        },
        {
          "blog_title": "How to learn another language",
          "blog_url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
          "blog_date": "February 04, 2023",
          "content": "Despite reaching level B1 in a classroom, I couldn't understand what people were saying in daily conversations, and if I asked a question I had to hope that they would answer it the exact way I was expecting them to. All it really did was make me feel self-conscious and inadequate. These experiences have taught me how to not learn a language - it's very clear that it's not like learning math or engineering. Rules could be broken, things didn't need to be completely right to be useful. If an apparently random word or phrase appears in my head in a certain context, it's probably correct and should be used without thinking about it too much. I've recently taken up running and enjoy it a lot, even though many people consider it \"hard work\", or something they could never do.",
          "content_length": 780,
          "content_tokens": 162,
          "embedding": []
        },
        {
          "blog_title": "How to learn another language",
          "blog_url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
          "blog_date": "February 04, 2023",
          "content": "I've tried to think about why my experience of running is so different to most other people's, and apply those learnings to language learning (and also photography, but that's for another post) As with most things, YouTube is a fantastic way to teach yourself, and before I jump into learning Dutch, I watched a few videos about how to learn a language. This post summarizes what I've learned, and what I need to remember to keep doing or keep avoiding. Part of me likes flashcard and vocab drills, even though it doesn't seem to help fluency at all. LingQ Be the owner of your own journey and come up with your own strategy Prioritize the phrases you use and hear the most Prioritize how to express yourself, and your normal situations. Don't use someone else's structure Don't try to learn \"the basics\" first or stick to a rigid order of progression, there is an order that will feel right. Go with the feeling.",
          "content_length": 913,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "How to learn another language",
          "blog_url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
          "blog_date": "February 04, 2023",
          "content": "It doesn't matter if you make some mistakes on something for a while, you'll figure it out just like a child does. Language discovery is a personal process. People will disagree about what the best methods are, the experts don't agree. If you are good at listening, you will eventually be good at speaking. Accept uncertainty and that you don't and won't understand everything. Don't try to understand too much in one go, it's like mowing a lawn. Even though you are always the same person, language learning is about imitating culture and therefore you superficially change a bit. It's normal that different parts of your personality come through differently in different languages. Listen a lot - you cannot pronounce what you cannot hear, and after a while your brain will get used to the new sounds of a new language.",
          "content_length": 821,
          "content_tokens": 168,
          "embedding": []
        },
        {
          "blog_title": "How to learn another language",
          "blog_url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
          "blog_date": "February 04, 2023",
          "content": "Phrases imply the intonation Massive amounts of repetitive reading and listening Listen and speak a lot 1 hour/day Write down useful vocab when you come across it Review your notes Type don't write natural conversational not news, not audiobooks Go for a walk everyday and listen and quietly repeat what you hear Translate common phrases that stand out to you. Talk to real people Don't use English at all It's normal that this would be uncomfortable and exhausting Accents are OK, don't worry about it. Start using a tutor when you want to start using a tutor. You should be comfortable and want to do it, not apprehensive or embarrassed. Use a tutor after learning 3000 - 5000 words, the exact amount varies depending on the language. Find the right instructor (for you) Get many partners, tutors or language parents. Input+1 (I+1): Input is what you know, the +1 is something a bit extra, beyond your level.",
          "content_length": 910,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "How to learn another language",
          "blog_url": "https://www.johnmathews.is/blog/how-to-learn-a-language",
          "blog_date": "February 04, 2023",
          "content": "Ask for some i+1. Apps are better than nothing, but they're not as good as storytelling with a human Record your lessons and listen back to them. Repetition is great. Storytelling is a great language acquisition method. Avoid reading and writing, just tell stories and describe pictures Use magazines and children's books with pictures of things that are relevant to you Ask the expert to lovingly describe the pictures and ask you simple yes or no questions about the picture. Then ask the expert simple questions like \"what is this?\" \"what is he doing?\" \"why..?\" Why questions are really good. Act it out, (whilst sitting if you want, with hand motions etc) - Total Physical Response (TPR) is effective at making language more memorable. If you get stuck, you can draw. If you get really stuck, just say \"Het is niet belangrijk\" and then move on. Ask your tutor to never speak about grammar, it doesn't help. Don't bother with corrections, they don't work. No English.",
          "content_length": 969,
          "content_tokens": 217,
          "embedding": []
        }
      ]
    },
    {
      "title": "My Neovim setup in 2023",
      "url": "https://www.johnmathews.is/blog/neovim-setup-2023",
      "date": "February 03, 2023",
      "content": "Contents: > Background > Why personalization matters > My setup > Favourite plugins > Things I would miss > Still to do Vim Neovim 1 I like seeing what new plugins are created and the new utility they bring. Neovim has some buzz around it at the moment, and its fun to be around people who enjoy improving a tool-chain I use everyday. I use Neovim within Tmux. I have multiple sessions running - one session for each project or thing I'm working on. Speed is never a problem, and I never need to close anything. I can have ten or twenty instances of Neovim open, and its still instantaneous to open others or run language servers or other expensive operations. It's also convenient being able to run a code-editor right next to the shell that is running the code. You can also run shells from within Neovim (or vim) to execute tests or build code. In the past I've tried to use (Neo)vim distributions such as LunarVim, and have always found them too restrictive. I like my setup and I don't want to learn a new way of doing a thing if I can help it. Ideally editing, navigating and exploring code would be intuitive and the only thing to think about would be the code itself, not the tooling that lets me access it. I think that my Neovim setup is good at this, and will continue to get better as time passes. To me, programming is a craft motivated by the satisfaction and fun found in being creative. My editor setup is like a workshop where I practice my craft. Its personal, and an environment that I'm familiar with. This is different to, for example, a simple tool like a hammer that serves a single purpose and should be interchangeable with other hammers if the need arises. I might have a favourite hammer, but a generic hammer will do. here previous vim setup By the end of 2022, I had a setup I was comfortable and familiar with. I'd smoothed out a few rough edges and there were no black boxes, magical things, or unknowable parts. The 'complicated' or 'magical' features have now been tamed: nvim-cmp GitHub copilot mason null-ls toggle-lsp-diagnostics LSP-Saga I've been using GitHub copilot, which is usually helpful and occasionally jaw-dropping. Overall the change from Vim to Neovim is a big improvement - I can't imagine going back. The setup seems more flexible, performant, feature rich and easier to maintain. The tooling seems faster and more capable. Innovation and new features seem to be being added regularly and quickly. Learning Lua feels useful and pleasant, compared to Vimscript which seemed like something to avoid as much as possible. I still have a hacky workaround for my occasional flaky colorscheme problems LSP-Saga lsp-finder lsp-outline toggle-lsp-diagnostics mason null-ls auto-session mason LSP-Saga null-ls auto-pairs matchtag-always nvim-tree nerd-tree whichkey close-buffer smartq The following features are quirky and I don't find them intuitive, but getting familiar with them would be increase speed and decrease cognitive load: Don't yank what I just pasted over. Use the yank registers (numbers 0 - 9 I think) to paste the thing I yanked before the last yank t f s hjkl Make better use of find and replace. If I have to do the same thing 5 or 10 times, I'll probably just do it manually. If I need to do it 100 times I'll write a macro. Ideally, I'll use find and replace, and make better use of registers. ↩",
      "length": 3359,
      "tokens": 781,
      "chunks": [
        {
          "blog_title": "My Neovim setup in 2023",
          "blog_url": "https://www.johnmathews.is/blog/neovim-setup-2023",
          "blog_date": "February 03, 2023",
          "content": "Contents: > Background > Why personalization matters > My setup > Favourite plugins > Things I would miss > Still to do Vim Neovim 1 I like seeing what new plugins are created and the new utility they bring. Neovim has some buzz around it at the moment, and its fun to be around people who enjoy improving a tool-chain I use everyday. I use Neovim within Tmux. I have multiple sessions running - one session for each project or thing I'm working on. Speed is never a problem, and I never need to close anything. I can have ten or twenty instances of Neovim open, and its still instantaneous to open others or run language servers or other expensive operations. It's also convenient being able to run a code-editor right next to the shell that is running the code. You can also run shells from within Neovim (or vim) to execute tests or build code.",
          "content_length": 847,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "My Neovim setup in 2023",
          "blog_url": "https://www.johnmathews.is/blog/neovim-setup-2023",
          "blog_date": "February 03, 2023",
          "content": "In the past I've tried to use (Neo)vim distributions such as LunarVim, and have always found them too restrictive. I like my setup and I don't want to learn a new way of doing a thing if I can help it. Ideally editing, navigating and exploring code would be intuitive and the only thing to think about would be the code itself, not the tooling that lets me access it. I think that my Neovim setup is good at this, and will continue to get better as time passes. To me, programming is a craft motivated by the satisfaction and fun found in being creative. My editor setup is like a workshop where I practice my craft. Its personal, and an environment that I'm familiar with. This is different to, for example, a simple tool like a hammer that serves a single purpose and should be interchangeable with other hammers if the need arises. I might have a favourite hammer, but a generic hammer will do.",
          "content_length": 897,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "My Neovim setup in 2023",
          "blog_url": "https://www.johnmathews.is/blog/neovim-setup-2023",
          "blog_date": "February 03, 2023",
          "content": "here previous vim setup By the end of 2022, I had a setup I was comfortable and familiar with. I'd smoothed out a few rough edges and there were no black boxes, magical things, or unknowable parts. The 'complicated' or 'magical' features have now been tamed: nvim-cmp GitHub copilot mason null-ls toggle-lsp-diagnostics LSP-Saga I've been using GitHub copilot, which is usually helpful and occasionally jaw-dropping. Overall the change from Vim to Neovim is a big improvement - I can't imagine going back. The setup seems more flexible, performant, feature rich and easier to maintain. The tooling seems faster and more capable. Innovation and new features seem to be being added regularly and quickly. Learning Lua feels useful and pleasant, compared to Vimscript which seemed like something to avoid as much as possible.",
          "content_length": 822,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "My Neovim setup in 2023",
          "blog_url": "https://www.johnmathews.is/blog/neovim-setup-2023",
          "blog_date": "February 03, 2023",
          "content": "I still have a hacky workaround for my occasional flaky colorscheme problems LSP-Saga lsp-finder lsp-outline toggle-lsp-diagnostics mason null-ls auto-session mason LSP-Saga null-ls auto-pairs matchtag-always nvim-tree nerd-tree whichkey close-buffer smartq The following features are quirky and I don't find them intuitive, but getting familiar with them would be increase speed and decrease cognitive load: Don't yank what I just pasted over. Use the yank registers (numbers 0 - 9 I think) to paste the thing I yanked before the last yank t f s hjkl Make better use of find and replace. If I have to do the same thing 5 or 10 times, I'll probably just do it manually. If I need to do it 100 times I'll write a macro. Ideally, I'll use find and replace, and make better use of registers.",
          "content_length": 787,
          "content_tokens": 207,
          "embedding": []
        }
      ]
    },
    {
      "title": "ZSA Moonlander Review",
      "url": "https://www.johnmathews.is/blog/moonlander-keyboard-review",
      "date": "January 23, 2023",
      "content": "Contents: > What is it? > Hardware setup and customization > Firmware customization > The learning curve > Summary > The Platform > Conclusions ZSA Moonlander 8 months later I bought the \"Platform\" accessory - a stand that adds a lot of weight and allows each half to be tilted up to 57 degrees. The extra weight and anti-slip pads stop each half from sliding and make the keyboard feel stronger and heavier. I bought it partly as an experiment and partly as a toy. The review articles were glowing and I figured that I spend so much time with a keyboard that even a small improvement would create a big benefit over time. The Moonlander is very customizable - you can change the angle that each half is tilted at, and of course you can position each half to be whatever distance and rotation you find comfortable. The keyboard caps are a standard size so you can replace them if you want to, though I haven't done this. The standard caps feel great, and the idea is to use the keyboard without looking at it. Key switches can be added or removed manually, without needing solder. This is a big advantage because the switches are the main source of noise and tactile feedback. Being able to choose your own switches will make the keyboard fit in with your preferences more than almost any other feature, and being able to experiment easily is useful. I would have found it difficult to select the correct switches when ordering the keyboard without experimenting first. The Moonlander has all the RGB light options you can imagine, and I use none of them. It also has a mostly undocumented musical keyboard setting. You could play happy birthday to your colleagues if you wanted. Silent Tactile Switches and The software to program what each key does is also very customizable, and there are a lot of tools to help you practice too. This is an area that ZSA are really outstanding in my opinion. The keyboard supports multiple layers of keys, as well as macros, modifiers and combinations. I was surprised by the scope of the software and firmware tools that ZSA offer - it's clearly not an afterthought to the main product but a core part of their offering. The tools really help you setup and get the most out of the keyboard and for the most part they do it simply and intuitively, with good explanations. Even though there are plenty of online and offline tools to setup and program the moonlander, the changes themselves are to the firmware. You don't need any software to make the keyboard work. Plug the keyboard into any computer and it will work as expected. Getting used to a split keyboard is not easy or fast. The first few weeks are really tricky because it feels so unusual to have your hands far apart, and muscle-memory tends to work against you. I had never given much thought to the most ergonomic way of hitting a comma or question mark, and it took me a while to figure out an approach I was happy with. I also found the amount of customization to be almost overwhelming - you can design your layout almost anyway you want. I'd never used thumb clusters before and found it easiest to avoid all but the two nearest thumb-cluster keys until I was more comfortable with everything else. I found that I prefer to have each hand oriented towards the left side of each half, and that I want to keep my fingers close to the home-row as much as possible. This means that my hands are not symmetrical, and therefore the easiest keys to hit are not the same on both sides. layout history here Change things gradually. You can't go directly from using a laptop keyboard to your optimal split keyboard layout, You will have to have intermediate layouts that you tweak as you get used to things. Because: You don't know what the optimal layout is. The learning curve is too steep otherwise. Optimal depends on what keys you can comfortably hit, and that will change as your hands become more used to various movements that are unique to thumb clusters and split keyboards. y n \"The Platform\" is an accessory that lets you tilt (or tent) the Moonlander even further. It also makes each half a lot heavier and grips the desk far better. I think its still in beta - ZSA seem to be doing limited runs. Initially I dismissed it as expensive and unnecessary, but came to regret this and bought one from the second product run. It adds a lot of weight and rigidity to the Moonlander and really changes how the product feels. It raises the keyboard up about 10mm or so, increases the tilt of each half, and in my opinion makes the keyboard look better and feel better. Most importantly, the extra tilt is more comfortable and it's easier to type quickly and accurately. I've learnt a lot more about keyboard ergonomics than I bargained for. I know that being able to type silently is more important than any other switch characteristic. When choosing which keys to use for a particular action, some actions benefit from a big unusual movement (like switching application by reaching for a thumb cluster), whilst some actions feel best when making a small fast movement (like typing punctuation). Having bought new switches, and the Platform accessory, this has become a really expensive keyboard. If I use it continually for many years then I think its a great investment - I'll rack up thousands of hours with it. Its taken 8 months of more or less daily usage to feel like I'm more productive, faster, and accurate than with a normal keyboard. It was usable after a couple of months, but only now does it feel faster. Your time investment will likely be different based on how rapidly you iterate to your ideal layout. If you write a lot of code then you will need to consider punctuation carefully, if you mainly write prose then I think you could arrive at your ideal layout faster.",
      "length": 5786,
      "tokens": 1173,
      "chunks": [
        {
          "blog_title": "ZSA Moonlander Review",
          "blog_url": "https://www.johnmathews.is/blog/moonlander-keyboard-review",
          "blog_date": "January 23, 2023",
          "content": "Contents: > What is it? > Hardware setup and customization > Firmware customization > The learning curve > Summary > The Platform > Conclusions ZSA Moonlander 8 months later I bought the \"Platform\" accessory - a stand that adds a lot of weight and allows each half to be tilted up to 57 degrees. The extra weight and anti-slip pads stop each half from sliding and make the keyboard feel stronger and heavier. I bought it partly as an experiment and partly as a toy. The review articles were glowing and I figured that I spend so much time with a keyboard that even a small improvement would create a big benefit over time. The Moonlander is very customizable - you can change the angle that each half is tilted at, and of course you can position each half to be whatever distance and rotation you find comfortable. The keyboard caps are a standard size so you can replace them if you want to, though I haven't done this.",
          "content_length": 920,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "ZSA Moonlander Review",
          "blog_url": "https://www.johnmathews.is/blog/moonlander-keyboard-review",
          "blog_date": "January 23, 2023",
          "content": "The standard caps feel great, and the idea is to use the keyboard without looking at it. Key switches can be added or removed manually, without needing solder. This is a big advantage because the switches are the main source of noise and tactile feedback. Being able to choose your own switches will make the keyboard fit in with your preferences more than almost any other feature, and being able to experiment easily is useful. I would have found it difficult to select the correct switches when ordering the keyboard without experimenting first. The Moonlander has all the RGB light options you can imagine, and I use none of them. It also has a mostly undocumented musical keyboard setting. You could play happy birthday to your colleagues if you wanted. Silent Tactile Switches and The software to program what each key does is also very customizable, and there are a lot of tools to help you practice too. This is an area that ZSA are really outstanding in my opinion.",
          "content_length": 974,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "ZSA Moonlander Review",
          "blog_url": "https://www.johnmathews.is/blog/moonlander-keyboard-review",
          "blog_date": "January 23, 2023",
          "content": "The keyboard supports multiple layers of keys, as well as macros, modifiers and combinations. I was surprised by the scope of the software and firmware tools that ZSA offer - it's clearly not an afterthought to the main product but a core part of their offering. The tools really help you setup and get the most out of the keyboard and for the most part they do it simply and intuitively, with good explanations. Even though there are plenty of online and offline tools to setup and program the moonlander, the changes themselves are to the firmware. You don't need any software to make the keyboard work. Plug the keyboard into any computer and it will work as expected. Getting used to a split keyboard is not easy or fast. The first few weeks are really tricky because it feels so unusual to have your hands far apart, and muscle-memory tends to work against you.",
          "content_length": 866,
          "content_tokens": 176,
          "embedding": []
        },
        {
          "blog_title": "ZSA Moonlander Review",
          "blog_url": "https://www.johnmathews.is/blog/moonlander-keyboard-review",
          "blog_date": "January 23, 2023",
          "content": "I had never given much thought to the most ergonomic way of hitting a comma or question mark, and it took me a while to figure out an approach I was happy with. I also found the amount of customization to be almost overwhelming - you can design your layout almost anyway you want. I'd never used thumb clusters before and found it easiest to avoid all but the two nearest thumb-cluster keys until I was more comfortable with everything else. I found that I prefer to have each hand oriented towards the left side of each half, and that I want to keep my fingers close to the home-row as much as possible. This means that my hands are not symmetrical, and therefore the easiest keys to hit are not the same on both sides. layout history here Change things gradually. You can't go directly from using a laptop keyboard to your optimal split keyboard layout, You will have to have intermediate layouts that you tweak as you get used to things.",
          "content_length": 940,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "ZSA Moonlander Review",
          "blog_url": "https://www.johnmathews.is/blog/moonlander-keyboard-review",
          "blog_date": "January 23, 2023",
          "content": "Because: You don't know what the optimal layout is. The learning curve is too steep otherwise. Optimal depends on what keys you can comfortably hit, and that will change as your hands become more used to various movements that are unique to thumb clusters and split keyboards. y n \"The Platform\" is an accessory that lets you tilt (or tent) the Moonlander even further. It also makes each half a lot heavier and grips the desk far better. I think its still in beta - ZSA seem to be doing limited runs. Initially I dismissed it as expensive and unnecessary, but came to regret this and bought one from the second product run. It adds a lot of weight and rigidity to the Moonlander and really changes how the product feels. It raises the keyboard up about 10mm or so, increases the tilt of each half, and in my opinion makes the keyboard look better and feel better.",
          "content_length": 864,
          "content_tokens": 183,
          "embedding": []
        },
        {
          "blog_title": "ZSA Moonlander Review",
          "blog_url": "https://www.johnmathews.is/blog/moonlander-keyboard-review",
          "blog_date": "January 23, 2023",
          "content": "Most importantly, the extra tilt is more comfortable and it's easier to type quickly and accurately. I've learnt a lot more about keyboard ergonomics than I bargained for. I know that being able to type silently is more important than any other switch characteristic. When choosing which keys to use for a particular action, some actions benefit from a big unusual movement (like switching application by reaching for a thumb cluster), whilst some actions feel best when making a small fast movement (like typing punctuation) Having bought new switches, and the Platform accessory, this has become a really expensive keyboard. If I use it continually for many years then I think its a great investment - I'll rack up thousands of hours with it. Its taken 8 months of more or less daily usage to feel like I'm more productive, faster, and accurate than with a normal keyboard. It was usable after a couple of months, but only now does it feel faster. Your time investment will likely be different based on how rapidly you iterate to your ideal layout. If you write a lot of code then you will need to consider punctuation carefully, if you mainly write prose then I think you could arrive at your ideal layout faster.",
          "content_length": 1215,
          "content_tokens": 242,
          "embedding": []
        }
      ]
    },
    {
      "title": "The Impact of a Coin Toss on Major Life Decisions",
      "url": "https://www.johnmathews.is/blog/coin-toss-life-decisions",
      "date": "January 18, 2023",
      "content": "This paper Little is known about whether people make good choices when facing important decisions. This article reports on a large-scale randomized field experiment in which research subjects having difficulty making a decision flipped a coin to help determine their choice. For important decisions (e.g. quitting a job or ending a relationship), individuals who are told by the coin toss to make a change are more likely to make a change, more satisfied with their decisions, and happier six months later than those whose coin toss instructed maintaining the status quo. This finding suggests that people may be excessively cautious when facing life-changing choices, Source (PDF) link",
      "length": 686,
      "tokens": 124,
      "chunks": [
        {
          "blog_title": "The Impact of a Coin Toss on Major Life Decisions",
          "blog_url": "https://www.johnmathews.is/blog/coin-toss-life-decisions",
          "blog_date": "January 18, 2023",
          "content": "This paper Little is known about whether people make good choices when facing important decisions. This article reports on a large-scale randomized field experiment in which research subjects having difficulty making a decision flipped a coin to help determine their choice. For important decisions (e.g. quitting a job or ending a relationship), individuals who are told by the coin toss to make a change are more likely to make a change, more satisfied with their decisions, and happier six months later than those whose coin toss instructed maintaining the status quo. This finding suggests that people may be excessively cautious when facing life-changing choices, Source (PDF) link",
          "content_length": 686,
          "content_tokens": 124,
          "embedding": []
        }
      ]
    },
    {
      "title": "Neovim plugins I could make",
      "url": "https://www.johnmathews.is/blog/nvim-plugins-to-make",
      "date": "January 15, 2023",
      "content": "I usually cannot think of anything useful to make, but suddenly: rotters-crocodile A telescope picker to find and select available snippets",
      "length": 139,
      "tokens": 30,
      "chunks": [
        {
          "blog_title": "Neovim plugins I could make",
          "blog_url": "https://www.johnmathews.is/blog/nvim-plugins-to-make",
          "blog_date": "January 15, 2023",
          "content": "I usually cannot think of anything useful to make, but suddenly: rotters-crocodile A telescope picker to find and select available snippets",
          "content_length": 139,
          "content_tokens": 30,
          "embedding": []
        }
      ]
    },
    {
      "title": "Insanity workouts",
      "url": "https://www.johnmathews.is/blog/insanity",
      "date": "January 09, 2023",
      "content": "The Insanity workout program is bodyweight based interval training. I enjoy it because it requires no equipment and you progress quickly. 01 - Fit Test 02 - Plyometric Cardio Circuit 03 - Cardio Power and Resistance 04 - Cardio Recovery 05 - Pure Cardio 06 - Cardio Abs 07 - Core Cardio and Balance Trailer Calendar Nutrition Guide",
      "length": 331,
      "tokens": 69,
      "chunks": [
        {
          "blog_title": "Insanity workouts",
          "blog_url": "https://www.johnmathews.is/blog/insanity",
          "blog_date": "January 09, 2023",
          "content": "The Insanity workout program is bodyweight based interval training. I enjoy it because it requires no equipment and you progress quickly. 01 - Fit Test 02 - Plyometric Cardio Circuit 03 - Cardio Power and Resistance 04 - Cardio Recovery 05 - Pure Cardio 06 - Cardio Abs 07 - Core Cardio and Balance Trailer Calendar Nutrition Guide",
          "content_length": 331,
          "content_tokens": 69,
          "embedding": []
        }
      ]
    },
    {
      "title": "P90x",
      "url": "https://www.johnmathews.is/blog/p90x",
      "date": "January 09, 2023",
      "content": "How to bring it Chest & Back Plyometrics Shoulders and Arms Yoga Legs and Back Kenpo X X Stretch Core Synergistics Chest and Shoulders and Triceps Back and Biceps Cardio X Ab Ripper X Interval X Plus Kenpo Cardio Plus Upper Plus Total Body Plus Abs-Core Plus Read First Fit Test Fitness Guide (short) Fitness Guide (long) Nutrition Guide (large) Nutrition Guide (small) Calendar Calendar (Alternate) Worksheets P90X+ Worksheets P90X+ Calendar P90X+ Calendar (Alternate) Blank P90X Worksheets Blank P90X+ Worksheets",
      "length": 514,
      "tokens": 132,
      "chunks": [
        {
          "blog_title": "P90x",
          "blog_url": "https://www.johnmathews.is/blog/p90x",
          "blog_date": "January 09, 2023",
          "content": "How to bring it Chest & Back Plyometrics Shoulders and Arms Yoga Legs and Back Kenpo X X Stretch Core Synergistics Chest and Shoulders and Triceps Back and Biceps Cardio X Ab Ripper X Interval X Plus Kenpo Cardio Plus Upper Plus Total Body Plus Abs-Core Plus Read First Fit Test Fitness Guide (short) Fitness Guide (long) Nutrition Guide (large) Nutrition Guide (small) Calendar Calendar (Alternate) Worksheets P90X+ Worksheets P90X+ Calendar P90X+ Calendar (Alternate) Blank P90X Worksheets Blank P90X+ Worksheets",
          "content_length": 514,
          "content_tokens": 132,
          "embedding": []
        }
      ]
    },
    {
      "title": "Long Life",
      "url": "https://www.johnmathews.is/blog/long-life",
      "date": "January 06, 2023",
      "content": "Findings from a research paper on blue zones: Nine things healthy communities all have in common: Purpose, Movement, Low Stress, Eat lightly, Plants not meat, Wine, Church, Family, Friends article 1 2 3 The nine factors that each of the five geographic communities had in common are: Move naturally Purpose De-Stress 80% Rule More Plants, Less Meat Wine, daily Church Family first Friends Located off the coast of Italy, Sardinia is home to the world’s longest-lived men. This community of shepherds walk 5 mountainous miles a day or more. This natural movement provides all the positive cardiovascular benefits you might expect and also has a positive effect on muscle and bone metabolism without the point pounding of running marathons. The classic Sardinian diet is plant based, consisting of whole-grain bread, beans, garden vegetables, and fruits. Meat is largely reserved for Sundays and special occasions. Sardinians drink wine moderately. Cannonau wine has 2 or 3 times the level of artery-scrubbing flavonoids as other wines. Moderate wine consumption may help explain the lower levels of stress among men. People on this tiny Aegean island live 8 years longer than Americans do. They experience 20% less cancer, half the rate of heart disease, and almost no dementia. Ikarians eat a variation of the Mediterranean diet, with lots of fruits and vegetables, whole grains, beans, potatoes, and olive oil. Ikarians also downshift with a mid-afternoon break. People who nap regularly have up to 35% lower chances of dying from heart disease. It may be because napping lowers stress hormones or rests the heart. One Ikarian in particular, Stamatis Moraitis, moved to America when he was 22 years old to pursue the American dream. He was a painter, and immediately started having success, bought a house, married, and had 3 kids. At the age of 66 years, he developed terminal lung cancer. Instead of dying in America, he decided to move back to Ikaria and moved in with his parents. He started breathing the air, drinking the wine, and eating a Mediterranean diet. After a few months, he planted a garden not planning on ever getting to harvest the vegetables; 37 years later he has a vineyard producing 200 litres of wine a year. His secret he says? “I just forgot to die.” ↩ ↩ ↩",
      "length": 2283,
      "tokens": 491,
      "chunks": [
        {
          "blog_title": "Long Life",
          "blog_url": "https://www.johnmathews.is/blog/long-life",
          "blog_date": "January 06, 2023",
          "content": "Findings from a research paper on blue zones: Nine things healthy communities all have in common: Purpose, Movement, Low Stress, Eat lightly, Plants not meat, Wine, Church, Family, Friends article 1 2 3 The nine factors that each of the five geographic communities had in common are: Move naturally Purpose De-Stress 80% Rule More Plants, Less Meat Wine, daily Church Family first Friends Located off the coast of Italy, Sardinia is home to the world’s longest-lived men. This community of shepherds walk 5 mountainous miles a day or more. This natural movement provides all the positive cardiovascular benefits you might expect and also has a positive effect on muscle and bone metabolism without the point pounding of running marathons. The classic Sardinian diet is plant based, consisting of whole-grain bread, beans, garden vegetables, and fruits. Meat is largely reserved for Sundays and special occasions. Sardinians drink wine moderately.",
          "content_length": 946,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Long Life",
          "blog_url": "https://www.johnmathews.is/blog/long-life",
          "blog_date": "January 06, 2023",
          "content": "Cannonau wine has 2 or 3 times the level of artery-scrubbing flavonoids as other wines. Moderate wine consumption may help explain the lower levels of stress among men. People on this tiny Aegean island live 8 years longer than Americans do. They experience 20% less cancer, half the rate of heart disease, and almost no dementia. Ikarians eat a variation of the Mediterranean diet, with lots of fruits and vegetables, whole grains, beans, potatoes, and olive oil. Ikarians also downshift with a mid-afternoon break. People who nap regularly have up to 35% lower chances of dying from heart disease. It may be because napping lowers stress hormones or rests the heart. One Ikarian in particular, Stamatis Moraitis, moved to America when he was 22 years old to pursue the American dream. He was a painter, and immediately started having success, bought a house, married, and had 3 kids.",
          "content_length": 885,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Long Life",
          "blog_url": "https://www.johnmathews.is/blog/long-life",
          "blog_date": "January 06, 2023",
          "content": "At the age of 66 years, he developed terminal lung cancer. Instead of dying in America, he decided to move back to Ikaria and moved in with his parents. He started breathing the air, drinking the wine, and eating a Mediterranean diet. After a few months, he planted a garden not planning on ever getting to harvest the vegetables; 37 years later he has a vineyard producing 200 litres of wine a year. His secret he says? “I just forgot to die.” ↩ ↩ ↩",
          "content_length": 450,
          "content_tokens": 106,
          "embedding": []
        }
      ]
    },
    {
      "title": "A new blog",
      "url": "https://www.johnmathews.is/blog/a-new-blog",
      "date": "December 18, 2022",
      "content": "Until now this blog has been rendered using Pelican, a Static Site Generator written in Python that uses Jinja templates. It's accessible and has all the functionality I needed, but as the amount of blog content has grown it has become slow and cumbersome. Waiting for edits to a blog post had become slow enough to discourage me from making changes or creating content quickly. This would change the way I used the site, and it would only get worse as the amount of content increased. this list Hugo But then I got to thinking how JavaScript is everywhere, and anything that I spend time learning needs to have multiple benefits. Hugo would teach me some Go, but that hasn't been necessary yet. JavaScript on the other hand is everywhere, and I seem to increasingly be having to work hard to avoid learning it. React seems to have become a de-facto framework. firebase video Vue Nuxt old blog state management, dark theme, keyboard shortcuts, search, custom web analytics, the snippets page, the collections, embedding YouTube videos, or other content using MDMX None of these features are novel or groundbreaking, it just requires a level of proficiency that isn't trivial, and that I didn't have. Converting all the blog posts took a long time because the frontmatter had to be converted to yaml, and timestamps, tags and categories had to be formatted correctly. I also needed to change how iframes (mostly youtube videos) were embedded in blog posts. Converting Jupyter Notebooks to blog posts was another mini project. State management across components, not just passing state to children, took a while to figure out. Grokking react is not trivial. I now have something that will hopefully remain performant and fun-to-use for a long time. React doesn't seem like its going anywhere soon. Maybe (just maybe) this will be the last front-end web framework I decide to learn. Ha.",
      "length": 1883,
      "tokens": 395,
      "chunks": [
        {
          "blog_title": "A new blog",
          "blog_url": "https://www.johnmathews.is/blog/a-new-blog",
          "blog_date": "December 18, 2022",
          "content": "Until now this blog has been rendered using Pelican, a Static Site Generator written in Python that uses Jinja templates. It's accessible and has all the functionality I needed, but as the amount of blog content has grown it has become slow and cumbersome. Waiting for edits to a blog post had become slow enough to discourage me from making changes or creating content quickly. This would change the way I used the site, and it would only get worse as the amount of content increased. this list Hugo But then I got to thinking how JavaScript is everywhere, and anything that I spend time learning needs to have multiple benefits. Hugo would teach me some Go, but that hasn't been necessary yet. JavaScript on the other hand is everywhere, and I seem to increasingly be having to work hard to avoid learning it. React seems to have become a de-facto framework.",
          "content_length": 860,
          "content_tokens": 173,
          "embedding": []
        },
        {
          "blog_title": "A new blog",
          "blog_url": "https://www.johnmathews.is/blog/a-new-blog",
          "blog_date": "December 18, 2022",
          "content": "firebase video Vue Nuxt old blog state management, dark theme, keyboard shortcuts, search, custom web analytics, the snippets page, the collections, embedding YouTube videos, or other content using MDMX None of these features are novel or groundbreaking, it just requires a level of proficiency that isn't trivial, and that I didn't have. Converting all the blog posts took a long time because the frontmatter had to be converted to yaml, and timestamps, tags and categories had to be formatted correctly. I also needed to change how iframes (mostly youtube videos) were embedded in blog posts. Converting Jupyter Notebooks to blog posts was another mini project. State management across components, not just passing state to children, took a while to figure out. Grokking react is not trivial. I now have something that will hopefully remain performant and fun-to-use for a long time. React doesn't seem like its going anywhere soon. Maybe (just maybe) this will be the last front-end web framework I decide to learn. Ha.",
          "content_length": 1021,
          "content_tokens": 223,
          "embedding": []
        }
      ]
    },
    {
      "title": "Data Science Teams",
      "url": "https://www.johnmathews.is/blog/data-science-teams",
      "date": "April 15, 2022",
      "content": "I was recently asked what I thought made for an effective data science team. Happily, I think my opinions on this topic are becoming more relevant, nuanced, and commercially valuable. Two specific criteria I've recently thought of are: A nuanced understanding of software architecture patterns - what they are, why they're relevant, what are strengths and weaknesses of popular solutions to common problems. The avoidance, or deliberate unlearning of programming practices that are learnt in academic (and to a lesser extent hobbyist) contexts.",
      "length": 544,
      "tokens": 101,
      "chunks": [
        {
          "blog_title": "Data Science Teams",
          "blog_url": "https://www.johnmathews.is/blog/data-science-teams",
          "blog_date": "April 15, 2022",
          "content": "I was recently asked what I thought made for an effective data science team. Happily, I think my opinions on this topic are becoming more relevant, nuanced, and commercially valuable. Two specific criteria I've recently thought of are: A nuanced understanding of software architecture patterns - what they are, why they're relevant, what are strengths and weaknesses of popular solutions to common problems. The avoidance, or deliberate unlearning of programming practices that are learnt in academic (and to a lesser extent hobbyist) contexts.",
          "content_length": 544,
          "content_tokens": 101,
          "embedding": []
        }
      ]
    },
    {
      "title": "Advanced googling",
      "url": "https://www.johnmathews.is/blog/how-to-google",
      "date": "April 05, 2022",
      "content": "related:<url> <url> cache:<url> site:<url> <search terms> filetype:<ft> <search terms> -<excluded-terms> after:<year> before:<year> 2019..2021 $10..$50 <term 1>|<term 2> (<term A>|<term B>)<term c> * site:*.tailwind.com <terms>",
      "length": 227,
      "tokens": 91,
      "chunks": [
        {
          "blog_title": "Advanced googling",
          "blog_url": "https://www.johnmathews.is/blog/how-to-google",
          "blog_date": "April 05, 2022",
          "content": "related:<url> <url> cache:<url> site:<url> <search terms> filetype:<ft> <search terms> -<excluded-terms> after:<year> before:<year> 2019..2021 $10..$50 <term 1>|<term 2> (<term A>|<term B>)<term c> * site:*.tailwind.com <terms>",
          "content_length": 227,
          "content_tokens": 91,
          "embedding": []
        }
      ]
    },
    {
      "title": "Someone else's guiding principles after 20 years of programming",
      "url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
      "date": "March 22, 2022",
      "content": "medium I've copied it here because an article on Medium could disappear at any moment, and its too good to lose: I’ve been programming since 1999 and this year I’ve officially coded for 20+ years. I started with Basic but soon jumped into Pascal and C and then learned object oriented programming (OOP) with Delphi and C++. In 2006 I started with Java and in 2011 I started with JavaScript. I’ve worked with a wide range of businesses from robotics, fin tech, med tech to media and telecom. Sometimes I had a different hat as a researcher, CTO, TPM (technical product manager), teacher, system architect or TL (technical leader) but I’ve always been coding. I’ve worked on some products that served millions of people, and some that failed before being released. I worked as a consultant and I even had my own startup. I have spent lots of time on open source projects, closed source projects and internally open source projects (proprietary code that is developed by a community inside the company). I’ve worked with tiny microcontrollers all the way to mobile and desktop apps to cloud servers and lately serverless. For my 20 years programming anniversary, I tried to list the top principles that have been accumulated over the years as my guiding principles through my career: Don’t fight the tools: libraries, language, platform, etc. Use as much native constructs as possible. Don’t bend the technology, but don’t bend the problem either. Pick the right tool for the job or you’ll have to find the right job for the tool you got. You don’t write the code for the machines, you write it for your colleagues and your future self (unless it’s a throw away project or you’re writing assembly). Write it for the junior ones as a reference. Any significant and rewarding piece of software is the result of collaboration. Communicate effectively and collaborate openly. Trust others and earn their trust. Respect people more than code. Lead by example. Convert your followers to leaders. Divide and conquer. Write isolated modules with separate concerns which are loosely coupled. Test each part separately and together. Keep the tests close to reality but test the edge cases too. Deprecate yourself. Don’t be the go-to person for the code. Optimize it for people to find their way fixing bugs and adding features to the code. Free yourself to move on to the next project/company. Don’t own the code or you’ll never grow beyond that. Security comes in layers: each layer needs to be assessed individually but also in relation to the whole. Risk is a business decision and has direct relation to vulnerability and probability. Each product/organization has a different risk appetite (the risk they are willing to take for a bigger win). Often these 3 concerns fight with each other: UX, Security, Performance. Realize that every code has a life cycle and will die. Sometimes it dies in its infancy before seeing the light of production. Be OK with letting go. Know the difference between 4 categories of features and where to put your time and energy: Core: like an engine in a car. The product is meaningless without it. Necessary: like a car’s spare wheel. It’s rarely used but when needed, its function decides the success of the system. Added value: like a car’s cup-holder. It’s nice to have but the product is perfectly usable without it. Unique Selling Point: the main reason people should buy your product instead of your rivals. For example, your car is the best off-road vehicle. Don’t attach your identity to your code. Don’t attach anyone’s identity to their code. Realize that people are separate from the artifacts they produce. Don’t take code criticism personally but be very careful when criticizing others’ code. Tech debt is like fast food. Occasionally it’s acceptable but if you get used to it, it’ll kill the product faster than you think (and in a painful way). When making decisions about the solution all things equal, go for this priority: Security > Reliability > Usability (Accessibility & UX) > Maintainability > Simplicity (Developer experience/DX) > Brevity (code length) > Finance > Performance But don’t follow that blindly because it is dependent on the nature of the product. Like any career, the more experience you earn, the more you can find the right balance for each given situation. For example, when designing a game engine, performance has the highest priority, but when creating a banking app, security is the most important factor. Bugs’ genitals are called copy & paste. That’s how they reproduce. Always read what you copy, always audit what you import. Bugs take shelter in complexity. “Magic” is fine in my dependency but not in my code. Don’t only write code for the happy scenario. Write good errors that answer why it happened, how it was detected and what can be done to resolve it. Validate all system input (including user input): fail early but recover from errors whenever possible. Assume the user holds a gun: put enough effort into your errors to convince them to shoot something other than your head! Don’t use dependencies unless the cost of importing, maintaining, dealing with their edge cases/bugs and refactoring when they don’t satisfy the needs is significantly less than the code that you own. Stay clear from hype-driven development. But learn all you can. Always have pet projects. Get out of your comfort zone. Learn every day. Teach what you learn. If you’re the master, you’re not learning. Expose yourself to other languages, technologies, culture and stay curious. Good code doesn’t need documentation, great code is well documented so that anyone who hasn’t been part of the evolution, trial & error process and requirements that led to the current status can be productive with it. An undocumented feature is a non-existing feature. A non-existing feature shouldn’t have code. Avoid overriding, inheritance and implicit smartness as much as possible. Write pure functions. They are easier to test and reason about. Any function that’s not pure should be a class. Any code construct that has a different function, should have a different name. Never start coding (making a solution) unless you fully understand the problem. It’s very normal to spend more time listening and reading than typing code. Understand the domain before starting to code. A problem is like a maze. You need to progressively go through the code-test-improve cycle and explore the problem space till you reach the end. Don’t solve a problem that doesn’t exist. Don’t do speculative programming. Only make the code extensible if it is a validated assumption that it’ll be extended. Chances are by the time it gets extended, the problem definition looks different from when you wrote the code. Don’t overengineer: focus on solving the problem at hand and an effective solution implemented in an efficient manner. Software is more fun when it’s made together. Build a sustainable community. Listen. Inspire. Learn. Share. I don’t claim to be an authority in software development. These are just the wisdom I earned along the way. I’m sure this list will be more mature after another 20 years.",
      "length": 7138,
      "tokens": 1569,
      "chunks": [
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "medium I've copied it here because an article on Medium could disappear at any moment, and its too good to lose: I’ve been programming since 1999 and this year I’ve officially coded for 20+ years. I started with Basic but soon jumped into Pascal and C and then learned object oriented programming (OOP) with Delphi and C++ In 2006 I started with Java and in 2011 I started with JavaScript. I’ve worked with a wide range of businesses from robotics, fin tech, med tech to media and telecom. Sometimes I had a different hat as a researcher, CTO, TPM (technical product manager), teacher, system architect or TL (technical leader) but I’ve always been coding. I’ve worked on some products that served millions of people, and some that failed before being released. I worked as a consultant and I even had my own startup.",
          "content_length": 817,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "I have spent lots of time on open source projects, closed source projects and internally open source projects (proprietary code that is developed by a community inside the company) I’ve worked with tiny microcontrollers all the way to mobile and desktop apps to cloud servers and lately serverless. For my 20 years programming anniversary, I tried to list the top principles that have been accumulated over the years as my guiding principles through my career: Don’t fight the tools: libraries, language, platform, etc. Use as much native constructs as possible. Don’t bend the technology, but don’t bend the problem either. Pick the right tool for the job or you’ll have to find the right job for the tool you got. You don’t write the code for the machines, you write it for your colleagues and your future self (unless it’s a throw away project or you’re writing assembly)",
          "content_length": 874,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "Write it for the junior ones as a reference. Any significant and rewarding piece of software is the result of collaboration. Communicate effectively and collaborate openly. Trust others and earn their trust. Respect people more than code. Lead by example. Convert your followers to leaders. Divide and conquer. Write isolated modules with separate concerns which are loosely coupled. Test each part separately and together. Keep the tests close to reality but test the edge cases too. Deprecate yourself. Don’t be the go-to person for the code. Optimize it for people to find their way fixing bugs and adding features to the code. Free yourself to move on to the next project/company. Don’t own the code or you’ll never grow beyond that. Security comes in layers: each layer needs to be assessed individually but also in relation to the whole. Risk is a business decision and has direct relation to vulnerability and probability.",
          "content_length": 929,
          "content_tokens": 188,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "Each product/organization has a different risk appetite (the risk they are willing to take for a bigger win) Often these 3 concerns fight with each other: UX, Security, Performance. Realize that every code has a life cycle and will die. Sometimes it dies in its infancy before seeing the light of production. Be OK with letting go. Know the difference between 4 categories of features and where to put your time and energy: Core: like an engine in a car. The product is meaningless without it. Necessary: like a car’s spare wheel. It’s rarely used but when needed, its function decides the success of the system. Added value: like a car’s cup-holder. It’s nice to have but the product is perfectly usable without it. Unique Selling Point: the main reason people should buy your product instead of your rivals. For example, your car is the best off-road vehicle.",
          "content_length": 861,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "Don’t attach your identity to your code. Don’t attach anyone’s identity to their code. Realize that people are separate from the artifacts they produce. Don’t take code criticism personally but be very careful when criticizing others’ code. Tech debt is like fast food. Occasionally it’s acceptable but if you get used to it, it’ll kill the product faster than you think (and in a painful way) When making decisions about the solution all things equal, go for this priority: Security > Reliability > Usability (Accessibility & UX) > Maintainability > Simplicity (Developer experience/DX) > Brevity (code length) > Finance > Performance But don’t follow that blindly because it is dependent on the nature of the product. Like any career, the more experience you earn, the more you can find the right balance for each given situation.",
          "content_length": 832,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "For example, when designing a game engine, performance has the highest priority, but when creating a banking app, security is the most important factor. Bugs’ genitals are called copy & paste. That’s how they reproduce. Always read what you copy, always audit what you import. Bugs take shelter in complexity. “Magic” is fine in my dependency but not in my code. Don’t only write code for the happy scenario. Write good errors that answer why it happened, how it was detected and what can be done to resolve it. Validate all system input (including user input): fail early but recover from errors whenever possible.",
          "content_length": 615,
          "content_tokens": 134,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "Assume the user holds a gun: put enough effort into your errors to convince them to shoot something other than your head! Don’t use dependencies unless the cost of importing, maintaining, dealing with their edge cases/bugs and refactoring when they don’t satisfy the needs is significantly less than the code that you own. Stay clear from hype-driven development. But learn all you can. Always have pet projects. Get out of your comfort zone. Learn every day. Teach what you learn. If you’re the master, you’re not learning. Expose yourself to other languages, technologies, culture and stay curious. Good code doesn’t need documentation, great code is well documented so that anyone who hasn’t been part of the evolution, trial & error process and requirements that led to the current status can be productive with it. An undocumented feature is a non-existing feature.",
          "content_length": 870,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "A non-existing feature shouldn’t have code. Avoid overriding, inheritance and implicit smartness as much as possible. Write pure functions. They are easier to test and reason about. Any function that’s not pure should be a class. Any code construct that has a different function, should have a different name. Never start coding (making a solution) unless you fully understand the problem. It’s very normal to spend more time listening and reading than typing code. Understand the domain before starting to code. A problem is like a maze. You need to progressively go through the code-test-improve cycle and explore the problem space till you reach the end. Don’t solve a problem that doesn’t exist. Don’t do speculative programming. Only make the code extensible if it is a validated assumption that it’ll be extended.",
          "content_length": 819,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Someone else's guiding principles after 20 years of programming",
          "blog_url": "https://www.johnmathews.is/blog/someone-elses-guiding-principles-after-20-years-of-programming",
          "blog_date": "March 22, 2022",
          "content": "Chances are by the time it gets extended, the problem definition looks different from when you wrote the code. Don’t overengineer: focus on solving the problem at hand and an effective solution implemented in an efficient manner. Software is more fun when it’s made together. Build a sustainable community. Listen. Inspire. Learn. Share. I don’t claim to be an authority in software development. These are just the wisdom I earned along the way. I’m sure this list will be more mature after another 20 years.",
          "content_length": 508,
          "content_tokens": 115,
          "embedding": []
        }
      ]
    },
    {
      "title": "Django CBV method flowchart",
      "url": "https://www.johnmathews.is/blog/django-cbv-method-flowchart",
      "date": "February 16, 2022",
      "content": "documentation setup() dispatch() http_method_not_allowed() get_template_names() get_slug_field() get_queryset() get_object() get_context_object_name() get_context_data() get() render_to_response() SO Performs key view initialization prior to dispatch(). If overriding this method, you must call super(). The view part of the view – the method that accepts a request argument plus arguments, and returns an HTTP response. The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a GET will be delegated to get(), a POST to post(), and so on. By default, a HEAD request will be delegated to get(). If you need to handle HEAD requests in a different way than GET, you can override the head() method. See Supporting other HTTP methods for an example. Returns the single object that this view will display. If queryset is provided, that queryset will be used as the source of objects; otherwise, get_queryset() will be used. get_object() looks for a pk_url_kwarg argument in the arguments to the view; if this argument is found, this method performs a primary-key based lookup using that value. If this argument is not found, it looks for a slug_url_kwarg argument, and performs a slug lookup using the slug_field. Returns a self.response_class instance. If any keyword arguments are provided, they will be passed to the constructor of the response class. Calls get_template_names() to obtain the list of template names that will be searched looking for an existent template. The response class to be returned by render_to_response method. Default is TemplateResponse. The template and context of TemplateResponse instances can be altered later (e.g. in template response middleware). If you need custom template loading or custom context object instantiation, create a TemplateResponse subclass and assign it to response_class.",
      "length": 1888,
      "tokens": 417,
      "chunks": [
        {
          "blog_title": "Django CBV method flowchart",
          "blog_url": "https://www.johnmathews.is/blog/django-cbv-method-flowchart",
          "blog_date": "February 16, 2022",
          "content": "documentation setup() dispatch() http_method_not_allowed() get_template_names() get_slug_field() get_queryset() get_object() get_context_object_name() get_context_data() get() render_to_response() SO Performs key view initialization prior to dispatch() If overriding this method, you must call super() The view part of the view – the method that accepts a request argument plus arguments, and returns an HTTP response. The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a GET will be delegated to get(), a POST to post(), and so on. By default, a HEAD request will be delegated to get() If you need to handle HEAD requests in a different way than GET, you can override the head() method. See Supporting other HTTP methods for an example. Returns the single object that this view will display.",
          "content_length": 863,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "Django CBV method flowchart",
          "blog_url": "https://www.johnmathews.is/blog/django-cbv-method-flowchart",
          "blog_date": "February 16, 2022",
          "content": "If queryset is provided, that queryset will be used as the source of objects; otherwise, get_queryset() will be used. get_object() looks for a pk_url_kwarg argument in the arguments to the view; if this argument is found, this method performs a primary-key based lookup using that value. If this argument is not found, it looks for a slug_url_kwarg argument, and performs a slug lookup using the slug_field. Returns a self.response_class instance. If any keyword arguments are provided, they will be passed to the constructor of the response class. Calls get_template_names() to obtain the list of template names that will be searched looking for an existent template. The response class to be returned by render_to_response method. Default is TemplateResponse. The template and context of TemplateResponse instances can be altered later (e.g. in template response middleware) If you need custom template loading or custom context object instantiation, create a TemplateResponse subclass and assign it to response_class.",
          "content_length": 1019,
          "content_tokens": 224,
          "embedding": []
        }
      ]
    },
    {
      "title": "How to size bets",
      "url": "https://www.johnmathews.is/blog/how-to-size-bets",
      "date": "February 09, 2022",
      "content": "article \"I have a coin that lands heads 60% of the time and tails 40% of the time. You have $25 and can bet on either side of the coin — every time you’re right you double your bet, and every time you are wrong you lose it.\" Theres a widget on the page that lets you select an amount, what side to bet on, and a chart showing your balance after each coin toss. My first attempt at this game was probably my best. My intuition is that its always optimal to bet on heads because each coin toss is independent, and 60% is more than 40%. 0. 4 2 = 0.16 0.4^2 = 0.16 0. 4 2 = 0.16 If you toss the coin 50 times, there are 49 opportunities to lose twice consecutively. I don't know the math for this probability, so I'll go learn it, but intuitively I think that 50% of the pot is too high. I went with 33% and won (reaching $250) in about 50 throws. I'd like to know how to optimise this, so I'll read the article. Also: Insurance and the Kelly Criterion HN Comments",
      "length": 960,
      "tokens": 247,
      "chunks": [
        {
          "blog_title": "How to size bets",
          "blog_url": "https://www.johnmathews.is/blog/how-to-size-bets",
          "blog_date": "February 09, 2022",
          "content": "article \"I have a coin that lands heads 60% of the time and tails 40% of the time. You have $25 and can bet on either side of the coin — every time you’re right you double your bet, and every time you are wrong you lose it.\" Theres a widget on the page that lets you select an amount, what side to bet on, and a chart showing your balance after each coin toss. My first attempt at this game was probably my best. My intuition is that its always optimal to bet on heads because each coin toss is independent, and 60% is more than 40% 4 2 = 0.16 0.4^2 = 0.16 0. 4 2 = 0.16 If you toss the coin 50 times, there are 49 opportunities to lose twice consecutively. I don't know the math for this probability, so I'll go learn it, but intuitively I think that 50% of the pot is too high. I went with 33% and won (reaching $250) in about 50 throws. I'd like to know how to optimise this, so I'll read the article. Also: Insurance and the Kelly Criterion HN Comments.",
          "content_length": 956,
          "content_tokens": 246,
          "embedding": []
        }
      ]
    },
    {
      "title": "Managing environment variables with Direnv",
      "url": "https://www.johnmathews.is/blog/direnv",
      "date": "January 28, 2022",
      "content": "Direnv ~/.config/direnv .envrc .envrc .env bash It can also hook into pyenv to load and unload virtual environments. Direnv is fast enough to be unnoticeable on each prompt, because its compiled into a single static executable. It is language agnostic. ~/.config/direnv wiki .envrc pyversion = 3.10 pvenv = ${pyversion} ${pyversion} ${pvenv} ${pvenv} useful gist",
      "length": 362,
      "tokens": 103,
      "chunks": [
        {
          "blog_title": "Managing environment variables with Direnv",
          "blog_url": "https://www.johnmathews.is/blog/direnv",
          "blog_date": "January 28, 2022",
          "content": "Direnv ~/.config/direnv .envrc .envrc .env bash It can also hook into pyenv to load and unload virtual environments. Direnv is fast enough to be unnoticeable on each prompt, because its compiled into a single static executable. It is language agnostic. ~/.config/direnv wiki .envrc pyversion = 3.10 pvenv = ${pyversion} ${pyversion} ${pvenv} ${pvenv} useful gist",
          "content_length": 362,
          "content_tokens": 103,
          "embedding": []
        }
      ]
    },
    {
      "title": "Adding italic text to iTerm2",
      "url": "https://www.johnmathews.is/blog/adding-italic-text-to-iterm2",
      "date": "January 28, 2022",
      "content": "article this article ssh SSH Preferences > Profiles > Text > Italic text allowed 1. Create temporary file terminfo with following content: xterm-256color-italic|xterm with 256 colors and italic, sitm=\\E[3m, ritm=\\E[23m, use=xterm-256color, 2. Create a new entry in the TERMINFO database tic terminfo 3. Delete the temporary terminfo file Preferences > Profiles > Terminal > Report Terminal Type: > xterm-256color-italic Close and reopen iTerm2, then try: echo `tput sitm`italics`tput ritm` If the output is printed in italicised, then iTerm2 is now capable of printing italic text. xterm-256color-italic echo $TERM 1. Create temporary file terminfo with following content: tmux|tmux terminal multiplexer, ritm=\\E[23m, rmso=\\E[27m, sitm=\\E[3m, smso=\\E[7m, Ms@, use=xterm, use=screen, tmux-256color|tmux with 256 colors, use=xterm-256color, use=tmux, 2. Create new entry in the TERMINFO database: tic -x terminfo 3. Delete the temporary terminfo file. Set the following in ~/.tmux.conf: set -g default-terminal \"tmux-256color\" set -as terminal-overrides ',xterm*:sitm=\\E[3m' Close and reopen tmux, then try: echo `tput sitm`italics`tput ritm` If the output is printed in italicised, then tmux is now capable of printing italic text. Furthermore: echo $TERM should now output tmux-256color",
      "length": 1286,
      "tokens": 410,
      "chunks": [
        {
          "blog_title": "Adding italic text to iTerm2",
          "blog_url": "https://www.johnmathews.is/blog/adding-italic-text-to-iterm2",
          "blog_date": "January 28, 2022",
          "content": "article this article ssh SSH Preferences > Profiles > Text > Italic text allowed 1. Create temporary file terminfo with following content: xterm-256color-italic|xterm with 256 colors and italic, sitm=\\E[3m, ritm=\\E[23m, use=xterm-256color, 2. Create a new entry in the TERMINFO database tic terminfo 3. Delete the temporary terminfo file Preferences > Profiles > Terminal > Report Terminal Type: > xterm-256color-italic Close and reopen iTerm2, then try: echo `tput sitm`italics`tput ritm` If the output is printed in italicised, then iTerm2 is now capable of printing italic text. xterm-256color-italic echo $TERM 1.",
          "content_length": 617,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Adding italic text to iTerm2",
          "blog_url": "https://www.johnmathews.is/blog/adding-italic-text-to-iterm2",
          "blog_date": "January 28, 2022",
          "content": "Create temporary file terminfo with following content: tmux|tmux terminal multiplexer, ritm=\\E[23m, rmso=\\E[27m, sitm=\\E[3m, smso=\\E[7m, Ms@, use=xterm, use=screen, tmux-256color|tmux with 256 colors, use=xterm-256color, use=tmux, 2. Create new entry in the TERMINFO database: tic -x terminfo 3. Delete the temporary terminfo file.",
          "content_length": 331,
          "content_tokens": 122,
          "embedding": []
        },
        {
          "blog_title": "Adding italic text to iTerm2",
          "blog_url": "https://www.johnmathews.is/blog/adding-italic-text-to-iterm2",
          "blog_date": "January 28, 2022",
          "content": "Set the following in ~/.tmux.conf: set -g default-terminal \"tmux-256color\" set -as terminal-overrides ',xterm*:sitm=\\E[3m' Close and reopen tmux, then try: echo `tput sitm`italics`tput ritm` If the output is printed in italicised, then tmux is now capable of printing italic text. Furthermore: echo $TERM should now output tmux-256color.",
          "content_length": 337,
          "content_tokens": 110,
          "embedding": []
        }
      ]
    },
    {
      "title": "The Psychology of Computer Programming",
      "url": "https://www.johnmathews.is/blog/psychology-of-computer-programming",
      "date": "January 17, 2022",
      "content": "From The Psychology of Computer Programming, 1971, here are The Ten Commandments of Egoless Programming: Understand and accept that you will make mistakes. The point is to find them early, before they make it into production. Fortunately, except for the few of us developing rocket guidance software at JPL, mistakes are rarely fatal in our industry. We can, and should, learn, laugh, and move on. You are not your code. Remember that the entire point of a review is to find problems, and problems will be found. Don’t take it personally when one is uncovered. No matter how much “karate” you know, someone else will always know more. Such an individual can teach you some new moves if you ask. Seek and accept input from others, especially when you think it’s not needed. Don’t rewrite code without consultation. There’s a fine line between “fixing code” and “rewriting code.” Know the difference, and pursue stylistic changes within the framework of a code review, not as a lone enforcer. Treat people who know less than you with respect, deference, and patience. Non-technical people who deal with developers on a regular basis almost universally hold the opinion that we are prima donnas at best and crybabies at worst. Don’t reinforce this stereotype with anger and impatience. The only constant in the world is change. Be open to it and accept it with a smile. Look at each change to your requirements, platform, or tool as a new challenge, rather than some serious inconvenience to be fought. The only true authority stems from knowledge, not from position. Knowledge engenders authority, and authority engenders respect – so if you want respect in an egoless environment, cultivate knowledge. Fight for what you believe, but gracefully accept defeat. Understand that sometimes your ideas will be overruled. Even if you are right, don’t take revenge or say “I told you so.” Never make your dearly departed idea a martyr or rallying cry. Don’t be “the coder in the corner.” Don’t be the person in the dark office emerging only for soda. The coder in the corner is out of sight, out of touch, and out of control. This person has no voice in an open, collaborative environment. Get involved in conversations, and be a participant in your office community. Critique code instead of people – be kind to the coder, not to the code. As much as possible, make all of your comments positive and oriented to improving the code. Relate comments to local standards, program specs, increased performance, etc. source",
      "length": 2510,
      "tokens": 563,
      "chunks": [
        {
          "blog_title": "The Psychology of Computer Programming",
          "blog_url": "https://www.johnmathews.is/blog/psychology-of-computer-programming",
          "blog_date": "January 17, 2022",
          "content": "From The Psychology of Computer Programming, 1971, here are The Ten Commandments of Egoless Programming: Understand and accept that you will make mistakes. The point is to find them early, before they make it into production. Fortunately, except for the few of us developing rocket guidance software at JPL, mistakes are rarely fatal in our industry. We can, and should, learn, laugh, and move on. You are not your code. Remember that the entire point of a review is to find problems, and problems will be found. Don’t take it personally when one is uncovered. No matter how much “karate” you know, someone else will always know more. Such an individual can teach you some new moves if you ask. Seek and accept input from others, especially when you think it’s not needed. Don’t rewrite code without consultation.",
          "content_length": 813,
          "content_tokens": 180,
          "embedding": []
        },
        {
          "blog_title": "The Psychology of Computer Programming",
          "blog_url": "https://www.johnmathews.is/blog/psychology-of-computer-programming",
          "blog_date": "January 17, 2022",
          "content": "There’s a fine line between “fixing code” and “rewriting code.” Know the difference, and pursue stylistic changes within the framework of a code review, not as a lone enforcer. Treat people who know less than you with respect, deference, and patience. Non-technical people who deal with developers on a regular basis almost universally hold the opinion that we are prima donnas at best and crybabies at worst. Don’t reinforce this stereotype with anger and impatience. The only constant in the world is change. Be open to it and accept it with a smile. Look at each change to your requirements, platform, or tool as a new challenge, rather than some serious inconvenience to be fought. The only true authority stems from knowledge, not from position. Knowledge engenders authority, and authority engenders respect – so if you want respect in an egoless environment, cultivate knowledge.",
          "content_length": 886,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "The Psychology of Computer Programming",
          "blog_url": "https://www.johnmathews.is/blog/psychology-of-computer-programming",
          "blog_date": "January 17, 2022",
          "content": "Fight for what you believe, but gracefully accept defeat. Understand that sometimes your ideas will be overruled. Even if you are right, don’t take revenge or say “I told you so.” Never make your dearly departed idea a martyr or rallying cry. Don’t be “the coder in the corner.” Don’t be the person in the dark office emerging only for soda. The coder in the corner is out of sight, out of touch, and out of control. This person has no voice in an open, collaborative environment. Get involved in conversations, and be a participant in your office community. Critique code instead of people – be kind to the coder, not to the code. As much as possible, make all of your comments positive and oriented to improving the code. Relate comments to local standards, program specs, increased performance, etc. source.",
          "content_length": 810,
          "content_tokens": 189,
          "embedding": []
        }
      ]
    },
    {
      "title": "How to write a book",
      "url": "https://www.johnmathews.is/blog/how-to-write-a-book",
      "date": "December 24, 2021",
      "content": "I keep getting ideas for books, and I keep remembering these posts for making the process seem very accessible: Tynan - bookwriting Tynan - write",
      "length": 145,
      "tokens": 32,
      "chunks": [
        {
          "blog_title": "How to write a book",
          "blog_url": "https://www.johnmathews.is/blog/how-to-write-a-book",
          "blog_date": "December 24, 2021",
          "content": "I keep getting ideas for books, and I keep remembering these posts for making the process seem very accessible: Tynan - bookwriting Tynan - write",
          "content_length": 145,
          "content_tokens": 32,
          "embedding": []
        }
      ]
    },
    {
      "title": "103 attempts to make it work",
      "url": "https://www.johnmathews.is/blog/103-attempts-to-make-it-work",
      "date": "December 15, 2021",
      "content": "Towards the end of the fourth day, or maybe fifth, I finally figured out how to make the code do what I wanted it to do and run without errors. I found the blind-spot. There are some take-aways about naming conventions, and how to structure a code base. I also have some thoughts about pandas. I guess the general conclusion is that with more power comes more responsibility. Code can be written in many ways, but only a few of them will let developers work as efficiently as possible. Programming is an art and the only way to get good at writing complex code is to practice. Also, I'd like to find a code visualization tool that can show the flow of classes and methods as they are instantiated.",
      "length": 697,
      "tokens": 151,
      "chunks": [
        {
          "blog_title": "103 attempts to make it work",
          "blog_url": "https://www.johnmathews.is/blog/103-attempts-to-make-it-work",
          "blog_date": "December 15, 2021",
          "content": "Towards the end of the fourth day, or maybe fifth, I finally figured out how to make the code do what I wanted it to do and run without errors. I found the blind-spot. There are some take-aways about naming conventions, and how to structure a code base. I also have some thoughts about pandas. I guess the general conclusion is that with more power comes more responsibility. Code can be written in many ways, but only a few of them will let developers work as efficiently as possible. Programming is an art and the only way to get good at writing complex code is to practice. Also, I'd like to find a code visualization tool that can show the flow of classes and methods as they are instantiated.",
          "content_length": 697,
          "content_tokens": 151,
          "embedding": []
        }
      ]
    },
    {
      "title": "Gell-Mann amnesia effect",
      "url": "https://www.johnmathews.is/blog/gell-mann-amnesia-effect",
      "date": "December 14, 2021",
      "content": "The phenomenon of experts believing news articles on topics outside of their fields of expertise, even after acknowledging that articles written in the same publication that are within the experts' fields of expertise are error-ridden and full of misunderstanding: *** [The] Media carries with it a credibility that is totally undeserved. You have all experienced this, in what I call the Murray Gell-Mann Amnesia effect. (I refer to it by this name because I once discussed it with Murray Gell-Mann, and by dropping a famous name I imply greater importance to myself, and to the effect, than it would otherwise have.) Briefly stated, the Gell-Mann Amnesia effect is as follows. You open the newspaper to an article on some subject you know well. In Murray's case, physics. In mine, show business. You read the article and see the journalist has absolutely no understanding of either the facts or the issues. Often, the article is so wrong it actually presents the story backward—reversing cause and effect. I call these the \"wet streets cause rain\" stories. Paper's full of them. In any case, you read with exasperation or amusement the multiple errors in a story, and then turn the page to national or international affairs, and read as if the rest of the newspaper was somehow more accurate about Palestine than the baloney you just read. You turn the page, and forget what you know. That is the Gell-Mann Amnesia effect. I'd point out it does not operate in other arenas of life. In ordinary life, if somebody consistently exaggerates or lies to you, you soon discount everything they say. In court, there is the legal doctrine of falsus in uno, falsus in omnibus, which means untruthful in one part, untruthful in all. But when it comes to the media, we believe against evidence that it is probably worth our time to read other parts of the paper. When, in fact, it almost certainly isn't. The only possible explanation for our behavior is amnesia. wikipedia",
      "length": 1963,
      "tokens": 429,
      "chunks": [
        {
          "blog_title": "Gell-Mann amnesia effect",
          "blog_url": "https://www.johnmathews.is/blog/gell-mann-amnesia-effect",
          "blog_date": "December 14, 2021",
          "content": "The phenomenon of experts believing news articles on topics outside of their fields of expertise, even after acknowledging that articles written in the same publication that are within the experts' fields of expertise are error-ridden and full of misunderstanding: *** [The] Media carries with it a credibility that is totally undeserved. You have all experienced this, in what I call the Murray Gell-Mann Amnesia effect. (I refer to it by this name because I once discussed it with Murray Gell-Mann, and by dropping a famous name I imply greater importance to myself, and to the effect, than it would otherwise have.) Briefly stated, the Gell-Mann Amnesia effect is as follows. You open the newspaper to an article on some subject you know well. In Murray's case, physics. In mine, show business. You read the article and see the journalist has absolutely no understanding of either the facts or the issues.",
          "content_length": 908,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Gell-Mann amnesia effect",
          "blog_url": "https://www.johnmathews.is/blog/gell-mann-amnesia-effect",
          "blog_date": "December 14, 2021",
          "content": "Often, the article is so wrong it actually presents the story backward—reversing cause and effect. I call these the \"wet streets cause rain\" stories. Paper's full of them. In any case, you read with exasperation or amusement the multiple errors in a story, and then turn the page to national or international affairs, and read as if the rest of the newspaper was somehow more accurate about Palestine than the baloney you just read. You turn the page, and forget what you know. That is the Gell-Mann Amnesia effect. I'd point out it does not operate in other arenas of life. In ordinary life, if somebody consistently exaggerates or lies to you, you soon discount everything they say. In court, there is the legal doctrine of falsus in uno, falsus in omnibus, which means untruthful in one part, untruthful in all. But when it comes to the media, we believe against evidence that it is probably worth our time to read other parts of the paper. When, in fact, it almost certainly isn't. The only possible explanation for our behavior is amnesia. wikipedia.",
          "content_length": 1054,
          "content_tokens": 240,
          "embedding": []
        }
      ]
    },
    {
      "title": "Bat",
      "url": "https://www.johnmathews.is/blog/bat",
      "date": "December 03, 2021",
      "content": "Bat bat --list-languages bat --config-file bat --config-dir bat --list-themes bat --generate-config-file ~/.zshenv export BAT_CONFIG_PATH=\"$HOME/.bat.conf\" Specify the theme: --theme=\"Dracula\" Map file types to syntax: --map-syntax \".ignore:Git Ignore\" --map-syntax \".py:Python\" --map-syntax \".json:JSON\" --map-syntax \".zsh*:Bourne Again Shell (bash)\" --map-syntax \".js:JavaScript\"",
      "length": 381,
      "tokens": 129,
      "chunks": [
        {
          "blog_title": "Bat",
          "blog_url": "https://www.johnmathews.is/blog/bat",
          "blog_date": "December 03, 2021",
          "content": "Bat bat --list-languages bat --config-file bat --config-dir bat --list-themes bat --generate-config-file ~/.zshenv export BAT_CONFIG_PATH=\"$HOME/.bat.conf\" Specify the theme: --theme=\"Dracula\" Map file types to syntax: --map-syntax \".ignore:Git Ignore\" --map-syntax \".py:Python\" --map-syntax \".json:JSON\" --map-syntax \".zsh*:Bourne Again Shell (bash)\" --map-syntax \".js:JavaScript\"",
          "content_length": 381,
          "content_tokens": 129,
          "embedding": []
        }
      ]
    },
    {
      "title": "Chezmoi: Part 2",
      "url": "https://www.johnmathews.is/blog/chezmoi-2",
      "date": "December 02, 2021",
      "content": "Chezmoi previously 7 months later and I'm happy I chose Chezmoi. I'm managing dotfiles across 3 machines and 2 OS's currently. I have a basic workflow and it seems like a good time to see if there are further benefits to be found. This is a review of my workflow and some notes on how to use the tool more effectively. chezmoi cm Including files or subdirectories from other projects is really interesting and something I didn't realise was possible. It goes a long way to bridging the gap between simple dotfiles management and something more powerful like Ansible. templates cm init ~/.local/share/chezmoi source state cm edit-config .chezmoiexternal.toml oh-my-zsh The section heading (the part with square brackets) is the destination path of the object being imported. type refreshPeriod apply cm --refresh-externals apply cm -R apply Oh My Zsh DISABLE_AUTO_UPDATE=\"true\" ~/.zshrc ~/.oh-my-zsh refreshPeriod cm add &lt;file&gt; ~/.zshrc dot_zshrc cm add <dir> cm add &lt;file&gt; dot_ cm managed cm unmanaged cm add .chezmoiignore won't cm apply documentation cm apply cm apply --dry-run --verbose .chezmoiignore cm diff cm apply cm apply cm merge $FILE There are 4 ways of editing files: chezmoi edit $FILE cm edit cm edit --apply $FILE cm cd cm apply cm diff cm apply cm add $FILE cm re-add cm aa cm merge $FILE Oh My Zsh zsh-syntax-highlighting powerlevel10k ~/.local/share/chezmoi/.chezmoiexternal.toml [ \".oh-my-zsh\" ] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [ \".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\" ] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [ \".oh-my-zsh/custom/themes/powerlevel10k\" ] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 plug.vim github.com/junegunn/vim-plug ~/.vim/autoload/plug.vim ~/.local/share/chezmoi/.chezmoiexternals.toml [ \".vim/autoload/plug.vim\" ] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" documentation",
      "length": 2210,
      "tokens": 678,
      "chunks": [
        {
          "blog_title": "Chezmoi: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/chezmoi-2",
          "blog_date": "December 02, 2021",
          "content": "Chezmoi previously 7 months later and I'm happy I chose Chezmoi. I'm managing dotfiles across 3 machines and 2 OS's currently. I have a basic workflow and it seems like a good time to see if there are further benefits to be found. This is a review of my workflow and some notes on how to use the tool more effectively. chezmoi cm Including files or subdirectories from other projects is really interesting and something I didn't realise was possible. It goes a long way to bridging the gap between simple dotfiles management and something more powerful like Ansible. templates cm init ~/.local/share/chezmoi source state cm edit-config .chezmoiexternal.toml oh-my-zsh The section heading (the part with square brackets) is the destination path of the object being imported.",
          "content_length": 773,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "Chezmoi: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/chezmoi-2",
          "blog_date": "December 02, 2021",
          "content": "type refreshPeriod apply cm --refresh-externals apply cm -R apply Oh My Zsh DISABLE_AUTO_UPDATE=\"true\" ~/.zshrc ~/.oh-my-zsh refreshPeriod cm add &lt;file&gt; ~/.zshrc dot_zshrc cm add <dir> cm add &lt;file&gt; dot_ cm managed cm unmanaged cm add .chezmoiignore won't cm apply documentation cm apply cm apply --dry-run --verbose .chezmoiignore cm diff cm apply cm apply cm merge $FILE There are 4 ways of editing files: chezmoi edit $FILE cm edit cm edit --apply $FILE cm cd cm apply cm diff cm apply cm add $FILE cm re-add cm aa cm merge $FILE Oh My Zsh zsh-syntax-highlighting powerlevel10k ~/.local/share/chezmoi/.chezmoiexternal.toml [ \".oh-my-zsh\" ] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [ \".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\" ] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [ \".oh-my-zsh/custom/themes/powerlevel10k\" ] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 plug.vim github.com/junegunn/vim-plug ~/.vim/autoload/plug.vim ~/.local/share/chezmoi/.chezmoiexternals.toml [ \".vim/autoload/plug.vim\" ] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" documentation.",
          "content_length": 1437,
          "content_tokens": 501,
          "embedding": []
        }
      ]
    },
    {
      "title": "Powerful Python",
      "url": "https://www.johnmathews.is/blog/powerful-python",
      "date": "November 29, 2021",
      "content": "Aaron Maxwell's Powerful Python course looks great. It's outstanding because, as far as I can tell, it explains abstract ideas clearly and with practical examples. If becoming exceptionally good at Python ever makes it to the top of my list of professional priorities then I'd certainly take the course. For now though I'm going to make some notes on the marketing emails he send: Contents: > Good mental models: > Staying motivated > 95/5 rule > Hidden meaning of \"(\" > Current favourite python book > Secret Instinct def f ( ) : return + 2 f \"Most people think the will to survive is the strongest instinct in humans, but it isn't. The strongest instinct is to keep things familiar\" Most people think that motivation is about willpower, but its not. It's about creating \"wins\". When you invest your time and effort, you get that \"aha!\" moment where you see the computer do something new, or you get that feeling of a little breakthrough. It makes you excited to take another step and go a little further. And get another little win. OOP is not just a tool for organizing your code. It's a tool for organizing how you think about code. Here is a roadmap to break into the top 1% of python programmers: Create powerful abstractions that accelerate and amplify all the python you write. Write automated tests, which lets you break through the ceiling of complexity, so that you can suddenly write truly complex software as easily as you used to write simple software. Create robust high-performance scalability - writing software than gracefully handles increasing magnitudes of data without breaking a sweat. Learn how to use the higher-order abstractions that the most important and prominent python libraries are built on (pandas, flask, django, pytest, requests). class Prefixer : def __init__ ( , ) : . = def __call__ ( , ) : return . + Use it like: >>> simonsays = Prefixer(\"Simon says: \") >>> simonsays(\"Get up and dance!\") 'simon says: Get up and daance!' simonsays Prefixer call simonsays( Also: >>> def increment(x): ... return x+1 ... >>> increment.__call__(2) 3 ( .__call__( There are 4 levels of Python code: Syntax Idioms Patterns Architecture Check out \"Architecture Patterns with Python\" by Harry Percival and Bob Gregory. Something that the best programmers have in common: They really hate repetitive code.",
      "length": 2323,
      "tokens": 520,
      "chunks": [
        {
          "blog_title": "Powerful Python",
          "blog_url": "https://www.johnmathews.is/blog/powerful-python",
          "blog_date": "November 29, 2021",
          "content": "Aaron Maxwell's Powerful Python course looks great. It's outstanding because, as far as I can tell, it explains abstract ideas clearly and with practical examples. If becoming exceptionally good at Python ever makes it to the top of my list of professional priorities then I'd certainly take the course. For now though I'm going to make some notes on the marketing emails he send: Contents: > Good mental models: > Staying motivated > 95/5 rule > Hidden meaning of \"(\" > Current favourite python book > Secret Instinct def f ( ) : return + 2 f \"Most people think the will to survive is the strongest instinct in humans, but it isn't. The strongest instinct is to keep things familiar\" Most people think that motivation is about willpower, but its not. It's about creating \"wins\" When you invest your time and effort, you get that \"aha!\" moment where you see the computer do something new, or you get that feeling of a little breakthrough.",
          "content_length": 938,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Powerful Python",
          "blog_url": "https://www.johnmathews.is/blog/powerful-python",
          "blog_date": "November 29, 2021",
          "content": "It makes you excited to take another step and go a little further. And get another little win. OOP is not just a tool for organizing your code. It's a tool for organizing how you think about code. Here is a roadmap to break into the top 1% of python programmers: Create powerful abstractions that accelerate and amplify all the python you write. Write automated tests, which lets you break through the ceiling of complexity, so that you can suddenly write truly complex software as easily as you used to write simple software. Create robust high-performance scalability - writing software than gracefully handles increasing magnitudes of data without breaking a sweat. Learn how to use the higher-order abstractions that the most important and prominent python libraries are built on (pandas, flask, django, pytest, requests) class Prefixer : def __init__ ( , ) :  = def __call__ ( , ) : return",
          "content_length": 894,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Powerful Python",
          "blog_url": "https://www.johnmathews.is/blog/powerful-python",
          "blog_date": "November 29, 2021",
          "content": "+ Use it like: >>> simonsays = Prefixer(\"Simon says: \") >>> simonsays(\"Get up and dance!\") 'simon says: Get up and daance!' simonsays Prefixer call simonsays( Also: >>> def increment(x): .. return x+1 .. >>> increment.__call__(2) 3 ( .__call__( There are 4 levels of Python code: Syntax Idioms Patterns Architecture Check out \"Architecture Patterns with Python\" by Harry Percival and Bob Gregory. Something that the best programmers have in common: They really hate repetitive code.",
          "content_length": 482,
          "content_tokens": 131,
          "embedding": []
        }
      ]
    },
    {
      "title": "Unison helper",
      "url": "https://www.johnmathews.is/blog/unison-helper",
      "date": "November 23, 2021",
      "content": "Unison I wanted to sync projects between my local machine and a dev machine reliably and simply. Using git to push to an origin and then pull from the other side wasn't simple enough. Unison can power the synrconization, but I wanted some nice convenient way to run the syncronization steps for an entire project, even if I were in a subdirectory. I also wanted the location of the project on the other machine to be found automatically, so that I didn't need to think about paths and couldn't accidentally move files to the wrong location. With that in mind, I decided that: localProjectRoot=$(git rev-parse --show-toplevel) .remoteprojectroot remoteProjectRoot=$(cat $localProjectRoot/.remoteroot) uni uni ( ) { host = < > user = < > localProjectRoot = $( git ) remoteProjectRoot = $( cat ) echo \"Local Project Root: \" $localProjectRoot echo \"Remote Project Root: \" $remoteProjectRoot -batch -color true $localProjectRoot $host $user $remoteProjectRoot } TODO: remoteProjectRoot",
      "length": 980,
      "tokens": 236,
      "chunks": [
        {
          "blog_title": "Unison helper",
          "blog_url": "https://www.johnmathews.is/blog/unison-helper",
          "blog_date": "November 23, 2021",
          "content": "Unison I wanted to sync projects between my local machine and a dev machine reliably and simply. Using git to push to an origin and then pull from the other side wasn't simple enough. Unison can power the synrconization, but I wanted some nice convenient way to run the syncronization steps for an entire project, even if I were in a subdirectory. I also wanted the location of the project on the other machine to be found automatically, so that I didn't need to think about paths and couldn't accidentally move files to the wrong location.",
          "content_length": 540,
          "content_tokens": 114,
          "embedding": []
        },
        {
          "blog_title": "Unison helper",
          "blog_url": "https://www.johnmathews.is/blog/unison-helper",
          "blog_date": "November 23, 2021",
          "content": "With that in mind, I decided that: localProjectRoot=$(git rev-parse --show-toplevel) .remoteprojectroot remoteProjectRoot=$(cat $localProjectRoot/.remoteroot) uni uni ( ) { host = < > user = < > localProjectRoot = $( git ) remoteProjectRoot = $( cat ) echo \"Local Project Root: \" $localProjectRoot echo \"Remote Project Root: \" $remoteProjectRoot -batch -color true $localProjectRoot $host $user $remoteProjectRoot } TODO: remoteProjectRoot.",
          "content_length": 440,
          "content_tokens": 123,
          "embedding": []
        }
      ]
    },
    {
      "title": "Virtual environments and python versions",
      "url": "https://www.johnmathews.is/blog/virtual-environments-and-python-versions",
      "date": "November 01, 2021",
      "content": "Contents: > Recipe > Create and activate a new virtualenv > Background > Python versions > Installing new python versions > Set a particular python version > Other commands > Tests > Source > Code editor integration using activate_this.py pyenv versions pyenv install -l pyenv virtualenv <python version> <environment name> pyenv local <environment name> .python-version eval \"$(pyenv virtualenv-init -)\" .zshrc python -V python -m test eval \"$(pyenv virtualenv-init -)\" pyenv activate <environment name> pyenv deactivate pyenv virtualenv/venv pyenv-virtualenv virtualenv python -V which python pyenv install --list | grep \" 3\\.9\\.\" pyevn install <name> ~/.pyenv/versions/ rm -rf .. ~/.pyenv/versions/... pyenv uninstall <name> pyenv versions pyenv global <name> pyenv global system pyenv local <name> .python-version pyenv uninstall <version> pyenv rehash source python -m test Real Python article activate_this.py path sys.path sys.prefix activate_this.py virtualenv repo ~/.pyenv/versions/<version>/envs/<environment name>/bin/activate_this.py activate_this.py ## -*- coding: utf-8 -*- ## https://github.com/pypa/virtualenv/blob/main/src/virtualenv/activation/python/activate_this.py \"\"\"Activate virtualenv for current interpreter: Use exec(open(this_file).read(), {'__file__': this_file}). This can be used when you must use an existing Python interpreter, not the virtualenv bin/python. \"\"\" import import import try : = . . ( ) except : raise ( \"You must use exec(open(this_file).read(), {'__file__': this_file}))\" ) = . . ( ) = [ : - len ( \"__BIN_NAME__\" ) - 1 ] # strip away the bin part from the __file__, plus the path separator ## prepend bin to PATH (this file is inside the bin directory) . [ \"PATH\" ] = . . ( [ ] + . . ( \"PATH\" , \"\" ) . ( . ) ) . [ \"VIRTUAL_ENV\" ] = # virtual env is right above bin directory ## add the virtual environments libraries to the host python import mechanism = len ( . ) for in \"__LIB_FOLDERS__\" . ( . ) : = . . ( . . ( , ) ) . ( . ( \"utf-8\" ) if \"__DECODE_PATH__\" else ) . [ : ] = . [ : ] + . [ 0 : ] . = . . =",
      "length": 2053,
      "tokens": 600,
      "chunks": [
        {
          "blog_title": "Virtual environments and python versions",
          "blog_url": "https://www.johnmathews.is/blog/virtual-environments-and-python-versions",
          "blog_date": "November 01, 2021",
          "content": "Contents: > Recipe > Create and activate a new virtualenv > Background > Python versions > Installing new python versions > Set a particular python version > Other commands > Tests > Source > Code editor integration using activate_this.py pyenv versions pyenv install -l pyenv virtualenv <python version> <environment name> pyenv local <environment name> .python-version eval \"$(pyenv virtualenv-init -)\" .zshrc python -V python -m test eval \"$(pyenv virtualenv-init -)\" pyenv activate <environment name> pyenv deactivate pyenv virtualenv/venv pyenv-virtualenv virtualenv python -V which python pyenv install --list | grep \" 3\\.9\\.\" pyevn install <name> ~/.pyenv/versions/ rm -rf . ~/.pyenv/versions/..",
          "content_length": 702,
          "content_tokens": 177,
          "embedding": []
        },
        {
          "blog_title": "Virtual environments and python versions",
          "blog_url": "https://www.johnmathews.is/blog/virtual-environments-and-python-versions",
          "blog_date": "November 01, 2021",
          "content": "pyenv uninstall <name> pyenv versions pyenv global <name> pyenv global system pyenv local <name> .python-version pyenv uninstall <version> pyenv rehash source python -m test Real Python article activate_this.py path sys.path sys.prefix activate_this.py virtualenv repo ~/.pyenv/versions/<version>/envs/<environment name>/bin/activate_this.py activate_this.py ## -*- coding: utf-8 -*- ## https://github.com/pypa/virtualenv/blob/main/src/virtualenv/activation/python/activate_this.py \"\"\"Activate virtualenv for current interpreter: Use exec(open(this_file).read(), {'__file__': this_file}) This can be used when you must use an existing Python interpreter, not the virtualenv bin/python.",
          "content_length": 685,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Virtual environments and python versions",
          "blog_url": "https://www.johnmathews.is/blog/virtual-environments-and-python-versions",
          "blog_date": "November 01, 2021",
          "content": "\"\"\" import import import try : =  ( ) except : raise ( \"You must use exec(open(this_file).read(), {'__file__': this_file}))\" ) =  ( ) = [ : - len ( \"__BIN_NAME__\" ) - 1 ] # strip away the bin part from the __file__, plus the path separator ## prepend bin to PATH (this file is inside the bin directory)  [ \"PATH\" ] =  ( [ ] +  ( \"PATH\" , \"\" )  (  ) )  [ \"VIRTUAL_ENV\" ] = # virtual env is right above bin directory ## add the virtual environments libraries to the host python import mechanism = len (  ) for in \"__LIB_FOLDERS__\"  (  ) : =  (  ( , ) )  ( ( \"utf-8\" ) if \"__DECODE_PATH__\" else )  [ : ] =  [ : ] +  [ 0 : ]  =",
          "content_length": 622,
          "content_tokens": 218,
          "embedding": []
        }
      ]
    },
    {
      "title": "Logging Best Practices",
      "url": "https://www.johnmathews.is/blog/logging-best-practices-notes",
      "date": "October 07, 2021",
      "content": "Contents: > Past tense only > Separate messages and parameter values > Warnings are for things that worked > Errors are for things that did not work > Info is for business > Debug is for technology aricle Most stuff should be past tense. Say what happened, not what is about to happen. This makes it much more explicit and easier to read. The reader doesn't need to infer anything. Think about how you might search for parameter values - if they are interspersed between normal English sentences it becomes harder to search for. Also consider readability if the parameters are very long or harder to read literally. The thing was done, but not perfectly. The thing wasn't done. The info log looks like a book and reads like a story. It tells you what happened, but not necessarily how it happened. User x signed up User x bought an item User x navigated to settings It tells you how stuff happened. Saved user credentials Started cron job",
      "length": 938,
      "tokens": 194,
      "chunks": [
        {
          "blog_title": "Logging Best Practices",
          "blog_url": "https://www.johnmathews.is/blog/logging-best-practices-notes",
          "blog_date": "October 07, 2021",
          "content": "Contents: > Past tense only > Separate messages and parameter values > Warnings are for things that worked > Errors are for things that did not work > Info is for business > Debug is for technology aricle Most stuff should be past tense. Say what happened, not what is about to happen. This makes it much more explicit and easier to read. The reader doesn't need to infer anything. Think about how you might search for parameter values - if they are interspersed between normal English sentences it becomes harder to search for. Also consider readability if the parameters are very long or harder to read literally. The thing was done, but not perfectly. The thing wasn't done. The info log looks like a book and reads like a story. It tells you what happened, but not necessarily how it happened. User x signed up User x bought an item User x navigated to settings It tells you how stuff happened. Saved user credentials Started cron job",
          "content_length": 938,
          "content_tokens": 194,
          "embedding": []
        }
      ]
    },
    {
      "title": "Counter intuitive facts",
      "url": "https://www.johnmathews.is/blog/counter-intuitive-facts",
      "date": "October 06, 2021",
      "content": "Alexander Kruel Wikipedia Wikipedia Wikipedia source Wikipedia arxiv source Wikipedia YouTube YouTube source Wikipedia source Wikipedia source Two 12 Inch Pizzas have less Pizza than one 18 inch pizza. Wikipedia YouTube source Wikipedia Wikipedia In two dimensions, there are infinitely many regular polygons. In three dimensions, there are five Platonic solids. In four dimensions, there are six platonic polychora. In all higher dimensions than four, there are only ever three regular polytopes. (Maths 1001, Richard Elwes) There are as many whole positive numbers as all fractions (including the whole negative and whole positive numbers). Wikipedia http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/ -Wikipedia Any positive rational number x can be written as a finite sum of distinct numbers of the form 1/n. (Calculus, 4th edition by Michael Spivak) Let alpha = 0.110001000000000000000001000..., where the 1's occur in the n! place, for each n. Then alpha is transcendental. (Calculus, 4th edition by Michael Spivak) Wikipedia source Wikipedia Wikipedia source Twitter Twitter Wikipedia YouTube YouTube YouTube Source source Wikipedia source source source source source source source source source Wikipedia source Wikipedia Wikipedia Wikipedia source source source source YouTube source pdf source Wikipedia pdf wikipedia wikipedia stack exchange stack exchange",
      "length": 1393,
      "tokens": 283,
      "chunks": [
        {
          "blog_title": "Counter intuitive facts",
          "blog_url": "https://www.johnmathews.is/blog/counter-intuitive-facts",
          "blog_date": "October 06, 2021",
          "content": "Alexander Kruel Wikipedia Wikipedia Wikipedia source Wikipedia arxiv source Wikipedia YouTube YouTube source Wikipedia source Wikipedia source Two 12 Inch Pizzas have less Pizza than one 18 inch pizza. Wikipedia YouTube source Wikipedia Wikipedia In two dimensions, there are infinitely many regular polygons. In three dimensions, there are five Platonic solids. In four dimensions, there are six platonic polychora. In all higher dimensions than four, there are only ever three regular polytopes. (Maths 1001, Richard Elwes) There are as many whole positive numbers as all fractions (including the whole negative and whole positive numbers) Wikipedia http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/ -Wikipedia Any positive rational number x can be written as a finite sum of distinct numbers of the form 1/n.",
          "content_length": 837,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "Counter intuitive facts",
          "blog_url": "https://www.johnmathews.is/blog/counter-intuitive-facts",
          "blog_date": "October 06, 2021",
          "content": "(Calculus, 4th edition by Michael Spivak) Let alpha = 0.110001000000000000000001000..., where the 1's occur in the n! place, for each n. Then alpha is transcendental. (Calculus, 4th edition by Michael Spivak) Wikipedia source Wikipedia Wikipedia source Twitter Twitter Wikipedia YouTube YouTube YouTube Source source Wikipedia source source source source source source source source source Wikipedia source Wikipedia Wikipedia Wikipedia source source source source YouTube source pdf source Wikipedia pdf wikipedia wikipedia stack exchange stack exchange.",
          "content_length": 555,
          "content_tokens": 106,
          "embedding": []
        }
      ]
    },
    {
      "title": "How to get rich without getting lucky",
      "url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
      "date": "October 05, 2021",
      "content": "thread @naval Seek wealth, not money or status. Wealth is having assets that earn while you sleep. You must own a piece of a business - you wont get rich by renting out your time. You will get rich by giving society what it wants but doesn't know how to get. At scale. Money is how we transfer time and wealth. Status is your place in the social hierarchy. Understand that ethical wealth creation is possible. If you secretly despise wealth, it will elude you. Ignore people playing status games. Learn to sell. Learn to build. If you can do both, you will be unstoppable. Arm yourself with specific knowledge, accountability, and leverage. Pick an industry where you can play long term games with long term people. Maximise positive feedback loops. Design and defend against negative feedback loops. All the returns in life, whether in wealth, relationships, or knowledge, come from positive feedback loops, or compounding. The internet has massively broadened the possible space of careers. Most people haven't figured this out yet. Write down some examples. Play games where you iterate on past successes and experiences to create more success and more experience. This is compounding. Pick business partners with high intelligence, energy, and, above all, integrity. Knowledge is not the same as intelligence. Its hard to estimate higher levels of expertise relative to your own. Don't partner with cynics and pessimists. Their beliefs are self-fulfilling. Building specific knowledge will feel like play to you but will look like work to others. Specific knowledge is often highly technical or creative. It cannot be outsourced or automated. Specific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now. Specific knowledge is knowledge that you cannot be trained for. If society can train you, it can train someone else and replace you. When specific knowledge is taught, it’s through apprenticeships, not schools. Embrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage. The most accountable people have singular, public, and risky brands: Oprah, Trump, Kanye, Elon. Capital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment. Leverage is the ability to increase the effects of something. \"Give me a lever long enough, and a place to stand, and I will move the earth.\" - Archimedes Fortunes require leverage. Business leverage comes from capital, people, and products with no marginal cost of replication (code and media). Labor means people working for you. It's the oldest and most fought-over form of leverage. Labor leverage will impress your parents, but don’t waste your life chasing it. Capital and labor are permissioned leverage. Everyone is chasing capital, but someone has to give it to you. Everyone is trying to lead, but someone has to follow you. Code and media are permissionless leverage. They're the leverage behind the newly rich. You can create software and media that works for you while you sleep. An army of robots is freely available - it's just packed in data centers for heat and space efficiency. Use it. If you can't code, write books and blogs, record videos and podcasts. interview Apply specific knowledge with leverage, and progress is inevitable. You should be too busy to \"do coffee\", while still keeping an uncluttered calendar. Set and enforce an aspirational personal hourly rate. If fixing a problem will save less than your hourly rate, ignore it. If outsourcing a task will cost less than your hourly rate, outsource it. Who you work with and what you work on are more important than how hard you work. Work as hard as you can. Thinking your own thoughts is tiring. Asking good questions is hard. Doing is faster than watching. Developing good judgement requires experience, if you have a chance to gain real experience then take it. Learning can amplify the benefits of experience. Real experience is more useful than a prestigious course or degree. Be patient and persistent, shape your circumstances. It doesn't mean you've made a mistake if you can't do something real right now. There is no skill called business. Avoid business magazines and business classes. Think about why and extend this to other media. Passive, peace-meal knowledge acquisition by itself does not lead to specific knowledge or expertise. Subscribing to newsletters or social media accounts offers quickly diminishing returns, at best. Read long-form media which you actively looked for. Information that comes to you for free has competing interests which put you second. If you read only 1 book on a subject then you'll likely be a clone. If you read 2 books you'll grapple with confusion. Read 3 and you'll begin to form your own substantial opinions and intuitions. Become the best in the world at what you do. Keep redefining what you do until this is true. There are no get rich quick schemes. That's just someone else getting rich off you. Study microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers. Real experience with skin in the game will teach you more than a book or a professor. There are lots of ways to grow beyond being a beginner, but no one can do the heavy-lifting for you. A course or product that offers to teach you specific knowledge will give diminishing returns. The more of a beginner you are, the better the course will appear. Reading is faster than listening. When you're finally wealthy, you'll realize that it wasn't what you were seeking in the first place. But that's for another day. Check in with your 70 year old self, and your 10 years older self. What do they think of you now? Are they sympathetic? Proud? Do they say go faster, or slow down? Be kind to yourself. There is a big difference between saying \"I am intimidated\" and \"I am feeling intimidated\". You can do it. Embrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage. Capital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment.",
      "length": 6221,
      "tokens": 1266,
      "chunks": [
        {
          "blog_title": "How to get rich without getting lucky",
          "blog_url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
          "blog_date": "October 05, 2021",
          "content": "thread @naval Seek wealth, not money or status. Wealth is having assets that earn while you sleep. You must own a piece of a business - you wont get rich by renting out your time. You will get rich by giving society what it wants but doesn't know how to get. At scale. Money is how we transfer time and wealth. Status is your place in the social hierarchy. Understand that ethical wealth creation is possible. If you secretly despise wealth, it will elude you. Ignore people playing status games. Learn to sell. Learn to build. If you can do both, you will be unstoppable. Arm yourself with specific knowledge, accountability, and leverage. Pick an industry where you can play long term games with long term people. Maximise positive feedback loops. Design and defend against negative feedback loops. All the returns in life, whether in wealth, relationships, or knowledge, come from positive feedback loops, or compounding.",
          "content_length": 924,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "How to get rich without getting lucky",
          "blog_url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
          "blog_date": "October 05, 2021",
          "content": "The internet has massively broadened the possible space of careers. Most people haven't figured this out yet. Write down some examples. Play games where you iterate on past successes and experiences to create more success and more experience. This is compounding. Pick business partners with high intelligence, energy, and, above all, integrity. Knowledge is not the same as intelligence. Its hard to estimate higher levels of expertise relative to your own. Don't partner with cynics and pessimists. Their beliefs are self-fulfilling. Building specific knowledge will feel like play to you but will look like work to others. Specific knowledge is often highly technical or creative. It cannot be outsourced or automated. Specific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now. Specific knowledge is knowledge that you cannot be trained for. If society can train you, it can train someone else and replace you.",
          "content_length": 968,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "How to get rich without getting lucky",
          "blog_url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
          "blog_date": "October 05, 2021",
          "content": "When specific knowledge is taught, it’s through apprenticeships, not schools. Embrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage. The most accountable people have singular, public, and risky brands: Oprah, Trump, Kanye, Elon. Capital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment. Leverage is the ability to increase the effects of something. \"Give me a lever long enough, and a place to stand, and I will move the earth.\" - Archimedes Fortunes require leverage. Business leverage comes from capital, people, and products with no marginal cost of replication (code and media) Labor means people working for you. It's the oldest and most fought-over form of leverage. Labor leverage will impress your parents, but don’t waste your life chasing it. Capital and labor are permissioned leverage.",
          "content_length": 943,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "How to get rich without getting lucky",
          "blog_url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
          "blog_date": "October 05, 2021",
          "content": "Everyone is chasing capital, but someone has to give it to you. Everyone is trying to lead, but someone has to follow you. Code and media are permissionless leverage. They're the leverage behind the newly rich. You can create software and media that works for you while you sleep. An army of robots is freely available - it's just packed in data centers for heat and space efficiency. Use it. If you can't code, write books and blogs, record videos and podcasts. interview Apply specific knowledge with leverage, and progress is inevitable. You should be too busy to \"do coffee\", while still keeping an uncluttered calendar. Set and enforce an aspirational personal hourly rate. If fixing a problem will save less than your hourly rate, ignore it. If outsourcing a task will cost less than your hourly rate, outsource it. Who you work with and what you work on are more important than how hard you work. Work as hard as you can.",
          "content_length": 928,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "How to get rich without getting lucky",
          "blog_url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
          "blog_date": "October 05, 2021",
          "content": "Thinking your own thoughts is tiring. Asking good questions is hard. Doing is faster than watching. Developing good judgement requires experience, if you have a chance to gain real experience then take it. Learning can amplify the benefits of experience. Real experience is more useful than a prestigious course or degree. Be patient and persistent, shape your circumstances. It doesn't mean you've made a mistake if you can't do something real right now. There is no skill called business. Avoid business magazines and business classes. Think about why and extend this to other media. Passive, peace-meal knowledge acquisition by itself does not lead to specific knowledge or expertise. Subscribing to newsletters or social media accounts offers quickly diminishing returns, at best. Read long-form media which you actively looked for. Information that comes to you for free has competing interests which put you second. If you read only 1 book on a subject then you'll likely be a clone.",
          "content_length": 989,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "How to get rich without getting lucky",
          "blog_url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
          "blog_date": "October 05, 2021",
          "content": "If you read 2 books you'll grapple with confusion. Read 3 and you'll begin to form your own substantial opinions and intuitions. Become the best in the world at what you do. Keep redefining what you do until this is true. There are no get rich quick schemes. That's just someone else getting rich off you. Study microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers. Real experience with skin in the game will teach you more than a book or a professor. There are lots of ways to grow beyond being a beginner, but no one can do the heavy-lifting for you. A course or product that offers to teach you specific knowledge will give diminishing returns. The more of a beginner you are, the better the course will appear. Reading is faster than listening. When you're finally wealthy, you'll realize that it wasn't what you were seeking in the first place. But that's for another day.",
          "content_length": 912,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "How to get rich without getting lucky",
          "blog_url": "https://www.johnmathews.is/blog/how-to-get-rich-without-getting-lucky",
          "blog_date": "October 05, 2021",
          "content": "Check in with your 70 year old self, and your 10 years older self. What do they think of you now? Are they sympathetic? Proud? Do they say go faster, or slow down? Be kind to yourself. There is a big difference between saying \"I am intimidated\" and \"I am feeling intimidated\" You can do it. Embrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage. Capital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment.",
          "content_length": 549,
          "content_tokens": 116,
          "embedding": []
        }
      ]
    },
    {
      "title": "Daddy-Daughter To-Do List",
      "url": "https://www.johnmathews.is/blog/daddy-daughter-to-do-list",
      "date": "August 22, 2021",
      "content": "Things we want to do together:",
      "length": 30,
      "tokens": 7,
      "chunks": [
        {
          "blog_title": "Daddy-Daughter To-Do List",
          "blog_url": "https://www.johnmathews.is/blog/daddy-daughter-to-do-list",
          "blog_date": "August 22, 2021",
          "content": "Things we want to do together:",
          "content_length": 30,
          "content_tokens": 7,
          "embedding": []
        }
      ]
    },
    {
      "title": "Elon Musk's Engineering Philosophy",
      "url": "https://www.johnmathews.is/blog/elon-musk-s-engineering-philosophy",
      "date": "August 08, 2021",
      "content": "Whilst giving Tim Dodd a tour of a SpaceX facility, Musk described an interesting five-step engineering process: Make the requirements less dumb The requirements are definitely dumb; it does not matter who gave them to you. Requirements are particularly dangerous if an intelligent person created them, because you may not question them enough. \"Everyone’s wrong. No matter who you are, everyone is wrong some of the time.\" \"All designs are wrong, it’s just a matter of how wrong.\" Try very hard to delete the process or the component If parts are not being added back into the design at least 10% of the time, not enough parts are being deleted. Musk noted that the bias tends to be very strongly toward “let’s add this part or process step in case we need it.” Each requirement must come from a name, not a department. A department cannot be asked why a requirement exists, but a person can. Simplify and optimize the design. Remove stuff The most common error for a smart engineer is to optimize something that should not exist. Accelerate cycle time \"You’re moving too slowly, go faster! But don’t go faster until you've worked on the other three things first.” Automate An important part of this is to remove in-process testing after the problems have been diagnosed; If a product is reaching the end of a production line with a high acceptance rate, there is no need for in-process testing. video",
      "length": 1402,
      "tokens": 304,
      "chunks": [
        {
          "blog_title": "Elon Musk's Engineering Philosophy",
          "blog_url": "https://www.johnmathews.is/blog/elon-musk-s-engineering-philosophy",
          "blog_date": "August 08, 2021",
          "content": "Whilst giving Tim Dodd a tour of a SpaceX facility, Musk described an interesting five-step engineering process: Make the requirements less dumb The requirements are definitely dumb; it does not matter who gave them to you. Requirements are particularly dangerous if an intelligent person created them, because you may not question them enough. \"Everyone’s wrong. No matter who you are, everyone is wrong some of the time.\" \"All designs are wrong, it’s just a matter of how wrong.\" Try very hard to delete the process or the component If parts are not being added back into the design at least 10% of the time, not enough parts are being deleted. Musk noted that the bias tends to be very strongly toward “let’s add this part or process step in case we need it.” Each requirement must come from a name, not a department. A department cannot be asked why a requirement exists, but a person can.",
          "content_length": 893,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "Elon Musk's Engineering Philosophy",
          "blog_url": "https://www.johnmathews.is/blog/elon-musk-s-engineering-philosophy",
          "blog_date": "August 08, 2021",
          "content": "Simplify and optimize the design. Remove stuff The most common error for a smart engineer is to optimize something that should not exist. Accelerate cycle time \"You’re moving too slowly, go faster! But don’t go faster until you've worked on the other three things first.” Automate An important part of this is to remove in-process testing after the problems have been diagnosed; If a product is reaching the end of a production line with a high acceptance rate, there is no need for in-process testing. video.",
          "content_length": 509,
          "content_tokens": 113,
          "embedding": []
        }
      ]
    },
    {
      "title": "Beach Photos",
      "url": "https://www.johnmathews.is/blog/beach-photographs",
      "date": "August 01, 2021",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "Beach Photos",
          "blog_url": "https://www.johnmathews.is/blog/beach-photographs",
          "blog_date": "August 01, 2021",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "Playing with Google Cloud Platform",
      "url": "https://www.johnmathews.is/blog/playing-with-google-cloud-platform",
      "date": "July 13, 2021",
      "content": "web analytics My first version of the analytics tool took the following form: When the browser navigates to a page on the site, a JavaScript beacon is sent which triggers a cloud function. The function parses the page URL and the IP address, and creates a record in the database. Each time the analytics page is loaded, a cloud function is triggered that gets every record from DataStore, parses the data and returns a JSON object containing the aggregated data. The browser receives the JSON, parses it and creates some charts and tables. The good: It works, it was quick and simple to build. The bad: Its expensive. Loading the analytics page is slow - when the DataStore was small it took 3 or 4 seconds, after a few thousand page views it took about 40 seconds. Conclusion - keep the logger function as it is, but improve the aggregator function. The second version still used DataStore but was much more efficient. It didn't read the entire database and generate the aggregated results every time the analytics page was viewed. Instead, a cloud function periodically collected all the records in the datastore database and calculated the results. The results were written to a JSON file and sent to a storage bucket. When the analytics page was loaded in a browser, the browser collects and processes the JSON file from the bucket. This is much faster, performant and cheaper than creating a new JSON object each time the analytics page is viewed. The good: The analytics page loads at the same speed regardless of how much data has been aggregated and how frequently the analytics page is being viewed. Performance issues have been solved, though I still don't think DataStore is the best database solution for this use case. The bad: DataStore seems expensive - I am being charged for AppEngine services (which I don't really understand but is caused by using DataStore). If I can get monthly costs down to about a cup of coffee (about €4/month or €0.15/day) then I don't mind running it indefinitely. Use BigQuery instead of DataStore. BigQuery is a Data Warehouse that is well suited for analytics. It is not well suited for transactional use cases - where data is being read, updated or created many times per second. This is fine for my use case - the Page Logger function writes a record to a BigQuery table each time each time a page view is logged. During times of high traffic it's possible that concurrency issues might arise and some page views will be lost, but this isn't an issue 99% of the time. My site traffic is very light. I believe I could use a newer API that google recently released to solve this problem but for now I'll use the normal API. The rest of the process is unchanged - the aggregator function periodically reads the (BigQuery) database, crunches that data and sends a JSON file to a storage bucket. The good: This is completely free. The analytics page can be viewed quickly regardless of the amount of site traffic. The bad: Under heavy traffic some page views might be lost due to a limit on how quickly new rows can be added to BigQuery tables. Using a new API might resolve this. 1 Using them all for free (my usage is well within the free tier) makes the possibilities even more interesting. Having compute and storage services running indefinitely in the cloud for free is amazing. Documentation An improvement to this analytics setup would be creating aggregated metrics for each calendar month and storing them in separate JSON files. This would prevent data older than one month being processed repeatedly, and create a cap on the amount of computational effort required (the maximum amount of data processed by one cloud function instance would become capped at one month). If the browser wanted to display more than one month of data, it would simply request more than one JSON file from the storage bucket. ↩",
      "length": 3861,
      "tokens": 788,
      "chunks": [
        {
          "blog_title": "Playing with Google Cloud Platform",
          "blog_url": "https://www.johnmathews.is/blog/playing-with-google-cloud-platform",
          "blog_date": "July 13, 2021",
          "content": "web analytics My first version of the analytics tool took the following form: When the browser navigates to a page on the site, a JavaScript beacon is sent which triggers a cloud function. The function parses the page URL and the IP address, and creates a record in the database. Each time the analytics page is loaded, a cloud function is triggered that gets every record from DataStore, parses the data and returns a JSON object containing the aggregated data. The browser receives the JSON, parses it and creates some charts and tables. The good: It works, it was quick and simple to build. The bad: Its expensive. Loading the analytics page is slow - when the DataStore was small it took 3 or 4 seconds, after a few thousand page views it took about 40 seconds. Conclusion - keep the logger function as it is, but improve the aggregator function. The second version still used DataStore but was much more efficient.",
          "content_length": 919,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Playing with Google Cloud Platform",
          "blog_url": "https://www.johnmathews.is/blog/playing-with-google-cloud-platform",
          "blog_date": "July 13, 2021",
          "content": "It didn't read the entire database and generate the aggregated results every time the analytics page was viewed. Instead, a cloud function periodically collected all the records in the datastore database and calculated the results. The results were written to a JSON file and sent to a storage bucket. When the analytics page was loaded in a browser, the browser collects and processes the JSON file from the bucket. This is much faster, performant and cheaper than creating a new JSON object each time the analytics page is viewed. The good: The analytics page loads at the same speed regardless of how much data has been aggregated and how frequently the analytics page is being viewed. Performance issues have been solved, though I still don't think DataStore is the best database solution for this use case. The bad: DataStore seems expensive - I am being charged for AppEngine services (which I don't really understand but is caused by using DataStore)",
          "content_length": 957,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Playing with Google Cloud Platform",
          "blog_url": "https://www.johnmathews.is/blog/playing-with-google-cloud-platform",
          "blog_date": "July 13, 2021",
          "content": "If I can get monthly costs down to about a cup of coffee (about €4/month or €0.15/day) then I don't mind running it indefinitely. Use BigQuery instead of DataStore. BigQuery is a Data Warehouse that is well suited for analytics. It is not well suited for transactional use cases - where data is being read, updated or created many times per second. This is fine for my use case - the Page Logger function writes a record to a BigQuery table each time each time a page view is logged. During times of high traffic it's possible that concurrency issues might arise and some page views will be lost, but this isn't an issue 99% of the time. My site traffic is very light. I believe I could use a newer API that google recently released to solve this problem but for now I'll use the normal API.",
          "content_length": 791,
          "content_tokens": 180,
          "embedding": []
        },
        {
          "blog_title": "Playing with Google Cloud Platform",
          "blog_url": "https://www.johnmathews.is/blog/playing-with-google-cloud-platform",
          "blog_date": "July 13, 2021",
          "content": "The rest of the process is unchanged - the aggregator function periodically reads the (BigQuery) database, crunches that data and sends a JSON file to a storage bucket. The good: This is completely free. The analytics page can be viewed quickly regardless of the amount of site traffic. The bad: Under heavy traffic some page views might be lost due to a limit on how quickly new rows can be added to BigQuery tables. Using a new API might resolve this. 1 Using them all for free (my usage is well within the free tier) makes the possibilities even more interesting. Having compute and storage services running indefinitely in the cloud for free is amazing. Documentation An improvement to this analytics setup would be creating aggregated metrics for each calendar month and storing them in separate JSON files. This would prevent data older than one month being processed repeatedly, and create a cap on the amount of computational effort required (the maximum amount of data processed by one cloud function instance would become capped at one month) If the browser wanted to display more than one month of data, it would simply request more than one JSON file from the storage bucket.",
          "content_length": 1186,
          "content_tokens": 228,
          "embedding": []
        }
      ]
    },
    {
      "title": "Can an explanation of an historical event ever be completely true?",
      "url": "https://www.johnmathews.is/blog/historical-truths",
      "date": "July 06, 2021",
      "content": "We use historical events as examples to learn from, but is it possible to acquire a true understanding of a historical event? The answer is important because we use that understanding to learn by example, and identify patterns of cause and effect. Is it possible for a normal person to do this, or does it require training, lots of time, or special skills? Is it impossible for everyone? I started thinking about this when I had the following thought: When we think we understand why something historical happened, all we've probably done is accept a story that seems plausible. An account of an event must necessarily be a simplification - not all details can be recorded or learned. This is ok because most details are not pertinent and have no meaningful consequences. But how do we choose which details are included, and how do we verify that the details were chosen correctly? How can we be sure that a lesson or conclusion based on historical events is reliable? The truthfulness of a historical story could be thought of as a value on a scale ranging from completely false to perfectly true. I think that there are mechanisms that push popular or resilient narratives towards the middle of this scale and away from either extreme. As a version of a story approaches the dishonest end it will contain an increasing number of errors or omit an increasing number of pertinent facts. This has the effect of: Increasing the likelihood and frequency of someone hearing the story and rebutting its assertions. Making it harder to align the assertions and implications with existing understandings of reality. At the opposite end of the scale, a story is unlikely to be comprehensively honest because: Adding truth requires adding complexity. It is easier to create or capture a simple story than a complicated story. As a story's detail and depth increases so do the resources required to communicate it. Each narrative is competing for attention and a complex story requires more resources to broadcast and listen to than a simple story. Those with the resources to do so will want the story to benefit them in some way. This creates incentives to omit inconvenient truths and distractions. I think that there is unfortunately no substitute for the hard work of coordinating disparate information, because the truthiness of a conclusion is generally proportional to the inconvenience of the effort spent forming it. We are predisposed to choose convenience over inconvenience and this enables: History to be written by the \"winning side\", who have more resources than the \"losing side\". Complex events to be simplified into expedient and bite-sized narratives. As time passes, the practical benefit of holding a view that differs from a popular narrative decreases. This reduces any incentive to challenge a popular view. This creates a feedback loop that makes it increasingly difficult for a younger generation to discover information about historical events that challenge a popular narrative. How much evidence did I collect myself, that wasn't brought to my attention by an algorithm or by someone else? Was WW2 a battle of the good against the bad, or the bad against the really bad, or something else? Why did the Allies win WW2? Was the influence of government on social freedoms in America 100 years ago dissimilar to China today? Racial and ethnic discrimination was normal 100 years ago - it appears to have been so universally accepted that I'm led to question the presuppositions of modern attitudes about human nature and morality. [",
      "length": 3548,
      "tokens": 663,
      "chunks": [
        {
          "blog_title": "Can an explanation of an historical event ever be completely true?",
          "blog_url": "https://www.johnmathews.is/blog/historical-truths",
          "blog_date": "July 06, 2021",
          "content": "We use historical events as examples to learn from, but is it possible to acquire a true understanding of a historical event? The answer is important because we use that understanding to learn by example, and identify patterns of cause and effect. Is it possible for a normal person to do this, or does it require training, lots of time, or special skills? Is it impossible for everyone? I started thinking about this when I had the following thought: When we think we understand why something historical happened, all we've probably done is accept a story that seems plausible. An account of an event must necessarily be a simplification - not all details can be recorded or learned. This is ok because most details are not pertinent and have no meaningful consequences.",
          "content_length": 771,
          "content_tokens": 148,
          "embedding": []
        },
        {
          "blog_title": "Can an explanation of an historical event ever be completely true?",
          "blog_url": "https://www.johnmathews.is/blog/historical-truths",
          "blog_date": "July 06, 2021",
          "content": "But how do we choose which details are included, and how do we verify that the details were chosen correctly? How can we be sure that a lesson or conclusion based on historical events is reliable? The truthfulness of a historical story could be thought of as a value on a scale ranging from completely false to perfectly true. I think that there are mechanisms that push popular or resilient narratives towards the middle of this scale and away from either extreme. As a version of a story approaches the dishonest end it will contain an increasing number of errors or omit an increasing number of pertinent facts. This has the effect of: Increasing the likelihood and frequency of someone hearing the story and rebutting its assertions. Making it harder to align the assertions and implications with existing understandings of reality. At the opposite end of the scale, a story is unlikely to be comprehensively honest because: Adding truth requires adding complexity. It is easier to create or capture a simple story than a complicated story.",
          "content_length": 1044,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Can an explanation of an historical event ever be completely true?",
          "blog_url": "https://www.johnmathews.is/blog/historical-truths",
          "blog_date": "July 06, 2021",
          "content": "As a story's detail and depth increases so do the resources required to communicate it. Each narrative is competing for attention and a complex story requires more resources to broadcast and listen to than a simple story. Those with the resources to do so will want the story to benefit them in some way. This creates incentives to omit inconvenient truths and distractions. I think that there is unfortunately no substitute for the hard work of coordinating disparate information, because the truthiness of a conclusion is generally proportional to the inconvenience of the effort spent forming it. We are predisposed to choose convenience over inconvenience and this enables: History to be written by the \"winning side\", who have more resources than the \"losing side\" Complex events to be simplified into expedient and bite-sized narratives. As time passes, the practical benefit of holding a view that differs from a popular narrative decreases. This reduces any incentive to challenge a popular view.",
          "content_length": 1004,
          "content_tokens": 183,
          "embedding": []
        },
        {
          "blog_title": "Can an explanation of an historical event ever be completely true?",
          "blog_url": "https://www.johnmathews.is/blog/historical-truths",
          "blog_date": "July 06, 2021",
          "content": "This creates a feedback loop that makes it increasingly difficult for a younger generation to discover information about historical events that challenge a popular narrative. How much evidence did I collect myself, that wasn't brought to my attention by an algorithm or by someone else? Was WW2 a battle of the good against the bad, or the bad against the really bad, or something else? Why did the Allies win WW2? Was the influence of government on social freedoms in America 100 years ago dissimilar to China today? Racial and ethnic discrimination was normal 100 years ago - it appears to have been so universally accepted that I'm led to question the presuppositions of modern attitudes about human nature and morality.",
          "content_length": 723,
          "content_tokens": 137,
          "embedding": []
        }
      ]
    },
    {
      "title": "Load-testing my Web Analytics Tool",
      "url": "https://www.johnmathews.is/blog/load-testing-web-analytics-tool",
      "date": "July 02, 2021",
      "content": "Contents: > Background > The Hacker News affect > Bad news > Good news > API traffic for the tool > Dashboard for the get-analytics cloud function > Dashboard for the page-view-logger function > The Solution > Idea 1: Use global objects > Idea 2: Store the results themselves in the database > Idea 3: Forget DataStore, use buckets > Further improvement article To my surprise, I received an email from a Hacker News administrator (Daniel) explaining that it was a good quality post and would be boosted to the front page at a random time within the next couple of days. Sure enough, in the early hours of the next morning, the post was boosted. I woke up to various notifications that people had started following me on twitter, which never happens. After delegating the kid's breakfast duties, I logged into GCP to see what affect the extra traffic had on my experimental tool. Traffic had increased by about 30x and my hastily built tool was looking very sub-optimal. Two problems stood out - the aggregated analytics data was taking anywhere from 20 - 30 seconds to load (up from around a passable-ish 5 under normal conditions), and I was running up a bill of around €10/day. The reason for both of these problems was a shockingly inefficient and lazy approach to serving the analytics. all get-analytics page-view-logger get-analytics page-view-logger I began to ponder the importance of all the things I didn't know about databases, and what DataStore might be good and bad at doing. Scrolling through the documentation I could see google boasting of super quick writes, but not super quick reads. I'd already seen how many API calls were being made to the Cloud DataStore API and knew I'd probably have to redesign part of the tool. I attempted a few easy wins, mostly using the idea that if an instance of a function was invoked multiple times before being powered-down then global objects would still be available in memory. If I put the data collected from the DataStore into a global object then I could check for its existence in subsequent function calls. This would save a lot of API calls and likely remove the largest bottleneck, saving my readers 10+ seconds of watching a loading spinner. For whatever reason, this didn't work. Even if it had, the tool could still be vastly improved by taking a different approach that would be even faster and also reduce costs. I'd like to have this tool running indefinitely so reducing daily costs to an absolute minimum is important. It was obviously inefficient to repeat the same calculations multiple times. A good long-term solution would require aggregating the data periodically and then fetching and serving these aggregated data to the client. I tried putting the JSON into the DataStore using a different key, but ran into errors about the data for each entity being too large. Even if I split the aggregated data into multiple component parts it would still be too large, and would grow over time. I guess DataStore isn't meant to be used like this. I probably could have pursued this idea a bit further, but I didn't want to change the structure of the JSON blob served to client. If I did change it then I'd need to rewrite the client side JavaScript as well. Client side work is faster than back-end, but writing JavaScript is fiddly compared to Python in my opinion. There's always multiple ways of doing a thing, and several versions of an API, so googling a solution isn't as simple as for Python. Final idea - store the results as a JSON blob in a Storage bucket and point the client at the bucket instead of the Cloud Function. /metrics The computation expense of calculating the analytical results is fixed and decoupled from the number of page views using the following method: Every few minutes Cloud Scheduler targets a Pub/Sub topic. The topic triggers a Cloud Function. Queries the DataStore and collects the data. Calculates the analytics results. Generates a JSON blob containing the results. Pushes the JSON to a storage bucket which is available to a client. The aggregated results for days other than the current day are still needlessly recalculated - once midnight rolls around the results are clearly not going to keep on changing. Instead of having one JSON blob containing data for all the last 30 days, I could have a blob for each day (or perhaps each week). This would reduce the amount of data extracted from the DataStore. This would reduce costs and computational expense.",
      "length": 4470,
      "tokens": 924,
      "chunks": [
        {
          "blog_title": "Load-testing my Web Analytics Tool",
          "blog_url": "https://www.johnmathews.is/blog/load-testing-web-analytics-tool",
          "blog_date": "July 02, 2021",
          "content": "Contents: > Background > The Hacker News affect > Bad news > Good news > API traffic for the tool > Dashboard for the get-analytics cloud function > Dashboard for the page-view-logger function > The Solution > Idea 1: Use global objects > Idea 2: Store the results themselves in the database > Idea 3: Forget DataStore, use buckets > Further improvement article To my surprise, I received an email from a Hacker News administrator (Daniel) explaining that it was a good quality post and would be boosted to the front page at a random time within the next couple of days. Sure enough, in the early hours of the next morning, the post was boosted. I woke up to various notifications that people had started following me on twitter, which never happens. After delegating the kid's breakfast duties, I logged into GCP to see what affect the extra traffic had on my experimental tool.",
          "content_length": 879,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Load-testing my Web Analytics Tool",
          "blog_url": "https://www.johnmathews.is/blog/load-testing-web-analytics-tool",
          "blog_date": "July 02, 2021",
          "content": "Traffic had increased by about 30x and my hastily built tool was looking very sub-optimal. Two problems stood out - the aggregated analytics data was taking anywhere from 20 - 30 seconds to load (up from around a passable-ish 5 under normal conditions), and I was running up a bill of around €10/day. The reason for both of these problems was a shockingly inefficient and lazy approach to serving the analytics. all get-analytics page-view-logger get-analytics page-view-logger I began to ponder the importance of all the things I didn't know about databases, and what DataStore might be good and bad at doing. Scrolling through the documentation I could see google boasting of super quick writes, but not super quick reads. I'd already seen how many API calls were being made to the Cloud DataStore API and knew I'd probably have to redesign part of the tool.",
          "content_length": 860,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Load-testing my Web Analytics Tool",
          "blog_url": "https://www.johnmathews.is/blog/load-testing-web-analytics-tool",
          "blog_date": "July 02, 2021",
          "content": "I attempted a few easy wins, mostly using the idea that if an instance of a function was invoked multiple times before being powered-down then global objects would still be available in memory. If I put the data collected from the DataStore into a global object then I could check for its existence in subsequent function calls. This would save a lot of API calls and likely remove the largest bottleneck, saving my readers 10+ seconds of watching a loading spinner. For whatever reason, this didn't work. Even if it had, the tool could still be vastly improved by taking a different approach that would be even faster and also reduce costs. I'd like to have this tool running indefinitely so reducing daily costs to an absolute minimum is important. It was obviously inefficient to repeat the same calculations multiple times. A good long-term solution would require aggregating the data periodically and then fetching and serving these aggregated data to the client.",
          "content_length": 968,
          "content_tokens": 186,
          "embedding": []
        },
        {
          "blog_title": "Load-testing my Web Analytics Tool",
          "blog_url": "https://www.johnmathews.is/blog/load-testing-web-analytics-tool",
          "blog_date": "July 02, 2021",
          "content": "I tried putting the JSON into the DataStore using a different key, but ran into errors about the data for each entity being too large. Even if I split the aggregated data into multiple component parts it would still be too large, and would grow over time. I guess DataStore isn't meant to be used like this. I probably could have pursued this idea a bit further, but I didn't want to change the structure of the JSON blob served to client. If I did change it then I'd need to rewrite the client side JavaScript as well. Client side work is faster than back-end, but writing JavaScript is fiddly compared to Python in my opinion. There's always multiple ways of doing a thing, and several versions of an API, so googling a solution isn't as simple as for Python. Final idea - store the results as a JSON blob in a Storage bucket and point the client at the bucket instead of the Cloud Function.",
          "content_length": 893,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Load-testing my Web Analytics Tool",
          "blog_url": "https://www.johnmathews.is/blog/load-testing-web-analytics-tool",
          "blog_date": "July 02, 2021",
          "content": "/metrics The computation expense of calculating the analytical results is fixed and decoupled from the number of page views using the following method: Every few minutes Cloud Scheduler targets a Pub/Sub topic. The topic triggers a Cloud Function. Queries the DataStore and collects the data. Calculates the analytics results. Generates a JSON blob containing the results. Pushes the JSON to a storage bucket which is available to a client. The aggregated results for days other than the current day are still needlessly recalculated - once midnight rolls around the results are clearly not going to keep on changing. Instead of having one JSON blob containing data for all the last 30 days, I could have a blob for each day (or perhaps each week) This would reduce the amount of data extracted from the DataStore. This would reduce costs and computational expense.",
          "content_length": 865,
          "content_tokens": 171,
          "embedding": []
        }
      ]
    },
    {
      "title": "Validating CloudFlare analytics",
      "url": "https://www.johnmathews.is/blog/validating-cloudflare-analytics",
      "date": "June 29, 2021",
      "content": "Contents: > A mystery > Possible Reasons > Comparison > CloudFlare Analytics > CloudFlare Web Analytics > My own analytics tool analytics tool The reasons for this don't seem to be explained anywhere obvious, but I think it could be caused by ad blockers preventing the JavaScript used for the Web Analytics product. The normal, (not Web) Analytics product might derive its results from server side events, which would catch everything including bots and RSS clients, and be unaffected by ad blockers. Most of my visitors read the technical articles and therefore the audience is probably very technical and likely to be using an ad blocker. If this is the case then one way to test my hypothesis would be to write some articles that appeal to a non-technical audience who are less likely to use an ad blocker. In this case I would expect the two analytics methods to agree more closely. t h ^{th} t h Analytics Web Analytics tool CloudFlare's (normal) analytics say I've had 234 unique visitors. But their Web Analytics tool says I've had 11 visitors. My own tool reports 12 unique visitors. 1 tool 2 twitter ↩ ↩",
      "length": 1113,
      "tokens": 228,
      "chunks": [
        {
          "blog_title": "Validating CloudFlare analytics",
          "blog_url": "https://www.johnmathews.is/blog/validating-cloudflare-analytics",
          "blog_date": "June 29, 2021",
          "content": "Contents: > A mystery > Possible Reasons > Comparison > CloudFlare Analytics > CloudFlare Web Analytics > My own analytics tool analytics tool The reasons for this don't seem to be explained anywhere obvious, but I think it could be caused by ad blockers preventing the JavaScript used for the Web Analytics product. The normal, (not Web) Analytics product might derive its results from server side events, which would catch everything including bots and RSS clients, and be unaffected by ad blockers. Most of my visitors read the technical articles and therefore the audience is probably very technical and likely to be using an ad blocker. If this is the case then one way to test my hypothesis would be to write some articles that appeal to a non-technical audience who are less likely to use an ad blocker. In this case I would expect the two analytics methods to agree more closely. t h ^{th} t h Analytics Web Analytics tool CloudFlare's (normal) analytics say I've had 234 unique visitors. But their Web Analytics tool says I've had 11 visitors. My own tool reports 12 unique visitors. 1 tool 2 twitter ↩ ↩",
          "content_length": 1112,
          "content_tokens": 228,
          "embedding": []
        }
      ]
    },
    {
      "title": "Building my own web analytics",
      "url": "https://www.johnmathews.is/blog/building-my-own-site-analytics",
      "date": "June 22, 2021",
      "content": "/metrics Page views per day, Unique IP addresses per day Views per page per day. Hacker News here article Google Analytics felt like overkill. It has so many data-points that the useful metrics are obscured. I also like this site to load quickly and GA makes it slower. I've also tried CloudFlare Analytics. It's a lot simpler than GA and better suits my use case, but I don't think its accurate. 1 I know from my work visualizing data and building dashboards that the metrics presented will alter the users perception of the underlying reality. The way that someone thinks about their impact on a business, the value they've produced, or the dynamics of the underlying system (a product's quality, site performance, growth, etc) is influenced by the design decisions I make, such as which metrics are available, how easy they are to access, or which metrics are above the fold. If I present a particular metric as if its important, it will be difficult for someone who uses the dashboard to resist this implied message. They'll eventually consider the metric as a Key Indicator of some kind. For these reasons I wanted to see only the most important metrics about my website, and I wanted to see them in a simple way without distraction. The only metrics I'm interested in are: How many people are reading my site What are they reading How much are they reading. I'd like to be able to infer whether I have a few people who read a lot, or a lot of people who read a little. (Or, as is the case, a few people who read a little.) The main reason for making my own analytics tool it because its a fun challenge with an obvious and useful result. Building it required connecting a few technologies - Serverless Computing (Cloud Functions on GCP), NoSQL databases (DataStore), JavaScript, HTTP headers. 2 The analytics \"engine\" works by consuming a request that is sent by the client each time a page is loaded. The request is parsed by a Cloud Function on GCP which extracts the page URL and the IP address. This is then recorded in a DataStore database along with the current date and time. Viewing the analytics is as simple (and as complicated) as making a request to the database, parsing the data and visualizing it conveniently. For example, group the data by days and count the distinct IP Addresses to figure out how many people are visiting each day. This is achieved by making a request to another Cloud Function that returns a response with a JSON payload. chart.js I haven't figured out how to easily test cloud functions locally - it would require setting up a NoSQL database and mocking Flask requests and responses. Instead of doing that, I watched Peaky Blinders for a couple of minutes whilst each new version of the Cloud Function was deploying. Eventually I'll want to group the metrics by week or month I expect. It'll be a good way of learning and playing with cloud technologies and JavaScript. 3 /analytics.html blog post Machine Vision demo I'd be interested to know if there is a way to track RSS subscribers. I know that the usual method is to inspect server logs, but this site is hosted on GitHub pages so I don't think this is possible. To what extent does requiring JavaScript in order to log a page view filter out bots and crawlers? chart.js Plotly plotly.js Übersicht 1 2 4 5 Site Analytics ↩ ↩ ↩ this ↩ Ry's Git Tutorial ↩",
      "length": 3353,
      "tokens": 715,
      "chunks": [
        {
          "blog_title": "Building my own web analytics",
          "blog_url": "https://www.johnmathews.is/blog/building-my-own-site-analytics",
          "blog_date": "June 22, 2021",
          "content": "/metrics Page views per day, Unique IP addresses per day Views per page per day. Hacker News here article Google Analytics felt like overkill. It has so many data-points that the useful metrics are obscured. I also like this site to load quickly and GA makes it slower. I've also tried CloudFlare Analytics. It's a lot simpler than GA and better suits my use case, but I don't think its accurate. 1 I know from my work visualizing data and building dashboards that the metrics presented will alter the users perception of the underlying reality. The way that someone thinks about their impact on a business, the value they've produced, or the dynamics of the underlying system (a product's quality, site performance, growth, etc) is influenced by the design decisions I make, such as which metrics are available, how easy they are to access, or which metrics are above the fold.",
          "content_length": 878,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Building my own web analytics",
          "blog_url": "https://www.johnmathews.is/blog/building-my-own-site-analytics",
          "blog_date": "June 22, 2021",
          "content": "If I present a particular metric as if its important, it will be difficult for someone who uses the dashboard to resist this implied message. They'll eventually consider the metric as a Key Indicator of some kind. For these reasons I wanted to see only the most important metrics about my website, and I wanted to see them in a simple way without distraction. The only metrics I'm interested in are: How many people are reading my site What are they reading How much are they reading. I'd like to be able to infer whether I have a few people who read a lot, or a lot of people who read a little. (Or, as is the case, a few people who read a little.) The main reason for making my own analytics tool it because its a fun challenge with an obvious and useful result. Building it required connecting a few technologies - Serverless Computing (Cloud Functions on GCP), NoSQL databases (DataStore), JavaScript, HTTP headers.",
          "content_length": 919,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Building my own web analytics",
          "blog_url": "https://www.johnmathews.is/blog/building-my-own-site-analytics",
          "blog_date": "June 22, 2021",
          "content": "2 The analytics \"engine\" works by consuming a request that is sent by the client each time a page is loaded. The request is parsed by a Cloud Function on GCP which extracts the page URL and the IP address. This is then recorded in a DataStore database along with the current date and time. Viewing the analytics is as simple (and as complicated) as making a request to the database, parsing the data and visualizing it conveniently. For example, group the data by days and count the distinct IP Addresses to figure out how many people are visiting each day. This is achieved by making a request to another Cloud Function that returns a response with a JSON payload. chart.js I haven't figured out how to easily test cloud functions locally - it would require setting up a NoSQL database and mocking Flask requests and responses. Instead of doing that, I watched Peaky Blinders for a couple of minutes whilst each new version of the Cloud Function was deploying.",
          "content_length": 961,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Building my own web analytics",
          "blog_url": "https://www.johnmathews.is/blog/building-my-own-site-analytics",
          "blog_date": "June 22, 2021",
          "content": "Eventually I'll want to group the metrics by week or month I expect. It'll be a good way of learning and playing with cloud technologies and JavaScript. 3 /analytics.html blog post Machine Vision demo I'd be interested to know if there is a way to track RSS subscribers. I know that the usual method is to inspect server logs, but this site is hosted on GitHub pages so I don't think this is possible. To what extent does requiring JavaScript in order to log a page view filter out bots and crawlers? chart.js Plotly plotly.js Übersicht 1 2 4 5 Site Analytics ↩ ↩ ↩ this ↩ Ry's Git Tutorial ↩",
          "content_length": 592,
          "content_tokens": 140,
          "embedding": []
        }
      ]
    },
    {
      "title": "Design Patterns",
      "url": "https://www.johnmathews.is/blog/design-patterns",
      "date": "June 15, 2021",
      "content": "Powerful Python notes Then the YouTube algorithm put the following video on my front page, and down the rabbit hole I went. Take a look at the Borg design pattern. These are some additional resources: Java Design Patterns SourceMaking python-3-patterns-idioms-test fair repo fork Some pdf resources, including the GoF book: [All the GoF patterns](/documents/design-patterns/All the GoF Patterns.pdf) GoF_Design_Patterns_Reference c logica GoF catalogue Design-Patterns [securing GoF design patterns](/documents/design-patterns/securing GoF design petterns.pdf) Wikipedia",
      "length": 570,
      "tokens": 141,
      "chunks": [
        {
          "blog_title": "Design Patterns",
          "blog_url": "https://www.johnmathews.is/blog/design-patterns",
          "blog_date": "June 15, 2021",
          "content": "Powerful Python notes Then the YouTube algorithm put the following video on my front page, and down the rabbit hole I went. Take a look at the Borg design pattern. These are some additional resources: Java Design Patterns SourceMaking python-3-patterns-idioms-test fair repo fork Some pdf resources, including the GoF book: [All the GoF patterns](/documents/design-patterns/All the GoF Patterns.pdf) GoF_Design_Patterns_Reference c logica GoF catalogue Design-Patterns [securing GoF design patterns](/documents/design-patterns/securing GoF design petterns.pdf) Wikipedia",
          "content_length": 570,
          "content_tokens": 141,
          "embedding": []
        }
      ]
    },
    {
      "title": "Coding exercise for a technical interview",
      "url": "https://www.johnmathews.is/blog/stoic-interview-technical-exercise",
      "date": "June 14, 2021",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "Coding exercise for a technical interview",
          "blog_url": "https://www.johnmathews.is/blog/stoic-interview-technical-exercise",
          "blog_date": "June 14, 2021",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "Choose Boring Technology",
      "url": "https://www.johnmathews.is/blog/choose-boring-technology",
      "date": "June 07, 2021",
      "content": "I'm surprised I haven't posted this before because the \"choose boring tech\" article by Dan McKinley made a big impression when I first read it, about 3 years ago. original article humorous slide show version Key takeaways, based on my memory of reading it a couple years ago: Boring tech is that which is mature enough and that you know well enough that you are familiar with its shortcomings, and that will let you build something quickly You get 3 innovation tokens for each project or stack. Choosing some new and exciting bit of tech requires spending 1 of those tokens. A nice alternative title for this is \"How to be old, for young people\", which is really incisive. In addition to the advice in the article, I read somewhere else that the probability of something continuing to exist in future, and be actively maintained and supported, is approximately the amount of time that it has already existed, and been supported and maintained. I'm not even sure that makes sense, but it bears considering. Source? This should be on my imaginary list of \"things I should read every couple of years\". Actually, a few lists might be really useful. A list of python articles, a list of advice articles, etc. It would be similar to the books page, which is just a list of book articles.",
      "length": 1281,
      "tokens": 265,
      "chunks": [
        {
          "blog_title": "Choose Boring Technology",
          "blog_url": "https://www.johnmathews.is/blog/choose-boring-technology",
          "blog_date": "June 07, 2021",
          "content": "I'm surprised I haven't posted this before because the \"choose boring tech\" article by Dan McKinley made a big impression when I first read it, about 3 years ago. original article humorous slide show version Key takeaways, based on my memory of reading it a couple years ago: Boring tech is that which is mature enough and that you know well enough that you are familiar with its shortcomings, and that will let you build something quickly You get 3 innovation tokens for each project or stack. Choosing some new and exciting bit of tech requires spending 1 of those tokens. A nice alternative title for this is \"How to be old, for young people\", which is really incisive. In addition to the advice in the article, I read somewhere else that the probability of something continuing to exist in future, and be actively maintained and supported, is approximately the amount of time that it has already existed, and been supported and maintained. I'm not even sure that makes sense, but it bears considering. Source? This should be on my imaginary list of \"things I should read every couple of years\" Actually, a few lists might be really useful. A list of python articles, a list of advice articles, etc. It would be similar to the books page, which is just a list of book articles.",
          "content_length": 1279,
          "content_tokens": 265,
          "embedding": []
        }
      ]
    },
    {
      "title": "An incomplete list of skills senior engineers need",
      "url": "https://www.johnmathews.is/blog/an-incomplete-list-of-skills-senior-engineers-need",
      "date": "June 07, 2021",
      "content": "Camille Fournier Highlights are simply an impulsive \"I can think about this for the next few months.\" After that I might change them. run a meeting write a design doc How to mentor an early-career teammate, a mid-career engineer, a new manager who needs technical advice How to indulge a senior manager who wants to talk about technical stuff that they don’t really understand, without rolling your eyes or making them feel stupid How to explain a technical concept behind closed doors to a senior person too embarrassed to openly admit that they don’t understand it How to influence another team to use your solution instead of writing their own asking for help in a way that makes them feel appreciated lead a project even though you don’t manage any of the people working on the project How to get other engineers to listen to your ideas without making them feel threatened How to listen to other engineers’ ideas without feeling threatened How to give up your baby, that project that you built into something great, so you can do something else How to teach another engineer to care about that thing you really care about (operations, correctness, testing, code quality, performance, simplicity, etc) How to communicate project status to stakeholders How to convince management that they need to invest in a non-trivial technical project build software while delivering incremental value How to craft a project proposal, socialize it, and get buy-in to execute it repeat yourself enough that people start to listen How to pick your battles How to help someone get promoted How to get information about what’s really happening (how to gossip, how to network) find interesting work on your own How to tell someone they’re wrong without making them feel ashamed How to take negative feedback gracefully",
      "length": 1803,
      "tokens": 358,
      "chunks": [
        {
          "blog_title": "An incomplete list of skills senior engineers need",
          "blog_url": "https://www.johnmathews.is/blog/an-incomplete-list-of-skills-senior-engineers-need",
          "blog_date": "June 07, 2021",
          "content": "Camille Fournier Highlights are simply an impulsive \"I can think about this for the next few months.\" After that I might change them.",
          "content_length": 133,
          "content_tokens": 30,
          "embedding": []
        },
        {
          "blog_title": "An incomplete list of skills senior engineers need",
          "blog_url": "https://www.johnmathews.is/blog/an-incomplete-list-of-skills-senior-engineers-need",
          "blog_date": "June 07, 2021",
          "content": "run a meeting write a design doc How to mentor an early-career teammate, a mid-career engineer, a new manager who needs technical advice How to indulge a senior manager who wants to talk about technical stuff that they don’t really understand, without rolling your eyes or making them feel stupid How to explain a technical concept behind closed doors to a senior person too embarrassed to openly admit that they don’t understand it How to influence another team to use your solution instead of writing their own asking for help in a way that makes them feel appreciated lead a project even though you don’t manage any of the people working on the project How to get other engineers to listen to your ideas without making them feel threatened How to listen to other engineers’ ideas without feeling threatened How to give up your baby, that project that you built into something great, so you can do something else How to teach another engineer to care about that thing you really care about (operations, correctness, testing, code quality, performance, simplicity, etc) How to communicate project status to stakeholders How to convince management that they need to invest in a non-trivial technical project build software while delivering incremental value How to craft a project proposal, socialize it, and get buy-in to execute it repeat yourself enough that people start to listen How to pick your battles How to help someone get promoted How to get information about what’s really happening (how to gossip, how to network) find interesting work on your own How to tell someone they’re wrong without making them feel ashamed How to take negative feedback gracefully.",
          "content_length": 1670,
          "content_tokens": 329,
          "embedding": []
        }
      ]
    },
    {
      "title": "Questions for good references",
      "url": "https://www.johnmathews.is/blog/questions-for-good-references",
      "date": "May 27, 2021",
      "content": "Use the following questions to get better references: What was the problem you had before you used the solution I helped develop? What did the frustration feel like as you tried to solve the problem? What was different about the solution I worked on compared to previous efforts? Take us to the moment you realized our solution was actually working to solve the problem? What does life look like now that the problem is being solved? Customize the text as necessary, for products or services, complete solutions are a component of a larger solution. template Building a story brand",
      "length": 581,
      "tokens": 109,
      "chunks": [
        {
          "blog_title": "Questions for good references",
          "blog_url": "https://www.johnmathews.is/blog/questions-for-good-references",
          "blog_date": "May 27, 2021",
          "content": "Use the following questions to get better references: What was the problem you had before you used the solution I helped develop? What did the frustration feel like as you tried to solve the problem? What was different about the solution I worked on compared to previous efforts? Take us to the moment you realized our solution was actually working to solve the problem? What does life look like now that the problem is being solved? Customize the text as necessary, for products or services, complete solutions are a component of a larger solution. template Building a story brand",
          "content_length": 581,
          "content_tokens": 109,
          "embedding": []
        }
      ]
    },
    {
      "title": "Lessons from 45 years in the software industry",
      "url": "https://www.johnmathews.is/blog/45-years-in-software",
      "date": "May 27, 2021",
      "content": "article Beware the curse of knowledge Focus on the fundamentals; Teamwork, Trust, Testing, Communication, Code Design Simplicity Seek first to understand Beware lock-in - cost of change, swapping problems Be honest and acknowledge when you don't fit the role",
      "length": 258,
      "tokens": 50,
      "chunks": [
        {
          "blog_title": "Lessons from 45 years in the software industry",
          "blog_url": "https://www.johnmathews.is/blog/45-years-in-software",
          "blog_date": "May 27, 2021",
          "content": "article Beware the curse of knowledge Focus on the fundamentals; Teamwork, Trust, Testing, Communication, Code Design Simplicity Seek first to understand Beware lock-in - cost of change, swapping problems Be honest and acknowledge when you don't fit the role",
          "content_length": 258,
          "content_tokens": 50,
          "embedding": []
        }
      ]
    },
    {
      "title": "Modeling Credit Risk",
      "url": "https://www.johnmathews.is/blog/data-exploration-exercise",
      "date": "May 25, 2021",
      "content": "This analysis was a technical exercise I completed as part of a job application. It's a brief demonstration of some of my statistics and programming skills and was written in a Jupyter Notebook.",
      "length": 194,
      "tokens": 40,
      "chunks": [
        {
          "blog_title": "Modeling Credit Risk",
          "blog_url": "https://www.johnmathews.is/blog/data-exploration-exercise",
          "blog_date": "May 25, 2021",
          "content": "This analysis was a technical exercise I completed as part of a job application. It's a brief demonstration of some of my statistics and programming skills and was written in a Jupyter Notebook.",
          "content_length": 194,
          "content_tokens": 40,
          "embedding": []
        }
      ]
    },
    {
      "title": "Building A Story Brand",
      "url": "https://www.johnmathews.is/blog/building-a-story-brand",
      "date": "May 17, 2021",
      "content": "\"Building a story brand\" by Donald Miller is one of the most helpful marketing books I've found. It explains why things should be done, as well as how to do them. As an engineer I love solutions to problems that start from first principles, and this feels like that. It's strategy as well as tactics. These are my notes on an outstanding book. Contents: > Premise > Story Gaps > Apple > Stories > Hero > Problem > Guide > Characteristics of a guide > 1. Empathy → Understanding → Trust > 2. Authority > Recap > Plan > Process Plan > Agreement Plan > A Call To Action > Direct Calls > Transitional Calls > What is at stake? > Avoid Failure > Recipe > End with Success > People want your brand to participate in their transformation > Implementation > Websites > Corporations > Marketing Road-map > Five steps, expanded below: > 1. One-liner > Example answers to the question \"What do you do?\": > 2. Create a lead generator > 3. An automated email campaign > 4. Collect and tell stories of transformation > 5. Create a system to incentivise referrals survive and thrive obvious benefit quick and easy to understand message People are compelled to pay attention until all the \"story gaps\" have been closed Could a caveman look at your website and answer these questions: offer improve next steps A gap between a character and what they want. Will they find their way to success, overcome their challenges, etc. Cadence and momentum are defined by the creation and fulfillment of story gaps. If you fail to define something that the customer wants, you fail to open a story gap. This makes the story uninteresting because there isn't a question that requires an answer. Story gaps work because we want things to resolve. It's like singing Twinkle Twinkle Little Star but stopping before the \"are\" on the last line. You need to hear the last note of the melody for the tune to feel complete. Pare down the customers desire to a single focus. Make your brand known for single specific desire and helping people get it. Don't clutter the story by diluting the hero's desire with other desires. You can eventually develop subplots. When Apple released the Lisa computer in 1983, Jobs bought a 9 page ad in the New York times listing the computers features. When Jobs returned to Apple after being fired, (and after partly founding Pixar, which tells stories) Apple became a customer centric company, and their marketing was about the customers. 9 pages became 2 words - \"Think Different\". A message about their customers, and their customers need to survive and thrive. Apple isn't the hero in the \"Think Different\" brand, the customer is. It's the same with Nike - the athletes are the heros, and you can become a (hero) athlete with Nike's help. Apple plays a role more like Q in James Bond, giving the hero what they need to win. Hero Problem Guide Plan Action Success Failure The customer, not you. You are the guide. The customer is the main character in their life and is battling internal and external adversity it order to survive and thrive. Heroes have weaknesses, the guide is usually the strongest character. external internal philosophical Your first task is to create a story gap that implicitly asks \"Will the hero get what they need?\" You need to define the character's ambition at the beginning, so that the audience knows what's at stake and what kind of a story it is. This messaging implicitly tells them how they could benefit and why they should spend attention. Customers are more motivated to solve internal problems than external. identify a customer's problem then you show that you understand The more we talk about the problems our customers are experiencing, the more interest they will have in our brand. Every story needs a villain, which is the personified problem. The germs are personified, envy is personified, etc. The diminished social status is personified by someone with more status being villainized. villain relatable root source singular real problem External Internal Philosophical villain external hero internal philosophically wrong The purpose of the external problem is to manifest the internal problem. Customers should recognise and relate to both types of problem. external problem Resources Social Generosity Purpose internal frustration identify and articulate that frustration clearly, confidently and repeatedly offer to solve it along with the original external problem Philosophical problems resolve all three problems in the same transaction When Anakin Skywalker blows up the Deathstar by aiming the perfect shot, he defeats the external problem (the enemy army), his internal problem (self doubt) and the philosophical problem (injustice). Your CTA is the action that must be taken to close the final story gap Checklist: single villain external problem The internal problem is probably found by considering how the external problem makes your customer feel? What is unjust or wrong about the suffering caused by that villain? Our hero is being challenged - will they be able to solve their problem? The only way to find out is to engage with the brand. Customers aren't looking for another hero, they are the hero in their life. They are the main character which the movie of their life revolves around. They're looking for a guide because they need help. A persons life is made up of many acts - \"doorways of no return\". Each life is unique but we all have commonalities. We are all on transformational journeys with common elements. Story chapters are book-ended by events. These events are always instigated by external actors or events beyond their control. trustworthy respect We wake up each morning self-identifying as a hero. We are troubled by internal, external and philosophical issues. We know that we can't solve our issues on our own. This insight has consequences and raises questions, it means our story isn't about us but about others. We can aspire to be someone else's guide, but not their hero. It shows why the search for meaning is innate, but can only be resolved by becoming a servant or guide. Stop losing sleep over the success of your company and start losing sleep over the success of your customers. In stories, heroes are not the strongest characters, they have self-doubt and are often ill-equipped. They are often reluctant, and are thrown into the story by external events. They are \"chosen by destiny.\" In contrast, the guide has already \"been there and done that.\" They have already conquered the hero's internal and philosophical challenges in their own backstory. The guide is the one with authority which the authority instinctively recognises and accepts. The guide has much more authority than the hero but the main character is still the hero. Those who realize that the epic story of life is not about them end up winning in the end. This is paradoxical. Those who think they are a hero and win usually end up being remembered as a villain. Empathy and Authority are a precise one-two punch. When we empathise with customers we show that we understand them, and understanding produces trust. seen, heard and understood Key phrases in your marketing copy could be: we understand how it feels to ... no-one should have to experience ... like you, we are frustrated by ... Expressing empathy isn't difficult. Once you've identified your customers internal problem, let them know that you understand and would like to help them find a resolution. Brains like to conserve calories, energy, effort, time, so when a customer realises they have a lot in common with a brand, they fill in any gaps with trust. A customer will \"batch\" their thoughts, which means they are thinking in chunks rather than in details. Commonality, whether in music taste or values, is a powerful marketing tool. do competence demonstrable competence four ways to add authority (competence) to your marketing Testimonials Logos Statistics Awards Meeting a brand is like meeting a person, better life associate their identity respect trust We started the narrative by identifying something that the hero wants. Then we created intrigue and tension by defining the hero's problem. The audience wants to know if we can help them overcome the problem! Then we introduced ourselves as the guide and established authority, empathy and trust. What next? Making a purchase always involves a small risk of wasting money. This risky element makes a purchase somewhat similar to starting a relationship. There is a potential downside, the customer might end up feeling foolish and regret their decision. Imagine a customer trying to cross a river to get to their purchase. They can hear the sound of a waterfall downstream. If they try to cross it by making a purchase then there is a chance that something bad could happen. Put stones in the river so they know how to safely walk across, step by step. The stones are the plan. In a movie, the guide gives the hero a plan. The plan tightens the focus of the movie and creates a \"path of hope\" for the hero that might, possibly, lead to the resolution of the hero's problems. It creates a story gap and implicitly creates questions that the audience want to be answered. removes risk explains what to do Even though the setup or purchase or after-purchase steps are obvious to us, they are not obvious to customers. Give them a plan and they will feel more confident about purchasing. Heroes trust a guide who has a plan. People are looking for a philosophy then can embody, or a series of steps they can take to solve their problems. Customers want to know where you can take them. Unless you can take them somewhere they want to go, why would they listen? The marketing goal is that every potential customer knows where we want to take them. Define a desire for your customer, and your marketing story will have a powerful hook. There are two kinds of plan. Both work by earning trust and offering the customer a clear path to stability. Agreement Plan Process Plan or Make an appointment. Allow us to create a customized plan. Let's execute the plan together. A process plan removes confusion from the customers journey. When they see the plan they think \"oh that's not difficult, I can do that\" and then they purchase. use alleviating fears highlight shared values Give the agreement plan a good name and it can increase the perceived value of your product. \"the easy-installation plan\", \"your best nights sleep ever\", etc. Agreement plans can work in the background, they don't have to be on the landing page, though they could be. Make an agreement plan by creating a list of all the things a customer could be fearful about when doing business with you (haggling for price, interacting with a pushy salesman, buying a defective product) and then create an promise that would nullify that fear. desire challenges empathized competency plan Heroes only take action when challenged by an external force. must We are the external force that guides our customers to success. Heroes need to be challenged by external forces. Calls to action should be clear, and should be repeated over and over. Above the fold, in the center of the page. Also in the navbar. And also repeatedly as they scroll down the page. Customers are bombarded with adverts and calls-to-action all day every day. They are ignoring things and filtering out noise all the time. So don't be shy or subtle. Be very clear. Make it very simple. If you have confidence in your product, make confident calls to action. Buy Now Schedule an Appointment Order Now Call Today Register Today Repeat the same (singular, simple) call to action again and again down the page. Download our free PDF guide to growing your business Free information - advice, guides, whitepapers, reports Giving something away for free Testimonials Samples Free-trials A good transitional CTA does three things: Changes the customers perception of you - it establishes your expertise and authority. Creates reciprocity, you offer them something of value before you ask for their money. Positions you as a guide for the next steps. Use both types of CTA (direct and transitional) in your messaging. Then customers will understand (simply and without burning calories) what you want them to do in order to solve their problems. If nothing is about to be gained or lost then nobody cares. If there is no benefit to buying the product, then why buy it? not buying A hero in a story only ever has 2 motivations - to escape pain or experience something good. Life is like that too, our desire to avoid pain motivates us to make a change. There needs to be meaningful and consequential stakes in the story, otherwise it isn't interesting. Each scene needs to move the hero either closer to or further from their tragic external threat. A brand needs to answer the \"what if I don't buy\" question You can do it humorously or lightly. Don't make a big negative scary thing out of it - failure is salt to add flavor, not a main marketing ingredient. Compare the fear to the peace and stability that could be achieved. If you show the pain \"before\" and contrast it to peace and stability \"after\" then you've opened and closed a story loop. Blog titles, email subjects, headlines, can all contain elements of potential failure to convey a sense of urgency. Bring up the negative stakes a bit. People fear losing $100 more than they desire gaining $100 - loss and pain is more motivating than reward and peace. Let the reader know they are vulnerable to a threat. \"X% of Y get W\" are Give the customer a clear, concise simple plan to reduce their vulnerability. \"We offer the thing you need\" Challenge people to take the next step right now. The CTA. \"Call us today to arrange an appointment\" Agitate a bit of fear, and then return the reader to peace and prosperity, all within 1 or 2 paragraphs. What are you helping your customers avoid? It's only a little salt to add flavor. If it's too little, customers won't know why your product is important. If it's too strong it'll be off-putting. Humans are looking for resolution to their external, internal and philosophical problems. They can achieve this though status, self-realization, self-acceptance, and transcendence (among other things). If you product or service can help people achieve this then it should be a central part of your brand promise. People want to change their lives and be taken into a new reality. Tell them how their lives are going to improve - peace, status, confidence, abilities, preparedness. \"We're going to put a man on the moon\" \"We would like a highly competitive and successful space program\" Use this table to show how your customer's lives will change. It will give lots of good copy for your marketing: Before your brand After your brand What do they have? What are they feeling? What's an average day like What is their status? Talk about the end vision really clearly. And use images of happy, successful, powerful people enjoying the benefits of your product. Say the benefits loudly, confidently, clearly, simply, repeatedly. Talk about your end-vision for their lives once they've benefited from your service. Show the customer a vision of how great their life will be if they do business with you. Ultimately, the end of the story should be a list of resolutions to your customers problems. How do they feel and how have philosophical/justice questions been resolved? Stories usually end in one of three ways: gains status Offer access - get a free coffee. Offer a premium - skip the line. Create scarcity - write \"limited\" on it. Identity association - wear a Rolex and be associated with what Rolex stands for. becomes whole The hero needed something they couldn't get themselves, and external provision has saved them. Reduced anxiety, or more security. Reduces effort, or more convenience. More time, reaches an aspirational lifestyle. confidence to overcome Inspiration - chariots of fire - you can also run really fast Acceptance - fashion brands doing positive body image Transcendence - greater purpose and meaning - fair-trade coffee A hero needs someone else to step into their life, tell them they are different and special and better. That someone is a guide, that's you. Offering an aspirational identity to our customers adds a lot of value to our products and services. Realise that your customers want to transform and improve themselves. People are looking for a guide What does the customer want to become? what is their aspirational identity? what kind of person do they want to be? How do they want their friends to talk about them? Being a guide is a position of the heart, not just a marketing tactic. Lose sleep over your customers problems instead of your business. Commit to solving their internal, external and philosophical problems, and give them a vision to aspire to. Customers needs to be told very clearly how much other customers have changed and how far journey has taken them. Usually, the hero is deeply flawed right up until the final climactic scene. Not all elements of a story should be used evenly. Above the fold, use the one-liner. It's one sentence saying what's in it for the customer. What problem do you solve, what aspirational identity do you offer. It will also give customers words they can use to tell others about your business. Big obvious calls to action, in multiple places. Don't be timid. Customers read in a Z shape. The fewer words you use, the more likely they will be read. Perhaps 10 sentences on the entire landing page Increase the amount of text towards the bottom. The top needs to be short, fast, positive and obvious. Use a \"read more\" button to expand longer text, then customers have the option if they want. Place a transitional call to action next to the main call to action. \"Download a guide\" next to \"buy now\". Put the transitional CTA in less bright colors. Repeatedly ask people to buy, twice above the fold and then in subsequent sections. If you don't tell people what to do then they won't do it. Include images of success - people enjoying the benefits - resolved problems, aspirations achieved, closed story loops. A sense of health, well-being and satisfaction. The flow of the landing page should follow the StoryBrand framework, albeit not exactly. Not applicable, but if you're a manager and you give your team a narrative they can fit themselves into I guess they're going to have more purpose, confidence and meaning. one-liner lead generator email campaign transformation referrals The one-liner is a statement. It could be more than 1 sentence, but its supposed to be super short. It's the equivalent of a logline for a movie. Keep editing it until you find a version that works. Memorize it, put it on your website, and include it in every piece of marketing collateral you create. You could tell this to anybody and they would understand what you do. Helps people realize they need your services. Provoke imagination and intrigue. A character (\"A busy mom\", \"A retiree\") A problem - don't miss an opportunity to talk about a customers challenges. Define the problem as vitally important, it opens a story gap and customers will want you to close it. A plan - hint at it. You can't explain it all in a one-liner. Success - paint an image of life after a customer has bought your services. \"We provide busy moms with a short, meaningful workout they can use to stay healthy and have renewed energy\" vs \"I run a gym\". \"We help retired couples who want to escape the cold avoid the hassle of a second mortgage while still enjoying the warm beautiful weather of Florida during the winter\" vs \"I got involved in real estate a few years ago and when we had out second kid we moved to Florida and then....\" A guide to download. A free webinar or online course. Software demo or free trials. Free samples. Live events. No need to reinvent the wheel, what are others doing? You can give away quite a lot of value that is easy to consume in an email or PDF - people will consume it quickly and will probably be happy to pay for a chance to learn in a more thorough and detailed context. Downloadable guides etc should be about 3 pages in length. Be generous, explain the \"why\" and give away as much of the \"how\" as possible. Even if customers don't click the links in the email, they keep seeing your brand and they become familiar with it. When they need your services you will be the go-to brand in their mind. The relationship and association is already built. Nurturing emails and Call-To-Action emails - 3:1 - put real value in the nurturing emails. Don't be passive in the CTA emails - you want them to buy, so tell them, repeatedly, and make it easy. Talk about a problem Describe a product you offer that solves the problem Describe what life can look once the customer has bought your product and solved their problem Call the customer to an action that leads directly to a sale. Similar to a nurturing email, a direct action email also describes a problem and a solution, but in the direct email the solution is a product you sell and there is a strong call to action. A lot of the content can be taken from the StoryBrand script. A great testimonial gives customers the gift of going second, and lowering the riskiness of purchasing. A good testimonial will: showcase the value you create the results the experience what transformation has occurred? Few things are more important to a good story than a hero that experiences an external and internal and philosophical transformation. This is because everyone desires to be transformed in someway. People love businesses that help them transform in some way. Questions to get a good testimonial: What was the problem you were having before you discovered our product? What did the frustration feel like as you experienced that problem? What was different about out product? Take us to the moment when you realized our product was actually working to solve your problem? Tell us what life looks like now that your problem is solved or being solved? Identify your existing ideal customers Give them a reason to talk about you - create a video or a PDF that a customer can send to their friends to help them introduce your brand and explain the value you deliver. Offer a reward - a discount, more access, extra samples, etc",
      "length": 22283,
      "tokens": 4563,
      "chunks": [
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "\"Building a story brand\" by Donald Miller is one of the most helpful marketing books I've found. It explains why things should be done, as well as how to do them. As an engineer I love solutions to problems that start from first principles, and this feels like that. It's strategy as well as tactics. These are my notes on an outstanding book. Contents: > Premise > Story Gaps > Apple > Stories > Hero > Problem > Guide > Characteristics of a guide > 1. Empathy → Understanding → Trust > 2. Authority > Recap > Plan > Process Plan > Agreement Plan > A Call To Action > Direct Calls > Transitional Calls > What is at stake? > Avoid Failure > Recipe > End with Success > People want your brand to participate in their transformation > Implementation > Websites > Corporations > Marketing Road-map > Five steps, expanded below: > 1.",
          "content_length": 829,
          "content_tokens": 182,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "One-liner > Example answers to the question \"What do you do?\": > 2. Create a lead generator > 3. An automated email campaign > 4. Collect and tell stories of transformation > 5. Create a system to incentivise referrals survive and thrive obvious benefit quick and easy to understand message People are compelled to pay attention until all the \"story gaps\" have been closed Could a caveman look at your website and answer these questions: offer improve next steps A gap between a character and what they want. Will they find their way to success, overcome their challenges, etc. Cadence and momentum are defined by the creation and fulfillment of story gaps. If you fail to define something that the customer wants, you fail to open a story gap. This makes the story uninteresting because there isn't a question that requires an answer. Story gaps work because we want things to resolve. It's like singing Twinkle Twinkle Little Star but stopping before the \"are\" on the last line.",
          "content_length": 980,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "You need to hear the last note of the melody for the tune to feel complete. Pare down the customers desire to a single focus. Make your brand known for single specific desire and helping people get it. Don't clutter the story by diluting the hero's desire with other desires. You can eventually develop subplots. When Apple released the Lisa computer in 1983, Jobs bought a 9 page ad in the New York times listing the computers features. When Jobs returned to Apple after being fired, (and after partly founding Pixar, which tells stories) Apple became a customer centric company, and their marketing was about the customers. 9 pages became 2 words - \"Think Different\" A message about their customers, and their customers need to survive and thrive. Apple isn't the hero in the \"Think Different\" brand, the customer is. It's the same with Nike - the athletes are the heros, and you can become a (hero) athlete with Nike's help.",
          "content_length": 927,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Apple plays a role more like Q in James Bond, giving the hero what they need to win. Hero Problem Guide Plan Action Success Failure The customer, not you. You are the guide. The customer is the main character in their life and is battling internal and external adversity it order to survive and thrive. Heroes have weaknesses, the guide is usually the strongest character. external internal philosophical Your first task is to create a story gap that implicitly asks \"Will the hero get what they need?\" You need to define the character's ambition at the beginning, so that the audience knows what's at stake and what kind of a story it is. This messaging implicitly tells them how they could benefit and why they should spend attention. Customers are more motivated to solve internal problems than external. identify a customer's problem then you show that you understand The more we talk about the problems our customers are experiencing, the more interest they will have in our brand. Every story needs a villain, which is the personified problem.",
          "content_length": 1049,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "The germs are personified, envy is personified, etc. The diminished social status is personified by someone with more status being villainized. villain relatable root source singular real problem External Internal Philosophical villain external hero internal philosophically wrong The purpose of the external problem is to manifest the internal problem. Customers should recognise and relate to both types of problem. external problem Resources Social Generosity Purpose internal frustration identify and articulate that frustration clearly, confidently and repeatedly offer to solve it along with the original external problem Philosophical problems resolve all three problems in the same transaction When Anakin Skywalker blows up the Deathstar by aiming the perfect shot, he defeats the external problem (the enemy army), his internal problem (self doubt) and the philosophical problem (injustice)",
          "content_length": 900,
          "content_tokens": 153,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Your CTA is the action that must be taken to close the final story gap Checklist: single villain external problem The internal problem is probably found by considering how the external problem makes your customer feel? What is unjust or wrong about the suffering caused by that villain? Our hero is being challenged - will they be able to solve their problem? The only way to find out is to engage with the brand. Customers aren't looking for another hero, they are the hero in their life. They are the main character which the movie of their life revolves around. They're looking for a guide because they need help. A persons life is made up of many acts - \"doorways of no return\" Each life is unique but we all have commonalities. We are all on transformational journeys with common elements. Story chapters are book-ended by events. These events are always instigated by external actors or events beyond their control.",
          "content_length": 921,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "trustworthy respect We wake up each morning self-identifying as a hero. We are troubled by internal, external and philosophical issues. We know that we can't solve our issues on our own. This insight has consequences and raises questions, it means our story isn't about us but about others. We can aspire to be someone else's guide, but not their hero. It shows why the search for meaning is innate, but can only be resolved by becoming a servant or guide. Stop losing sleep over the success of your company and start losing sleep over the success of your customers. In stories, heroes are not the strongest characters, they have self-doubt and are often ill-equipped. They are often reluctant, and are thrown into the story by external events. They are \"chosen by destiny.\" In contrast, the guide has already \"been there and done that.\" They have already conquered the hero's internal and philosophical challenges in their own backstory.",
          "content_length": 938,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "The guide is the one with authority which the authority instinctively recognises and accepts. The guide has much more authority than the hero but the main character is still the hero. Those who realize that the epic story of life is not about them end up winning in the end. This is paradoxical. Those who think they are a hero and win usually end up being remembered as a villain. Empathy and Authority are a precise one-two punch. When we empathise with customers we show that we understand them, and understanding produces trust. seen, heard and understood Key phrases in your marketing copy could be: we understand how it feels to .. no-one should have to experience .. like you, we are frustrated by .. Expressing empathy isn't difficult. Once you've identified your customers internal problem, let them know that you understand and would like to help them find a resolution.",
          "content_length": 880,
          "content_tokens": 176,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Brains like to conserve calories, energy, effort, time, so when a customer realises they have a lot in common with a brand, they fill in any gaps with trust. A customer will \"batch\" their thoughts, which means they are thinking in chunks rather than in details. Commonality, whether in music taste or values, is a powerful marketing tool. do competence demonstrable competence four ways to add authority (competence) to your marketing Testimonials Logos Statistics Awards Meeting a brand is like meeting a person, better life associate their identity respect trust We started the narrative by identifying something that the hero wants. Then we created intrigue and tension by defining the hero's problem. The audience wants to know if we can help them overcome the problem! Then we introduced ourselves as the guide and established authority, empathy and trust. What next? Making a purchase always involves a small risk of wasting money. This risky element makes a purchase somewhat similar to starting a relationship.",
          "content_length": 1018,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "There is a potential downside, the customer might end up feeling foolish and regret their decision. Imagine a customer trying to cross a river to get to their purchase. They can hear the sound of a waterfall downstream. If they try to cross it by making a purchase then there is a chance that something bad could happen. Put stones in the river so they know how to safely walk across, step by step. The stones are the plan. In a movie, the guide gives the hero a plan. The plan tightens the focus of the movie and creates a \"path of hope\" for the hero that might, possibly, lead to the resolution of the hero's problems. It creates a story gap and implicitly creates questions that the audience want to be answered. removes risk explains what to do Even though the setup or purchase or after-purchase steps are obvious to us, they are not obvious to customers. Give them a plan and they will feel more confident about purchasing.",
          "content_length": 929,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Heroes trust a guide who has a plan. People are looking for a philosophy then can embody, or a series of steps they can take to solve their problems. Customers want to know where you can take them. Unless you can take them somewhere they want to go, why would they listen? The marketing goal is that every potential customer knows where we want to take them. Define a desire for your customer, and your marketing story will have a powerful hook. There are two kinds of plan. Both work by earning trust and offering the customer a clear path to stability. Agreement Plan Process Plan or Make an appointment. Allow us to create a customized plan. Let's execute the plan together. A process plan removes confusion from the customers journey. When they see the plan they think \"oh that's not difficult, I can do that\" and then they purchase. use alleviating fears highlight shared values Give the agreement plan a good name and it can increase the perceived value of your product.",
          "content_length": 976,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "\"the easy-installation plan\", \"your best nights sleep ever\", etc. Agreement plans can work in the background, they don't have to be on the landing page, though they could be. Make an agreement plan by creating a list of all the things a customer could be fearful about when doing business with you (haggling for price, interacting with a pushy salesman, buying a defective product) and then create an promise that would nullify that fear. desire challenges empathized competency plan Heroes only take action when challenged by an external force. must We are the external force that guides our customers to success. Heroes need to be challenged by external forces. Calls to action should be clear, and should be repeated over and over. Above the fold, in the center of the page. Also in the navbar. And also repeatedly as they scroll down the page. Customers are bombarded with adverts and calls-to-action all day every day.",
          "content_length": 923,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "They are ignoring things and filtering out noise all the time. So don't be shy or subtle. Be very clear. Make it very simple. If you have confidence in your product, make confident calls to action. Buy Now Schedule an Appointment Order Now Call Today Register Today Repeat the same (singular, simple) call to action again and again down the page. Download our free PDF guide to growing your business Free information - advice, guides, whitepapers, reports Giving something away for free Testimonials Samples Free-trials A good transitional CTA does three things: Changes the customers perception of you - it establishes your expertise and authority. Creates reciprocity, you offer them something of value before you ask for their money. Positions you as a guide for the next steps. Use both types of CTA (direct and transitional) in your messaging.",
          "content_length": 848,
          "content_tokens": 176,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Then customers will understand (simply and without burning calories) what you want them to do in order to solve their problems. If nothing is about to be gained or lost then nobody cares. If there is no benefit to buying the product, then why buy it? not buying A hero in a story only ever has 2 motivations - to escape pain or experience something good. Life is like that too, our desire to avoid pain motivates us to make a change. There needs to be meaningful and consequential stakes in the story, otherwise it isn't interesting. Each scene needs to move the hero either closer to or further from their tragic external threat. A brand needs to answer the \"what if I don't buy\" question You can do it humorously or lightly. Don't make a big negative scary thing out of it - failure is salt to add flavor, not a main marketing ingredient. Compare the fear to the peace and stability that could be achieved.",
          "content_length": 908,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "If you show the pain \"before\" and contrast it to peace and stability \"after\" then you've opened and closed a story loop. Blog titles, email subjects, headlines, can all contain elements of potential failure to convey a sense of urgency. Bring up the negative stakes a bit. People fear losing $100 more than they desire gaining $100 - loss and pain is more motivating than reward and peace. Let the reader know they are vulnerable to a threat. \"X% of Y get W\" are Give the customer a clear, concise simple plan to reduce their vulnerability. \"We offer the thing you need\" Challenge people to take the next step right now. The CTA. \"Call us today to arrange an appointment\" Agitate a bit of fear, and then return the reader to peace and prosperity, all within 1 or 2 paragraphs. What are you helping your customers avoid? It's only a little salt to add flavor.",
          "content_length": 858,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "If it's too little, customers won't know why your product is important. If it's too strong it'll be off-putting. Humans are looking for resolution to their external, internal and philosophical problems. They can achieve this though status, self-realization, self-acceptance, and transcendence (among other things) If you product or service can help people achieve this then it should be a central part of your brand promise. People want to change their lives and be taken into a new reality. Tell them how their lives are going to improve - peace, status, confidence, abilities, preparedness. \"We're going to put a man on the moon\" \"We would like a highly competitive and successful space program\" Use this table to show how your customer's lives will change.",
          "content_length": 759,
          "content_tokens": 162,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "It will give lots of good copy for your marketing: Before your brand After your brand What do they have? What are they feeling? What's an average day like What is their status? Talk about the end vision really clearly. And use images of happy, successful, powerful people enjoying the benefits of your product. Say the benefits loudly, confidently, clearly, simply, repeatedly. Talk about your end-vision for their lives once they've benefited from your service. Show the customer a vision of how great their life will be if they do business with you. Ultimately, the end of the story should be a list of resolutions to your customers problems. How do they feel and how have philosophical/justice questions been resolved? Stories usually end in one of three ways: gains status Offer access - get a free coffee. Offer a premium - skip the line. Create scarcity - write \"limited\" on it. Identity association - wear a Rolex and be associated with what Rolex stands for.",
          "content_length": 966,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "becomes whole The hero needed something they couldn't get themselves, and external provision has saved them. Reduced anxiety, or more security. Reduces effort, or more convenience. More time, reaches an aspirational lifestyle. confidence to overcome Inspiration - chariots of fire - you can also run really fast Acceptance - fashion brands doing positive body image Transcendence - greater purpose and meaning - fair-trade coffee A hero needs someone else to step into their life, tell them they are different and special and better. That someone is a guide, that's you. Offering an aspirational identity to our customers adds a lot of value to our products and services. Realise that your customers want to transform and improve themselves.",
          "content_length": 741,
          "content_tokens": 146,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "People are looking for a guide What does the customer want to become? what is their aspirational identity? what kind of person do they want to be? How do they want their friends to talk about them? Being a guide is a position of the heart, not just a marketing tactic. Lose sleep over your customers problems instead of your business. Commit to solving their internal, external and philosophical problems, and give them a vision to aspire to. Customers needs to be told very clearly how much other customers have changed and how far journey has taken them. Usually, the hero is deeply flawed right up until the final climactic scene. Not all elements of a story should be used evenly. Above the fold, use the one-liner. It's one sentence saying what's in it for the customer. What problem do you solve, what aspirational identity do you offer. It will also give customers words they can use to tell others about your business. Big obvious calls to action, in multiple places.",
          "content_length": 975,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Don't be timid. Customers read in a Z shape. The fewer words you use, the more likely they will be read. Perhaps 10 sentences on the entire landing page Increase the amount of text towards the bottom. The top needs to be short, fast, positive and obvious. Use a \"read more\" button to expand longer text, then customers have the option if they want. Place a transitional call to action next to the main call to action. \"Download a guide\" next to \"buy now\" Put the transitional CTA in less bright colors. Repeatedly ask people to buy, twice above the fold and then in subsequent sections. If you don't tell people what to do then they won't do it. Include images of success - people enjoying the benefits - resolved problems, aspirations achieved, closed story loops. A sense of health, well-being and satisfaction. The flow of the landing page should follow the StoryBrand framework, albeit not exactly.",
          "content_length": 902,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Not applicable, but if you're a manager and you give your team a narrative they can fit themselves into I guess they're going to have more purpose, confidence and meaning. one-liner lead generator email campaign transformation referrals The one-liner is a statement. It could be more than 1 sentence, but its supposed to be super short. It's the equivalent of a logline for a movie. Keep editing it until you find a version that works. Memorize it, put it on your website, and include it in every piece of marketing collateral you create. You could tell this to anybody and they would understand what you do. Helps people realize they need your services. Provoke imagination and intrigue. A character (\"A busy mom\", \"A retiree\") A problem - don't miss an opportunity to talk about a customers challenges. Define the problem as vitally important, it opens a story gap and customers will want you to close it. A plan - hint at it.",
          "content_length": 928,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "You can't explain it all in a one-liner. Success - paint an image of life after a customer has bought your services. \"We provide busy moms with a short, meaningful workout they can use to stay healthy and have renewed energy\" vs \"I run a gym\" \"We help retired couples who want to escape the cold avoid the hassle of a second mortgage while still enjoying the warm beautiful weather of Florida during the winter\" vs \"I got involved in real estate a few years ago and when we had out second kid we moved to Florida and then....\" A guide to download. A free webinar or online course. Software demo or free trials. Free samples. Live events. No need to reinvent the wheel, what are others doing? You can give away quite a lot of value that is easy to consume in an email or PDF - people will consume it quickly and will probably be happy to pay for a chance to learn in a more thorough and detailed context.",
          "content_length": 903,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Downloadable guides etc should be about 3 pages in length. Be generous, explain the \"why\" and give away as much of the \"how\" as possible. Even if customers don't click the links in the email, they keep seeing your brand and they become familiar with it. When they need your services you will be the go-to brand in their mind. The relationship and association is already built. Nurturing emails and Call-To-Action emails - 3:1 - put real value in the nurturing emails. Don't be passive in the CTA emails - you want them to buy, so tell them, repeatedly, and make it easy. Talk about a problem Describe a product you offer that solves the problem Describe what life can look once the customer has bought your product and solved their problem Call the customer to an action that leads directly to a sale.",
          "content_length": 801,
          "content_tokens": 177,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Similar to a nurturing email, a direct action email also describes a problem and a solution, but in the direct email the solution is a product you sell and there is a strong call to action. A lot of the content can be taken from the StoryBrand script. A great testimonial gives customers the gift of going second, and lowering the riskiness of purchasing. A good testimonial will: showcase the value you create the results the experience what transformation has occurred? Few things are more important to a good story than a hero that experiences an external and internal and philosophical transformation. This is because everyone desires to be transformed in someway. People love businesses that help them transform in some way.",
          "content_length": 729,
          "content_tokens": 138,
          "embedding": []
        },
        {
          "blog_title": "Building A Story Brand",
          "blog_url": "https://www.johnmathews.is/blog/building-a-story-brand",
          "blog_date": "May 17, 2021",
          "content": "Questions to get a good testimonial: What was the problem you were having before you discovered our product? What did the frustration feel like as you experienced that problem? What was different about out product? Take us to the moment when you realized our product was actually working to solve your problem? Tell us what life looks like now that your problem is solved or being solved? Identify your existing ideal customers Give them a reason to talk about you - create a video or a PDF that a customer can send to their friends to help them introduce your brand and explain the value you deliver. Offer a reward - a discount, more access, extra samples, etc.",
          "content_length": 663,
          "content_tokens": 131,
          "embedding": []
        }
      ]
    },
    {
      "title": "My Life Expectancy",
      "url": "https://www.johnmathews.is/blog/my-life-expectancy",
      "date": "May 12, 2021",
      "content": "Weight doesn't matter. Be in \"excellent\" health. Workout 3 or 4 times a week. Drink liquor (or red wine) 3 or 4 times a week (after each workout). Try to be happy, optimistic and relaxed. What are you working so hard for anyway? You need something to do, someone to love, something to hope for. blueprintincome 1 90 year calendar Doing the factors below would apparently give me: 75% chance of living to 92 50% change of living to 101 25% chance of living to 107 There is no additional benefit from working out more than 4 times a week. Once you're fit and working out 4 times a week it doesn't matter if you do more exercise. Being in \"excellent\" health is better than being in \"very good\" health though, so make the workouts count. I guess if it didn't make a difference then it wouldn't be excellent in the first place. I was surprised that having 3-4 drinks each week increases your life expectancy. I thought that it was best to not drink any alcohol at all. 2 According to their regression, my expected longevity is unchanged within a weight range of 78kg - 90kg. I guess it's much more important that I'm in \"excellent\" health, working out 4 times a week and having some wine, rum, or whiskey after each workout. The calculator only asks for quantifiable or physical attributes. It doesn't consider emotional, relational or spiritual factors. projectbiglife ↩ alcohol consumption in later life and reaching longevity: the netherlands cohort study ↩",
      "length": 1455,
      "tokens": 322,
      "chunks": [
        {
          "blog_title": "My Life Expectancy",
          "blog_url": "https://www.johnmathews.is/blog/my-life-expectancy",
          "blog_date": "May 12, 2021",
          "content": "Weight doesn't matter. Be in \"excellent\" health. Workout 3 or 4 times a week. Drink liquor (or red wine) 3 or 4 times a week (after each workout) Try to be happy, optimistic and relaxed. What are you working so hard for anyway? You need something to do, someone to love, something to hope for. blueprintincome 1 90 year calendar Doing the factors below would apparently give me: 75% chance of living to 92 50% change of living to 101 25% chance of living to 107 There is no additional benefit from working out more than 4 times a week. Once you're fit and working out 4 times a week it doesn't matter if you do more exercise. Being in \"excellent\" health is better than being in \"very good\" health though, so make the workouts count. I guess if it didn't make a difference then it wouldn't be excellent in the first place.",
          "content_length": 821,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "My Life Expectancy",
          "blog_url": "https://www.johnmathews.is/blog/my-life-expectancy",
          "blog_date": "May 12, 2021",
          "content": "I was surprised that having 3-4 drinks each week increases your life expectancy. I thought that it was best to not drink any alcohol at all. 2 According to their regression, my expected longevity is unchanged within a weight range of 78kg - 90kg. I guess it's much more important that I'm in \"excellent\" health, working out 4 times a week and having some wine, rum, or whiskey after each workout. The calculator only asks for quantifiable or physical attributes. It doesn't consider emotional, relational or spiritual factors. projectbiglife ↩ alcohol consumption in later life and reaching longevity: the netherlands cohort study ↩",
          "content_length": 632,
          "content_tokens": 132,
          "embedding": []
        }
      ]
    },
    {
      "title": "More VIM Notes",
      "url": "https://www.johnmathews.is/blog/more-vim-notes",
      "date": "May 10, 2021",
      "content": "Contents: > Quickfix list > Registers > Expression register > Substitutions > Command line > Delete stuff without leaving insert mode: > Text objects > Screen Movement > Sources A quickfix list is a set of positions in one or more files A quckfix list is global. Not local to a particular buffer. not A changelist is local to its buffer. 0 1 9 _ - % <C-r>= Type any valid vimscript. The output is inserted into the buffer. :&& :~ q: :<C-f> :UltiSnipsEdit <C-h> <C-w> <C-u> <C-d> <C-t> <C-e> gf gx [m ]m @: >> . >>.. n 3>>.. <C-y> <C-e> <C-f> <C-b> The Valuable Dev Vim for Python",
      "length": 579,
      "tokens": 193,
      "chunks": [
        {
          "blog_title": "More VIM Notes",
          "blog_url": "https://www.johnmathews.is/blog/more-vim-notes",
          "blog_date": "May 10, 2021",
          "content": "Contents: > Quickfix list > Registers > Expression register > Substitutions > Command line > Delete stuff without leaving insert mode: > Text objects > Screen Movement > Sources A quickfix list is a set of positions in one or more files A quckfix list is global. Not local to a particular buffer. not A changelist is local to its buffer. 0 1 9 _ - % <C-r>= Type any valid vimscript. The output is inserted into the buffer. :&& :~ q: :<C-f> :UltiSnipsEdit <C-h> <C-w> <C-u> <C-d> <C-t> <C-e> gf gx [m ]m @: >> . >>.. n 3>>.. <C-y> <C-e> <C-f> <C-b> The Valuable Dev Vim for Python",
          "content_length": 579,
          "content_tokens": 193,
          "embedding": []
        }
      ]
    },
    {
      "title": "Where and when will the current Bitcoin market peak?",
      "url": "https://www.johnmathews.is/blog/when-bitcoin-top",
      "date": "April 27, 2021",
      "content": "Cyclic bottom when price is close-ish to the 200 week moving average chart chart chart chart chart chart chart $300,000 The rainbow chart seems to broadly agree with S2F. If the age-adjusted 3-month coin days destroyed goes above 550,000 then get ready to sell. $400,000 14 September $2,000,000 12 month RSI exceeds 90 Jurrien Timmer suggests a peak price around $100,000 if price shoots up unexpectedly quickly. I expect the market top to be significantly higher. $100k will be a massive psychological level. If the price does increase to this level before approximately July then the optimal sell price would therefore not be exactly $100,000. September 2021 at the earliest The behaviour of the market will change as its participants change. There hasn't been a bull run with significant institutional investors before. Sell using a cost averaging strategy. Buy when everyone is selling, sell when everyone is buying. Be brave when there is fear, if there is no fear then its about to get very messy. If everyone is super confident that prices are definitely going to go up, something bad is about to happen. A lack of uncertainty is a big warning bell. 14 September, $300,000. MVRV > 3 → Local top MVRV > 4 → Macro top MVRV has historically been one of the best on-chain predictors of market tops and bottoms. The ratio of Market Value to Realised Value is calculated by dividing Bitcoin’s market cap by its realised cap. chart Top Cap is 35 x Average Cap Market top when Top Cap is equal to Market Cap. Delta cap is Average Cap subtracted from Realised Cap. When Delta Cap is almost Realised Cap, it's a market top. When Delta cap touches Average Cap, it's a market bottom. Market Top when Delta cap is within 20%­15% of Realised Cap Get key ratio values noisy >45% of supply has been moved in the last 180 days (6 months) → Sell >70% of supply has been held over 180 days → Buy chart 14 month RSI > 95 → Sell 12 month RSI > 90 → Sell Noisy - defer to other metrics. Use 7 day average. 1.04 → Sell 0.97 → Buy Noisy - defer to other metrics. Realised Cap should be lower than NVT Cap. Sell when Realised Cap almost exceeds NVT cap See chart below, there have been false positives. Realised Cap is lower than NVT cap during a bull market only. Noisy, could be a miss. Version 1: Version 2: Halving model: 12 Month RSI comparison The \"forever\" moving average of market cap. It is the cumulative sum total of daily market cap values divided by the age of the market in days. Average Cap multipled by 35. A valuation using monetray velocity. Checkout CoinMetrics for more info. The ratio of Market Value to Realised Value is calculated by dividing Bitcoin's market cap by its realised cap. The sum of the products of each UTXO and the market price of Bitcoin when the UTXO was generated. The price of the most recent Bitcoin transaction multipled by the number of Bitcoin Unspent Transaction Outputs Spent Output Profit Ratio It won't be accurate for individual coins but in aggregate it gives an idea of whether coins are being sold at a loss or for profit. Market participants who have owned BTC for 3 months behave differently to those that have held BTC for 3 years. A more experienced investor will likely make more measured and less rash decisions. By segregating the UTXOs according to age you can compare old coins and new coins, experienced and inexperienced investors (in aggregate). Weak hands will sell before stronger hands, and when market price decrease it's useful to know aggregate age data for the coins being sold. If coins are moving from young wallets then the selling is likely much less significant than if coins are being moved onto exchanges from old wallets. Adjusted Spent Output Profit Ratio If profits are taken by old coins, aSOPR trends higher. It will trend lower when older (and therefore profitable) coins remain dormant. The higher aSOPR is, the more profit has been taken off the table. When aSOPR is less than 1, spent coints are moved at an aggregate loss. UTXO Realised Price Distribution This would be truer and more reliable in a mature market. Because the market for Bitcoin is expanding so rapidly and the price is so volatile, the attitudes and expectations of market participants is also much more malleable than in traditional finance. For example, what was considered a very high price 12 months ago would be considered a disaster today. Relative Strength Index Miner Net Position A stock to flow model is used to measure the scarcity of a commodity. It's a calculation based on the ratio of existing supply and how much is being produced. The higher the ratio, the longer it will take for supply to meet existing demand. Gold has a stock to flow ratio of 66, which means it would take 66 years at the current rate of production to produce the amount of gold currently in circulation. Silver has a S2F ratio of 74. BTC has a S2F of about 50. Over the past 8 years, Bitcoin has gone through phases of rapid price increase followed by periods of rapid decrease. The price has been driven by increasing market size and a decreasing rate of issuance, and has been so volatile (compared to traditional finance) that \"1 month in cryptocurrency markets is like 1 year in traditional markets\". However volatility is decreasing and we are seeing lower highs and higher lows during each subsequent market cycle. 1 Pareto 2 This is a review of what I consider to be the best sources of metrics and analysis that I've come across. All the resources used in this article are attributed to the original author and have been made freely available on Twitter. I hope its OK for me to repost them here, if it's not then let me know and I'll edit the post. This article assumes some familiarity with blockchains and financial markets. Some more general articles on this site are: Bitcoin compared to Gold How to buy bitcoin These insights, metrics and charts are the work of the following people and organisations: Willy Woo Timothy Peterson PlanB Glass Node therationalroot CoinMetrics Jurrien Timmer ↩ ↩",
      "length": 6034,
      "tokens": 1302,
      "chunks": [
        {
          "blog_title": "Where and when will the current Bitcoin market peak?",
          "blog_url": "https://www.johnmathews.is/blog/when-bitcoin-top",
          "blog_date": "April 27, 2021",
          "content": "Cyclic bottom when price is close-ish to the 200 week moving average chart chart chart chart chart chart chart $300,000 The rainbow chart seems to broadly agree with S2F. If the age-adjusted 3-month coin days destroyed goes above 550,000 then get ready to sell. $400,000 14 September $2,000,000 12 month RSI exceeds 90 Jurrien Timmer suggests a peak price around $100,000 if price shoots up unexpectedly quickly. I expect the market top to be significantly higher. $100k will be a massive psychological level. If the price does increase to this level before approximately July then the optimal sell price would therefore not be exactly $100,000. September 2021 at the earliest The behaviour of the market will change as its participants change. There hasn't been a bull run with significant institutional investors before. Sell using a cost averaging strategy. Buy when everyone is selling, sell when everyone is buying.",
          "content_length": 920,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Where and when will the current Bitcoin market peak?",
          "blog_url": "https://www.johnmathews.is/blog/when-bitcoin-top",
          "blog_date": "April 27, 2021",
          "content": "Be brave when there is fear, if there is no fear then its about to get very messy. If everyone is super confident that prices are definitely going to go up, something bad is about to happen. A lack of uncertainty is a big warning bell. 14 September, $300,000. MVRV > 3 → Local top MVRV > 4 → Macro top MVRV has historically been one of the best on-chain predictors of market tops and bottoms. The ratio of Market Value to Realised Value is calculated by dividing Bitcoin’s market cap by its realised cap. chart Top Cap is 35 x Average Cap Market top when Top Cap is equal to Market Cap. Delta cap is Average Cap subtracted from Realised Cap. When Delta Cap is almost Realised Cap, it's a market top. When Delta cap touches Average Cap, it's a market bottom.",
          "content_length": 757,
          "content_tokens": 180,
          "embedding": []
        },
        {
          "blog_title": "Where and when will the current Bitcoin market peak?",
          "blog_url": "https://www.johnmathews.is/blog/when-bitcoin-top",
          "blog_date": "April 27, 2021",
          "content": "Market Top when Delta cap is within 20%­15% of Realised Cap Get key ratio values noisy >45% of supply has been moved in the last 180 days (6 months) → Sell >70% of supply has been held over 180 days → Buy chart 14 month RSI > 95 → Sell 12 month RSI > 90 → Sell Noisy - defer to other metrics. Use 7 day average. 1.04 → Sell 0.97 → Buy Noisy - defer to other metrics. Realised Cap should be lower than NVT Cap. Sell when Realised Cap almost exceeds NVT cap See chart below, there have been false positives. Realised Cap is lower than NVT cap during a bull market only. Noisy, could be a miss. Version 1: Version 2: Halving model: 12 Month RSI comparison The \"forever\" moving average of market cap.",
          "content_length": 696,
          "content_tokens": 181,
          "embedding": []
        },
        {
          "blog_title": "Where and when will the current Bitcoin market peak?",
          "blog_url": "https://www.johnmathews.is/blog/when-bitcoin-top",
          "blog_date": "April 27, 2021",
          "content": "It is the cumulative sum total of daily market cap values divided by the age of the market in days. Average Cap multipled by 35. A valuation using monetray velocity. Checkout CoinMetrics for more info. The ratio of Market Value to Realised Value is calculated by dividing Bitcoin's market cap by its realised cap. The sum of the products of each UTXO and the market price of Bitcoin when the UTXO was generated. The price of the most recent Bitcoin transaction multipled by the number of Bitcoin Unspent Transaction Outputs Spent Output Profit Ratio It won't be accurate for individual coins but in aggregate it gives an idea of whether coins are being sold at a loss or for profit. Market participants who have owned BTC for 3 months behave differently to those that have held BTC for 3 years. A more experienced investor will likely make more measured and less rash decisions.",
          "content_length": 878,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Where and when will the current Bitcoin market peak?",
          "blog_url": "https://www.johnmathews.is/blog/when-bitcoin-top",
          "blog_date": "April 27, 2021",
          "content": "By segregating the UTXOs according to age you can compare old coins and new coins, experienced and inexperienced investors (in aggregate) Weak hands will sell before stronger hands, and when market price decrease it's useful to know aggregate age data for the coins being sold. If coins are moving from young wallets then the selling is likely much less significant than if coins are being moved onto exchanges from old wallets. Adjusted Spent Output Profit Ratio If profits are taken by old coins, aSOPR trends higher. It will trend lower when older (and therefore profitable) coins remain dormant. The higher aSOPR is, the more profit has been taken off the table. When aSOPR is less than 1, spent coints are moved at an aggregate loss. UTXO Realised Price Distribution This would be truer and more reliable in a mature market.",
          "content_length": 829,
          "content_tokens": 175,
          "embedding": []
        },
        {
          "blog_title": "Where and when will the current Bitcoin market peak?",
          "blog_url": "https://www.johnmathews.is/blog/when-bitcoin-top",
          "blog_date": "April 27, 2021",
          "content": "Because the market for Bitcoin is expanding so rapidly and the price is so volatile, the attitudes and expectations of market participants is also much more malleable than in traditional finance. For example, what was considered a very high price 12 months ago would be considered a disaster today. Relative Strength Index Miner Net Position A stock to flow model is used to measure the scarcity of a commodity. It's a calculation based on the ratio of existing supply and how much is being produced. The higher the ratio, the longer it will take for supply to meet existing demand. Gold has a stock to flow ratio of 66, which means it would take 66 years at the current rate of production to produce the amount of gold currently in circulation. Silver has a S2F ratio of 74. BTC has a S2F of about 50. Over the past 8 years, Bitcoin has gone through phases of rapid price increase followed by periods of rapid decrease.",
          "content_length": 920,
          "content_tokens": 186,
          "embedding": []
        },
        {
          "blog_title": "Where and when will the current Bitcoin market peak?",
          "blog_url": "https://www.johnmathews.is/blog/when-bitcoin-top",
          "blog_date": "April 27, 2021",
          "content": "The price has been driven by increasing market size and a decreasing rate of issuance, and has been so volatile (compared to traditional finance) that \"1 month in cryptocurrency markets is like 1 year in traditional markets\" However volatility is decreasing and we are seeing lower highs and higher lows during each subsequent market cycle. 1 Pareto 2 This is a review of what I consider to be the best sources of metrics and analysis that I've come across. All the resources used in this article are attributed to the original author and have been made freely available on Twitter. I hope its OK for me to repost them here, if it's not then let me know and I'll edit the post. This article assumes some familiarity with blockchains and financial markets. Some more general articles on this site are: Bitcoin compared to Gold How to buy bitcoin These insights, metrics and charts are the work of the following people and organisations: Willy Woo Timothy Peterson PlanB Glass Node therationalroot CoinMetrics Jurrien Timmer ↩ ↩",
          "content_length": 1025,
          "content_tokens": 207,
          "embedding": []
        }
      ]
    },
    {
      "title": "Reading - April 2021",
      "url": "https://www.johnmathews.is/blog/reading-april-2021",
      "date": "April 21, 2021",
      "content": "Contents: > The Architecture Behind A One-Person Tech Startup > Boring tech behind a one person SaaS > Django's place in a web development world > Cache invalidation > Vim abbreviations > To fix the social sciences, look to the “dark ages” of medicine > Emotional resilience in leadership report > 3 virtues of a programmer > Is WebAssembly magic performance pixie dust? > Yamauchi No.10 Family Office > Improve and Extend Your Text Objects With targets.vim > A Vim Guide for Adept Users > Deep dive in CORS > The TTY demystified Articles and blog posts I saved to read later: The Architecture Behind A One-Person Tech Startup Anthony Najjar Simon Low stress, one-person company, run from a flat. he likes taking things slow Grateful to be standing on the shoulders of the open source giants who went ahead and made the OSS stack we all enjoy and benefit from. boring Uses K8s on AWS. He says \"dont fall into the trap of thinking you need to use it too\" - expertise with these tools was learnt over several years fighting fires on the day job. Productive because he used the tools he is most familiar with and he can focus on shipping. Django, Celery, PostgreSQL, Python, AWS, Redis. - same as MoneyBar and PipPip. Boring tech behind a one person SaaS The tech-stack keeps evolving \"Boring\" means \"what I'm familiar with so that I can focus on the business\" Most of his time is spent talking to people and thinking. He spends 15% of his time on engineering. Probably it was more when he was setting stuff up. definitely not the best way It's just one way of doing engineering in a very specific type of business. It's not the only way. Django, Celery, PostgreSQL, Python, AWS, Redis. - same as MoneyBar and PipPip. Uses Ansible for provisioning machines. - YAML files. Should look into this. \"Good enough for now\" Doesn't use CI tools, he uses Ansible with a shell script he wrote. Datadog Rollbar slack incoming webhooks Make a \"ding\" sound whenever someone signs up. always very careful about operational stuff Avoids working from home or cafe cos its more productive in an office. Productivity is important - make every minute count. He doesn't often work more than 8 hours/day. He optimizes for spending less time and making money instead of more time and saving money. Vagrant virtualbox Uses 1 monolithic repo. Likes this approach. He uses contractors Usually, the biggest obstacle to building and shipping things is overthinking. What if this, what if that. You are not important at all and no one cares. No one sees. Even if you screw up the initial product launch, no one will care because they're not looking. Only when you've proved that you deserve their attention will you have any attention and visibility. Think big, start small, act fast Use boring technology, or whatever tech you want. Just make sure you're solving an actual problem. cargo cult people Django's place in a web development world Not everything needs to be an SPA Django is a back-end framework, it'll work with an front-end framework, because separation of concerns. To use Django with an SPA, you could use DRF, or just normal views that return JSON. Reading this makes me want to check out React to see what all the fuss is about. Cache invalidation Vim abbreviations Cool and all, but not as powerful as snippets I think. Auto correcting typos: teh -> the Expanding phrases: kr -> kind regards Multi-line text expansion. It really seems similar to what I'm using UltiSnips for. this To fix the social sciences, look to the “dark ages” of medicine Emotional resilience in leadership report 3 virtues of a programmer Laziness - The quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so you don't have to answer so many questions about it. Impatience - The anger you feel when the computer is being lazy. This makes you write programs that don't just react to your needs, but actually anticipate them. Or at least pretend to. Hubris - The quality that makes you write (and maintain) programs that other people won't want to say bad things about. Also, I read a quote somewhere saying the mark of a great program is having people use it in ways you didn't expect, or something like that. Is WebAssembly magic performance pixie dust? Yamauchi No.10 Family Office A beautifully designed website. Improve and Extend Your Text Objects With targets.vim A Vim Guide for Adept Users How to manipulate multiple quickfix and location lists. What are digraphs and how to use them. Useful keystrokes in INSERT mode. Useful keystrokes in VISUAL mode. Vim regular expressions. Using shell commands in Vim. Folding content. Deep dive in CORS The TTY demystified ps 1 WCHAN",
      "length": 4774,
      "tokens": 1070,
      "chunks": [
        {
          "blog_title": "Reading - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/reading-april-2021",
          "blog_date": "April 21, 2021",
          "content": "Contents: > The Architecture Behind A One-Person Tech Startup > Boring tech behind a one person SaaS > Django's place in a web development world > Cache invalidation > Vim abbreviations > To fix the social sciences, look to the “dark ages” of medicine > Emotional resilience in leadership report > 3 virtues of a programmer > Is WebAssembly magic performance pixie dust? > Yamauchi No.10 Family Office > Improve and Extend Your Text Objects With targets.vim > A Vim Guide for Adept Users > Deep dive in CORS > The TTY demystified Articles and blog posts I saved to read later: The Architecture Behind A One-Person Tech Startup Anthony Najjar Simon Low stress, one-person company, run from a flat. he likes taking things slow Grateful to be standing on the shoulders of the open source giants who went ahead and made the OSS stack we all enjoy and benefit from.",
          "content_length": 860,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Reading - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/reading-april-2021",
          "blog_date": "April 21, 2021",
          "content": "boring Uses K8s on AWS. He says \"dont fall into the trap of thinking you need to use it too\" - expertise with these tools was learnt over several years fighting fires on the day job. Productive because he used the tools he is most familiar with and he can focus on shipping. Django, Celery, PostgreSQL, Python, AWS, Redis. - same as MoneyBar and PipPip. Boring tech behind a one person SaaS The tech-stack keeps evolving \"Boring\" means \"what I'm familiar with so that I can focus on the business\" Most of his time is spent talking to people and thinking. He spends 15% of his time on engineering. Probably it was more when he was setting stuff up. definitely not the best way It's just one way of doing engineering in a very specific type of business. It's not the only way.",
          "content_length": 774,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Reading - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/reading-april-2021",
          "blog_date": "April 21, 2021",
          "content": "Django, Celery, PostgreSQL, Python, AWS, Redis. - same as MoneyBar and PipPip. Uses Ansible for provisioning machines. - YAML files. Should look into this. \"Good enough for now\" Doesn't use CI tools, he uses Ansible with a shell script he wrote. Datadog Rollbar slack incoming webhooks Make a \"ding\" sound whenever someone signs up. always very careful about operational stuff Avoids working from home or cafe cos its more productive in an office. Productivity is important - make every minute count. He doesn't often work more than 8 hours/day. He optimizes for spending less time and making money instead of more time and saving money. Vagrant virtualbox Uses 1 monolithic repo. Likes this approach. He uses contractors Usually, the biggest obstacle to building and shipping things is overthinking. What if this, what if that.",
          "content_length": 828,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Reading - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/reading-april-2021",
          "blog_date": "April 21, 2021",
          "content": "You are not important at all and no one cares. No one sees. Even if you screw up the initial product launch, no one will care because they're not looking. Only when you've proved that you deserve their attention will you have any attention and visibility. Think big, start small, act fast Use boring technology, or whatever tech you want. Just make sure you're solving an actual problem. cargo cult people Django's place in a web development world Not everything needs to be an SPA Django is a back-end framework, it'll work with an front-end framework, because separation of concerns. To use Django with an SPA, you could use DRF, or just normal views that return JSON. Reading this makes me want to check out React to see what all the fuss is about. Cache invalidation Vim abbreviations Cool and all, but not as powerful as snippets I think.",
          "content_length": 843,
          "content_tokens": 182,
          "embedding": []
        },
        {
          "blog_title": "Reading - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/reading-april-2021",
          "blog_date": "April 21, 2021",
          "content": "Auto correcting typos: teh -> the Expanding phrases: kr -> kind regards Multi-line text expansion. It really seems similar to what I'm using UltiSnips for. this To fix the social sciences, look to the “dark ages” of medicine Emotional resilience in leadership report 3 virtues of a programmer Laziness - The quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so you don't have to answer so many questions about it. Impatience - The anger you feel when the computer is being lazy. This makes you write programs that don't just react to your needs, but actually anticipate them. Or at least pretend to. Hubris - The quality that makes you write (and maintain) programs that other people won't want to say bad things about.",
          "content_length": 853,
          "content_tokens": 184,
          "embedding": []
        },
        {
          "blog_title": "Reading - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/reading-april-2021",
          "blog_date": "April 21, 2021",
          "content": "Also, I read a quote somewhere saying the mark of a great program is having people use it in ways you didn't expect, or something like that. Is WebAssembly magic performance pixie dust? Yamauchi No.10 Family Office A beautifully designed website. Improve and Extend Your Text Objects With targets.vim A Vim Guide for Adept Users How to manipulate multiple quickfix and location lists. What are digraphs and how to use them. Useful keystrokes in INSERT mode. Useful keystrokes in VISUAL mode. Vim regular expressions. Using shell commands in Vim. Folding content. Deep dive in CORS The TTY demystified ps 1 WCHAN.",
          "content_length": 612,
          "content_tokens": 141,
          "embedding": []
        }
      ]
    },
    {
      "title": "Learning - April 2021",
      "url": "https://www.johnmathews.is/blog/learning-april-2021",
      "date": "April 21, 2021",
      "content": "Contents: > Google Cloud Platform Service Accounts > Ansible > SSH > Vagrant Google Cloud Platform Service Accounts It seems like I'm looking for some general overview of how roles are managed, viewed, compared, and inherited. How can you tell if a users (or a service accounts) roles are adequate, or too much or too little for a particular task? And what's the difference between a user having some roles, and a user using a service account that has those roles. It would also be nice to have some kind of adversarial test, that would identify how/if users or service accounts can create identities with more flexible permissions that their own. These short videos are good, but they're not a complete solution. I'm not sure where to look next. Ansible Based on Jeff Geerlings book. There are 15 episodes. Jeff seems like a great guy. I'm going to try listen to one of these each day. SSH This post Vagrant Good for local development. (Especially when on aeroplanes?) Not as good for cloud providers as Terraform. No more snowflake servers.",
      "length": 1042,
      "tokens": 223,
      "chunks": [
        {
          "blog_title": "Learning - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/learning-april-2021",
          "blog_date": "April 21, 2021",
          "content": "Contents: > Google Cloud Platform Service Accounts > Ansible > SSH > Vagrant Google Cloud Platform Service Accounts It seems like I'm looking for some general overview of how roles are managed, viewed, compared, and inherited. How can you tell if a users (or a service accounts) roles are adequate, or too much or too little for a particular task? And what's the difference between a user having some roles, and a user using a service account that has those roles. It would also be nice to have some kind of adversarial test, that would identify how/if users or service accounts can create identities with more flexible permissions that their own. These short videos are good, but they're not a complete solution. I'm not sure where to look next. Ansible Based on Jeff Geerlings book. There are 15 episodes. Jeff seems like a great guy. I'm going to try listen to one of these each day. SSH This post Vagrant Good for local development. (Especially when on aeroplanes?) Not as good for cloud providers as Terraform. No more snowflake servers.",
          "content_length": 1041,
          "content_tokens": 223,
          "embedding": []
        }
      ]
    },
    {
      "title": "Tweets - April 2021",
      "url": "https://www.johnmathews.is/blog/tweets-april-2021",
      "date": "April 21, 2021",
      "content": "Contents: > Front-End > Entrepreneurship > Mental Models > Agency > Razors > Crypto @robhope @nguyendangtinh @dannypostmaa @AntoineMilkoff @Cruip_com @Versoly April 14, 2021 @microacquire April 14, 2021 May 18, 2020 May 18, 2020 A super long thread, worth reading it all: August 8, 2020 @EricRWeinstein @tferriss November 29, 2018 January 16, 2021 pic.twitter.com/eGRXIux6K2 April 13, 2021 #Bitcoin pic.twitter.com/UTvdFWFhDK April 14, 2021",
      "length": 440,
      "tokens": 140,
      "chunks": [
        {
          "blog_title": "Tweets - April 2021",
          "blog_url": "https://www.johnmathews.is/blog/tweets-april-2021",
          "blog_date": "April 21, 2021",
          "content": "Contents: > Front-End > Entrepreneurship > Mental Models > Agency > Razors > Crypto @robhope @nguyendangtinh @dannypostmaa @AntoineMilkoff @Cruip_com @Versoly April 14, 2021 @microacquire April 14, 2021 May 18, 2020 May 18, 2020 A super long thread, worth reading it all: August 8, 2020 @EricRWeinstein @tferriss November 29, 2018 January 16, 2021 pic.twitter.com/eGRXIux6K2 April 13, 2021 #Bitcoin pic.twitter.com/UTvdFWFhDK April 14, 2021",
          "content_length": 440,
          "content_tokens": 140,
          "embedding": []
        }
      ]
    },
    {
      "title": "SSH-Notes",
      "url": "https://www.johnmathews.is/blog/ssh-notes",
      "date": "April 21, 2021",
      "content": "Contents: > TLDR > Setup SSH-Agent to prevent passphrase prompt > Authentication > Passwords and Keys > Handshake > Background > Source Public key only on the remote server. ssh-keygen -t rsa <optional:email_address> ~/.ssh/id_rsa ~/.ssh/id_rsa.pub You could reuse an existing key pair but if it gets compromised you'll need to reset several accounts. cat ~/.ssh/id_rsa.pub [email protected] ~/.ssh/authorized_keys SSH-Agent ssh-agent eval $(ssh-agent -s) ~/.ssh/config Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_rsa /usr/bin/ssh-add -K ~/.ssh/id_rsa There are three authentication methods: Keys - very secure. Passwords - less secure than keys. IP white lists - connect without authentication by specifying a particular IP address, I think. Presumably via some VPN or proxy. Passwords are encrypted. They are conceptually familiar but can and will be brute forced. There are tools that will block repeated attempts (e.g. fail2ban) or block/allow authentication attempts from particular IP addresses. SSH keys using public and private (or secret) key pairs and are very secure. Keys are generated in pairs. The public key can be shared freely without concern. The secret key must be kept as secure and secret as a password. To authenticate using a key pair: The client must have both keys (a key pair) on their computer. authorized_keys If the server has the private key then something has gone wrong and you should generate new keys and delete the compromised key. ~/.ssh/authorized_keys authorized_keys A unique session ID is generated and shared between the client and server. If the server has the same public key that the client sent when it began the connection attempt, the server generates a random string and encrypts it using the public key. This random string can only be decrypted using the private (secret) key associated with the public key. The server sends the encrypted string to the client. The client decrypts it using the secret key and combines the original random string with the session ID. The client then hashes the combined string and sends the hash back to the server. The server already has the hash of the string combining the original random string and the session ID. If the hash from the client matches the hash on the server, the server can be sure that the client has the private key. Secure Shell lets you securely connect to remote servers. You connect using an account that exists on the remote server. Once you've connected you'll be dropped into a shell session. The computer you connect from is the \"local\" or \"client\" computer. The computer you connect to is the \"host\" or the \"server\". tunnel day-mon The client (the computer you connect from) must be running an SSH client, which is a small app that can communicate using the SSH protocol. (A protocol is a set of rules.) It needs to be able to receive information about which host to connect to, which user to connect as and which credentials to use when trying to connect. article",
      "length": 2997,
      "tokens": 657,
      "chunks": [
        {
          "blog_title": "SSH-Notes",
          "blog_url": "https://www.johnmathews.is/blog/ssh-notes",
          "blog_date": "April 21, 2021",
          "content": "Contents: > TLDR > Setup SSH-Agent to prevent passphrase prompt > Authentication > Passwords and Keys > Handshake > Background > Source Public key only on the remote server. ssh-keygen -t rsa <optional:email_address> ~/.ssh/id_rsa ~/.ssh/id_rsa.pub You could reuse an existing key pair but if it gets compromised you'll need to reset several accounts. cat ~/.ssh/id_rsa.pub [email protected] ~/.ssh/authorized_keys SSH-Agent ssh-agent eval $(ssh-agent -s) ~/.ssh/config Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_rsa /usr/bin/ssh-add -K ~/.ssh/id_rsa There are three authentication methods: Keys - very secure. Passwords - less secure than keys. IP white lists - connect without authentication by specifying a particular IP address, I think.",
          "content_length": 763,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "SSH-Notes",
          "blog_url": "https://www.johnmathews.is/blog/ssh-notes",
          "blog_date": "April 21, 2021",
          "content": "Presumably via some VPN or proxy. Passwords are encrypted. They are conceptually familiar but can and will be brute forced. There are tools that will block repeated attempts (e.g. fail2ban) or block/allow authentication attempts from particular IP addresses. SSH keys using public and private (or secret) key pairs and are very secure. Keys are generated in pairs. The public key can be shared freely without concern. The secret key must be kept as secure and secret as a password. To authenticate using a key pair: The client must have both keys (a key pair) on their computer. authorized_keys If the server has the private key then something has gone wrong and you should generate new keys and delete the compromised key. ~/.ssh/authorized_keys authorized_keys A unique session ID is generated and shared between the client and server.",
          "content_length": 837,
          "content_tokens": 174,
          "embedding": []
        },
        {
          "blog_title": "SSH-Notes",
          "blog_url": "https://www.johnmathews.is/blog/ssh-notes",
          "blog_date": "April 21, 2021",
          "content": "If the server has the same public key that the client sent when it began the connection attempt, the server generates a random string and encrypts it using the public key. This random string can only be decrypted using the private (secret) key associated with the public key. The server sends the encrypted string to the client. The client decrypts it using the secret key and combines the original random string with the session ID. The client then hashes the combined string and sends the hash back to the server. The server already has the hash of the string combining the original random string and the session ID. If the hash from the client matches the hash on the server, the server can be sure that the client has the private key. Secure Shell lets you securely connect to remote servers. You connect using an account that exists on the remote server. Once you've connected you'll be dropped into a shell session. The computer you connect from is the \"local\" or \"client\" computer. The computer you connect to is the \"host\" or the \"server\" tunnel day-mon The client (the computer you connect from) must be running an SSH client, which is a small app that can communicate using the SSH protocol. (A protocol is a set of rules.) It needs to be able to receive information about which host to connect to, which user to connect as and which credentials to use when trying to connect. article.",
          "content_length": 1394,
          "content_tokens": 286,
          "embedding": []
        }
      ]
    },
    {
      "title": "Chezmoi",
      "url": "https://www.johnmathews.is/blog/chezmoi",
      "date": "April 20, 2021",
      "content": "Contents: > Background > Razor > One Question > Command Reference > Links here Chezmoi seems to be dotfiles management for power users. Until a few days ago, when I realised I'd massively broken a lot of things, I'd been putting my dotfiles in a version controlled directory and using a shell script to generate symlinks in my home directory. This had worked really well for several years. It's a great system for maintaining dotfiles on a single machine. But it's not robust or flexible enough for managing multiple machines or multiple operating systems. $home 1 I needed something more robust and flexible than generating symlinks from a bash script. I think I read somewhere that when purchasing a new appliance you should buy the cheapest you think you can get away with, and if that doesn't work then get the best you can afford. Moving from a custom bash script to Chezmoi is an example of this. My custom bash script was the most basic approach, and it broke badly. Chezmoi seems like the most heavy duty tool for dotfiles management I could find. 2 chezmoi cd cd exit cd z .. follow-up cm status cm managed cm unmanaged cm add >path/to/file< cm add .. cm edit <file> cm add .. cm diff <file> cm add cm apply cm -nv apply cm update Remove a file → .chezmoiremove chezmoi apply --remove --dry-run --verbose cm chezmoi alias cm=\"chezmoi\" Github Project Site $HOME/.vim/ftplugin/ ↩ ↩",
      "length": 1388,
      "tokens": 329,
      "chunks": [
        {
          "blog_title": "Chezmoi",
          "blog_url": "https://www.johnmathews.is/blog/chezmoi",
          "blog_date": "April 20, 2021",
          "content": "Contents: > Background > Razor > One Question > Command Reference > Links here Chezmoi seems to be dotfiles management for power users. Until a few days ago, when I realised I'd massively broken a lot of things, I'd been putting my dotfiles in a version controlled directory and using a shell script to generate symlinks in my home directory. This had worked really well for several years. It's a great system for maintaining dotfiles on a single machine. But it's not robust or flexible enough for managing multiple machines or multiple operating systems. $home 1 I needed something more robust and flexible than generating symlinks from a bash script. I think I read somewhere that when purchasing a new appliance you should buy the cheapest you think you can get away with, and if that doesn't work then get the best you can afford. Moving from a custom bash script to Chezmoi is an example of this.",
          "content_length": 902,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Chezmoi",
          "blog_url": "https://www.johnmathews.is/blog/chezmoi",
          "blog_date": "April 20, 2021",
          "content": "My custom bash script was the most basic approach, and it broke badly. Chezmoi seems like the most heavy duty tool for dotfiles management I could find. 2 chezmoi cd cd exit cd z . follow-up cm status cm managed cm unmanaged cm add >path/to/file< cm add . cm edit <file> cm add . cm diff <file> cm add cm apply cm -nv apply cm update Remove a file → .chezmoiremove chezmoi apply --remove --dry-run --verbose cm chezmoi alias cm=\"chezmoi\" Github Project Site $HOME/.vim/ftplugin/ ↩ ↩",
          "content_length": 482,
          "content_tokens": 142,
          "embedding": []
        }
      ]
    },
    {
      "title": "I Leaked Credentials Onto A Public GitHub Repo",
      "url": "https://www.johnmathews.is/blog/i-leaked-credentials-onto-a-public-github-repo",
      "date": "April 15, 2021",
      "content": "Contents: > Don't post secrets to public GitHub repositories. > Background > The hack > Remediation > Questions > Study > Comments I made this mistake a while ago, and in the interests of openness and learning from others, I'd like to describe what happened. Maybe it'll help others avoid the mistake, and maybe I'll learn something from any conversation this article generates. Using Google Cloud Platform (GCP), I've been doing some work across multiple compute instances. Thankfully, the work wasn't business critical or on production systems. My account was isolated away from the rest of the business. As the number of servers I was working with increased, I realised I needed to begin using some tools to automate server setup. This lead me to begin using Ansible, and once I'd cobbled together a working playbook I pushed my Ansible project to my GitHub account... And accidentally leaked the key for an account I'd been using. Within a couple of minutes of pushing the repository to GitHub I: Made the repository private. git rm -r --cached <dir> Received an email from Google saying they'd found leaked credentials. OK, close call. The secret was leaked for less than 5 minutes. On my obscure personal GitHub. I thought there was nothing to worry about.. But then I noticed some activity in the console. node-<type>-<number> Some of the instances were ephemeral. They all had delete protection enabled. I checked the details of a few of them and noticed some scripts that included references to Monero. So I guess a Monero mining bot was being set up. The logs showed that GKE and networking resources had also been requested, but the account which the stolen credentials belonged to didn't have the necessary permissions. Our project also maxed out its quota of compute instances in multiple regions and zones. I deleted the account that had been leaked, and began quantifying the damage. I wanted to know exactly what permissions the key had, which resources could be created, and could the leaked account be used to create other accounts? No, it can't. only It took me 10 minutes and some googling to create the following workflow: gcloud compute instances list --format 'csv[no-heading](name, zone)' > names.txt :v/node- don't Loop through the file and for each row, which contains the instance name and its zone, Remove delete protection Delete the instance while IFS = read -r do $name --zone $zone \\ && $name --zone $zone --quiet done < --quiet I'm surprised by the speed with which the attacker found the leaked credentials. The repo did not belong to the clients account but my own, and I assume that my account is obscure enough to not be on any interesting lists. If my account is being scanned every few minutes, presumably all accounts are being scanned regularly. How many resources are required to do that? I guess if one of these attacks works you can use the stolen compute to scan more repositories for more leaked credentials. It's easy to imagine scenarios where large corporations that are already running complicated cloud infrastructure deployments wouldn't notice a few (200?) unauthorized compute instances running. Service accounts Ansible SSH Vagrant IFS= discussion",
      "length": 3202,
      "tokens": 658,
      "chunks": [
        {
          "blog_title": "I Leaked Credentials Onto A Public GitHub Repo",
          "blog_url": "https://www.johnmathews.is/blog/i-leaked-credentials-onto-a-public-github-repo",
          "blog_date": "April 15, 2021",
          "content": "Contents: > Don't post secrets to public GitHub repositories. > Background > The hack > Remediation > Questions > Study > Comments I made this mistake a while ago, and in the interests of openness and learning from others, I'd like to describe what happened. Maybe it'll help others avoid the mistake, and maybe I'll learn something from any conversation this article generates. Using Google Cloud Platform (GCP), I've been doing some work across multiple compute instances. Thankfully, the work wasn't business critical or on production systems. My account was isolated away from the rest of the business. As the number of servers I was working with increased, I realised I needed to begin using some tools to automate server setup. This lead me to begin using Ansible, and once I'd cobbled together a working playbook I pushed my Ansible project to my GitHub account.. And accidentally leaked the key for an account I'd been using.",
          "content_length": 933,
          "content_tokens": 188,
          "embedding": []
        },
        {
          "blog_title": "I Leaked Credentials Onto A Public GitHub Repo",
          "blog_url": "https://www.johnmathews.is/blog/i-leaked-credentials-onto-a-public-github-repo",
          "blog_date": "April 15, 2021",
          "content": "Within a couple of minutes of pushing the repository to GitHub I: Made the repository private. git rm -r --cached <dir> Received an email from Google saying they'd found leaked credentials. OK, close call. The secret was leaked for less than 5 minutes. On my obscure personal GitHub. I thought there was nothing to worry about. But then I noticed some activity in the console. node-<type>-<number> Some of the instances were ephemeral. They all had delete protection enabled. I checked the details of a few of them and noticed some scripts that included references to Monero. So I guess a Monero mining bot was being set up. The logs showed that GKE and networking resources had also been requested, but the account which the stolen credentials belonged to didn't have the necessary permissions. Our project also maxed out its quota of compute instances in multiple regions and zones.",
          "content_length": 884,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "I Leaked Credentials Onto A Public GitHub Repo",
          "blog_url": "https://www.johnmathews.is/blog/i-leaked-credentials-onto-a-public-github-repo",
          "blog_date": "April 15, 2021",
          "content": "I deleted the account that had been leaked, and began quantifying the damage. I wanted to know exactly what permissions the key had, which resources could be created, and could the leaked account be used to create other accounts? No, it can't. only It took me 10 minutes and some googling to create the following workflow: gcloud compute instances list --format 'csv[no-heading](name, zone)' > names.txt :v/node- don't Loop through the file and for each row, which contains the instance name and its zone, Remove delete protection Delete the instance while IFS = read -r do $name --zone $zone \\ && $name --zone $zone --quiet done < --quiet I'm surprised by the speed with which the attacker found the leaked credentials. The repo did not belong to the clients account but my own, and I assume that my account is obscure enough to not be on any interesting lists. If my account is being scanned every few minutes, presumably all accounts are being scanned regularly. How many resources are required to do that? I guess if one of these attacks works you can use the stolen compute to scan more repositories for more leaked credentials. It's easy to imagine scenarios where large corporations that are already running complicated cloud infrastructure deployments wouldn't notice a few (200?) unauthorized compute instances running. Service accounts Ansible SSH Vagrant IFS= discussion.",
          "content_length": 1381,
          "content_tokens": 286,
          "embedding": []
        }
      ]
    },
    {
      "title": "Ansible",
      "url": "https://www.johnmathews.is/blog/ansible",
      "date": "April 12, 2021",
      "content": "I've been spending a lot of time lately working on nodes for various blockchain projects (Polkadot, Cardano, Tron, Binance Chain, Ethereum, ...). The rosetta api spec is super interesting, but like most things in crypto the documentation is sometimes wrong or incomplete and there are bugs and undocumented features. Each of the nodes runs on a separate server, and we typically have one node for mainnet and another for testnet. I'm working across mutiple servers, doing difficult stuff, and I want it to be as easy as possible. I need to reduce friction and cognitive load. continuum resurrect zsh z .. cd .. Ansible seems to be popular because: It's free It's got all the features and capabilities you're going to need It's agentless - you don't need to install anything on the machine you want to control - you can use Ansible with anything that you can ssh into. I used the following resources to get started: useful video blog post gcp_compute I spent a lot of time being unnecessarily confused about service accounts. I guess until you have 1 success at understanding something you don't know if you've misunderstood by a little or a lot. gcp_compute can blog post OS Login pyenv reshash Setting up a service account and giving it the correct permissions took more time and was more confusing than anything to do with Ansible. blog post yml pip OS Login SO question gcloud auth list ansible-config view|list|dump ansible-inventory -i inventory.compute.gcp.yml --graph ansible -i inventory.compute.gcp.yml all -m ping",
      "length": 1523,
      "tokens": 343,
      "chunks": [
        {
          "blog_title": "Ansible",
          "blog_url": "https://www.johnmathews.is/blog/ansible",
          "blog_date": "April 12, 2021",
          "content": "I've been spending a lot of time lately working on nodes for various blockchain projects (Polkadot, Cardano, Tron, Binance Chain, Ethereum, ...) The rosetta api spec is super interesting, but like most things in crypto the documentation is sometimes wrong or incomplete and there are bugs and undocumented features. Each of the nodes runs on a separate server, and we typically have one node for mainnet and another for testnet. I'm working across mutiple servers, doing difficult stuff, and I want it to be as easy as possible. I need to reduce friction and cognitive load. continuum resurrect zsh z . cd . Ansible seems to be popular because: It's free It's got all the features and capabilities you're going to need It's agentless - you don't need to install anything on the machine you want to control - you can use Ansible with anything that you can ssh into.",
          "content_length": 864,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Ansible",
          "blog_url": "https://www.johnmathews.is/blog/ansible",
          "blog_date": "April 12, 2021",
          "content": "I used the following resources to get started: useful video blog post gcp_compute I spent a lot of time being unnecessarily confused about service accounts. I guess until you have 1 success at understanding something you don't know if you've misunderstood by a little or a lot. gcp_compute can blog post OS Login pyenv reshash Setting up a service account and giving it the correct permissions took more time and was more confusing than anything to do with Ansible. blog post yml pip OS Login SO question gcloud auth list ansible-config view|list|dump ansible-inventory -i inventory.compute.gcp.yml --graph ansible -i inventory.compute.gcp.yml all -m ping.",
          "content_length": 656,
          "content_tokens": 155,
          "embedding": []
        }
      ]
    },
    {
      "title": "Over-Engineering this blog",
      "url": "https://www.johnmathews.is/blog/over-engineering-this-blog",
      "date": "April 05, 2021",
      "content": "Over the last few weeks I've spent an unreasonable amount of time and energy making unnecessary improvements to this blog. Some of these improvements are: ? Implementing reimplementing src-set Image-Process Lazy loading images to make this site load faster. brotli gzip Precompress GitHub discussion I'm not really sure why I did it. It makes almost no difference to anyone but me. It felt a bit compulsive. I like tinkering, and it's nice to build something that will continue to work with no maintenance. I tell myself that over the next few years I will gain the benefits of these features even when I've forgotten I implemented them. It's taught me a lot of JavaScript, which is a great language to be familiar with - it's everywhere. I would warmly encourage someone younger than myself to pursue interests for the sake of curiosity and fun. And there is a very high chance that even if no-one uses the shortcuts except me, my new JavaScript skills will come in useful somewhere else. YAGNI I'm not really sure that I need to justify myself. Its a hobby, I wanted to do it, I enjoy tinkering with web technologies and learning new things. But also, I lost sleep over this - I stayed up too late, and let it put pressure on other things. I know that being curious, and making room to play with interesting things, has been one of the most useful approaches to personal development and up-skilling myself. But there must be a limit.. There is a tension between wasting my time and taking a risk, and it will take a few years before I know for sure if these efforts were worthwhile, or not. If it's not fun, don't do it. Successful business owners seem to be very good at leaving things alone once they're \"good enough\", and not being perfectionists. In fact, I think that being a perfectionist is antithetical to being an entrepreneur. I am not a perfectionist, I'm just really curious and have a big appetite for learning. But this \"appetite for learning\" stops me from focussing. I let myself become distracted by adding new features to this blog, when instead I should zoom out a bit and think about working towards a more substantial and meaningful goal, to the exclusion of more minor goals. I think that good entrepreneurs are very focussed, to a fault. I am not that focussed. I am too distracted by life. It's a balancing act, there is a tension between being emotionally and physically present with my family and friends, and ignoring as many things as possible so that I can focus on doing something meaningful that is necessarily hard.",
      "length": 2549,
      "tokens": 546,
      "chunks": [
        {
          "blog_title": "Over-Engineering this blog",
          "blog_url": "https://www.johnmathews.is/blog/over-engineering-this-blog",
          "blog_date": "April 05, 2021",
          "content": "Over the last few weeks I've spent an unreasonable amount of time and energy making unnecessary improvements to this blog. Some of these improvements are: ? Implementing reimplementing src-set Image-Process Lazy loading images to make this site load faster. brotli gzip Precompress GitHub discussion I'm not really sure why I did it. It makes almost no difference to anyone but me. It felt a bit compulsive. I like tinkering, and it's nice to build something that will continue to work with no maintenance. I tell myself that over the next few years I will gain the benefits of these features even when I've forgotten I implemented them. It's taught me a lot of JavaScript, which is a great language to be familiar with - it's everywhere. I would warmly encourage someone younger than myself to pursue interests for the sake of curiosity and fun.",
          "content_length": 846,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "Over-Engineering this blog",
          "blog_url": "https://www.johnmathews.is/blog/over-engineering-this-blog",
          "blog_date": "April 05, 2021",
          "content": "And there is a very high chance that even if no-one uses the shortcuts except me, my new JavaScript skills will come in useful somewhere else. YAGNI I'm not really sure that I need to justify myself. Its a hobby, I wanted to do it, I enjoy tinkering with web technologies and learning new things. But also, I lost sleep over this - I stayed up too late, and let it put pressure on other things. I know that being curious, and making room to play with interesting things, has been one of the most useful approaches to personal development and up-skilling myself. But there must be a limit. There is a tension between wasting my time and taking a risk, and it will take a few years before I know for sure if these efforts were worthwhile, or not. If it's not fun, don't do it.",
          "content_length": 774,
          "content_tokens": 176,
          "embedding": []
        },
        {
          "blog_title": "Over-Engineering this blog",
          "blog_url": "https://www.johnmathews.is/blog/over-engineering-this-blog",
          "blog_date": "April 05, 2021",
          "content": "Successful business owners seem to be very good at leaving things alone once they're \"good enough\", and not being perfectionists. In fact, I think that being a perfectionist is antithetical to being an entrepreneur. I am not a perfectionist, I'm just really curious and have a big appetite for learning. But this \"appetite for learning\" stops me from focussing. I let myself become distracted by adding new features to this blog, when instead I should zoom out a bit and think about working towards a more substantial and meaningful goal, to the exclusion of more minor goals. I think that good entrepreneurs are very focussed, to a fault. I am not that focussed. I am too distracted by life. It's a balancing act, there is a tension between being emotionally and physically present with my family and friends, and ignoring as many things as possible so that I can focus on doing something meaningful that is necessarily hard.",
          "content_length": 926,
          "content_tokens": 192,
          "embedding": []
        }
      ]
    },
    {
      "title": "Fuse Search",
      "url": "https://www.johnmathews.is/blog/fuse-search",
      "date": "April 05, 2021",
      "content": "fuse.js tinySearch here 1 This means I can find content without having to think about how to get there - I don't need to break my flow or concentration. It might sound like a trivially small consideration, but lowering friction or cognitive load in small ways can make the difference between using or not using something when you're already working hard or concentrating on something else. nohup / fuse.js TinySearch had an example for Pelican Blogs, and a simple and clear readme. By using tinySearch first I saw an example of how to build the JSON array that becomes the search index, and how to implement the javascript that's required for client side search. Also, in the course of developing and over-engineering this blog I've become much more proficient and comfortable with JavaScript (and jQuery) in general. Fuse.js is really quite simple to set up once you're familiar with JavaScript. It's much more flexible than tinySearch; you can choose search weights for different fields, accuracy thresholds, and some parameters for the fuzzy search algorithm. Fuse fuse.js The \"normal\" search index that Fuse uses to return results is a JSON array of all the content of all the articles that you want to be able to search. You can generate it using a jinja template or any other way you want. (There simply needs to be a JSON array that the browser downloads and does a fuzzy search on). This gave me a file that was about 4MB. Once I asked Fuse to search the complete text of each article (not just the default first 600 chars, iirc) then speed really suffered. I optimized the index file in the following three ways: Removed any non-words. Some of my articles are jupyter notebooks that have been converted to articles (the plugin to do this is one of the reasons why I began using Pelican). When the index is built, lots of code and html gets included, which isn't helpful. Any \"words\" that are more than 20 chars I just delete. tr sort uiq Shortened any long words by only keeping the first 12 characters. If a word was 15 characters long, I simply removed that last 3 chars. I figured this would work fine because matching the first 12 characters would already be quite unique and give a good result. gzip brotli The browser would still begin to lag as the search string length increased. It takes more time to search for a 10 character string than for a 5 character string, and initially fuse was doing a search every time a character was typed. I wanted the site to feel as fast as possible and thought that if search was paused whilst typing and occurred a short time after the last key was pressed this would be an improvement. I added a short delay of 200ms to the function call, and typing during the delay time resets the time. This reduced the lag and made the search tool feel responsive. I learnt that this is called \"debouncing\". There was some further complexity when I wanted to debounce characters used for searching, but not the navigation or keyboard shortcuts. Getting the debounce function to only run on some key presses was surprisingly complex. It taught me a lot of JavaScript though, and it's satisfying to have made a useful user interface. ? ↩",
      "length": 3176,
      "tokens": 670,
      "chunks": [
        {
          "blog_title": "Fuse Search",
          "blog_url": "https://www.johnmathews.is/blog/fuse-search",
          "blog_date": "April 05, 2021",
          "content": "fuse.js tinySearch here 1 This means I can find content without having to think about how to get there - I don't need to break my flow or concentration. It might sound like a trivially small consideration, but lowering friction or cognitive load in small ways can make the difference between using or not using something when you're already working hard or concentrating on something else. nohup / fuse.js TinySearch had an example for Pelican Blogs, and a simple and clear readme. By using tinySearch first I saw an example of how to build the JSON array that becomes the search index, and how to implement the javascript that's required for client side search. Also, in the course of developing and over-engineering this blog I've become much more proficient and comfortable with JavaScript (and jQuery) in general. Fuse.js is really quite simple to set up once you're familiar with JavaScript.",
          "content_length": 896,
          "content_tokens": 186,
          "embedding": []
        },
        {
          "blog_title": "Fuse Search",
          "blog_url": "https://www.johnmathews.is/blog/fuse-search",
          "blog_date": "April 05, 2021",
          "content": "It's much more flexible than tinySearch; you can choose search weights for different fields, accuracy thresholds, and some parameters for the fuzzy search algorithm. Fuse fuse.js The \"normal\" search index that Fuse uses to return results is a JSON array of all the content of all the articles that you want to be able to search. You can generate it using a jinja template or any other way you want. (There simply needs to be a JSON array that the browser downloads and does a fuzzy search on) This gave me a file that was about 4MB. Once I asked Fuse to search the complete text of each article (not just the default first 600 chars, iirc) then speed really suffered. I optimized the index file in the following three ways: Removed any non-words. Some of my articles are jupyter notebooks that have been converted to articles (the plugin to do this is one of the reasons why I began using Pelican)",
          "content_length": 897,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Fuse Search",
          "blog_url": "https://www.johnmathews.is/blog/fuse-search",
          "blog_date": "April 05, 2021",
          "content": "When the index is built, lots of code and html gets included, which isn't helpful. Any \"words\" that are more than 20 chars I just delete. tr sort uiq Shortened any long words by only keeping the first 12 characters. If a word was 15 characters long, I simply removed that last 3 chars. I figured this would work fine because matching the first 12 characters would already be quite unique and give a good result. gzip brotli The browser would still begin to lag as the search string length increased. It takes more time to search for a 10 character string than for a 5 character string, and initially fuse was doing a search every time a character was typed. I wanted the site to feel as fast as possible and thought that if search was paused whilst typing and occurred a short time after the last key was pressed this would be an improvement. I added a short delay of 200ms to the function call, and typing during the delay time resets the time. This reduced the lag and made the search tool feel responsive. I learnt that this is called \"debouncing\" There was some further complexity when I wanted to debounce characters used for searching, but not the navigation or keyboard shortcuts. Getting the debounce function to only run on some key presses was surprisingly complex. It taught me a lot of JavaScript though, and it's satisfying to have made a useful user interface. ? ↩",
          "content_length": 1377,
          "content_tokens": 286,
          "embedding": []
        }
      ]
    },
    {
      "title": "Vim: GoTo Tag Definition",
      "url": "https://www.johnmathews.is/blog/vim-notes-goto-tag-definition",
      "date": "March 31, 2021",
      "content": "Just use neovim.coc instead of YouCompleteMe or Syntastic. It's faster, easier to setup, and works intuitively. ALE is still wonderful and useful, though there's a lot of overlap - coc can lint as well. jump list 1 change list 2 A list of locations that the cursor has jumped to. <C-O> <C-I> Jumping to a definition, or a search result g; g, A list of locations where a change was made. '. . '' There are multiple ways of doing anything with vim, including going to where a function or object is defined, and I usually need to do something at least 3 times before I can do it without breaking my focus or train of thought. 3 YouCompleteMe ALE 4 .vimrc <leader>x :YcmCompleter GoTo <Leader>x <F2> :help jumplist ↩ :help changelist ↩ ↩ neoclide/coc.nvim neoclide/coc.nvim ↩",
      "length": 771,
      "tokens": 217,
      "chunks": [
        {
          "blog_title": "Vim: GoTo Tag Definition",
          "blog_url": "https://www.johnmathews.is/blog/vim-notes-goto-tag-definition",
          "blog_date": "March 31, 2021",
          "content": "Just use neovim.coc instead of YouCompleteMe or Syntastic. It's faster, easier to setup, and works intuitively. ALE is still wonderful and useful, though there's a lot of overlap - coc can lint as well. jump list 1 change list 2 A list of locations that the cursor has jumped to. <C-O> <C-I> Jumping to a definition, or a search result g; g, A list of locations where a change was made. '' There are multiple ways of doing anything with vim, including going to where a function or object is defined, and I usually need to do something at least 3 times before I can do it without breaking my focus or train of thought. 3 YouCompleteMe ALE 4 .vimrc <leader>x :YcmCompleter GoTo <Leader>x <F2> :help jumplist ↩ :help changelist ↩ ↩ neoclide/coc.nvim neoclide/coc.nvim ↩",
          "content_length": 765,
          "content_tokens": 215,
          "embedding": []
        }
      ]
    },
    {
      "title": "Python Notes",
      "url": "https://www.johnmathews.is/blog/python-notes-2",
      "date": "March 17, 2021",
      "content": "my_function() my_class.my_method() ( .__call__( >> > def my_function ( ) : >> > return + 1 >> > . ( 2 ) 3 class Prefixer : def __init__ ( , ) : . = def __call__ ( , ) : return . + prefixer >> > = ( \"Simon says: \" ) >> > ( \"jump up high!\" ) 'Simon says: jump up high!' __call__ It's in the 'zen of Python', which is a set of guidelines that help make design decisions. It's a choice that Python made, and other languages do it differently. levels Perl has the \"TMTOWTDI\" (tim towtdi) principle - \"There's More Than One Way To Do It\". Perl's philosophy is to give users more than one way to do something.",
      "length": 602,
      "tokens": 178,
      "chunks": [
        {
          "blog_title": "Python Notes",
          "blog_url": "https://www.johnmathews.is/blog/python-notes-2",
          "blog_date": "March 17, 2021",
          "content": "my_function() my_class.my_method() ( .__call__( >> > def my_function ( ) : >> > return + 1 >> > . ( 2 ) 3 class Prefixer : def __init__ ( , ) : . = def __call__ ( , ) : return . + prefixer >> > = ( \"Simon says: \" ) >> > ( \"jump up high!\" ) 'Simon says: jump up high!' __call__ It's in the 'zen of Python', which is a set of guidelines that help make design decisions. It's a choice that Python made, and other languages do it differently. levels Perl has the \"TMTOWTDI\" (tim towtdi) principle - \"There's More Than One Way To Do It\". Perl's philosophy is to give users more than one way to do something.",
          "content_length": 602,
          "content_tokens": 178,
          "embedding": []
        }
      ]
    },
    {
      "title": "Adding Search",
      "url": "https://www.johnmathews.is/blog/adding-search",
      "date": "March 12, 2021",
      "content": "/ cmd-k plugins Tipue search website Lunr.js Tiny Search One hurdle to success was minimising the false positives. The default settings seem to prioritise keeping the size of the index small (tiny) over giving a good user experience. Maybe its because the amount of text on my site is significanly less, or more, than the typical use case. Either way, after checking the project's issues on Github I found an issue that matched my problem perfectly. The solution is to increase the tiny_magic variable at build time. docker run... fzf fzf fzf.vim fzf ripgrep ripgrep rg rg I still don't know how (or which part of) the Dockerfile does this, so I've created a .gitignore-master file which contains the correct content, and after I generate a new search index I replace the new traitorous .gitignore with the contents of .gitignore-master. I'll come back to it later when/if I have a better understanding of Dockerfile syntax, or Rust. tailwindcss.com / ctrl-k cmd-k Only whole words are matched unfortunately, but its still a super useful feature. The search index includes article content as well as article titles and categories. I'd like to tweak a few of the keyboard shortcut behaviours, and add the contents of various pages (which aren't articles) to the search index.",
      "length": 1274,
      "tokens": 293,
      "chunks": [
        {
          "blog_title": "Adding Search",
          "blog_url": "https://www.johnmathews.is/blog/adding-search",
          "blog_date": "March 12, 2021",
          "content": "/ cmd-k plugins Tipue search website Lunr.js Tiny Search One hurdle to success was minimising the false positives. The default settings seem to prioritise keeping the size of the index small (tiny) over giving a good user experience. Maybe its because the amount of text on my site is significanly less, or more, than the typical use case. Either way, after checking the project's issues on Github I found an issue that matched my problem perfectly. The solution is to increase the tiny_magic variable at build time. docker run.. fzf fzf fzf.vim fzf ripgrep ripgrep rg rg I still don't know how (or which part of) the Dockerfile does this, so I've created a .gitignore-master file which contains the correct content, and after I generate a new search index I replace the new traitorous .gitignore with the contents of .gitignore-master. I'll come back to it later when/if I have a better understanding of Dockerfile syntax, or Rust. tailwindcss.com / ctrl-k cmd-k Only whole words are matched unfortunately, but its still a super useful feature. The search index includes article content as well as article titles and categories. I'd like to tweak a few of the keyboard shortcut behaviours, and add the contents of various pages (which aren't articles) to the search index.",
          "content_length": 1272,
          "content_tokens": 293,
          "embedding": []
        }
      ]
    },
    {
      "title": "Cardano: Generating Addresses",
      "url": "https://www.johnmathews.is/blog/cardano-generating-addresses",
      "date": "March 05, 2021",
      "content": "If many different customers are to deposit or send ADA (The unit of currency on the Cardano blockchain) to a Cardano node, it will be necessary to determine which customer is responsible for each transaction so that the correct customer account can be updated. As with many things involving blockchains, this initially seemed like a simple requirement but involved several hours of work. Cardano wallets are generated using a parameter called ADDRESS_POOL_GAP. The default value is 20, and is the number of unused addresses that the node will generate and return to a client using the REST API. If one of the addresses is used, the node will automatically generate another so that there are always 20 unused addresses. This is probably very convenient for personal use. If I want someone to send me some funds, I can make a simple api call using cURL and get a fresh address. But if you are running a service, weather its e-commerce or a financial service, its not really good enough. Some advice on the forums says to generate a wallet with a very large ADDRESS_POOL_GAP value such as 10,000 and just generate a new wallet when you run out of fresh addresses, but it still feels like a compromise. But lets explain our situation in more detail first. If a customer wants to send us some ADA, we want to give them a fresh address that's never been used before and that only they have. Then we know that any funds that arrive to that address are from a particular customer. However we don't know if the customer will actually use the address and transfer any funds. The address might remain unused or it might not. Nevertheless, that address is now reserved for them, and no one else can use it. In this way, we might need to generate and maintain a list of thousands of addresses that are never used. Using ADDRESS_POOL_GAP for this seems like a bad solution. Cardano-Addresses Clone the repo and build the docker image: git docker -t . Get the mnemonic and generate a file containing a list of space separated words on one row. Run the following: export increment = 0 (( = + 1 )) && cat | docker --rm -i | docker --rm -i $increment | docker --rm -i | docker --rm -i > && cat ; echo",
      "length": 2182,
      "tokens": 481,
      "chunks": [
        {
          "blog_title": "Cardano: Generating Addresses",
          "blog_url": "https://www.johnmathews.is/blog/cardano-generating-addresses",
          "blog_date": "March 05, 2021",
          "content": "If many different customers are to deposit or send ADA (The unit of currency on the Cardano blockchain) to a Cardano node, it will be necessary to determine which customer is responsible for each transaction so that the correct customer account can be updated. As with many things involving blockchains, this initially seemed like a simple requirement but involved several hours of work. Cardano wallets are generated using a parameter called ADDRESS_POOL_GAP. The default value is 20, and is the number of unused addresses that the node will generate and return to a client using the REST API. If one of the addresses is used, the node will automatically generate another so that there are always 20 unused addresses. This is probably very convenient for personal use. If I want someone to send me some funds, I can make a simple api call using cURL and get a fresh address.",
          "content_length": 875,
          "content_tokens": 177,
          "embedding": []
        },
        {
          "blog_title": "Cardano: Generating Addresses",
          "blog_url": "https://www.johnmathews.is/blog/cardano-generating-addresses",
          "blog_date": "March 05, 2021",
          "content": "But if you are running a service, weather its e-commerce or a financial service, its not really good enough. Some advice on the forums says to generate a wallet with a very large ADDRESS_POOL_GAP value such as 10,000 and just generate a new wallet when you run out of fresh addresses, but it still feels like a compromise. But lets explain our situation in more detail first. If a customer wants to send us some ADA, we want to give them a fresh address that's never been used before and that only they have. Then we know that any funds that arrive to that address are from a particular customer. However we don't know if the customer will actually use the address and transfer any funds. The address might remain unused or it might not. Nevertheless, that address is now reserved for them, and no one else can use it. In this way, we might need to generate and maintain a list of thousands of addresses that are never used.",
          "content_length": 924,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Cardano: Generating Addresses",
          "blog_url": "https://www.johnmathews.is/blog/cardano-generating-addresses",
          "blog_date": "March 05, 2021",
          "content": "Using ADDRESS_POOL_GAP for this seems like a bad solution. Cardano-Addresses Clone the repo and build the docker image: git docker -t  Get the mnemonic and generate a file containing a list of space separated words on one row. Run the following: export increment = 0 (( = + 1 )) && cat | docker --rm -i | docker --rm -i $increment | docker --rm -i | docker --rm -i > && cat ; echo.",
          "content_length": 381,
          "content_tokens": 105,
          "embedding": []
        }
      ]
    },
    {
      "title": "Two Years Of Vim",
      "url": "https://www.johnmathews.is/blog/two-years-of-vim",
      "date": "March 04, 2021",
      "content": "I've been feeling very comfortable with my Vim + Tmux setup recently. Navigating around shells and files isn't taking much mental effort anymore. Wohoo! It's taken about 2 years of working full time with vim to get to the stage where the commands are so intuitive that: j k x I can't remember what the command is to do something if I'm not actually doing it. When I need to do an action, I do it from muscle memory and I only pay attention to the underlying key press if something goes wrong. This is noticeable when trying to find an unbound key combination for some new action, or when reading an article about vim and thinking \"that's new\" when actually I've been doing it without noticing. A pleasant surprise has been that it doesn't take much effort to rebind a single command and retrain myself to use it. This is presumably because the mental effort for all the other commands has become negligible. In the early days, retraining a key combination took a lot more effort because I was already making an effort to get used to doing things in Vim. should",
      "length": 1060,
      "tokens": 225,
      "chunks": [
        {
          "blog_title": "Two Years Of Vim",
          "blog_url": "https://www.johnmathews.is/blog/two-years-of-vim",
          "blog_date": "March 04, 2021",
          "content": "I've been feeling very comfortable with my Vim + Tmux setup recently. Navigating around shells and files isn't taking much mental effort anymore. Wohoo! It's taken about 2 years of working full time with vim to get to the stage where the commands are so intuitive that: j k x I can't remember what the command is to do something if I'm not actually doing it. When I need to do an action, I do it from muscle memory and I only pay attention to the underlying key press if something goes wrong. This is noticeable when trying to find an unbound key combination for some new action, or when reading an article about vim and thinking \"that's new\" when actually I've been doing it without noticing. A pleasant surprise has been that it doesn't take much effort to rebind a single command and retrain myself to use it. This is presumably because the mental effort for all the other commands has become negligible. In the early days, retraining a key combination took a lot more effort because I was already making an effort to get used to doing things in Vim. should.",
          "content_length": 1060,
          "content_tokens": 226,
          "embedding": []
        }
      ]
    },
    {
      "title": "Binance-Chain: Running a node",
      "url": "https://www.johnmathews.is/blog/binance-node-api",
      "date": "March 03, 2021",
      "content": "I've been setting up a binance-chain node. Unlike Polkadot or Cardano, I'm not going to run it from a container until it's working reliably. docs install.sh install.sh node-binary git lfs git bnbchaind lfs BNCHOME export BNCHOME = (like you would for any environment variable) or replace the environment variable in the start node command with the file path: nohup --home & bnbchaind BNCHOME three ways Fast-sync isn't the fastest way to sync your node, hot-sync is. install.sh should $BNCHOME/config/config.toml ping_interval pong_timeout nohup & 1 notes fg jobs ctrl-z ↩",
      "length": 572,
      "tokens": 162,
      "chunks": [
        {
          "blog_title": "Binance-Chain: Running a node",
          "blog_url": "https://www.johnmathews.is/blog/binance-node-api",
          "blog_date": "March 03, 2021",
          "content": "I've been setting up a binance-chain node. Unlike Polkadot or Cardano, I'm not going to run it from a container until it's working reliably. docs install.sh install.sh node-binary git lfs git bnbchaind lfs BNCHOME export BNCHOME = (like you would for any environment variable) or replace the environment variable in the start node command with the file path: nohup --home & bnbchaind BNCHOME three ways Fast-sync isn't the fastest way to sync your node, hot-sync is. install.sh should $BNCHOME/config/config.toml ping_interval pong_timeout nohup & 1 notes fg jobs ctrl-z ↩",
          "content_length": 572,
          "content_tokens": 162,
          "embedding": []
        }
      ]
    },
    {
      "title": "nohup and Background Processes",
      "url": "https://www.johnmathews.is/blog/nohup-and-background-processes",
      "date": "March 02, 2021",
      "content": "If you run a command in a terminal session and the terminal session is disconnected, then the processes running in it will also be terminated. I discovered this when I was trying to download a ~500GB database overnight. I logged in the next morning expecting to see a completed download, but found I only had half the file. nohup HUP nohup HUP HUP nohup nohup.out nohup stdin stdin nohup stdout stderr nohup.out & fg jobs </dev/null disown disown disown nohup HUP kill nohup HUP Source w who uptime ps -a w A collection of one or more processes. It's used to control the distribution of a signal. When a signal is directed to a process group, the signal is delivered to each process that is a member of the group. A collection of one or more process groups. A process may not create a process group that belongs to another session. A process is not permitted to join a process group that is a member of another session. A process is not permitted to migrate from one session to another.",
      "length": 986,
      "tokens": 237,
      "chunks": [
        {
          "blog_title": "nohup and Background Processes",
          "blog_url": "https://www.johnmathews.is/blog/nohup-and-background-processes",
          "blog_date": "March 02, 2021",
          "content": "If you run a command in a terminal session and the terminal session is disconnected, then the processes running in it will also be terminated. I discovered this when I was trying to download a ~500GB database overnight. I logged in the next morning expecting to see a completed download, but found I only had half the file. nohup HUP nohup HUP HUP nohup nohup.out nohup stdin stdin nohup stdout stderr nohup.out & fg jobs </dev/null disown disown disown nohup HUP kill nohup HUP Source w who uptime ps -a w A collection of one or more processes. It's used to control the distribution of a signal. When a signal is directed to a process group, the signal is delivered to each process that is a member of the group. A collection of one or more process groups. A process may not create a process group that belongs to another session. A process is not permitted to join a process group that is a member of another session. A process is not permitted to migrate from one session to another.",
          "content_length": 985,
          "content_tokens": 237,
          "embedding": []
        }
      ]
    },
    {
      "title": "File Descriptors and /dev/null",
      "url": "https://www.johnmathews.is/blog/file-descriptors",
      "date": "March 02, 2021",
      "content": "In Linux everything is a file, including virtual devices like keyboards. Processes (programmes) can request access to or from these devices. The only difference between these virtual device \"files\" and real files, is that for a virtual device the OS generates the data that goes into the file, instead of reading the data from storage. /dev/null File descriptors are integer values assigned to a file. stdin stdout stderr stdout stderr If a command exits successfully, the exit status is 0. If it exits unsuccessfully, the exit status will be something else. stdout stdout /dev/null echo > stderr 2 stderr /dev/null stdout grep -r 2 stderr stdout stdout /dev/null ping 1 stdout /dev/null grep -r > 2 &1 0 2 2>&1 stderr stdout stdout stderr stderr stdout stdin </dev/null stdin <&2",
      "length": 780,
      "tokens": 204,
      "chunks": [
        {
          "blog_title": "File Descriptors and /dev/null",
          "blog_url": "https://www.johnmathews.is/blog/file-descriptors",
          "blog_date": "March 02, 2021",
          "content": "In Linux everything is a file, including virtual devices like keyboards. Processes (programmes) can request access to or from these devices. The only difference between these virtual device \"files\" and real files, is that for a virtual device the OS generates the data that goes into the file, instead of reading the data from storage. /dev/null File descriptors are integer values assigned to a file. stdin stdout stderr stdout stderr If a command exits successfully, the exit status is 0. If it exits unsuccessfully, the exit status will be something else. stdout stdout /dev/null echo > stderr 2 stderr /dev/null stdout grep -r 2 stderr stdout stdout /dev/null ping 1 stdout /dev/null grep -r > 2 &1 0 2 2>&1 stderr stdout stdout stderr stderr stdout stdin </dev/null stdin <&2.",
          "content_length": 780,
          "content_tokens": 205,
          "embedding": []
        }
      ]
    },
    {
      "title": "Cardano: Running a full node",
      "url": "https://www.johnmathews.is/blog/cardano-node-api",
      "date": "March 01, 2021",
      "content": "I recently deployed a Cardano node on Google Cloud Platform and used its API to create and watch addresses, and make transactions. Helpfully, Cardano make it quite simple to get up and running if you are familiar with Docker-Compose, and know where to look, and what questions to ask. Contents: > Docker Compose > Cardano wallet > Cardano-CLI > REST API > Surprising things Cardano Wallet 1 NETWORK=testnet docker-compose up -d This does a couple of things for you: Creates a Cardano node and begins syncing with the network Creates a Cardano Wallet instance Creates all the required data volumes Maps the ports required to make API calls. docker ps cardano-node cardano-wallet cardano-wallet docker exec sudo docker exec -it sh Then you can run commands like: cardano-wallet network information cardano-cli cardano-wallet sudo docker exec -it sh cardano-cli —version 2 For example, a good test to see if the node is ok is to run curl web page python ad-hoc 3 ADDRESS_POOL_GAP https://github.com/input-output-hk/cardano-wallet ↩ https://input-output-hk.github.io/cardano-wallet/api/edge/#operation/postwallet ↩ https://input-output-hk.github.io/adrestia/docs/common-use-cases/how-to-create-addresses/ ↩",
      "length": 1202,
      "tokens": 317,
      "chunks": [
        {
          "blog_title": "Cardano: Running a full node",
          "blog_url": "https://www.johnmathews.is/blog/cardano-node-api",
          "blog_date": "March 01, 2021",
          "content": "I recently deployed a Cardano node on Google Cloud Platform and used its API to create and watch addresses, and make transactions. Helpfully, Cardano make it quite simple to get up and running if you are familiar with Docker-Compose, and know where to look, and what questions to ask. Contents: > Docker Compose > Cardano wallet > Cardano-CLI > REST API > Surprising things Cardano Wallet 1 NETWORK=testnet docker-compose up -d This does a couple of things for you: Creates a Cardano node and begins syncing with the network Creates a Cardano Wallet instance Creates all the required data volumes Maps the ports required to make API calls.",
          "content_length": 639,
          "content_tokens": 144,
          "embedding": []
        },
        {
          "blog_title": "Cardano: Running a full node",
          "blog_url": "https://www.johnmathews.is/blog/cardano-node-api",
          "blog_date": "March 01, 2021",
          "content": "docker ps cardano-node cardano-wallet cardano-wallet docker exec sudo docker exec -it sh Then you can run commands like: cardano-wallet network information cardano-cli cardano-wallet sudo docker exec -it sh cardano-cli —version 2 For example, a good test to see if the node is ok is to run curl web page python ad-hoc 3 ADDRESS_POOL_GAP https://github.com/input-output-hk/cardano-wallet ↩ https://input-output-hk.github.io/cardano-wallet/api/edge/#operation/postwallet ↩ https://input-output-hk.github.io/adrestia/docs/common-use-cases/how-to-create-addresses/ ↩",
          "content_length": 562,
          "content_tokens": 173,
          "embedding": []
        }
      ]
    },
    {
      "title": "Polkadot: Running and interacting with a full node",
      "url": "https://www.johnmathews.is/blog/running-a-polkadot-node",
      "date": "March 01, 2021",
      "content": "I recently set up a Polkadot node on Google Cloud Platform that could create addresses and make transactions. Instead of building from source I used Docker. After some troubleshooting, I found the command to run is: docker -it -p 30333 -p 9944 -p 80 -v = --chain This differs from the (current) documentation in two ways: /polkadot/.local/share /data issue Port 9944 needs to be mapped. Stack Overflow Other than that, everything went as described in the documentation.",
      "length": 469,
      "tokens": 109,
      "chunks": [
        {
          "blog_title": "Polkadot: Running and interacting with a full node",
          "blog_url": "https://www.johnmathews.is/blog/running-a-polkadot-node",
          "blog_date": "March 01, 2021",
          "content": "I recently set up a Polkadot node on Google Cloud Platform that could create addresses and make transactions. Instead of building from source I used Docker. After some troubleshooting, I found the command to run is: docker -it -p 30333 -p 9944 -p 80 -v = --chain This differs from the (current) documentation in two ways: /polkadot/.local/share /data issue Port 9944 needs to be mapped. Stack Overflow Other than that, everything went as described in the documentation.",
          "content_length": 469,
          "content_tokens": 109,
          "embedding": []
        }
      ]
    },
    {
      "title": "Microservices, Docker, Azure",
      "url": "https://www.johnmathews.is/blog/microservices_events_docker",
      "date": "February 02, 2021",
      "content": "This is a great presentation about microservices and event driven architectures. And this is a comprehensive overview of Azure",
      "length": 126,
      "tokens": 21,
      "chunks": [
        {
          "blog_title": "Microservices, Docker, Azure",
          "blog_url": "https://www.johnmathews.is/blog/microservices_events_docker",
          "blog_date": "February 02, 2021",
          "content": "This is a great presentation about microservices and event driven architectures. And this is a comprehensive overview of Azure",
          "content_length": 126,
          "content_tokens": 21,
          "embedding": []
        }
      ]
    },
    {
      "title": "Regrets Of The Dying",
      "url": "https://www.johnmathews.is/blog/regrets-of-the-dying",
      "date": "February 01, 2021",
      "content": "I wish that: I’d had the courage to live a life true to myself, not the life others expected of me. I hadn't worked so hard. I’d had the courage to express my feelings. I had stayed in touch with my friends. I'd let myself be happier. 1 source ↩",
      "length": 245,
      "tokens": 66,
      "chunks": [
        {
          "blog_title": "Regrets Of The Dying",
          "blog_url": "https://www.johnmathews.is/blog/regrets-of-the-dying",
          "blog_date": "February 01, 2021",
          "content": "I wish that: I’d had the courage to live a life true to myself, not the life others expected of me. I hadn't worked so hard. I’d had the courage to express my feelings. I had stayed in touch with my friends. I'd let myself be happier. 1 source ↩",
          "content_length": 245,
          "content_tokens": 66,
          "embedding": []
        }
      ]
    },
    {
      "title": "A List Of Unconnected Thoughts And Aphorisms",
      "url": "https://www.johnmathews.is/blog/a-list-of-unconnected-thoughts-and-aphorisms",
      "date": "February 01, 2021",
      "content": "Do the people you care about love you back? It does not matter how slowly you go as long as you do not stop. Assume that nobody is going to help you, and nobody is going to stop you. Money is (just) fuel. Lets talk about the end. My current self, existing now, is to be seen in the context of my end, and my beginning. When you want money, ask for advice. When you want advice, ask for money. 1 If you want to be a top performer in any field you must become abnormal. Normal is average, which by definition, is far below the top! \"We can always be average and do what’s normal. I’m not in this to do what’s normal.\" --Kobe Bryant 2 No reasonable excuses - don't make (reasonable) excuses that let you off the hook. You need the negative emotions that leads to inspired decision making. Not Worrying About What You Can’t Control 3 source ↩ source ↩ source ↩",
      "length": 856,
      "tokens": 214,
      "chunks": [
        {
          "blog_title": "A List Of Unconnected Thoughts And Aphorisms",
          "blog_url": "https://www.johnmathews.is/blog/a-list-of-unconnected-thoughts-and-aphorisms",
          "blog_date": "February 01, 2021",
          "content": "Do the people you care about love you back? It does not matter how slowly you go as long as you do not stop. Assume that nobody is going to help you, and nobody is going to stop you. Money is (just) fuel. Lets talk about the end. My current self, existing now, is to be seen in the context of my end, and my beginning. When you want money, ask for advice. When you want advice, ask for money. 1 If you want to be a top performer in any field you must become abnormal. Normal is average, which by definition, is far below the top! \"We can always be average and do what’s normal. I’m not in this to do what’s normal.\" --Kobe Bryant 2 No reasonable excuses - don't make (reasonable) excuses that let you off the hook. You need the negative emotions that leads to inspired decision making. Not Worrying About What You Can’t Control 3 source ↩ source ↩ source ↩",
          "content_length": 855,
          "content_tokens": 214,
          "embedding": []
        }
      ]
    },
    {
      "title": "Notes From An Interview With Geoffrey Hinton",
      "url": "https://www.johnmathews.is/blog/notes-from-an-interview-with-geoffrey-hinton",
      "date": "February 01, 2021",
      "content": "Read the literature, but don't read too much Trust your intuitions This person is either drunk or stupid For creative researchers; read a bit of the literature and notice something that you think everybody is doing wrong. (I guess GH is contrarian in this sense) right When people tell you that your (contrarian) approach is just no good, just keep at it. Either your intuitions are good or they're not. If they are good then you should follow them and you will eventually be successful. If they are bad then it doesn't matter what you do. You might as well trust your intuitions. When you try to replicate a published paper you discover all the little tricks needed to make it work. Never stop programming. If you give a student something to do and they are a bad student then they'll come back and say it didn't work. They'll say this because of some little decision they made which they didn't realise was crucial. But if you give it to a good student, you can give them anything and they will come back and say it works Read enough so that you start developing intuitions, and then trust your intuitions and go for it! - Don't be too worried if everybody else says its nonsense. If you think it's a really good idea, and others tell you its complete nonsense, then you know you are really onto something! One example of this is when Ramford and I first came up with variational methods, I sent a mail explaining it to a former student, who showed it to his colleagues. He told me that they said 'Either this guy is drunk or he is just stupid'. They really really thought is was nonsense. Maybe that is partly because of how i explained it - I explained it in intuitive terms, but when you have what you think is a good idea and other people think it is complete rubbish, that is the sign of a really good idea. See if you can find an advisor who has beliefs similar to your own, because if you work on stuff that your adviser feels deeply about, then you'll get a lot of good advice and time from them. trust your intuitions",
      "length": 2028,
      "tokens": 435,
      "chunks": [
        {
          "blog_title": "Notes From An Interview With Geoffrey Hinton",
          "blog_url": "https://www.johnmathews.is/blog/notes-from-an-interview-with-geoffrey-hinton",
          "blog_date": "February 01, 2021",
          "content": "Read the literature, but don't read too much Trust your intuitions This person is either drunk or stupid For creative researchers; read a bit of the literature and notice something that you think everybody is doing wrong. (I guess GH is contrarian in this sense) right When people tell you that your (contrarian) approach is just no good, just keep at it. Either your intuitions are good or they're not. If they are good then you should follow them and you will eventually be successful. If they are bad then it doesn't matter what you do. You might as well trust your intuitions. When you try to replicate a published paper you discover all the little tricks needed to make it work. Never stop programming. If you give a student something to do and they are a bad student then they'll come back and say it didn't work. They'll say this because of some little decision they made which they didn't realise was crucial.",
          "content_length": 917,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Notes From An Interview With Geoffrey Hinton",
          "blog_url": "https://www.johnmathews.is/blog/notes-from-an-interview-with-geoffrey-hinton",
          "blog_date": "February 01, 2021",
          "content": "But if you give it to a good student, you can give them anything and they will come back and say it works Read enough so that you start developing intuitions, and then trust your intuitions and go for it! - Don't be too worried if everybody else says its nonsense. If you think it's a really good idea, and others tell you its complete nonsense, then you know you are really onto something! One example of this is when Ramford and I first came up with variational methods, I sent a mail explaining it to a former student, who showed it to his colleagues. He told me that they said 'Either this guy is drunk or he is just stupid' They really really thought is was nonsense. Maybe that is partly because of how i explained it - I explained it in intuitive terms, but when you have what you think is a good idea and other people think it is complete rubbish, that is the sign of a really good idea. See if you can find an advisor who has beliefs similar to your own, because if you work on stuff that your adviser feels deeply about, then you'll get a lot of good advice and time from them. trust your intuitions.",
          "content_length": 1109,
          "content_tokens": 242,
          "embedding": []
        }
      ]
    },
    {
      "title": "Questions For Interesting Conversations",
      "url": "https://www.johnmathews.is/blog/questions",
      "date": "February 01, 2021",
      "content": "best piece of advice 18-year-old self lost or rejected a friend a time when you changed your mind thinking about lately What's it like to live in translation choice between remembering and forgetting autonomy or loyalty 'I’m giving up' Was your identity given to you or chosen by you",
      "length": 283,
      "tokens": 59,
      "chunks": [
        {
          "blog_title": "Questions For Interesting Conversations",
          "blog_url": "https://www.johnmathews.is/blog/questions",
          "blog_date": "February 01, 2021",
          "content": "best piece of advice 18-year-old self lost or rejected a friend a time when you changed your mind thinking about lately What's it like to live in translation choice between remembering and forgetting autonomy or loyalty 'I’m giving up' Was your identity given to you or chosen by you",
          "content_length": 283,
          "content_tokens": 59,
          "embedding": []
        }
      ]
    },
    {
      "title": "Portfolio: Image Recognition",
      "url": "https://www.johnmathews.is/blog/portfolio-image-recognition",
      "date": "January 26, 2021",
      "content": "computer vision model",
      "length": 21,
      "tokens": 3,
      "chunks": [
        {
          "blog_title": "Portfolio: Image Recognition",
          "blog_url": "https://www.johnmathews.is/blog/portfolio-image-recognition",
          "blog_date": "January 26, 2021",
          "content": "computer vision model",
          "content_length": 21,
          "content_tokens": 3,
          "embedding": []
        }
      ]
    },
    {
      "title": "Mist",
      "url": "https://www.johnmathews.is/blog/spaarndam-photographs",
      "date": "January 22, 2021",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "Mist",
          "blog_url": "https://www.johnmathews.is/blog/spaarndam-photographs",
          "blog_date": "January 22, 2021",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "Spaarndam",
      "url": "https://www.johnmathews.is/blog/photographs",
      "date": "January 22, 2021",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "Spaarndam",
          "blog_url": "https://www.johnmathews.is/blog/photographs",
          "blog_date": "January 22, 2021",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "Notes From \"Mastering Vim Quickly\"",
      "url": "https://www.johnmathews.is/blog/notes-from-mastering-vim-quickly",
      "date": "January 21, 2021",
      "content": "Contents: > Verbs > Registers > Insert Mode > Normal Mode > Command Mode > Visual Block Mode <C-V> > Ranges > Searching > Undo > Splits > Macros > Other s r c/hello \"ayy a \"Ay :registers <C-W> <C-U> cgn / * # <verb>gn change delete .dot <C-R> 0 <C-R><C-P>0 <C-A> <C-X set ft? <C-V> g<C-A> :put =range(1,10) :for i in range(1,100) | put ='192.168.1.'.i | endfor g# g* # * / <C-R> <C-W> <C-o> :s/<old_word\\>/new/g :s/(old_word1\\|old_word2\\)/new/g g <C-G> g- g+ :earlier 2d :later 5m :earlier 3f s m h d f :g/my_string/normal @a a :g/good/s/bad/ugly/g <C-W> r <C-W> R <C-W> H <C-W> J :only :g/pattern/norm @o O <C-O> .dot",
      "length": 618,
      "tokens": 301,
      "chunks": [
        {
          "blog_title": "Notes From \"Mastering Vim Quickly\"",
          "blog_url": "https://www.johnmathews.is/blog/notes-from-mastering-vim-quickly",
          "blog_date": "January 21, 2021",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        },
        {
          "blog_title": "Notes From \"Mastering Vim Quickly\"",
          "blog_url": "https://www.johnmathews.is/blog/notes-from-mastering-vim-quickly",
          "blog_date": "January 21, 2021",
          "content": "Contents: > Verbs > Registers > Insert Mode > Normal Mode > Command Mode > Visual Block Mode <C-V> > Ranges > Searching > Undo > Splits > Macros > Other s r c/hello \"ayy a \"Ay :registers <C-W> <C-U> cgn / * # <verb>gn change delete .dot <C-R> 0 <C-R><C-P>0 <C-A> <C-X set ft? <C-V> g<C-A> :put =range(1,10) :for i in range(1,100) | put ='192.168.1.'.i | endfor g# g* # * / <C-R> <C-W> <C-o> :s/<old_word\\>/new/g :s/(old_word1\\|old_word2\\)/new/g g <C-G> g- g+ :earlier 2d :later 5m :earlier 3f s m h d f :g/my_string/normal @a a :g/good/s/bad/ugly/g <C-W> r <C-W> R <C-W> H <C-W> J :only :g/pattern/norm @o O <C-O> .dot.",
          "content_length": 619,
          "content_tokens": 302,
          "embedding": []
        }
      ]
    },
    {
      "title": "Notes From \"Powerful Python\"",
      "url": "https://www.johnmathews.is/blog/python-notes",
      "date": "January 21, 2021",
      "content": "Powerful Python Contents: > Emergent Abstractions > Practioner, Engineer, Scientist > Sentinel Values > Levels of Python Code > Read PEPs 1 Is it a couple of convenience methods on some helper class? The code below gives you three ways of instantiating the twitter API client within the same class: A generic \"normal\" way A specialized way that looks for certain environment variables A specialized way that looks for a configuration file import import # https://pypi.org/project/python-twitter/ class ApiClient : def __init__ ( , , , , ) : . = . ( , , , ) @classmethod def from_environ ( ) : return ( . [ 'TWITTER_CONSUMER_KEY' ] , . [ 'TWITTER_CONSUMER_SECRET' ] , . [ 'TWITTER_ACCESS_TOKEN_KEY' ] , . [ 'TWITTER_ACCESS_TOKEN_SECRET' ] ) @classmethod def from_config_file ( , ) : with open ( ) as : # ... return ( . . . ) # ... Practioner Engineer Scientist Aim for the engineer level. None \"None\" object() object A sentinel value is a value you can set a variable to. It's special because it differs from all other legal or possible values that the variable could have. It's used as a signal or as a canary that something (bad or unexpected) has happened. Syntax Idioms Design Patterns More info Creational Patterns, like Factories Structural Patterns, like Adapters or Proxies Visitor Strategy These tend to be the same across different languages. Architectural A Python Enhancement Proposal is a document that's written to propose a new feature of Python. It fully details the proposed feature, the arguments for and against it, and lots of sample code. If the PEP is accepted into a future version of Python, the PEP becomes the authoritative document for that feature and how to use it. PEPs tend to be written by the best programmers in the world, so hang out with them. Abstraction ↩",
      "length": 1792,
      "tokens": 446,
      "chunks": [
        {
          "blog_title": "Notes From \"Powerful Python\"",
          "blog_url": "https://www.johnmathews.is/blog/python-notes",
          "blog_date": "January 21, 2021",
          "content": "Powerful Python Contents: > Emergent Abstractions > Practioner, Engineer, Scientist > Sentinel Values > Levels of Python Code > Read PEPs 1 Is it a couple of convenience methods on some helper class? The code below gives you three ways of instantiating the twitter API client within the same class: A generic \"normal\" way A specialized way that looks for certain environment variables A specialized way that looks for a configuration file import import # https://pypi.org/project/python-twitter/ class ApiClient : def __init__ ( , , , , ) :  =  ( , , , ) @classmethod def from_environ ( ) : return (  [ 'TWITTER_CONSUMER_KEY' ] ,  [ 'TWITTER_CONSUMER_SECRET' ] ,  [ 'TWITTER_ACCESS_TOKEN_KEY' ] ,",
          "content_length": 696,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Notes From \"Powerful Python\"",
          "blog_url": "https://www.johnmathews.is/blog/python-notes",
          "blog_date": "January 21, 2021",
          "content": "[ 'TWITTER_ACCESS_TOKEN_SECRET' ] ) @classmethod def from_config_file ( , ) : with open ( ) as : # .. return (  ) # .. Practioner Engineer Scientist Aim for the engineer level. None \"None\" object() object A sentinel value is a value you can set a variable to. It's special because it differs from all other legal or possible values that the variable could have. It's used as a signal or as a canary that something (bad or unexpected) has happened. Syntax Idioms Design Patterns More info Creational Patterns, like Factories Structural Patterns, like Adapters or Proxies Visitor Strategy These tend to be the same across different languages. Architectural A Python Enhancement Proposal is a document that's written to propose a new feature of Python. It fully details the proposed feature, the arguments for and against it, and lots of sample code. If the PEP is accepted into a future version of Python, the PEP becomes the authoritative document for that feature and how to use it. PEPs tend to be written by the best programmers in the world, so hang out with them. Abstraction ↩",
          "content_length": 1080,
          "content_tokens": 252,
          "embedding": []
        }
      ]
    },
    {
      "title": "Mental Models I Used To Use",
      "url": "https://www.johnmathews.is/blog/mental-models-i-used-to-use",
      "date": "January 20, 2021",
      "content": "The rules (policies), and mental models that helped me succeed in one season or phase of life may not be the best for the next phase. Here are a few mental models I remember being conscious of in previous years. I've probably already forgotten some. Always ask \"why...\" \"What if...\" Adapt Let people talk Inversion Regrets are inevitable and 1 There is beauty and luxury in being in such a bad spot that you are backed into a corner with seemingly no way out. Things become black and white, instead of shades of gray, and that will make priorities and options much clearer. You are likely to work very efficiently and effectively in this scenario, and you will learn important things about yourself. Now that I'm older and I have responsibilities, I can't ever let things become so bad that a situation becomes black and white. I have to navigate a world of grays. If they do become black and white, I'll already have a long list of failings. When I was younger, things were more fragile. My resources were smaller and things could quickly flip from good to bad. Enjoy the few benefits that a situation like that gives, because (hopefully) once its gone its gone for good. The best way to solve a problem is to prevent it from occurring in the first place. Succeeding at this will bring its own challenges. Take responsibility for things you are not responsible for, kind of. Do it deliberately and for your own benefit, but don't forget that you are only pretending that it's your responsibility. If you do this, you will force yourself to understand a situation more deeply and from other peoples perspectives. This will let you learn faster and help you in future. Keep this at arms length though - it's make-believe and you need to be able to switch it on and off. It's a toy for you to play with. This seems to be what \"extreme responsibility\" is. the map is not the territory ↩",
      "length": 1883,
      "tokens": 400,
      "chunks": [
        {
          "blog_title": "Mental Models I Used To Use",
          "blog_url": "https://www.johnmathews.is/blog/mental-models-i-used-to-use",
          "blog_date": "January 20, 2021",
          "content": "The rules (policies), and mental models that helped me succeed in one season or phase of life may not be the best for the next phase. Here are a few mental models I remember being conscious of in previous years. I've probably already forgotten some. Always ask \"why...\" \"What if...\" Adapt Let people talk Inversion Regrets are inevitable and 1 There is beauty and luxury in being in such a bad spot that you are backed into a corner with seemingly no way out. Things become black and white, instead of shades of gray, and that will make priorities and options much clearer. You are likely to work very efficiently and effectively in this scenario, and you will learn important things about yourself. Now that I'm older and I have responsibilities, I can't ever let things become so bad that a situation becomes black and white. I have to navigate a world of grays. If they do become black and white, I'll already have a long list of failings.",
          "content_length": 942,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Mental Models I Used To Use",
          "blog_url": "https://www.johnmathews.is/blog/mental-models-i-used-to-use",
          "blog_date": "January 20, 2021",
          "content": "When I was younger, things were more fragile. My resources were smaller and things could quickly flip from good to bad. Enjoy the few benefits that a situation like that gives, because (hopefully) once its gone its gone for good. The best way to solve a problem is to prevent it from occurring in the first place. Succeeding at this will bring its own challenges. Take responsibility for things you are not responsible for, kind of. Do it deliberately and for your own benefit, but don't forget that you are only pretending that it's your responsibility. If you do this, you will force yourself to understand a situation more deeply and from other peoples perspectives. This will let you learn faster and help you in future. Keep this at arms length though - it's make-believe and you need to be able to switch it on and off. It's a toy for you to play with. This seems to be what \"extreme responsibility\" is. the map is not the territory ↩",
          "content_length": 939,
          "content_tokens": 202,
          "embedding": []
        }
      ]
    },
    {
      "title": "What's So Different About Now",
      "url": "https://www.johnmathews.is/blog/whats-so-different-about-now",
      "date": "January 20, 2021",
      "content": "I think we are less aware of our ignorance than previous generations. It is easy to implicitly assume that all useful information is available to us, and that we are therefore more informed than we really are. I think this is because the internet has made information more accessible and global air travel have made the world feel smaller. Whilst an individual would hopefully never pretend to know everything, I think its easy to assume that the right information exists and is being used by the people to whom it is relevant. But the accessibility of all information has put us in a situation similar to information scarcity. We still need to actively search for the information we want, because the information that comes to us easily or for free is not equal to what we find when we apply effort. an",
      "length": 803,
      "tokens": 151,
      "chunks": [
        {
          "blog_title": "What's So Different About Now",
          "blog_url": "https://www.johnmathews.is/blog/whats-so-different-about-now",
          "blog_date": "January 20, 2021",
          "content": "I think we are less aware of our ignorance than previous generations. It is easy to implicitly assume that all useful information is available to us, and that we are therefore more informed than we really are. I think this is because the internet has made information more accessible and global air travel have made the world feel smaller. Whilst an individual would hopefully never pretend to know everything, I think its easy to assume that the right information exists and is being used by the people to whom it is relevant. But the accessibility of all information has put us in a situation similar to information scarcity. We still need to actively search for the information we want, because the information that comes to us easily or for free is not equal to what we find when we apply effort. an",
          "content_length": 803,
          "content_tokens": 151,
          "embedding": []
        }
      ]
    },
    {
      "title": "Predicting the Future using Human Nature and Technology",
      "url": "https://www.johnmathews.is/blog/what-happens-next",
      "date": "January 20, 2021",
      "content": "Predicting the future sounds like a tough problem, but we try to do it all the time without realising it. We predict the future when we think about how risky or scary something is, or when we think about what's really going to change because of an announcement or press release. We try to predict the future when we're at the supermarket checkouts and we try to pick the queue that will move the fastest. I always seem to pick the wrong one. There must be a million ways of trying to predicting the future but all the good ones are models which reduce complexity and emphasise key considerations. One of them could be comparing the influence of human nature and technology on the outcome, and then comparing the event to what's happened before. is What is driving the scenario? Is it human nature or technology? Supermarket checkouts are mostly manual and require a couple of adults to work together, so human nature has a much bigger role on efficiency than tech. Young men will stack and pack quickly, old women will be the opposite. What types of shopping bags they have, or how they pay, or even how many items they're buying, are probably not going to lead you to the right decision. The same probably works for getting through airport security.",
      "length": 1250,
      "tokens": 254,
      "chunks": [
        {
          "blog_title": "Predicting the Future using Human Nature and Technology",
          "blog_url": "https://www.johnmathews.is/blog/what-happens-next",
          "blog_date": "January 20, 2021",
          "content": "Predicting the future sounds like a tough problem, but we try to do it all the time without realising it. We predict the future when we think about how risky or scary something is, or when we think about what's really going to change because of an announcement or press release. We try to predict the future when we're at the supermarket checkouts and we try to pick the queue that will move the fastest. I always seem to pick the wrong one. There must be a million ways of trying to predicting the future but all the good ones are models which reduce complexity and emphasise key considerations. One of them could be comparing the influence of human nature and technology on the outcome, and then comparing the event to what's happened before. is What is driving the scenario? Is it human nature or technology? Supermarket checkouts are mostly manual and require a couple of adults to work together, so human nature has a much bigger role on efficiency than tech. Young men will stack and pack quickly, old women will be the opposite. What types of shopping bags they have, or how they pay, or even how many items they're buying, are probably not going to lead you to the right decision. The same probably works for getting through airport security.",
          "content_length": 1249,
          "content_tokens": 254,
          "embedding": []
        }
      ]
    },
    {
      "title": "Financial Doom And Gloom",
      "url": "https://www.johnmathews.is/blog/financial-doom-and-gloom",
      "date": "January 19, 2021",
      "content": "Financial crises seem to happen fairly regularly so they shouldn't be unexpected. But no-one seems particularly concerned about our current financial system, at the moment our attention is controlled by other threats. I'm concerned that a lot of money has been injected into the money supply but we haven't seen any inflation. And I am concerned that the price of stocks is no longer related to the value created by the company but instead by macro economics. always 1 But everyone is doing this which drives the price up, and because their price is increasing they increase even further. I think that the main reason for concern is super low interest rates and massive increases in the money supply, but there are a couple of other factors that are also contributing. It's easier than ever for retail investors to participate in the stock market, and this seems like a good idea. Democratization. However if retail investors have influence to effect prices, and they themselves can be manipulated or influenced regarding what or when they buy or sell, then that is likely a new kind of threat to financial stability. We've never seen social media combined with quick, cheap investment services for amateurs before. 2 Index funds cannot choose what they buy or how much they buy - they just track the index. If a company's stock crosses certain thresholds, their stock has to be bought or sold. It seems like its possible to create feedback loops where funds have to buy more of a rising stock, which increases its scarcity and price, which then requires index funds to purchase more of the same stock. 3 4 If the price of something doesn't represent its value, then a correction is inevitable. ↩ Index funds are the new kings of wall street ↩ Statista ↩ In2013dollars.com ↩",
      "length": 1774,
      "tokens": 352,
      "chunks": [
        {
          "blog_title": "Financial Doom And Gloom",
          "blog_url": "https://www.johnmathews.is/blog/financial-doom-and-gloom",
          "blog_date": "January 19, 2021",
          "content": "Financial crises seem to happen fairly regularly so they shouldn't be unexpected. But no-one seems particularly concerned about our current financial system, at the moment our attention is controlled by other threats. I'm concerned that a lot of money has been injected into the money supply but we haven't seen any inflation. And I am concerned that the price of stocks is no longer related to the value created by the company but instead by macro economics. always 1 But everyone is doing this which drives the price up, and because their price is increasing they increase even further. I think that the main reason for concern is super low interest rates and massive increases in the money supply, but there are a couple of other factors that are also contributing. It's easier than ever for retail investors to participate in the stock market, and this seems like a good idea. Democratization.",
          "content_length": 897,
          "content_tokens": 171,
          "embedding": []
        },
        {
          "blog_title": "Financial Doom And Gloom",
          "blog_url": "https://www.johnmathews.is/blog/financial-doom-and-gloom",
          "blog_date": "January 19, 2021",
          "content": "However if retail investors have influence to effect prices, and they themselves can be manipulated or influenced regarding what or when they buy or sell, then that is likely a new kind of threat to financial stability. We've never seen social media combined with quick, cheap investment services for amateurs before. 2 Index funds cannot choose what they buy or how much they buy - they just track the index. If a company's stock crosses certain thresholds, their stock has to be bought or sold. It seems like its possible to create feedback loops where funds have to buy more of a rising stock, which increases its scarcity and price, which then requires index funds to purchase more of the same stock. 3 4 If the price of something doesn't represent its value, then a correction is inevitable. ↩ Index funds are the new kings of wall street ↩ Statista ↩ In2013dollars.com ↩",
          "content_length": 876,
          "content_tokens": 181,
          "embedding": []
        }
      ]
    },
    {
      "title": "Debugging the more_categories plugin for Pelican",
      "url": "https://www.johnmathews.is/blog/debugging-more-categories-pelican-plugin",
      "date": "January 19, 2021",
      "content": "more_categories add subcategories assign multiple categories to articles. Subcategories aren't working and Pelican thinks each article just has categories than contain forward slashes. In his \"Powerful Python\" emails, Aaron Maxwell recommends looking at the source code for popular python libraries to see how really good Python is written, and how talented developers write code and solve problems. This is a good opportunity to look at the code that powers the plugin and see if if I can: Understand the source code Locate the source of the problem Fix the problem I don't know if Pelican is amazingly good quality or not, I get the feeling it could do with more developer resources, but I've got a real reason and motivation to look at the underlying code so I'm going to give it a shot. 1 register() more-categories def register ( ) : . . ( ) . . ( ) documentation As I write down my understanding of the plugin, I'm aware that my understanding is definitely incomplete and probably wrong. I hope that as I progress I will see the mistakes in what I've already written. get_categories() generator metadata def get_categories ( , ) : = ( . ( 'category' ) ) . ( ',' ) [ 'categories' ] = [ ( , . ) for in ] [ 'category' ] = [ 'categories' ] [ 0 ] metadata get_categories() metadata This means that this function is called once for each article. text_type six documentation six python2 python3 categories category categories categories list Category name generator.settings generator.settings Category category categories This class is the only class defined by the plugin (which is only 96 lines of code). It has 6 methods, 5 of them are decorated, and it has no constants. property _name.setter URLWrapper.name.setter URLWrapper pelican.urlwrappers property setter @property foo foo.setter Category @property _name @_name.setter _name @property slug ancestors _name . def _name ( , ) : if '/' in : , = . ( '/' , 1 ) . = . ( , . ) else : . = None . = . ( ) self.parent parentname self.settings ancestors as_dict ancestors create_categories get_categories @property URLWrapper URLWrapper as_dict ↩",
      "length": 2097,
      "tokens": 489,
      "chunks": [
        {
          "blog_title": "Debugging the more_categories plugin for Pelican",
          "blog_url": "https://www.johnmathews.is/blog/debugging-more-categories-pelican-plugin",
          "blog_date": "January 19, 2021",
          "content": "more_categories add subcategories assign multiple categories to articles. Subcategories aren't working and Pelican thinks each article just has categories than contain forward slashes. In his \"Powerful Python\" emails, Aaron Maxwell recommends looking at the source code for popular python libraries to see how really good Python is written, and how talented developers write code and solve problems. This is a good opportunity to look at the code that powers the plugin and see if if I can: Understand the source code Locate the source of the problem Fix the problem I don't know if Pelican is amazingly good quality or not, I get the feeling it could do with more developer resources, but I've got a real reason and motivation to look at the underlying code so I'm going to give it a shot. 1 register() more-categories def register ( ) :  ( )",
          "content_length": 843,
          "content_tokens": 176,
          "embedding": []
        },
        {
          "blog_title": "Debugging the more_categories plugin for Pelican",
          "blog_url": "https://www.johnmathews.is/blog/debugging-more-categories-pelican-plugin",
          "blog_date": "January 19, 2021",
          "content": "( ) documentation As I write down my understanding of the plugin, I'm aware that my understanding is definitely incomplete and probably wrong. I hope that as I progress I will see the mistakes in what I've already written. get_categories() generator metadata def get_categories ( , ) : = (  ( 'category' ) )  ( ',' ) [ 'categories' ] = [ ( ,  ) for in ] [ 'category' ] = [ 'categories' ] [ 0 ] metadata get_categories() metadata This means that this function is called once for each article. text_type six documentation six python2 python3 categories category categories categories list Category name generator.settings generator.settings Category category categories This class is the only class defined by the plugin (which is only 96 lines of code) It has 6 methods, 5 of them are decorated, and it has no constants.",
          "content_length": 819,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Debugging the more_categories plugin for Pelican",
          "blog_url": "https://www.johnmathews.is/blog/debugging-more-categories-pelican-plugin",
          "blog_date": "January 19, 2021",
          "content": "property _name.setter URLWrapper.name.setter URLWrapper pelican.urlwrappers property setter @property foo foo.setter Category @property _name @_name.setter _name @property slug ancestors _name  def _name ( , ) : if '/' in : , =  ( '/' , 1 )  =  ( ,  ) else :  = None  =  ( ) self.parent parentname self.settings ancestors as_dict ancestors create_categories get_categories @property URLWrapper URLWrapper as_dict ↩",
          "content_length": 414,
          "content_tokens": 125,
          "embedding": []
        }
      ]
    },
    {
      "title": "Different Views For Different Users",
      "url": "https://www.johnmathews.is/blog/different-views-for-different-users",
      "date": "January 19, 2021",
      "content": "This blog serves a variety of purposes. It's partly a journal of how I'm teaching myself to be a developer and a data scientist, and it's also a personal blog, with articles about my interests and experiences. technical non-technical 1 I did this mainly because I could. I like playing around with the blog. The JAM stack feels accessible and its fun working with tailwind and with jQuery. I think that playing (being curious, lighthearted, and unhurried and not being concerned with failure) is really important. Especially for adults who don't usually do it much. Most of my successes or big opportunities have been the result of a process that started with playing around. Here is the list of requirements I used when adding the feature: Requirements Steps N T A ↩",
      "length": 767,
      "tokens": 159,
      "chunks": [
        {
          "blog_title": "Different Views For Different Users",
          "blog_url": "https://www.johnmathews.is/blog/different-views-for-different-users",
          "blog_date": "January 19, 2021",
          "content": "This blog serves a variety of purposes. It's partly a journal of how I'm teaching myself to be a developer and a data scientist, and it's also a personal blog, with articles about my interests and experiences. technical non-technical 1 I did this mainly because I could. I like playing around with the blog. The JAM stack feels accessible and its fun working with tailwind and with jQuery. I think that playing (being curious, lighthearted, and unhurried and not being concerned with failure) is really important. Especially for adults who don't usually do it much. Most of my successes or big opportunities have been the result of a process that started with playing around. Here is the list of requirements I used when adding the feature: Requirements Steps N T A ↩",
          "content_length": 767,
          "content_tokens": 159,
          "embedding": []
        }
      ]
    },
    {
      "title": "3 Different Types Of Programming Problems",
      "url": "https://www.johnmathews.is/blog/different-types-of-problem",
      "date": "January 18, 2021",
      "content": "moneybar pippip Type 1 type 2 type 3 much When I start learning a hard thing (like web development), almost everything is in the third bucket and it's exhausting. You need to set aside big chunks of time, you need to be focussed and undistracted, calm and wide awake, and you need to be prepared for a long arduous journey. Probably your criteria for success should be \"am I dead?\" because then if you're asking the question you're guaranteed to be successful and keeping morale high is necessary for success. 1 type 2 Maybe this is because you know enough to break some big general problem into smaller problems (you are developing domain expertise) and your intuitions for how to solve the problem are becoming better so your first or second attempts are likely to be correct, rather than your fifth or sixth. Knowing how to google a problem so that you get the answer you need is also a really important skill, which requires intuiting how an English speaking expert would ask the question. This isn't trivial but I don't hear people discussing this often. type 2 2 type 1 All the big problems have been solved and now you've only got smaller problems left, and 3 4 type W For me, these tend to relate to blob storage solutions for web apps deployed into production. I can think of several factors why this is so, and I'll describe the specifics before generalising. When a web app runs in production, the data is not stored on the web server because the things that make a web-server cheap and efficient are not the things that make a database or a file storage bucket cheap and efficient. Therefore they are stored somewhere else and you need some plumbing to join everything together. There are some abstractions involved to make this work easily and securely. However when developing locally, you are doing everything on your laptop. You have a web-server, relational database and file system all in the same place. This is a big, fundamental, architectural difference between your development environment and your production environment. As a general rule, these are supposed to be as similar as possible. These differences make it much easier to make something that works locally but doesn't work in production, and it's very hard to test if a thing will work in production without deploying it to your staging environment, which you are likely less familiar with than your local development setup. Deploying to staging and debugging on staging is slower and harder than doing the same thing locally. Logging (and filtering) will likely be more important. So how do you solve these problems quickly and efficiently? What is it about this problem that makes it so hard? Let's examine what makes the problem difficult to solve: Iteration cycles are slow - I can't test locally, I have to deploy to staging and this takes time. The problem occurs in a 'high friction' environment - its difficult to dig around and figure out what's really going on when its hidden below 3 different layers of abstraction, on a remote machine that I have limited access to via a web browser. I want to be able to dig and investigate quickly and easily using the same tools I use for writing and testing code locally. I've taken great efforts to set up my local development environment so that I can do this, and its stressful to switch to a different and more limited set of tools. The problem is the result of several things interacting at once, and I can't just test things one at a time. These things are probably very similar to the abstractions. Thinking clearly, learning, buidling, solving problems, all rely on being able to separate or untangle a seemingly complex situation into its component parts so that you can figure out what causes what. If you can't isolate individual concerns or components, you have a black box that is keeping you ignorant. In web development, customized logging is usually a good way to being isolating and exploring particular components. Having said all that, I think the best way to solve a problem is to prevent it from occurring in the first place, but I'm not good enough to figure out how to do that, yet. ↩ type 1 ↩ ↩ ↩",
      "length": 4153,
      "tokens": 840,
      "chunks": [
        {
          "blog_title": "3 Different Types Of Programming Problems",
          "blog_url": "https://www.johnmathews.is/blog/different-types-of-problem",
          "blog_date": "January 18, 2021",
          "content": "moneybar pippip Type 1 type 2 type 3 much When I start learning a hard thing (like web development), almost everything is in the third bucket and it's exhausting. You need to set aside big chunks of time, you need to be focussed and undistracted, calm and wide awake, and you need to be prepared for a long arduous journey. Probably your criteria for success should be \"am I dead?\" because then if you're asking the question you're guaranteed to be successful and keeping morale high is necessary for success. 1 type 2 Maybe this is because you know enough to break some big general problem into smaller problems (you are developing domain expertise) and your intuitions for how to solve the problem are becoming better so your first or second attempts are likely to be correct, rather than your fifth or sixth.",
          "content_length": 811,
          "content_tokens": 168,
          "embedding": []
        },
        {
          "blog_title": "3 Different Types Of Programming Problems",
          "blog_url": "https://www.johnmathews.is/blog/different-types-of-problem",
          "blog_date": "January 18, 2021",
          "content": "Knowing how to google a problem so that you get the answer you need is also a really important skill, which requires intuiting how an English speaking expert would ask the question. This isn't trivial but I don't hear people discussing this often. type 2 2 type 1 All the big problems have been solved and now you've only got smaller problems left, and 3 4 type W For me, these tend to relate to blob storage solutions for web apps deployed into production. I can think of several factors why this is so, and I'll describe the specifics before generalising. When a web app runs in production, the data is not stored on the web server because the things that make a web-server cheap and efficient are not the things that make a database or a file storage bucket cheap and efficient. Therefore they are stored somewhere else and you need some plumbing to join everything together. There are some abstractions involved to make this work easily and securely.",
          "content_length": 954,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "3 Different Types Of Programming Problems",
          "blog_url": "https://www.johnmathews.is/blog/different-types-of-problem",
          "blog_date": "January 18, 2021",
          "content": "However when developing locally, you are doing everything on your laptop. You have a web-server, relational database and file system all in the same place. This is a big, fundamental, architectural difference between your development environment and your production environment. As a general rule, these are supposed to be as similar as possible. These differences make it much easier to make something that works locally but doesn't work in production, and it's very hard to test if a thing will work in production without deploying it to your staging environment, which you are likely less familiar with than your local development setup. Deploying to staging and debugging on staging is slower and harder than doing the same thing locally. Logging (and filtering) will likely be more important.",
          "content_length": 797,
          "content_tokens": 149,
          "embedding": []
        },
        {
          "blog_title": "3 Different Types Of Programming Problems",
          "blog_url": "https://www.johnmathews.is/blog/different-types-of-problem",
          "blog_date": "January 18, 2021",
          "content": "So how do you solve these problems quickly and efficiently? What is it about this problem that makes it so hard? Let's examine what makes the problem difficult to solve: Iteration cycles are slow - I can't test locally, I have to deploy to staging and this takes time. The problem occurs in a 'high friction' environment - its difficult to dig around and figure out what's really going on when its hidden below 3 different layers of abstraction, on a remote machine that I have limited access to via a web browser. I want to be able to dig and investigate quickly and easily using the same tools I use for writing and testing code locally. I've taken great efforts to set up my local development environment so that I can do this, and its stressful to switch to a different and more limited set of tools. The problem is the result of several things interacting at once, and I can't just test things one at a time. These things are probably very similar to the abstractions.",
          "content_length": 973,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "3 Different Types Of Programming Problems",
          "blog_url": "https://www.johnmathews.is/blog/different-types-of-problem",
          "blog_date": "January 18, 2021",
          "content": "Thinking clearly, learning, buidling, solving problems, all rely on being able to separate or untangle a seemingly complex situation into its component parts so that you can figure out what causes what. If you can't isolate individual concerns or components, you have a black box that is keeping you ignorant. In web development, customized logging is usually a good way to being isolating and exploring particular components. Having said all that, I think the best way to solve a problem is to prevent it from occurring in the first place, but I'm not good enough to figure out how to do that, yet. ↩ type 1 ↩ ↩ ↩",
          "content_length": 614,
          "content_tokens": 133,
          "embedding": []
        }
      ]
    },
    {
      "title": "Why I Want To Write Regularly",
      "url": "https://www.johnmathews.is/blog/why-i-want-to-write-regularly",
      "date": "January 18, 2021",
      "content": "I've started writing more frequently. I want to do this because I often have thoughts which I'd like to explore and develop further but rarely do. Writing forces me to organise my thoughts and look at how substantial they really are, or aren't. 1 sufficient dominos I don't expect writing regularly to become a permanent habit - it doesn't need to be. But I do want to focus on it for awhile so that I become significantly better. It's a skill that has too many benefits to be ignored. The blogs I remember most are focussed and unapologetic about their priorities. Most of them have a lot of text and do not focus on design. They make it easy to read content and don't spend time or attention on header images or styling. Before I redesigned this blog I had default settings that asked me to supply an image for each post, and for a summary, and a suggested tweet. None of it was necessary and whilst they all tried to make the blog better they ended up making it harder to write. These peripheral features added complexity and distracted from the main thing. They're are still there if I want to use them but they are not set up to be used by default anymore. They've been moved to the background and if I forget they exist then that's OK - it just shows they weren't as important in practice as I thought they would be. I was probably just having fun adding new features and working out how to build them. You Ain't Gonna Need It Powerful ideas are resilient and have many consequences. The older I get the more I believe that ideas matter article external validation ↩",
      "length": 1572,
      "tokens": 328,
      "chunks": [
        {
          "blog_title": "Why I Want To Write Regularly",
          "blog_url": "https://www.johnmathews.is/blog/why-i-want-to-write-regularly",
          "blog_date": "January 18, 2021",
          "content": "I've started writing more frequently. I want to do this because I often have thoughts which I'd like to explore and develop further but rarely do. Writing forces me to organise my thoughts and look at how substantial they really are, or aren't. 1 sufficient dominos I don't expect writing regularly to become a permanent habit - it doesn't need to be. But I do want to focus on it for awhile so that I become significantly better. It's a skill that has too many benefits to be ignored. The blogs I remember most are focussed and unapologetic about their priorities. Most of them have a lot of text and do not focus on design. They make it easy to read content and don't spend time or attention on header images or styling. Before I redesigned this blog I had default settings that asked me to supply an image for each post, and for a summary, and a suggested tweet.",
          "content_length": 865,
          "content_tokens": 184,
          "embedding": []
        },
        {
          "blog_title": "Why I Want To Write Regularly",
          "blog_url": "https://www.johnmathews.is/blog/why-i-want-to-write-regularly",
          "blog_date": "January 18, 2021",
          "content": "None of it was necessary and whilst they all tried to make the blog better they ended up making it harder to write. These peripheral features added complexity and distracted from the main thing. They're are still there if I want to use them but they are not set up to be used by default anymore. They've been moved to the background and if I forget they exist then that's OK - it just shows they weren't as important in practice as I thought they would be. I was probably just having fun adding new features and working out how to build them. You Ain't Gonna Need It Powerful ideas are resilient and have many consequences. The older I get the more I believe that ideas matter article external validation ↩",
          "content_length": 706,
          "content_tokens": 144,
          "embedding": []
        }
      ]
    },
    {
      "title": "Python: Becoming A Better Python Developer",
      "url": "https://www.johnmathews.is/blog/becoming-a-better-python-developer",
      "date": "January 18, 2021",
      "content": "I've been subscribed to Aaron Maxwell's \"Powerful Python\" newsletter for over a year and I really like it. His emails are opinionated and candid, and singularly focussed. He seems passionate about what he does and I like that. Ultimately, the emails are designed to drive sign-ups for his courses which I suspect would be very good, but there is a lot of value in the free emails. Thanks Aaron. I realised that the emails are sequential and each subscriber gets the same sequence of messages regardless of when they signed up. There is the 'first' message, and then the 'second', and they kind of progress and flow. This means that there are more benefits to paying attention than for usual email subscriptions. Even though the emails arrive when I'm at a supermarket, or making dinner for my kids, it's good to try and read it properly later. After being subscribed for several months, I unsubscribed and resubscribed. Now that I know how reliable and high quality this advice is I'm going to prioritise working through the examples and doing some of what I missed the first time. I've gone back to the beginning to reinforce the parts I know and to try again with what eluded me the first time. Three kinds of practice projects to become a better developer: Django argparse numpy tensorflow",
      "length": 1292,
      "tokens": 271,
      "chunks": [
        {
          "blog_title": "Python: Becoming A Better Python Developer",
          "blog_url": "https://www.johnmathews.is/blog/becoming-a-better-python-developer",
          "blog_date": "January 18, 2021",
          "content": "I've been subscribed to Aaron Maxwell's \"Powerful Python\" newsletter for over a year and I really like it. His emails are opinionated and candid, and singularly focussed. He seems passionate about what he does and I like that. Ultimately, the emails are designed to drive sign-ups for his courses which I suspect would be very good, but there is a lot of value in the free emails. Thanks Aaron. I realised that the emails are sequential and each subscriber gets the same sequence of messages regardless of when they signed up. There is the 'first' message, and then the 'second', and they kind of progress and flow. This means that there are more benefits to paying attention than for usual email subscriptions. Even though the emails arrive when I'm at a supermarket, or making dinner for my kids, it's good to try and read it properly later. After being subscribed for several months, I unsubscribed and resubscribed. Now that I know how reliable and high quality this advice is I'm going to prioritise working through the examples and doing some of what I missed the first time. I've gone back to the beginning to reinforce the parts I know and to try again with what eluded me the first time. Three kinds of practice projects to become a better developer: Django argparse numpy tensorflow.",
          "content_length": 1292,
          "content_tokens": 272,
          "embedding": []
        }
      ]
    },
    {
      "title": "Using Vim with large codebases",
      "url": "https://www.johnmathews.is/blog/vim-for-large-projects",
      "date": "January 15, 2021",
      "content": "I use Vim as my text editor and IDE. I like that its free, open source and customizable. Below are some of the most useful plugins and features I've started using this year when I was building Moneybar and learning how to use Django. .vimrc I'm happy to invest time and effort learning how to make the most of Vim and its plugins. I'm confident that I'll still be using it twenty years from now. .py .txt ~/.vim/ftplugin/<filetype>.vim Vim will look in this file when it opens a buffer of the corresponding file type. Good for formatting options like line length, tab spaces, vim commands that are language specific. .vimrc janko-m/vim-test dense-analysis/ale junegunn/fzf junegunn/fzf.vim fzf majutsushi/tagbar .vimrc \" ========== Global ========== set nocompatible \" always put it at the top of .vimrc. effects mappings, undo, etc. set encoding = - 8 \" utf-8 encoding set set t_Co = 256 \" number of colors set noerrorbells vb t_vb = \" no error bells, yes screnflash. set linespace = 8 set scrolloff = 2 \" minimum number of screen lines above and below the cursor set shortmess -= \" show how many times a search result occurs in current buffer, and index of current match set hidden set number \" Line numbers set splitbelow set splitright \" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab set \" Maintain undo history between sessions set =~ / . vim / undo \" put all the undo files in this dir filetype on \" enables filetype detection filetype on \" detection on, plugin on, indent on. To see the current status, type: :filetype syntax on \" syntax highlighting - try 'syntax on/enable' set noesckeys \" might break stuff, should make <ESC> delay smaller set timeoutlen = 350 \" timeoutlen is used for mapping delays set ttimeoutlen = 10 \" ttimeoutlen is used for key code delays \"Search/Find/Highlight ====================================== set incsearch ignorecase smartcase hlsearch highlight = = 'NONE' highlight = = = highlight = = red highlight = red = / / : nohlsearch < > nnoremap # #`` * * \" close buffers properly go to previous buffer, then delete the buffer you were just in. < > bd : bp bd < > < > bd : bp bd < > \" Spell check ============================================== set spelllang = en < > ss : setlocal spell ! < > < > sf = 1 < > < > \" ========== Set leader and local leader =================== let = \"\\<Space>\" let = \"\\\\\" \" insert 1 space to the right, without leaving normal mode < > < > < > < > < > \" Flash the cursor row (and column) colors are set after color scheme ======== \" nnoremap <leader>f :call Flash()<CR> \" function! Flash() \" \" set cursorline cursorcolumn \" set cursorline \" redraw \" sleep 110m \" set nocursorline \" endfunction \" Edit/Reload the .vimrc file < silent > < > ve : e < > < silent > < > : so < > augroup VimReload autocmd ! autocmd source augroup END \" Yank to clipboard < - c > \"+y if has ( \"clipboard\" ) set clipboard = \" copy to the system clipboard if has ( \"unnamedplus\" ) \" X11 support set clipboard += endif endif \" Go into NORMAL mode < > \" view working directory < > pwd : cd % : p : h < > \" toggle line wrap < > lw : set nowrap ! < > \" toggle line numbers < > ln : set ! < > \" Insert current datetime < > ( ) < > hh \"=strftime(\" % - % m - % d \")<CR>gp \" map w to ` w \" Swap : and ; ; : : ; ; : : ; \" Navigation & movemement \" save buffer if it has been changed ww : update < > \" close Vim, but not if there are unsaved changes qa : qa < > \" save all changes wa : wa < > \" close buffer : bp bd < > wq : update < > : bp bd < > \" switch buffers < silent > + : bn < > < silent > : bp < > \" Split navigations < > h < - > < - > < > j < - > < - > < > k < - > < - > < > l < - > < - > < > ww < - > < - > < > wq < - > < - > \" split (pane) resize < - k > : resize + 2 < > < - j > : resize - 2 < > < - h > : vertical resize + 2 < > < - l > : vertical resize - 2 < > \" open help in vertical split by default cabbrev vert help \" Natural cursor movement over wrapped lines j k \" Insert blank lines in normal mode < > o o < > k < > < > j \"***************************** \"========== PLUGINS ========== \"***************************** call begin ( '~/.vim/plugged' ) \" numbers as text objects 'MisanthropicBit/vim-numbers' \"run shell commands async in vim8\" 'skywind3000/asyncrun.vim' let : = 10 \" When using :python or :!python, access the packages in venv \" :VirtualEnvList \" :VirtualEnvActivate <tab> 'jmcantrell/vim-virtualenv' \" force quickfix to be full widtth wincmd \" testing - many languages and test runners 'janko-m/vim-test' let = \"asyncrun_background\" let python = 'pytest' let python options = '-x' let vim = \"belowright\" < silent > t < > n : < > < silent > t < > f : < > < silent > t < > : < > < silent > t < > l : < > < silent > t < > : < > \" toggle the quickfix window function ! ToggleQuickFix ( ) if empty ( filter ( getwininfo ( ) , 'v:val.quickfix' ) ) copen 15 setlocal else cclose endif endfunction < silent > cc : call ToggleQuickFix ( ) < cr > \" generates an index (or tag) file of language objects found in source files \" <C-]> jump to definition \" <C-O> jump back \" g] see a list of multiple matches \" <C-t> 'universal-ctags/ctags' \" (re)generate tags file in the bg 'ludovicchabant/vim-gutentags' let : = [ '.json' , '.mypy_cache/**' ] \" sidebar that displays the ctags-generated tags of the current file, ordered by their scope 'majutsushi/tagbar' < > : < > < > : < > \" add python library code to tags file, goto def with <C-]> let = let .= '/lib/python3.8/' \" Async linting engine 'dense-analysis/ale' let : = 0 let : = 0 \" ALE completion let : = 0 set omnifunc = let : = 1 < > : < > < > : < > < silent > < > : < cr > < silent > < > : < cr > \" iSort 'fisadev/vim-isort' \" track the snippets engine 'sirver/ultisnips' \" Snippets are separated from the engine. Add this if you want them: 'honza/vim-snippets' \" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe. let : = \"<c-a>\" let : = \"<c-b>\" let : = \"<c-z>\" \" If you want :UltiSnipsEdit to split your window. \" let g:UltiSnipsEditSplit=\" vertical \" 'Valloric/YouCompleteMe' 'davidhalter/jedi' 'maksimr/vim-jsbeautify' < > x : < > \" the subcommands add entries to Vim 's ' so \" 'CTRL-O' to to ( \" 'CTRL-I' to ; ':h jumplist' for ) let : = 0 let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 \" autoclose parens, brackets etc \" Plug 'townk/vim-autoclose' \" vim-tmux focus events 'tmux-plugins/vim-tmux-focus-events' \" Code folding \" Plug 'konfekt/fastfold' \" match m of n https://vimawesome.com/plugin/indexedsearch \" Plug 'henrik/vim-indexed-search' \" adds vertical lines to easily show indent levels 'yggdroot/indentline' \" Fugitive 'tpope/vim-fugitive' \" Marks 'kshenoy/vim-signature' \" Latex Vimtex 'lervag/vimtex' let : = 'latex' autocmd set updatetime = 1 let : = 'open -a Preview' let : = 'Underfull' . \"\\n\" . 'Overfull' . \"\\n\" . 'specifier changed to' . \"\\n\" . 'You have requested' . \"\\n\" . 'Missing number, treated as zero.' . \"\\n\" . 'There were undefined references' . \"\\n\" . 'Citation %.%# undefined' . \"\\n\" . 'Double space found.' . \"\\n\" let : = 8 \" Rainbow parenthesis let = [ 'html' , 'md' , 'wiki' ] autocmd * if index ( , ft ) < 0 'luochen1990/rainbow' let : = 1 let : = { 'guifgs' : [ 'green' , 'magenta1' , 'gold' , 'red' , 'deepskyblue' ] , 'guis' : [ 'bold' , 'standout' , 'undercurl' , 'italic' , 'strikethrough' ] } \" Set color scheme. set background = 'chriskempson/base16-vim' \" colorscheme base16-default-dark colorscheme let : = 1 let : = 1 let : = 1 \" colorscheme modifications highlight = = highlight = = highlight = = hi term = = = = hi term = = = = \" SpecialKey - use :set list to toggle visibility of EOL, CR, etc hi term = = = = \" colors for flashing cursorline and cursorcolumn hi = = = = = hi = = = = = \" query what kind of syntax is this color? - wc wc : \"hi<\" . synIDattr ( synID ( line ( \".\" ) , col ( \".\" ) , 1 ) , \"name\" ) . '> trans<' . synIDattr ( synID ( line ( \".\" ) , col ( \".\" ) , 0 ) , \"name\" ) . \"> lo<\" . synIDattr ( synIDtrans ( synID ( line ( \".\" ) , col ( \".\" ) , 1 ) ) , \"name\" ) . \">\" < > \" fuzzy file, buffer, tag finder set rtp += / / / opt / \" ensure you have the latest version 'junegunn/fzf' , { 'do' : { - > install ( ) } } 'junegunn/fzf.vim' < silent > < > e : < > < silent > < > r : < > < silent > < > t : < > < silent > < > ff : < > \" nnoremap <silent> <Leader>ff :Ag<CR> < silent > < > la : < > < silent > < > ll : < > < silent > < > : < > < silent > < > : < > < silent > < > fs : < > < silent > < > : < > < silent > < > : < > < silent > < > hh : < > < silent > < > h : : : < > < silent > < > h / : / < > \" let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline' \" let $FZF_DEFAULT_COMMAND=\" - - files - - hidden \" let : = 0 let : = { 'down' : '~50%' } \" let g:fzf_preview_window = '' let : = 'right:0%' function ! : copy_results ( lines ) let = join ( : lines , \"\\n\" ) if len ( : lines ) > 1 let .= \"\\n\" endif let + = endfunction let : = { 'ctrl-t' : 'tab split' , 'ctrl-x' : 'split' , 'ctrl-v' : 'vsplit' , 'ctrl-o' : function ( 's:copy_results' ) , } let : = { 'fg' : [ 'fg' , 'Normal' ] , 'bg' : [ 'bg' , 'Normal' ] , 'hl' : [ 'fg' , 'Comment' ] , 'fg+' : [ 'fg' , 'CursorLine' , 'CursorColumn' , 'Normal' ] , 'bg+' : [ 'bg' , 'CursorLine' , 'CursorColumn' ] , 'hl+' : [ 'fg' , 'Statement' ] , 'info' : [ 'fg' , 'PreProc' ] , 'prompt' : [ 'fg' , 'Conditional' ] , 'pointer' : [ 'fg' , 'Exception' ] , 'marker' : [ 'fg' , 'Keyword' ] , 'spinner' : [ 'fg' , 'Label' ] , 'header' : [ 'fg' , 'Comment' ] } \" grep in vim - shows results in a split window 'mileszs/ack.vim' \" session tracking 'tpope/vim-obsession' \" pairs of handy bracket mapping 'tpope/vim-unimpaired' \" https://vimawesome.com/plugin/surround-vim 'tpope/vim-surround' \" repeat commands from plugin mappings 'tpope/vim-repeat' \" vinegar 'tpope/vim-vinegar' let : = 3 \" CSV 'chrisbra/csv.vim' \" nerdtree 'scrooloose/nerdtree' < > n : < > let : = 1 let = 1 \" Automatically delete the buffer of the file you just deleted let : = 2 \" 2 - open nerdtree only if directory was given as startup argument let : = 2 \" always focus file window after startup let = 0 \" Status bars 'vim-airline/vim-airline' 'vim-airline/vim-airline-themes' let : = 1 let : = 0 let : = 0 let : = 0 let : = '' \" remove encoding status let : = 1 let : = 'badwolf' let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 let : = 0 let : = 0 let : = 0 let : tabline = 0 let : tabline = 'unique_tail_improved' \" comments 'scrooloose/nerdcommenter' let : = 1 let : = 1 let : = 'left' let : = 0 let : = 1 \" markdown. tabular is required 'plasticboy/vim-markdown' 'godlygeek/tabular' let : = [ 'python=py' ] let : = 0 let : = 0 let : = 1 let : = 0 let : = \"\" let : = 1 let : = 4 let : = 1 \" writing prose 'reedes/vim-pencil' 'junegunn/goyo.vim' augroup pencil autocmd ! autocmd , , call init ( ) autocmd , , : augroup END let : = 'soft' autocmd ! autocmd ! \" Ensure :q to quit even when Goyo is active function ! : goyo_enter ( ) let b : = 0 let b : = 0 autocmd < buffer > let b : = 1 cabbrev < buffer > q ! let b : = 1 < > q ! setlocal wrap endfunction \" Quit Vim if this is the only remaining buffer function ! : goyo_leave ( ) if b : && len ( filter ( range ( 1 , bufnr ( '$' ) ) , 'buflisted(v:val)' ) ) == 1 if b : qa ! else qa endif endif endfunction autocmd ! call < > goyo_enter ( ) autocmd ! call < > goyo_leave ( ) < > : < > \" python linting \" F7 checks flake8 'nvie/vim-flake8' 'vim-scripts/pylint.vim' \"Flagging Unnecessary Whitespace highlight = red = 'sheerun/vim-polyglot' let : = [ 'latex' , 'html' ] let : = 1 let : = [ ] \" javaScript 'pangloss/vim-javascript' let : = 1 let : = 1 \" format .JSON files by using the jq cli tool com ! % ! \" HTML/JINJA 'glench/vim-jinja2-syntax' 'valloric/matchtagalways' \" Plug 'alvan/vim-closetag' let : = \"*.html, *.xhtml, *.phtml\" call end ( )",
      "length": 11768,
      "tokens": 3891,
      "chunks": [
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "I use Vim as my text editor and IDE. I like that its free, open source and customizable. Below are some of the most useful plugins and features I've started using this year when I was building Moneybar and learning how to use Django. .vimrc I'm happy to invest time and effort learning how to make the most of Vim and its plugins. I'm confident that I'll still be using it twenty years from now. .py .txt ~/.vim/ftplugin/<filetype>.vim Vim will look in this file when it opens a buffer of the corresponding file type. Good for formatting options like line length, tab spaces, vim commands that are language specific.",
          "content_length": 616,
          "content_tokens": 138,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": ".vimrc janko-m/vim-test dense-analysis/ale junegunn/fzf junegunn/fzf.vim fzf majutsushi/tagbar .vimrc \" ========== Global ========== set nocompatible \" always put it at the top of .vimrc. effects mappings, undo, etc. set encoding = - 8 \" utf-8 encoding set set t_Co = 256 \" number of colors set noerrorbells vb t_vb = \" no error bells, yes screnflash.",
          "content_length": 351,
          "content_tokens": 122,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "set linespace = 8 set scrolloff = 2 \" minimum number of screen lines above and below the cursor set shortmess -= \" show how many times a search result occurs in current buffer, and index of current match set hidden set number \" Line numbers set splitbelow set splitright \" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab set \" Maintain undo history between sessions set =~ /  vim / undo \" put all the undo files in this dir filetype on \" enables filetype detection filetype on \" detection on, plugin on, indent on.",
          "content_length": 526,
          "content_tokens": 121,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "To see the current status, type: :filetype syntax on \" syntax highlighting - try 'syntax on/enable' set noesckeys \" might break stuff, should make <ESC> delay smaller set timeoutlen = 350 \" timeoutlen is used for mapping delays set ttimeoutlen = 10 \" ttimeoutlen is used for key code delays \"Search/Find/Highlight ====================================== set incsearch ignorecase smartcase hlsearch highlight = = 'NONE' highlight = = = highlight = = red highlight = red = / / : nohlsearch < > nnoremap # #`` * * \" close buffers properly go to previous buffer, then delete the buffer you were just in.",
          "content_length": 598,
          "content_tokens": 145,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "< > bd : bp bd < > < > bd : bp bd < > \" Spell check ============================================== set spelllang = en < > ss : setlocal spell ! < > < > sf = 1 < > < > \" ========== Set leader and local leader =================== let = \"\\<Space>\" let = \"\\\\\" \" insert 1 space to the right, without leaving normal mode < > < > < > < > < > \" Flash the cursor row (and column) colors are set after color scheme ======== \" nnoremap <leader>f :call Flash()<CR> \" function! Flash() \" \" set cursorline cursorcolumn \" set cursorline \" redraw \" sleep 110m \" set nocursorline \" endfunction \" Edit/Reload the .vimrc file < silent > < > ve : e < > < silent > < > : so < > augroup VimReload autocmd ! autocmd source augroup END \" Yank to clipboard < - c > \"+y if has ( \"clipboard\" ) set clipboard = \" copy to the system clipboard if has ( \"unnamedplus\" ) \" X11 support set clipboard += endif endif \" Go into NORMAL mode < > \" view working directory < > pwd : cd % : p : h < > \" toggle line wrap < > lw : set nowrap ! < > \" toggle line numbers < > ln : set ! < > \" Insert current datetime < > ( ) < > hh \"=strftime(\" % - % m - % d \")<CR>gp \" map w to ` w \" Swap : and ; ; : : ; ; : : ; \" Navigation & movemement \" save buffer if it has been changed ww : update < > \" close Vim, but not if there are unsaved changes qa : qa < > \" save all changes wa : wa < > \" close buffer : bp bd < > wq : update < > : bp bd < > \" switch buffers < silent > + : bn < > < silent > : bp < > \" Split navigations < > h < - > < - > < > j < - > < - > < > k < - > < - > < > l < - > < - > < > ww < - > < - > < > wq < - > < - > \" split (pane) resize < - k > : resize + 2 < > < - j > : resize - 2 < > < - h > : vertical resize + 2 < > < - l > : vertical resize - 2 < > \" open help in vertical split by default cabbrev vert help \" Natural cursor movement over wrapped lines j k \" Insert blank lines in normal mode < > o o < > k < > < > j \"***************************** \"========== PLUGINS ========== \"***************************** call begin ( '~/.vim/plugged' ) \" numbers as text objects 'MisanthropicBit/vim-numbers' \"run shell commands async in vim8\" 'skywind3000/asyncrun.vim' let : = 10 \" When using :python or :!python, access the packages in venv \" :VirtualEnvList \" :VirtualEnvActivate <tab> 'jmcantrell/vim-virtualenv' \" force quickfix to be full widtth wincmd \" testing - many languages and test runners 'janko-m/vim-test' let = \"asyncrun_background\" let python = 'pytest' let python options = '-x' let vim = \"belowright\" < silent > t < > n : < > < silent > t < > f : < > < silent > t < > : < > < silent > t < > l : < > < silent > t < > : < > \" toggle the quickfix window function ! ToggleQuickFix ( ) if empty ( filter ( getwininfo ( ) , 'v:val.quickfix' ) ) copen 15 setlocal else cclose endif endfunction < silent > cc : call ToggleQuickFix ( ) < cr > \" generates an index (or tag) file of language objects found in source files \" <C-]> jump to definition \" <C-O> jump back \" g] see a list of multiple matches \" <C-t> 'universal-ctags/ctags' \" (re)generate tags file in the bg 'ludovicchabant/vim-gutentags' let : = [ '.json' , '.mypy_cache/**' ] \" sidebar that displays the ctags-generated tags of the current file, ordered by their scope 'majutsushi/tagbar' < > : < > < > : < > \" add python library code to tags file, goto def with <C-]> let = let .= '/lib/python3.8/' \" Async linting engine 'dense-analysis/ale' let : = 0 let : = 0 \" ALE completion let : = 0 set omnifunc = let : = 1 < > : < > < > : < > < silent > < > : < cr > < silent > < > : < cr > \" iSort 'fisadev/vim-isort' \" track the snippets engine 'sirver/ultisnips' \" Snippets are separated from the engine. Add this if you want them: 'honza/vim-snippets' \" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe. let : = \"<c-a>\" let : = \"<c-b>\" let : = \"<c-z>\" \" If you want :UltiSnipsEdit to split your window.",
          "content_length": 3881,
          "content_tokens": 1237,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "\" let g:UltiSnipsEditSplit=\" vertical \" 'Valloric/YouCompleteMe' 'davidhalter/jedi' 'maksimr/vim-jsbeautify' < > x : < > \" the subcommands add entries to Vim 's ' so \" 'CTRL-O' to to ( \" 'CTRL-I' to ; ':h jumplist' for ) let : = 0 let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 \" autoclose parens, brackets etc \" Plug 'townk/vim-autoclose' \" vim-tmux focus events 'tmux-plugins/vim-tmux-focus-events' \" Code folding \" Plug 'konfekt/fastfold' \" match m of n https://vimawesome.com/plugin/indexedsearch \" Plug 'henrik/vim-indexed-search' \" adds vertical lines to easily show indent levels 'yggdroot/indentline' \" Fugitive 'tpope/vim-fugitive' \" Marks 'kshenoy/vim-signature' \" Latex Vimtex 'lervag/vimtex' let : = 'latex' autocmd set updatetime = 1 let : = 'open -a Preview' let : = 'Underfull' \"\\n\"  'Overfull'  \"\\n\"  'specifier changed to'  \"\\n\"  'You have requested'  \"\\n\"  'Missing number, treated as zero.'  \"\\n\"  'There were undefined references'  \"\\n\"  'Citation %.%# undefined'  \"\\n\"  'Double space found.'",
          "content_length": 1034,
          "content_tokens": 380,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "\"\\n\" let : = 8 \" Rainbow parenthesis let = [ 'html' , 'md' , 'wiki' ] autocmd * if index ( , ft ) < 0 'luochen1990/rainbow' let : = 1 let : = { 'guifgs' : [ 'green' , 'magenta1' , 'gold' , 'red' , 'deepskyblue' ] , 'guis' : [ 'bold' , 'standout' , 'undercurl' , 'italic' , 'strikethrough' ] } \" Set color scheme.",
          "content_length": 312,
          "content_tokens": 127,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "set background = 'chriskempson/base16-vim' \" colorscheme base16-default-dark colorscheme let : = 1 let : = 1 let : = 1 \" colorscheme modifications highlight = = highlight = = highlight = = hi term = = = = hi term = = = = \" SpecialKey - use :set list to toggle visibility of EOL, CR, etc hi term = = = = \" colors for flashing cursorline and cursorcolumn hi = = = = = hi = = = = = \" query what kind of syntax is this color? - wc wc : \"hi<\"  synIDattr ( synID ( line ( \".\" ) , col ( \".\" ) , 1 ) , \"name\" )  '> trans<'  synIDattr ( synID ( line ( \".\" ) , col ( \".\" ) , 0 ) , \"name\" )  \"> lo<\" synIDattr ( synIDtrans ( synID ( line ( \".\" ) , col ( \".\" ) , 1 ) ) , \"name\" )",
          "content_length": 666,
          "content_tokens": 228,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "\">\" < > \" fuzzy file, buffer, tag finder set rtp += / / / opt / \" ensure you have the latest version 'junegunn/fzf' , { 'do' : { - > install ( ) } } 'junegunn/fzf.vim' < silent > < > e : < > < silent > < > r : < > < silent > < > t : < > < silent > < > ff : < > \" nnoremap <silent> <Leader>ff :Ag<CR> < silent > < > la : < > < silent > < > ll : < > < silent > < > : < > < silent > < > : < > < silent > < > fs : < > < silent > < > : < > < silent > < > : < > < silent > < > hh : < > < silent > < > h : : : < > < silent > < > h / : / < > \" let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline' \" let $FZF_DEFAULT_COMMAND=\" - - files - - hidden \" let : = 0 let : = { 'down' : '~50%' } \" let g:fzf_preview_window = '' let : = 'right:0%' function ! : copy_results ( lines ) let = join ( : lines , \"\\n\" ) if len ( : lines ) > 1 let .= \"\\n\" endif let + = endfunction let : = { 'ctrl-t' : 'tab split' , 'ctrl-x' : 'split' , 'ctrl-v' : 'vsplit' , 'ctrl-o' : function ( 's:copy_results' ) , } let : = { 'fg' : [ 'fg' , 'Normal' ] , 'bg' : [ 'bg' , 'Normal' ] , 'hl' : [ 'fg' , 'Comment' ] , 'fg+' : [ 'fg' , 'CursorLine' , 'CursorColumn' , 'Normal' ] , 'bg+' : [ 'bg' , 'CursorLine' , 'CursorColumn' ] , 'hl+' : [ 'fg' , 'Statement' ] , 'info' : [ 'fg' , 'PreProc' ] , 'prompt' : [ 'fg' , 'Conditional' ] , 'pointer' : [ 'fg' , 'Exception' ] , 'marker' : [ 'fg' , 'Keyword' ] , 'spinner' : [ 'fg' , 'Label' ] , 'header' : [ 'fg' , 'Comment' ] } \" grep in vim - shows results in a split window 'mileszs/ack.vim' \" session tracking 'tpope/vim-obsession' \" pairs of handy bracket mapping 'tpope/vim-unimpaired' \" https://vimawesome.com/plugin/surround-vim 'tpope/vim-surround' \" repeat commands from plugin mappings 'tpope/vim-repeat' \" vinegar 'tpope/vim-vinegar' let : = 3 \" CSV 'chrisbra/csv.vim' \" nerdtree 'scrooloose/nerdtree' < > n : < > let : = 1 let = 1 \" Automatically delete the buffer of the file you just deleted let : = 2 \" 2 - open nerdtree only if directory was given as startup argument let : = 2 \" always focus file window after startup let = 0 \" Status bars 'vim-airline/vim-airline' 'vim-airline/vim-airline-themes' let : = 1 let : = 0 let : = 0 let : = 0 let : = '' \" remove encoding status let : = 1 let : = 'badwolf' let : = 1 let : = 1 let : = 1 let : = 1 let : = 1 let : = 0 let : = 0 let : = 0 let : tabline = 0 let : tabline = 'unique_tail_improved' \" comments 'scrooloose/nerdcommenter' let : = 1 let : = 1 let : = 'left' let : = 0 let : = 1 \" markdown.",
          "content_length": 2469,
          "content_tokens": 928,
          "embedding": []
        },
        {
          "blog_title": "Using Vim with large codebases",
          "blog_url": "https://www.johnmathews.is/blog/vim-for-large-projects",
          "blog_date": "January 15, 2021",
          "content": "tabular is required 'plasticboy/vim-markdown' 'godlygeek/tabular' let : = [ 'python=py' ] let : = 0 let : = 0 let : = 1 let : = 0 let : = \"\" let : = 1 let : = 4 let : = 1 \" writing prose 'reedes/vim-pencil' 'junegunn/goyo.vim' augroup pencil autocmd ! autocmd , , call init ( ) autocmd , , : augroup END let : = 'soft' autocmd ! autocmd ! \" Ensure :q to quit even when Goyo is active function ! : goyo_enter ( ) let b : = 0 let b : = 0 autocmd < buffer > let b : = 1 cabbrev < buffer > q ! let b : = 1 < > q ! setlocal wrap endfunction \" Quit Vim if this is the only remaining buffer function ! : goyo_leave ( ) if b : && len ( filter ( range ( 1 , bufnr ( '$' ) ) , 'buflisted(v:val)' ) ) == 1 if b : qa ! else qa endif endif endfunction autocmd ! call < > goyo_enter ( ) autocmd ! call < > goyo_leave ( ) < > : < > \" python linting \" F7 checks flake8 'nvie/vim-flake8' 'vim-scripts/pylint.vim' \"Flagging Unnecessary Whitespace highlight = red = 'sheerun/vim-polyglot' let : = [ 'latex' , 'html' ] let : = 1 let : = [ ] \" javaScript 'pangloss/vim-javascript' let : = 1 let : = 1 \" format .JSON files by using the jq cli tool com ! % ! \" HTML/JINJA 'glench/vim-jinja2-syntax' 'valloric/matchtagalways' \" Plug 'alvan/vim-closetag' let : = \"*.html, *.xhtml, *.phtml\" call end ( )",
          "content_length": 1277,
          "content_tokens": 463,
          "embedding": []
        }
      ]
    },
    {
      "title": "Using RSS",
      "url": "https://www.johnmathews.is/blog/using-rss",
      "date": "January 14, 2021",
      "content": "blog post 1 This idea crystalised why I was so glad I'd started using RSS feeds again. If readers use RSS, then authors don't need to concern themselves with attention. This removes pressure on the author to post frequently and lets them focus on quality over quantity. News feeds and ad supported platforms have fundamentally different mechanics and incentives. With RSS I can let good quality content come to me, on its own schedule. I don't need to remember to look for it, and the authors don't need to remind me that they exist. RSS is a very effective way of having good quality information come to you. Back in 2008, I used to use Google Reader to subscribe to RSS feeds. I was an aspiring photographer back then and I remember being subscribed to around 80 blogs. Each day I'd read articles from whoever had posted something new, without needing to visit their websites or remember who they are or that I'd subscribed to their blog. The authors didn't need to optimize their output according to an opaque and changing algorithm either - they didn't need to optimize article length, tags, post frequency, image inclusion or linked content. They could write how they wanted to, which I suspect leads to higher quality content. A few years later Google Reader was closed down, presumably because using RSS didn't fit with Googles advertising model. I was unaware of it at the time but I imagine it sent shockwaves through blogging communities and probably upended many businesses. I mostly stopped reading blogs. Facebook was growing fast, Instagram felt new and exciting, and content was moving onto 'platforms', or into walled gardens. And as they kept on growing the average quality of the content decreased. Twitter is like this now I think. There are some real diamonds to be found from time to time, but there's a lot of mud too. Mostly its just mud, but the occasional diamond can have outsized benefits. RSS isn't like this. I choose the contents of my 'news feed', and each article can be much longer than a Tweet, or a caption to a photo, or a status update. It's hard to write well and to create an interesting or useful blog post, and that makes it harder to dilute quality with entertaining distractions. I have complete control about what content I see, and I can change it whenever I want. The process is designed around me. netNewsWire Reeder 5 It keeps my inbox quieter, and it feels good to have a 'separation of concerns'. It makes it easier to read interesting content without being distracted. https://marco.org/2013/03/26/power-of-rss ↩",
      "length": 2563,
      "tokens": 535,
      "chunks": [
        {
          "blog_title": "Using RSS",
          "blog_url": "https://www.johnmathews.is/blog/using-rss",
          "blog_date": "January 14, 2021",
          "content": "blog post 1 This idea crystalised why I was so glad I'd started using RSS feeds again. If readers use RSS, then authors don't need to concern themselves with attention. This removes pressure on the author to post frequently and lets them focus on quality over quantity. News feeds and ad supported platforms have fundamentally different mechanics and incentives. With RSS I can let good quality content come to me, on its own schedule. I don't need to remember to look for it, and the authors don't need to remind me that they exist. RSS is a very effective way of having good quality information come to you. Back in 2008, I used to use Google Reader to subscribe to RSS feeds. I was an aspiring photographer back then and I remember being subscribed to around 80 blogs. Each day I'd read articles from whoever had posted something new, without needing to visit their websites or remember who they are or that I'd subscribed to their blog.",
          "content_length": 940,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Using RSS",
          "blog_url": "https://www.johnmathews.is/blog/using-rss",
          "blog_date": "January 14, 2021",
          "content": "The authors didn't need to optimize their output according to an opaque and changing algorithm either - they didn't need to optimize article length, tags, post frequency, image inclusion or linked content. They could write how they wanted to, which I suspect leads to higher quality content. A few years later Google Reader was closed down, presumably because using RSS didn't fit with Googles advertising model. I was unaware of it at the time but I imagine it sent shockwaves through blogging communities and probably upended many businesses. I mostly stopped reading blogs. Facebook was growing fast, Instagram felt new and exciting, and content was moving onto 'platforms', or into walled gardens. And as they kept on growing the average quality of the content decreased. Twitter is like this now I think. There are some real diamonds to be found from time to time, but there's a lot of mud too. Mostly its just mud, but the occasional diamond can have outsized benefits.",
          "content_length": 975,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Using RSS",
          "blog_url": "https://www.johnmathews.is/blog/using-rss",
          "blog_date": "January 14, 2021",
          "content": "RSS isn't like this. I choose the contents of my 'news feed', and each article can be much longer than a Tweet, or a caption to a photo, or a status update. It's hard to write well and to create an interesting or useful blog post, and that makes it harder to dilute quality with entertaining distractions. I have complete control about what content I see, and I can change it whenever I want. The process is designed around me. netNewsWire Reeder 5 It keeps my inbox quieter, and it feels good to have a 'separation of concerns' It makes it easier to read interesting content without being distracted. https://marco.org/2013/03/26/power-of-rss ↩",
          "content_length": 645,
          "content_tokens": 152,
          "embedding": []
        }
      ]
    },
    {
      "title": "Notes on learning Django",
      "url": "https://www.johnmathews.is/blog/learning-to-django",
      "date": "January 14, 2021",
      "content": "Contents: > In the beginning > A personal finances dashboard > Learning Django > The best moments > Adding a unique identifier to an existing authentication model > Testing code Jupyter Notebooks Notebooks are said to be a kind of \"gateway drug\" to programming, and I think that's true. They're the easiest and fastest way to start programming that I've come across. When you're working in a notebook, its easy to get data, wrangle it, and show some results. But as soon as you can create a chart or some summary table you inevitably wonder how you can show this to people more easily, and publishing the results to a website feels like the best most general and versatile solution. Unfortunately it's also the hardest, and so begins a long series of compromises and incremental progress. Learn to use a dashboarding API, and learn to create static sites. But the end-goal, the ultimate solution, is a data driven web app, with authentication, saved user preferences, scalable performance, and automatically updated data sources. When I moved to the Netherlands, I wanted to use a personal finances dashboard to check weekly expenses. There wasn't a web-app that would do this (though there are a couple of apps that are trying) so I built my own dashboard. Then a few friends asked if they could use it too. They couldn't because it was just a dashboard and not a web app, but I thought this was a good reason to jump into web development. It was a much bigger task than I anticipated. (And that's OK.) It took several attempts and was super frustrating, I would dabble for a few weeks, do a few tutorials, and then get completely lost when I tried to do something by myself. I'd get disorientated working across many different files and trying to visualise which part of the Model-View-Controller model, or the request-response cycle I was currently working on. any evidence of success at all I think the hardest things about Django are not actually Django. You'll need to comfortable with classes and inheritance. You'll also need to be comfortable with working across multiple files, and have some tools for searching across all you open buffers, or all the files in the project, at the same time. You'll also need to be comfortable with version control (Git) and using the command line. Get familiar with stack traces too. If you're familiar enough with all these things, so that using them doesn't feel new, but ideally feels familiar and comfortable, then I think you'll make quite quick progress with Django. Django uses the Model-View-Controller model. Models are how django maps Python objects to items in your database (oh yeah, you need to be familiar with SQL too...), Views are where requests are processed (also Middleware) and turned into Responses, which are then combined with templates (unless your building an API). You might notice I haven't mentioned what a Controller is - get used to information feeling incomplete whilst you're learning the ropes. It'll become clear soon enough. The 'curse of knowledge' states that once you've learnt something you can't imagine or remember what it's like to not know it. Before that happens completely, I want to record some of the 'ahah!' moments of 'learning Django'. MoneyBar.nl The learning curve felt steep. I wanted to do things \"right\" the first time because I wasn't building a toy, and although I felt that hindsight would show this to be a mistake in terms of efficiency, I did it anyway because I have a hunch that following my compulsions sometimes makes life harder in the short term and better in the long term. The best moments are usually preceded by the most frustrating. cookiecutter-django Sentry Celery task que whitenoise cookiecutter-django Django Allauth UUID After I'd figured out authentication, I started creating models for other simpler data (transactions and bank accounts I expect). This was much simpler and faster. I remember driving home one evening thinking that if I could get this far then success was inevitable. Before long, testing each part of the app by hand when I added or changed a feature was no longer trivial. I needed to find some way of automatically creating users and checking that they could log in and access views. pytest I think its normal and good to code at the limit of your knowledge, where you know just enough to make a thing \"work\". But this approach falters when you want to then test what you wrote. Or at least, the measure of \"just enough\" really changes when you require tests to be written. You don't just need to make it work, you need to understand why it works, so that you can write tests to assert that certain conditions pass and others fail. This feels really satisfying when it works, because you have proof that you really have grasped a bigger picture. There are far fewer (relevant) black boxes when you write tests. But it also makes learning slower, at least in the short term. It means you might have two get comfortable with a handful of abstractions, when you've already solved the problem you started with. This is frustrating, and it takes discipline to slow down, take a deeper look at the solution, and not just race on to the next feature.",
      "length": 5189,
      "tokens": 1085,
      "chunks": [
        {
          "blog_title": "Notes on learning Django",
          "blog_url": "https://www.johnmathews.is/blog/learning-to-django",
          "blog_date": "January 14, 2021",
          "content": "Contents: > In the beginning > A personal finances dashboard > Learning Django > The best moments > Adding a unique identifier to an existing authentication model > Testing code Jupyter Notebooks Notebooks are said to be a kind of \"gateway drug\" to programming, and I think that's true. They're the easiest and fastest way to start programming that I've come across. When you're working in a notebook, its easy to get data, wrangle it, and show some results. But as soon as you can create a chart or some summary table you inevitably wonder how you can show this to people more easily, and publishing the results to a website feels like the best most general and versatile solution. Unfortunately it's also the hardest, and so begins a long series of compromises and incremental progress. Learn to use a dashboarding API, and learn to create static sites.",
          "content_length": 855,
          "content_tokens": 177,
          "embedding": []
        },
        {
          "blog_title": "Notes on learning Django",
          "blog_url": "https://www.johnmathews.is/blog/learning-to-django",
          "blog_date": "January 14, 2021",
          "content": "But the end-goal, the ultimate solution, is a data driven web app, with authentication, saved user preferences, scalable performance, and automatically updated data sources. When I moved to the Netherlands, I wanted to use a personal finances dashboard to check weekly expenses. There wasn't a web-app that would do this (though there are a couple of apps that are trying) so I built my own dashboard. Then a few friends asked if they could use it too. They couldn't because it was just a dashboard and not a web app, but I thought this was a good reason to jump into web development. It was a much bigger task than I anticipated. (And that's OK.) It took several attempts and was super frustrating, I would dabble for a few weeks, do a few tutorials, and then get completely lost when I tried to do something by myself.",
          "content_length": 820,
          "content_tokens": 177,
          "embedding": []
        },
        {
          "blog_title": "Notes on learning Django",
          "blog_url": "https://www.johnmathews.is/blog/learning-to-django",
          "blog_date": "January 14, 2021",
          "content": "I'd get disorientated working across many different files and trying to visualise which part of the Model-View-Controller model, or the request-response cycle I was currently working on. any evidence of success at all I think the hardest things about Django are not actually Django. You'll need to comfortable with classes and inheritance. You'll also need to be comfortable with working across multiple files, and have some tools for searching across all you open buffers, or all the files in the project, at the same time. You'll also need to be comfortable with version control (Git) and using the command line. Get familiar with stack traces too. If you're familiar enough with all these things, so that using them doesn't feel new, but ideally feels familiar and comfortable, then I think you'll make quite quick progress with Django. Django uses the Model-View-Controller model.",
          "content_length": 884,
          "content_tokens": 180,
          "embedding": []
        },
        {
          "blog_title": "Notes on learning Django",
          "blog_url": "https://www.johnmathews.is/blog/learning-to-django",
          "blog_date": "January 14, 2021",
          "content": "Models are how django maps Python objects to items in your database (oh yeah, you need to be familiar with SQL too...), Views are where requests are processed (also Middleware) and turned into Responses, which are then combined with templates (unless your building an API) You might notice I haven't mentioned what a Controller is - get used to information feeling incomplete whilst you're learning the ropes. It'll become clear soon enough. The 'curse of knowledge' states that once you've learnt something you can't imagine or remember what it's like to not know it. Before that happens completely, I want to record some of the 'ahah!' moments of 'learning Django' MoneyBar.nl The learning curve felt steep.",
          "content_length": 709,
          "content_tokens": 150,
          "embedding": []
        },
        {
          "blog_title": "Notes on learning Django",
          "blog_url": "https://www.johnmathews.is/blog/learning-to-django",
          "blog_date": "January 14, 2021",
          "content": "I wanted to do things \"right\" the first time because I wasn't building a toy, and although I felt that hindsight would show this to be a mistake in terms of efficiency, I did it anyway because I have a hunch that following my compulsions sometimes makes life harder in the short term and better in the long term. The best moments are usually preceded by the most frustrating. cookiecutter-django Sentry Celery task que whitenoise cookiecutter-django Django Allauth UUID After I'd figured out authentication, I started creating models for other simpler data (transactions and bank accounts I expect) This was much simpler and faster. I remember driving home one evening thinking that if I could get this far then success was inevitable. Before long, testing each part of the app by hand when I added or changed a feature was no longer trivial. I needed to find some way of automatically creating users and checking that they could log in and access views.",
          "content_length": 954,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Notes on learning Django",
          "blog_url": "https://www.johnmathews.is/blog/learning-to-django",
          "blog_date": "January 14, 2021",
          "content": "pytest I think its normal and good to code at the limit of your knowledge, where you know just enough to make a thing \"work\" But this approach falters when you want to then test what you wrote. Or at least, the measure of \"just enough\" really changes when you require tests to be written. You don't just need to make it work, you need to understand why it works, so that you can write tests to assert that certain conditions pass and others fail. This feels really satisfying when it works, because you have proof that you really have grasped a bigger picture. There are far fewer (relevant) black boxes when you write tests. But it also makes learning slower, at least in the short term. It means you might have two get comfortable with a handful of abstractions, when you've already solved the problem you started with. This is frustrating, and it takes discipline to slow down, take a deeper look at the solution, and not just race on to the next feature.",
          "content_length": 957,
          "content_tokens": 204,
          "embedding": []
        }
      ]
    },
    {
      "title": "Data Science vs Web Development: Larger Code Bases",
      "url": "https://www.johnmathews.is/blog/larger-code-bases",
      "date": "January 14, 2021",
      "content": "One of the most immediate and basic differences between working as a data scientist or as a web developer is the number of files the codebase is spread across and the amount of code within each file. Web applications tend to be very modular - there are a lot of different things going on in a modern web app and generally they all need to be able to be modified or updated independently of each other. This requirement encourages modular code base architecture with the code broken down into testable units. When working on a data science project you often have a well defined and quite narrow pipe line. Each stage of a pipeline has well defined inputs and outputs. This seems to have the consequence of making data science projects tend towards a handful of files each with a substantial amount of unique (not boilerplate) code. In web development there seems to be more boilerplate, many more files spread across a tree of directories, and the average number of lines of code per file is significantly lower. These differences mean that code organization tools and IDE features play very different roles within each industry. In web development you really need to be able to jump between different files (or buffers) quickly, and search for text across multiple files. Writing idiomatically becomes more important, and writing code within discreet testable units becomes essential so that things don't break without being noticed. In data science, linting feels more optional, and searching for text within methods or functions outside the current module is rarer. I didn’t appreciate this until I paused my work as a Data Scientist and began building non-trivial web apps.",
      "length": 1676,
      "tokens": 321,
      "chunks": [
        {
          "blog_title": "Data Science vs Web Development: Larger Code Bases",
          "blog_url": "https://www.johnmathews.is/blog/larger-code-bases",
          "blog_date": "January 14, 2021",
          "content": "One of the most immediate and basic differences between working as a data scientist or as a web developer is the number of files the codebase is spread across and the amount of code within each file. Web applications tend to be very modular - there are a lot of different things going on in a modern web app and generally they all need to be able to be modified or updated independently of each other. This requirement encourages modular code base architecture with the code broken down into testable units. When working on a data science project you often have a well defined and quite narrow pipe line. Each stage of a pipeline has well defined inputs and outputs. This seems to have the consequence of making data science projects tend towards a handful of files each with a substantial amount of unique (not boilerplate) code. In web development there seems to be more boilerplate, many more files spread across a tree of directories, and the average number of lines of code per file is significantly lower.",
          "content_length": 1011,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "Data Science vs Web Development: Larger Code Bases",
          "blog_url": "https://www.johnmathews.is/blog/larger-code-bases",
          "blog_date": "January 14, 2021",
          "content": "These differences mean that code organization tools and IDE features play very different roles within each industry. In web development you really need to be able to jump between different files (or buffers) quickly, and search for text across multiple files. Writing idiomatically becomes more important, and writing code within discreet testable units becomes essential so that things don't break without being noticed. In data science, linting feels more optional, and searching for text within methods or functions outside the current module is rarer. I didn’t appreciate this until I paused my work as a Data Scientist and began building non-trivial web apps.",
          "content_length": 664,
          "content_tokens": 128,
          "embedding": []
        }
      ]
    },
    {
      "title": "Test Driven Development",
      "url": "https://www.johnmathews.is/blog/test-driven-development",
      "date": "January 06, 2021",
      "content": "Test Driven Development was mind-bending when I first grappled with it: \"Write a test for the code before you write the code\" all all every Last summer I was building a web app and began to break things unintentionally when adding new features. This soon led to lots of clicking around different pages to test if stuff was still working each time I made an update. This led to me thinking there must be a better way, which eventually brought me to Test Driven Development (TDD). It should have just led me to writing tests, which it did. But googling whatever I googled got me down the TDD rabbit hole rather than just the \"write some tests\" rabbit hole. Write tests for your code before you write the code. Write tests for bugs you've fixed to check they stay fixed. Write tests as a kind of documentation to show what stuff is supposed to be doing. Errr... close 1 Some of the main things I've learnt about writing tests: assert Write tests as you go. I haven't (yet) reached the elevated level of writing tests before I write the code to be tested, though I see why that would sometimes be useful. I do think writing tests sooner rather than later is best though, ideally as soon as you've got a basic version of your feature working. Coverage Freezegun Mypy only ↩",
      "length": 1268,
      "tokens": 278,
      "chunks": [
        {
          "blog_title": "Test Driven Development",
          "blog_url": "https://www.johnmathews.is/blog/test-driven-development",
          "blog_date": "January 06, 2021",
          "content": "Test Driven Development was mind-bending when I first grappled with it: \"Write a test for the code before you write the code\" all all every Last summer I was building a web app and began to break things unintentionally when adding new features. This soon led to lots of clicking around different pages to test if stuff was still working each time I made an update. This led to me thinking there must be a better way, which eventually brought me to Test Driven Development (TDD) It should have just led me to writing tests, which it did. But googling whatever I googled got me down the TDD rabbit hole rather than just the \"write some tests\" rabbit hole. Write tests for your code before you write the code. Write tests for bugs you've fixed to check they stay fixed. Write tests as a kind of documentation to show what stuff is supposed to be doing. Errr.. close 1 Some of the main things I've learnt about writing tests: assert Write tests as you go. I haven't (yet) reached the elevated level of writing tests before I write the code to be tested, though I see why that would sometimes be useful. I do think writing tests sooner rather than later is best though, ideally as soon as you've got a basic version of your feature working. Coverage Freezegun Mypy only ↩",
          "content_length": 1265,
          "content_tokens": 278,
          "embedding": []
        }
      ]
    },
    {
      "title": "API Design Principles",
      "url": "https://www.johnmathews.is/blog/api-design",
      "date": "January 04, 2021",
      "content": "Some super brief notes I made about API design: It's more of an art than a science RESTful (REpresentational State Transfer) API design is an architectural style. SOAP (Simple Object Access Protocol) is a heavier style. GraphQL abstraction Django Web APIs (all REST APIs?) expose a databases to clients A rest api is a URL route (endpoint) that returns JSON or XML. POST, GET, PUT, PATCH, DELETE, corresponds to Create, Read, Update/Replace, Update/Modify, Delete (HTTP methods correspond to CRUD methods) PUT (create or update) is idempotent, POST is not idempotent (keep on creating, updating) PATCH - partial update GET, HEAD, OPTIONS and TRACE methods are idempotent cos they are only designed for retrieving data. DELETE HEAD - almost identical to GET, but without any body. Good for checking what a request would return, i.e. Before downloading a large amount of data, OPTIONS - returns data describing what other methods and operations the server supports at the given URL. More loosely defined than other verbs. Use HTTP verbs to make requests more meaningful Good /users/12345 Poor /api?type=user&id=23 Use the hierarchical structure of the URL to imply the structure of the API. Resource names should be nouns not verbs Use plurals consistently, not collection verbiage. Good: customers/123 Bad: customer_list/123 Use case-insensitivity. Use camel case or snake case consistency Short is better than long, but be clear Spend time on design before writing code Use HTTP response codes to indicate status Prefer JSON over XML. (Hotline does HTML..) XML requires schemas for validation and namespaces. Don’t support this complexity at the beginning (or ever) unless required. If it is required, make the XML as similar to JSON as possible. Put links in the HTTP link header, or use a JSON representation of this. Use the HTTP location header to contain a link on resource creation, or for GET with pagination, use first, last, next, prev. Connectedness - return links in the response which link to useful resources. At minimum, a link to show how the data was received, or posted. Idempotence - clients making the same repeated requests create the same result on the server side. I.e. making repeated requests has the same result as making a similar request, server side. On the client side, a response code may change, of course.",
      "length": 2337,
      "tokens": 531,
      "chunks": [
        {
          "blog_title": "API Design Principles",
          "blog_url": "https://www.johnmathews.is/blog/api-design",
          "blog_date": "January 04, 2021",
          "content": "Some super brief notes I made about API design: It's more of an art than a science RESTful (REpresentational State Transfer) API design is an architectural style. SOAP (Simple Object Access Protocol) is a heavier style. GraphQL abstraction Django Web APIs (all REST APIs?) expose a databases to clients A rest api is a URL route (endpoint) that returns JSON or XML. POST, GET, PUT, PATCH, DELETE, corresponds to Create, Read, Update/Replace, Update/Modify, Delete (HTTP methods correspond to CRUD methods) PUT (create or update) is idempotent, POST is not idempotent (keep on creating, updating) PATCH - partial update GET, HEAD, OPTIONS and TRACE methods are idempotent cos they are only designed for retrieving data. DELETE HEAD - almost identical to GET, but without any body.",
          "content_length": 779,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "API Design Principles",
          "blog_url": "https://www.johnmathews.is/blog/api-design",
          "blog_date": "January 04, 2021",
          "content": "Good for checking what a request would return, i.e. Before downloading a large amount of data, OPTIONS - returns data describing what other methods and operations the server supports at the given URL. More loosely defined than other verbs. Use HTTP verbs to make requests more meaningful Good /users/12345 Poor /api?type=user&id=23 Use the hierarchical structure of the URL to imply the structure of the API. Resource names should be nouns not verbs Use plurals consistently, not collection verbiage. Good: customers/123 Bad: customer_list/123 Use case-insensitivity. Use camel case or snake case consistency Short is better than long, but be clear Spend time on design before writing code Use HTTP response codes to indicate status Prefer JSON over XML. (Hotline does HTML..) XML requires schemas for validation and namespaces. Don’t support this complexity at the beginning (or ever) unless required.",
          "content_length": 902,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "API Design Principles",
          "blog_url": "https://www.johnmathews.is/blog/api-design",
          "blog_date": "January 04, 2021",
          "content": "If it is required, make the XML as similar to JSON as possible. Put links in the HTTP link header, or use a JSON representation of this. Use the HTTP location header to contain a link on resource creation, or for GET with pagination, use first, last, next, prev. Connectedness - return links in the response which link to useful resources. At minimum, a link to show how the data was received, or posted. Idempotence - clients making the same repeated requests create the same result on the server side. I.e. making repeated requests has the same result as making a similar request, server side. On the client side, a response code may change, of course.",
          "content_length": 654,
          "content_tokens": 145,
          "embedding": []
        }
      ]
    },
    {
      "title": "Principles Of Object Orientated Programming",
      "url": "https://www.johnmathews.is/blog/principles-of-oop",
      "date": "January 04, 2021",
      "content": "Lab Digital 1 You might think that's a unusual way to prepare for an interview, and you'd be right. Nothing close to these notes arose during the interview, but I find this stuff interesting. If I'm motivated enough to study it, then I think that's a good enough reason by itself, without a specific reason. These are some brief notes. Object Orientated Programming has four key aspects: Encapsulation (Hiding information) Abstraction (Hiding the implementation) Inheritance Polymorphism Each object keeps its state private, inside a class. Instance variables/properties/attributes are kept private and accessor methods are made public. Other objects don’t have direct access to this state. They can only call a list of public functions (methods). The object manages its own state via methods, no other class can touch it unless explicitly (not default) allowed. Private variables. Public methods. You can define classes within classes, and functions within functions. A natural extension of encapsulation A concept or idea that is not associated with any particular instance. Expresses the intent of the class, rather than a specific implementation. Programs are often extremely large and separate objects communicate with each other a lot. This makes maintaining large programs difficult, and abstraction tries to solve this. This mechanism should hide internal implementation details. It should only reveal operations relevant for the other objects. This mechanism should be easy to use and should rarely change over time. Implementation changes — for example, a software update — rarely affect the abstraction you use. e.g. a coffee machine. It does a lot of stuff and makes quirky noises under the hood. But all you have to do is put in coffee and press a button. In OOP, objects are often similar, sharing similar logic. But they are not 100% the same. Create a (child) class by deriving from another (parent) class. This way, we form a hierarchy. child class reuses all fields and methods of the parent class (common part) and can implement its own unique part using method or attribute overloading. Gives a way to use a class exactly like its parent so there’s no confusion with mixing types. But each child class keeps its own methods as they are. This typically happens by defining a (parent) interface to be reused. It outlines a bunch of common methods. Then, each child class implements its own version of these methods. Any time a collection (such as a list) or a method expects an instance of the parent (where common methods are outlined), the language takes care of evaluating the right implementation of the common method — regardless of which child is passed. I'd like to be so familiar with the following features that I can use them without referring to notes: Getters and setters. Instance methods compared to class methods. Inheritance, mixins, and decorators. Django mypy Infrastructure As Code ↩",
      "length": 2920,
      "tokens": 595,
      "chunks": [
        {
          "blog_title": "Principles Of Object Orientated Programming",
          "blog_url": "https://www.johnmathews.is/blog/principles-of-oop",
          "blog_date": "January 04, 2021",
          "content": "Lab Digital 1 You might think that's a unusual way to prepare for an interview, and you'd be right. Nothing close to these notes arose during the interview, but I find this stuff interesting. If I'm motivated enough to study it, then I think that's a good enough reason by itself, without a specific reason. These are some brief notes. Object Orientated Programming has four key aspects: Encapsulation (Hiding information) Abstraction (Hiding the implementation) Inheritance Polymorphism Each object keeps its state private, inside a class. Instance variables/properties/attributes are kept private and accessor methods are made public. Other objects don’t have direct access to this state. They can only call a list of public functions (methods) The object manages its own state via methods, no other class can touch it unless explicitly (not default) allowed. Private variables. Public methods. You can define classes within classes, and functions within functions.",
          "content_length": 967,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Principles Of Object Orientated Programming",
          "blog_url": "https://www.johnmathews.is/blog/principles-of-oop",
          "blog_date": "January 04, 2021",
          "content": "A natural extension of encapsulation A concept or idea that is not associated with any particular instance. Expresses the intent of the class, rather than a specific implementation. Programs are often extremely large and separate objects communicate with each other a lot. This makes maintaining large programs difficult, and abstraction tries to solve this. This mechanism should hide internal implementation details. It should only reveal operations relevant for the other objects. This mechanism should be easy to use and should rarely change over time. Implementation changes — for example, a software update — rarely affect the abstraction you use. e.g. a coffee machine. It does a lot of stuff and makes quirky noises under the hood. But all you have to do is put in coffee and press a button. In OOP, objects are often similar, sharing similar logic. But they are not 100% the same. Create a (child) class by deriving from another (parent) class. This way, we form a hierarchy.",
          "content_length": 984,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Principles Of Object Orientated Programming",
          "blog_url": "https://www.johnmathews.is/blog/principles-of-oop",
          "blog_date": "January 04, 2021",
          "content": "child class reuses all fields and methods of the parent class (common part) and can implement its own unique part using method or attribute overloading. Gives a way to use a class exactly like its parent so there’s no confusion with mixing types. But each child class keeps its own methods as they are. This typically happens by defining a (parent) interface to be reused. It outlines a bunch of common methods. Then, each child class implements its own version of these methods. Any time a collection (such as a list) or a method expects an instance of the parent (where common methods are outlined), the language takes care of evaluating the right implementation of the common method — regardless of which child is passed. I'd like to be so familiar with the following features that I can use them without referring to notes: Getters and setters. Instance methods compared to class methods. Inheritance, mixins, and decorators. Django mypy Infrastructure As Code ↩",
          "content_length": 965,
          "content_tokens": 202,
          "embedding": []
        }
      ]
    },
    {
      "title": "Optimizing The Performance Of This Blog",
      "url": "https://www.johnmathews.is/blog/site-performance",
      "date": "January 04, 2021",
      "content": "I'm coming to the end of redesigning this site. Now that the main changes have been made its fun (and good practice) to optimize the site so that it loads quickly and is optimized for SEO and accessibility. Lighthouse is a utility built into Chrome that runs a technical audit on a webpage and assesses a wide range of features. It also provides details about how to improve the page. My site is hosted on Github Pages and is accessed via Cloudflare, which gives me a lot of performance gains including minified HTML and CSS, caching, and super fast server response times. I'm using Github Pages and Cloudflare for free and I think its amazing that I can get the benefits of these services without needed to pay anything. If someone knows where to look and can teach themselves using free resources, they could be read by anyone anywhere in the world. It's amazing. Below are the lighthouse results for the blog's index page and for a recent post.",
      "length": 947,
      "tokens": 196,
      "chunks": [
        {
          "blog_title": "Optimizing The Performance Of This Blog",
          "blog_url": "https://www.johnmathews.is/blog/site-performance",
          "blog_date": "January 04, 2021",
          "content": "I'm coming to the end of redesigning this site. Now that the main changes have been made its fun (and good practice) to optimize the site so that it loads quickly and is optimized for SEO and accessibility. Lighthouse is a utility built into Chrome that runs a technical audit on a webpage and assesses a wide range of features. It also provides details about how to improve the page. My site is hosted on Github Pages and is accessed via Cloudflare, which gives me a lot of performance gains including minified HTML and CSS, caching, and super fast server response times. I'm using Github Pages and Cloudflare for free and I think its amazing that I can get the benefits of these services without needed to pay anything. If someone knows where to look and can teach themselves using free resources, they could be read by anyone anywhere in the world. It's amazing. Below are the lighthouse results for the blog's index page and for a recent post.",
          "content_length": 947,
          "content_tokens": 196,
          "embedding": []
        }
      ]
    },
    {
      "title": "Unix: Utilities To Analyse And Update Multiple Text Files",
      "url": "https://www.johnmathews.is/blog/using-unix-utilities-to-analyse-and-update-multiple-files",
      "date": "January 04, 2021",
      "content": "As part of the redesign of this blog I wanted to make an article's category more meaningful. Previously, I simply picked a handful of categories and then assigned a single category to each post. This method becomes limiting when an article is relevant to multiple categories. Also, using nested categories seems like a good way of grouping similar content and allowing more nuanced filtering of interests. As I considered how to update the categories of existing articles, I realised this would be a good opportunity to practice analyzing and updating text files using unix utilities. Here is how I reviewed and updated the categories of my existing articles: Title: ... Category: ... Category: grep -h ‘Category:’ **/*.md grep -h ‘Category:’ **/*.md | sort grep -h ‘Category:’ **/*.md | sort | uniq -c I had some repeat results though because some rows had white space at the end, so in order to make these the same, I needed to remove trailing whitespace: grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c This gave me the following results: 6 2 16 2 2 15 15 8 Category is repeated and isn't needed: grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c | sort | sed 's/Category://g' This gives me the following output, which is acceptable: 2 2 2 6 8 15 15 16 The next stage was to begin updating these categories with the new, nested categories. I've decided to try splitting the categories into technical and non-technical groups. Technical > Data Data Analytics Data Science Data Engineering Data Developer Tools Web Cryptocurrency Civil Engineering Entrepreneurship Family Self Career cd Category: Tools Category: Technical/Developer Tools grep -l 'Category: Tools' *.md | xargs sed -i 's/Category: Tools/Category: Technical\\/Developer Tools/g' Category: General grep -H 'Category: General' *.md If I want to see just the file names, then: grep -l 'Category: General' *.md Since writing this post I've modified the categories a few times. The commands I run to switch out categories are as follows: export oldName = ; export newName = grep -l $oldName | xargs sed -i '' $oldName $newName Notes: Double quotes are not the same as single quotes. You need to use them if you want to access variables or commands inside a string. .*",
      "length": 2270,
      "tokens": 538,
      "chunks": [
        {
          "blog_title": "Unix: Utilities To Analyse And Update Multiple Text Files",
          "blog_url": "https://www.johnmathews.is/blog/using-unix-utilities-to-analyse-and-update-multiple-files",
          "blog_date": "January 04, 2021",
          "content": "As part of the redesign of this blog I wanted to make an article's category more meaningful. Previously, I simply picked a handful of categories and then assigned a single category to each post. This method becomes limiting when an article is relevant to multiple categories. Also, using nested categories seems like a good way of grouping similar content and allowing more nuanced filtering of interests. As I considered how to update the categories of existing articles, I realised this would be a good opportunity to practice analyzing and updating text files using unix utilities. Here is how I reviewed and updated the categories of my existing articles: Title: .. Category: ..",
          "content_length": 682,
          "content_tokens": 125,
          "embedding": []
        },
        {
          "blog_title": "Unix: Utilities To Analyse And Update Multiple Text Files",
          "blog_url": "https://www.johnmathews.is/blog/using-unix-utilities-to-analyse-and-update-multiple-files",
          "blog_date": "January 04, 2021",
          "content": "Category: grep -h ‘Category:’ **/*.md grep -h ‘Category:’ **/*.md | sort grep -h ‘Category:’ **/*.md | sort | uniq -c I had some repeat results though because some rows had white space at the end, so in order to make these the same, I needed to remove trailing whitespace: grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c This gave me the following results: 6 2 16 2 2 15 15 8 Category is repeated and isn't needed: grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c | sort | sed 's/Category://g' This gives me the following output, which is acceptable: 2 2 2 6 8 15 15 16 The next stage was to begin updating these categories with the new, nested categories.",
          "content_length": 699,
          "content_tokens": 212,
          "embedding": []
        },
        {
          "blog_title": "Unix: Utilities To Analyse And Update Multiple Text Files",
          "blog_url": "https://www.johnmathews.is/blog/using-unix-utilities-to-analyse-and-update-multiple-files",
          "blog_date": "January 04, 2021",
          "content": "I've decided to try splitting the categories into technical and non-technical groups. Technical > Data Data Analytics Data Science Data Engineering Data Developer Tools Web Cryptocurrency Civil Engineering Entrepreneurship Family Self Career cd Category: Tools Category: Technical/Developer Tools grep -l 'Category: Tools' *.md | xargs sed -i 's/Category: Tools/Category: Technical\\/Developer Tools/g' Category: General grep -H 'Category: General' *.md If I want to see just the file names, then: grep -l 'Category: General' *.md Since writing this post I've modified the categories a few times. The commands I run to switch out categories are as follows: export oldName = ; export newName = grep -l $oldName | xargs sed -i '' $oldName $newName Notes: Double quotes are not the same as single quotes. You need to use them if you want to access variables or commands inside a string. .*",
          "content_length": 884,
          "content_tokens": 200,
          "embedding": []
        }
      ]
    },
    {
      "title": "A New Blog Design",
      "url": "https://www.johnmathews.is/blog/a-new-blog-design",
      "date": "December 18, 2020",
      "content": "The blog has a new design! Out with the old, and in with well-written HTML, an improved CSS framework, maintainable code, dark mode, and articles with multiple categories. <div> <span> At times I felt like little more than a monkey randomly bashing keys, hitting save and refreshing the browser tab. I felt guilty for spending any non-essential time away from my wife and daughter. I wondered if any benefits would actually materialize that would outweigh the costs of not rushing home to take care of a new-born and relieve a tired and stressed mum. It took awhile, but eventually this blog became the most effective force multiplier I've ever used. As I've learnt more about web development, the JAM stack has become increasingly intuitive and familiar. A side effect was that as I became comfortable with \"good\" dev work, working with this blog's old code base became increasingly uncomfortable. I wanted to update the blog so that it would be easy and fun to use again. I want to be able to play with it quickly and efficiently. I wasn't aiming for a radical re-design, I like that the focus is on text and I'm not exploring any on-trend design choices. I think my original design choices have held up well. I want a design that will work for many years, with templates and code that is easy and intuitive to read, and design elements that are easier to work with. I hope that I'll be writing here more regularly over the next few months. It's been a busy year and there is lots to write about!",
      "length": 1498,
      "tokens": 321,
      "chunks": [
        {
          "blog_title": "A New Blog Design",
          "blog_url": "https://www.johnmathews.is/blog/a-new-blog-design",
          "blog_date": "December 18, 2020",
          "content": "The blog has a new design! Out with the old, and in with well-written HTML, an improved CSS framework, maintainable code, dark mode, and articles with multiple categories. <div> <span> At times I felt like little more than a monkey randomly bashing keys, hitting save and refreshing the browser tab. I felt guilty for spending any non-essential time away from my wife and daughter. I wondered if any benefits would actually materialize that would outweigh the costs of not rushing home to take care of a new-born and relieve a tired and stressed mum. It took awhile, but eventually this blog became the most effective force multiplier I've ever used. As I've learnt more about web development, the JAM stack has become increasingly intuitive and familiar. A side effect was that as I became comfortable with \"good\" dev work, working with this blog's old code base became increasingly uncomfortable.",
          "content_length": 898,
          "content_tokens": 184,
          "embedding": []
        },
        {
          "blog_title": "A New Blog Design",
          "blog_url": "https://www.johnmathews.is/blog/a-new-blog-design",
          "blog_date": "December 18, 2020",
          "content": "I wanted to update the blog so that it would be easy and fun to use again. I want to be able to play with it quickly and efficiently. I wasn't aiming for a radical re-design, I like that the focus is on text and I'm not exploring any on-trend design choices. I think my original design choices have held up well. I want a design that will work for many years, with templates and code that is easy and intuitive to read, and design elements that are easier to work with. I hope that I'll be writing here more regularly over the next few months. It's been a busy year and there is lots to write about!",
          "content_length": 599,
          "content_tokens": 137,
          "embedding": []
        }
      ]
    },
    {
      "title": "Product-Led Growth",
      "url": "https://www.johnmathews.is/blog/product-led-growth",
      "date": "December 08, 2020",
      "content": "My notes on \"Product-Led Growth\" by Wes Bush Product-Led Growth is a go-to-market (GTM) strategy that relies on using your product as the main vehicle to acquire, activate and retain customers. Marketing - how can our products generate a demand fly-wheel? Sales - how can we use the product to qualify our prospects for us? Customer Success - how can we create a product that helps customers become successful beyond our dreams? By having every team focussed on the product, you create a culture that is built around enduring customer value shorter sales cycles lower Customer Acquisition Costs (CACs) higher Revenue Per Employee (RPE) A GTM strategy is an action plan that specifies how a company will reach target customers and achieve a competitive advantage market conditions competitive positioning ideal customer product offering Knowing these elements will help you choose the correct GTM that will acquire, retain and grow you customer base in the most capital-efficient way Profit Centers: Sales, Marketing, Customer Success Cost Centers: Engineering, Product Advantages: Annual Contract Value (ACV) can be very high Enterprise first solutions that are very complex and therefore need a high-touch sales model If the Total Addressable Market (TAM) is very small, because your market is super niche, you can quite easily talk to almost all market participants. (PLG is built for large TAMs) It's great for new categories of product where education is required, because you need to change how people approach a problem. This takes time and requires education. This is turn requires that you understand your customers pain points, objections, core problems. If you jump to quickly a PLG GTM strategy then you risk a high church rate because you haven't understood or educated your customers well enough. Disadvantages: Sales cycles are very long The Life Time Value (LTV) must be high enough to recoup the investment in CAC. This often requires charging the customer a premium. This premium price isn't because the product is amazing, or more valuable to the customer, but because the customer acquisition model is more expensive. If you use a Sales-Led GTM, you need to watch out for competitors who can sell more efficiently, or have a more efficient Customer Acquisition Model. They can steal your market share by offering the same product with at a lower price. it encourages markets to gate content in order to hit their MQL goals it focusses on content consumption as a leading indicator of intent. (but reading a white-paper or brochure doesn't mean I'm going to buy the thing). the entire process rewards creating friction in the buying process Consequently, there is often a disconnect between marketing and sales Switching from Sales-Led GTM to Product-Led GTM creates a defensive moat A product led marketing team asks \"How can we use the product to qualify our prospects for us?\" A product led customer success team asks \"How can we create a product that helps customers be successful without our help?\" A product-led engineering team asks \"How can we create a product with a quick time-to-value?\" you need fewer resources to scale, the top of the customer funnel is much wider. CAC is much lower Higher RPE (revenue per employee) User experience is better M O A T and Is your TAM big enough? Does your product solve a specific job significantly better and at lower cost than anyone else on the market? Can the user realize significant ongoing value quickly with little or no help? Do you want to be the undisputed market leader? Main line of defense against the giant is specialization Focus on an underserved niche Do a specific job better than the competition but charge significantly more This is not a one-size-fits-all model. Free trials and demos work well here. Because its specialized, combining freemium with quick time-to-value is difficult Main competitive advantage is how you solve your customers problems Does your market have underserved customers? Is the TAM big enough? is the ACV high enough? Could prospects experience a Magic Moment during a free trial? Build a simpler product that solves a specific pain point, and because its simpler, its faster, you can charge less, and its more appropriate to some over-served or priced-out customers It's a scaled-down product Costs must be low Product must be easy to use Is TAM large enough? Can on-boarding be completely self-service? Freemium model thrives Red-ocean companies try to outperform their rivals in order to grab a larger share of the existing market. As the market gets crowded, opportunity for profit and growth reduces. Products become commodities. Cut-throat competition turns the waters red. Blue-ocean companies access untapped market space and create demand. They have opportunity for highly profitable growth. Competition is irrelevant. Create and capture new demand. Some markets will be red-ocean, but a particular niche within it will be blue ocean. Blue Oceans require educating the customer to create the demand. This is high-touch, and often a PL GTM strategy isn't going to work. It needs to be sales-led in order to educate the customer enough. But if Time-To-Value (TTV) is short then PLG could be great. Red Oceans need big wide funnels in order to compete, and PL GTM strategies work great. They're defensible, keep costs low and make sales cycles short. PLG works for bottom-up. High touch sales-led strategies work for Top-Down enterprise sales strategies, where the product is super complex and the sales cyccle is very long. Top-Down (Sales team is the growth engine): High ACV Additional Services Lower customer churn Poor revenue distribution High CAC Long sales cycles Free Trial sometimes works Bottom-Up (Product is the growth engine): Wider top-of-funnel Low CAC Predictable sales figures Revenue diversity Scalable fast Small contracts only non-paying customers expertise shortage upfront investment as non-paying customers drain resources Freemium Free-Trial How much time until you deliver on your promise to prospects? How much time until the product sells itself? PL GTM strategies require fast time-to-value. Rank your uses across 2 dimensions and group into 4 quadrants. The dimensions are Ability (low - high) and Motivation (low - high) 5. Low Motivation - Low Ability = Mission Impossible 6. High Motivation - Low Ability = Rookie 7. Low Motivation - High Ability = Veteran 8. High Motivation - High Ability = Spoiled Figure out your top two quadrants. Unless all your users are Spoiled, you need to decrease Time-To-Value. Questions: How motivated are your users? Is your product easy for your target audience to use? Can users experience the core value (magic moment?) without hand-holding? A positive feedback loop: Understand Communicate Deliver Repeat If you're selling live-chat software, you're not really selling live-chat software, you are selling a new and better way to acquire customers. You are selling the outcome, the result, the why. Pain makes us want to change so that we can avoid or prevent the pain altogether. Pain is product agnostic. There are three reasons why people buy a product: Functional Outcome - the core task that needs to get done. Emotional Outcome - how a customer wants to feel or avoid feeling as a result of the functional outcome. Social Outcome - how a customer wants to be perceived by others by using your product. In every software, there are usage patterns that point towards to core outcomes that are most important to customers. value-metrics A value-metric is the way you measure value exchange in your product Value metrics could be: for Vimeo, number of videos uploaded by the user. for Slack, number of messages sent by the user for PayPal, amount of revenue generated by the user (processed?) functional outcome based Many SaaS companies rely on feature differentiation as a way to justify higher prices, but this produces higher churn. Value metrics outperform feature differentiation with upto 75% less churn... Outcome based value metrics reduce church by an additional 40%. Apparently. A good value metric is easy for a customer to understand. They need to immediately understand what they're paying for and where they fit in your packing/pricing structure. If you're in an established market, it makes senses to look at what the competition charges. A good value metric is aligned with the value that the customer receives through the product. Consider the low-level components of your high-level outcome. E.g. what low level actions are necessary to get the end result? Sending lots of messages? Meeting lots of people? Finding lots of things? A good value metric grows with your customers usage of the valuable outcome. If customers get incredible value from the product, charge them more because the product is worth it. Also, if they aren't getting much value from the product, charge them less. Don't do user based pricing if you want to get lots of users - its a conflict of interests. If you're small, you can try different pricing strategies and iterate to success. Ask yourself: What do my best customers do? What do my best customers not do? What features did my best customers try first when they were on-boarding? What are the similarities along my best customers that led to success? For churned customers, what were the main differences between them and the best customers? Were they in the ideal audience? Why did they church? What did they do or not do that good customers didn't?",
      "length": 9488,
      "tokens": 1958,
      "chunks": [
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "My notes on \"Product-Led Growth\" by Wes Bush Product-Led Growth is a go-to-market (GTM) strategy that relies on using your product as the main vehicle to acquire, activate and retain customers.",
          "content_length": 193,
          "content_tokens": 46,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "Marketing - how can our products generate a demand fly-wheel? Sales - how can we use the product to qualify our prospects for us? Customer Success - how can we create a product that helps customers become successful beyond our dreams? By having every team focussed on the product, you create a culture that is built around enduring customer value shorter sales cycles lower Customer Acquisition Costs (CACs) higher Revenue Per Employee (RPE) A GTM strategy is an action plan that specifies how a company will reach target customers and achieve a competitive advantage market conditions competitive positioning ideal customer product offering Knowing these elements will help you choose the correct GTM that will acquire, retain and grow you customer base in the most capital-efficient way Profit Centers: Sales, Marketing, Customer Success Cost Centers: Engineering, Product Advantages: Annual Contract Value (ACV) can be very high Enterprise first solutions that are very complex and therefore need a high-touch sales model If the Total Addressable Market (TAM) is very small, because your market is super niche, you can quite easily talk to almost all market participants.",
          "content_length": 1174,
          "content_tokens": 224,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "(PLG is built for large TAMs) It's great for new categories of product where education is required, because you need to change how people approach a problem. This takes time and requires education. This is turn requires that you understand your customers pain points, objections, core problems. If you jump to quickly a PLG GTM strategy then you risk a high church rate because you haven't understood or educated your customers well enough. Disadvantages: Sales cycles are very long The Life Time Value (LTV) must be high enough to recoup the investment in CAC. This often requires charging the customer a premium. This premium price isn't because the product is amazing, or more valuable to the customer, but because the customer acquisition model is more expensive. If you use a Sales-Led GTM, you need to watch out for competitors who can sell more efficiently, or have a more efficient Customer Acquisition Model.",
          "content_length": 917,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "They can steal your market share by offering the same product with at a lower price. it encourages markets to gate content in order to hit their MQL goals it focusses on content consumption as a leading indicator of intent. (but reading a white-paper or brochure doesn't mean I'm going to buy the thing) the entire process rewards creating friction in the buying process Consequently, there is often a disconnect between marketing and sales Switching from Sales-Led GTM to Product-Led GTM creates a defensive moat A product led marketing team asks \"How can we use the product to qualify our prospects for us?\" A product led customer success team asks \"How can we create a product that helps customers be successful without our help?\" A product-led engineering team asks \"How can we create a product with a quick time-to-value?\" you need fewer resources to scale, the top of the customer funnel is much wider.",
          "content_length": 908,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "CAC is much lower Higher RPE (revenue per employee) User experience is better M O A T and Is your TAM big enough? Does your product solve a specific job significantly better and at lower cost than anyone else on the market? Can the user realize significant ongoing value quickly with little or no help? Do you want to be the undisputed market leader? Main line of defense against the giant is specialization Focus on an underserved niche Do a specific job better than the competition but charge significantly more This is not a one-size-fits-all model. Free trials and demos work well here.",
          "content_length": 590,
          "content_tokens": 122,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "Because its specialized, combining freemium with quick time-to-value is difficult Main competitive advantage is how you solve your customers problems Does your market have underserved customers? Is the TAM big enough? is the ACV high enough? Could prospects experience a Magic Moment during a free trial? Build a simpler product that solves a specific pain point, and because its simpler, its faster, you can charge less, and its more appropriate to some over-served or priced-out customers It's a scaled-down product Costs must be low Product must be easy to use Is TAM large enough? Can on-boarding be completely self-service? Freemium model thrives Red-ocean companies try to outperform their rivals in order to grab a larger share of the existing market. As the market gets crowded, opportunity for profit and growth reduces. Products become commodities. Cut-throat competition turns the waters red. Blue-ocean companies access untapped market space and create demand.",
          "content_length": 972,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "They have opportunity for highly profitable growth. Competition is irrelevant. Create and capture new demand. Some markets will be red-ocean, but a particular niche within it will be blue ocean. Blue Oceans require educating the customer to create the demand. This is high-touch, and often a PL GTM strategy isn't going to work. It needs to be sales-led in order to educate the customer enough. But if Time-To-Value (TTV) is short then PLG could be great. Red Oceans need big wide funnels in order to compete, and PL GTM strategies work great. They're defensible, keep costs low and make sales cycles short. PLG works for bottom-up. High touch sales-led strategies work for Top-Down enterprise sales strategies, where the product is super complex and the sales cyccle is very long.",
          "content_length": 781,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "Top-Down (Sales team is the growth engine): High ACV Additional Services Lower customer churn Poor revenue distribution High CAC Long sales cycles Free Trial sometimes works Bottom-Up (Product is the growth engine): Wider top-of-funnel Low CAC Predictable sales figures Revenue diversity Scalable fast Small contracts only non-paying customers expertise shortage upfront investment as non-paying customers drain resources Freemium Free-Trial How much time until you deliver on your promise to prospects? How much time until the product sells itself? PL GTM strategies require fast time-to-value. Rank your uses across 2 dimensions and group into 4 quadrants. The dimensions are Ability (low - high) and Motivation (low - high) 5. Low Motivation - Low Ability = Mission Impossible 6. High Motivation - Low Ability = Rookie 7. Low Motivation - High Ability = Veteran 8. High Motivation - High Ability = Spoiled Figure out your top two quadrants.",
          "content_length": 943,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "Unless all your users are Spoiled, you need to decrease Time-To-Value. Questions: How motivated are your users? Is your product easy for your target audience to use? Can users experience the core value (magic moment?) without hand-holding? A positive feedback loop: Understand Communicate Deliver Repeat If you're selling live-chat software, you're not really selling live-chat software, you are selling a new and better way to acquire customers. You are selling the outcome, the result, the why. Pain makes us want to change so that we can avoid or prevent the pain altogether. Pain is product agnostic. There are three reasons why people buy a product: Functional Outcome - the core task that needs to get done. Emotional Outcome - how a customer wants to feel or avoid feeling as a result of the functional outcome. Social Outcome - how a customer wants to be perceived by others by using your product.",
          "content_length": 905,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "In every software, there are usage patterns that point towards to core outcomes that are most important to customers. value-metrics A value-metric is the way you measure value exchange in your product Value metrics could be: for Vimeo, number of videos uploaded by the user. for Slack, number of messages sent by the user for PayPal, amount of revenue generated by the user (processed?) functional outcome based Many SaaS companies rely on feature differentiation as a way to justify higher prices, but this produces higher churn. Value metrics outperform feature differentiation with upto 75% less churn.. Outcome based value metrics reduce church by an additional 40% Apparently. A good value metric is easy for a customer to understand. They need to immediately understand what they're paying for and where they fit in your packing/pricing structure. If you're in an established market, it makes senses to look at what the competition charges.",
          "content_length": 946,
          "content_tokens": 188,
          "embedding": []
        },
        {
          "blog_title": "Product-Led Growth",
          "blog_url": "https://www.johnmathews.is/blog/product-led-growth",
          "blog_date": "December 08, 2020",
          "content": "A good value metric is aligned with the value that the customer receives through the product. Consider the low-level components of your high-level outcome. E.g. what low level actions are necessary to get the end result? Sending lots of messages? Meeting lots of people? Finding lots of things? A good value metric grows with your customers usage of the valuable outcome. If customers get incredible value from the product, charge them more because the product is worth it. Also, if they aren't getting much value from the product, charge them less. Don't do user based pricing if you want to get lots of users - its a conflict of interests. If you're small, you can try different pricing strategies and iterate to success. Ask yourself: What do my best customers do? What do my best customers not do? What features did my best customers try first when they were on-boarding? What are the similarities along my best customers that led to success? For churned customers, what were the main differences between them and the best customers? Were they in the ideal audience? Why did they church? What did they do or not do that good customers didn't?",
          "content_length": 1145,
          "content_tokens": 237,
          "embedding": []
        }
      ]
    },
    {
      "title": "The Mom Test",
      "url": "https://www.johnmathews.is/blog/mom-test",
      "date": "December 04, 2020",
      "content": "My notes on \"The Mom Test\" by Rob Fitzpatrick. It's called the Mom Test because it leads to questions that even your mom couldn't lie to you about. Contents: > Summary > Update 2 > Update 1 > Chapter 1 - Opinions are worthless > Chapter 2 - Avoid bad data > Chapter 3 - Ask the important questions > Chapter 4 - Keep it casual > Chapter 5 - The currencies of conversation > Chapter 6 - Finding good conversations > Chapter 7 - Choosing you customers > Chapter 8 - Getting the most from the conversations by prepping and reviewing Ask good questions. Avoid bad data. Keep it casual. Push for commitment and advancement. Frame the meeting well. Focus on the right, tight, customer segment. Prep well, take good notes, review your notes. Doing Mom-test and customer development remotely: comment The Pretend-to-Own – Before investing in buying whatever you need for your it, rent or borrow it first. The Pinocchio – Build a non-functional, “lifeless”, version of the product. The Fake Door – Create a fake “entry” for a product that doesn't yet exist in any form The Minimum Viable Product (or Stripped Tease) – Create a functional version of it, but stripped down to its most basic functionality. The Mechanical Turk – Replace complex and expensive computers or machines with human beings. The Provincial – Before launching world-wide, run a test on a very small sample. The Re-label – Put a different label on an existing product that looks like the product you want to create. comment Anything involving the future is an overly optimistic lie. Find out if people care about your idea by never mentioning it. Forcing yourself not to mention your idea will force you to ask better questions Talk about their lives, not your idea. Ask about specific objective events in the past, not hypothetical scenarios. Spend most of your time listening, not talking. You aren't allowed to tell them what their problem is. They aren't allowed to tell you what to build. Bad data includes: Compliments Fluff Hypotheticals Ideas You should be terrified of at least one of the questions you ask in each conversation. Search out the scary questions you've been unintentionally avoiding. What's the worst thing a prospect could say? What's the scariest question you could ask? A good way to find scary questions is to imagine that your company has failed and then to ask why. If you get an unexpected answer to one of your questions and it doesn't have any effect on what you're going to do, then was it really worth asking it? General advice for hard things includes asking hard questions. Imagine you were delegating the task, what would you tell the person to do? That's you. You can ask about money. Love bad news - if you find out that your idea is fundamentally flawed you've just saved a tonne of time and energy and money. Move on. It's getting you closer to the truth. Bad news isn't the result of an opinion. No one knows if your idea will work, only the market knows. Opinions don't count. A lukewarm response to your idea can be a great conversation, because you realise that your idea isn't a great idea. Lukewarm means they don't care enough to buy the first (worst) version before it's ready. Look before you zoom. Don't focus on details too soon, you need to understand the big picture first. product risk customer risk Product risk Customer risk Pre-plan a list of the 3 most important questions (including a scary one) before every meeting or conversation. Be ready with these. They should change from week to week. As you get good quality answers to existing questions you can bring in new questions. ** Problem -> Solution -> Sales ** Identify your prospect's problem Explain your solution Sell the solution Identifying a problem doesn't have to be a meeting, keep it casual and you will get more honest feedback much faster. It works better as a chat when people are relaxed and saying what they really think. It take 5 minutes (max) to identify if a problem exists and is important. Give as little info as possible about your idea whilst still nudging the conversation along In early stage sales, the main goal is learning. Money is a side-effect. money time reputation If someone is willing to risk reputation, or spend time or money on your idea, then you can believe that they're interested. Hearing a compliment means they're trying to get rid of you. If it's a bad meeting or you're not sure what they really think, push for a commitment of some kind. Ask them to spend time, reputation or money and you'll see what they really think. If they aren't excited (not just interested, but in pain and excited for your solution) then you need to find that out ASAP. It's still a good meeting if you can discover this. Are you offering pain relief medication? A lead isn't a real lead until you've given them a concrete chance to reject you. Ask learning questions by using the Mom Test, then confirm by selling it. crazy customers They have a painful and expensive problem They know they have a painful and expensive problem They have the money to pay you to solve it They already have their own bad solution to this terrible problem, and yours is clearly better A crazy customer doesn't say \"yeah that's great, I'm really interested, let me know when its ready\". They say \"AHHH THIS IS THE WORST PART OF MY LIFE AND I WILL PAY YOU RIGHT NOW TO FIX IT!\" A crazy customer will front you the money when all you have is a barely functional prototype made of duct-tape A crazy customer is the person reading you blog, searching for workarounds, when you haven't spent loads of marketing and lead generation Keep a crazy customer close - they'll stick with you when times are tough. Vision -> Framing -> Weakness -> Pedestal -> Ask Keep having conversations until you stop hearing new stuff. If it's a topic you both care about, find an excuse. You'll both enjoy the chat. You don't need to mention your idea if it breaks the premise. Warm introductions are the ideal way to start a new conversation. 6 degrees of freedom in the world, so find someone who knows someone who knows them. Cold calls - LinkedIn, maybe. Serendipity - be prepared, be bold. Have a good excuse - hustle. Landing pages - so that googling the problems brings them to you. Organise an event - bring the businesses together for an event. You'll be considered an expert because you're facilitating it. Become a subject matter expert Speaking and teaching engagements - you get to have strong opinions, and you'll be respected. Startups don't starve, they drown. In options, choices, ideas. You get overwhelmed. Choose a good customer segment, focus on it, and don't get distracted. Google - PhD students. PayPal - eBay. Evernote - Moms with recipes. It will look obvious with hindsight, probably not so obvious before you've figured it out. If you can't get a consistent answer to a question, maybe you're speaking to different segments. consistent problems and goals Who-Where You want customers who are reachable, profitable, and personally rewarding. Good segments are usually \"who-where\" pairs. If you don't know where to find your customers, keep slicing until you do. Make sure the segment is reachable, profitable, and personally rewarding three big questions Your best guesses about what you think they'll say. What they care about. What they want. If you have a focussed segment, you'll only need to do this occasionally. If you come across a question which can be answered using the internet, use the internet. Take good notes 4. Ask if you can record the audio. 6. Record emotions as well as words. Verbatim alone isn't always accurate 6 months later. 5. Use shorthand for follow up. 5. Observe and record emotions - happy, angry, meh, etc. 6. Pains and obstacles are a lot more important if someone is embarrassed or angry when they're talking about them. 7. Dig into the big emotions, find out what's causing them, or why its a big deal. Review your notes 8. Meta - which questions went well or not? 9. What were the answers to the scary questions? 10. How can you do better next time? 11. What were the clear signals? What signals did you miss?",
      "length": 8126,
      "tokens": 1753,
      "chunks": [
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "My notes on \"The Mom Test\" by Rob Fitzpatrick. It's called the Mom Test because it leads to questions that even your mom couldn't lie to you about. Contents: > Summary > Update 2 > Update 1 > Chapter 1 - Opinions are worthless > Chapter 2 - Avoid bad data > Chapter 3 - Ask the important questions > Chapter 4 - Keep it casual > Chapter 5 - The currencies of conversation > Chapter 6 - Finding good conversations > Chapter 7 - Choosing you customers > Chapter 8 - Getting the most from the conversations by prepping and reviewing Ask good questions. Avoid bad data. Keep it casual. Push for commitment and advancement. Frame the meeting well. Focus on the right, tight, customer segment. Prep well, take good notes, review your notes. Doing Mom-test and customer development remotely: comment The Pretend-to-Own – Before investing in buying whatever you need for your it, rent or borrow it first.",
          "content_length": 896,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "The Pinocchio – Build a non-functional, “lifeless”, version of the product. The Fake Door – Create a fake “entry” for a product that doesn't yet exist in any form The Minimum Viable Product (or Stripped Tease) – Create a functional version of it, but stripped down to its most basic functionality. The Mechanical Turk – Replace complex and expensive computers or machines with human beings. The Provincial – Before launching world-wide, run a test on a very small sample. The Re-label – Put a different label on an existing product that looks like the product you want to create. comment Anything involving the future is an overly optimistic lie. Find out if people care about your idea by never mentioning it. Forcing yourself not to mention your idea will force you to ask better questions Talk about their lives, not your idea. Ask about specific objective events in the past, not hypothetical scenarios.",
          "content_length": 907,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "Spend most of your time listening, not talking. You aren't allowed to tell them what their problem is. They aren't allowed to tell you what to build. Bad data includes: Compliments Fluff Hypotheticals Ideas You should be terrified of at least one of the questions you ask in each conversation. Search out the scary questions you've been unintentionally avoiding. What's the worst thing a prospect could say? What's the scariest question you could ask? A good way to find scary questions is to imagine that your company has failed and then to ask why. If you get an unexpected answer to one of your questions and it doesn't have any effect on what you're going to do, then was it really worth asking it? General advice for hard things includes asking hard questions. Imagine you were delegating the task, what would you tell the person to do? That's you. You can ask about money.",
          "content_length": 878,
          "content_tokens": 188,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "Love bad news - if you find out that your idea is fundamentally flawed you've just saved a tonne of time and energy and money. Move on. It's getting you closer to the truth. Bad news isn't the result of an opinion. No one knows if your idea will work, only the market knows. Opinions don't count. A lukewarm response to your idea can be a great conversation, because you realise that your idea isn't a great idea. Lukewarm means they don't care enough to buy the first (worst) version before it's ready. Look before you zoom. Don't focus on details too soon, you need to understand the big picture first. product risk customer risk Product risk Customer risk Pre-plan a list of the 3 most important questions (including a scary one) before every meeting or conversation. Be ready with these. They should change from week to week. As you get good quality answers to existing questions you can bring in new questions.",
          "content_length": 915,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "** Problem -> Solution -> Sales ** Identify your prospect's problem Explain your solution Sell the solution Identifying a problem doesn't have to be a meeting, keep it casual and you will get more honest feedback much faster. It works better as a chat when people are relaxed and saying what they really think. It take 5 minutes (max) to identify if a problem exists and is important. Give as little info as possible about your idea whilst still nudging the conversation along In early stage sales, the main goal is learning. Money is a side-effect. money time reputation If someone is willing to risk reputation, or spend time or money on your idea, then you can believe that they're interested. Hearing a compliment means they're trying to get rid of you. If it's a bad meeting or you're not sure what they really think, push for a commitment of some kind. Ask them to spend time, reputation or money and you'll see what they really think.",
          "content_length": 941,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "If they aren't excited (not just interested, but in pain and excited for your solution) then you need to find that out ASAP. It's still a good meeting if you can discover this. Are you offering pain relief medication? A lead isn't a real lead until you've given them a concrete chance to reject you. Ask learning questions by using the Mom Test, then confirm by selling it. crazy customers They have a painful and expensive problem They know they have a painful and expensive problem They have the money to pay you to solve it They already have their own bad solution to this terrible problem, and yours is clearly better A crazy customer doesn't say \"yeah that's great, I'm really interested, let me know when its ready\"",
          "content_length": 721,
          "content_tokens": 150,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "They say \"AHHH THIS IS THE WORST PART OF MY LIFE AND I WILL PAY YOU RIGHT NOW TO FIX IT!\" A crazy customer will front you the money when all you have is a barely functional prototype made of duct-tape A crazy customer is the person reading you blog, searching for workarounds, when you haven't spent loads of marketing and lead generation Keep a crazy customer close - they'll stick with you when times are tough. Vision -> Framing -> Weakness -> Pedestal -> Ask Keep having conversations until you stop hearing new stuff. If it's a topic you both care about, find an excuse. You'll both enjoy the chat. You don't need to mention your idea if it breaks the premise. Warm introductions are the ideal way to start a new conversation. 6 degrees of freedom in the world, so find someone who knows someone who knows them. Cold calls - LinkedIn, maybe. Serendipity - be prepared, be bold.",
          "content_length": 882,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "Have a good excuse - hustle. Landing pages - so that googling the problems brings them to you. Organise an event - bring the businesses together for an event. You'll be considered an expert because you're facilitating it. Become a subject matter expert Speaking and teaching engagements - you get to have strong opinions, and you'll be respected. Startups don't starve, they drown. In options, choices, ideas. You get overwhelmed. Choose a good customer segment, focus on it, and don't get distracted. Google - PhD students. PayPal - eBay. Evernote - Moms with recipes. It will look obvious with hindsight, probably not so obvious before you've figured it out. If you can't get a consistent answer to a question, maybe you're speaking to different segments. consistent problems and goals Who-Where You want customers who are reachable, profitable, and personally rewarding. Good segments are usually \"who-where\" pairs.",
          "content_length": 918,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "The Mom Test",
          "blog_url": "https://www.johnmathews.is/blog/mom-test",
          "blog_date": "December 04, 2020",
          "content": "If you don't know where to find your customers, keep slicing until you do. Make sure the segment is reachable, profitable, and personally rewarding three big questions Your best guesses about what you think they'll say. What they care about. What they want. If you have a focussed segment, you'll only need to do this occasionally. If you come across a question which can be answered using the internet, use the internet. Take good notes 4. Ask if you can record the audio. Record emotions as well as words. Verbatim alone isn't always accurate 6 months later. Use shorthand for follow up. Observe and record emotions - happy, angry, meh, etc. Pains and obstacles are a lot more important if someone is embarrassed or angry when they're talking about them. Dig into the big emotions, find out what's causing them, or why its a big deal. Review your notes 8. Meta - which questions went well or not? 9. What were the answers to the scary questions? 10. How can you do better next time? 11. What were the clear signals? What signals did you miss?",
          "content_length": 1043,
          "content_tokens": 232,
          "embedding": []
        }
      ]
    },
    {
      "title": "Obviously Awesome",
      "url": "https://www.johnmathews.is/blog/obviously-awesome",
      "date": "December 03, 2020",
      "content": "My notes on \"Obviously Awesome\" by April Dunford In order to do better marketing, understand your value and differentiators better Understand what makes a best-fit customer Positioning is a fundamental input to every business tactic you use If you fail at positioning, you fail at marketing and sales Positioning is \"conext setting\" for products What your product does Why it is special Why it matters to them If your prospects can't figure out what your product does quickly, they will invent a position for you. It might hide your key strengths or misunderstand your value. Find people to demo your product to, then ask them to describe it back to you. Do the same with existing customers. If they're not saying the same thing then you have a positioning problem. Find the best kind of customer Make the value obvious Sell quickly Without positioning to guide us, we don't know how to understnad a product who a product is for what its main features are how much it costs Without it we would be paralyzed by choice, and we wouldnt be able to make sense of all the products around us. The context and purpose of a product from the founders/engineers perspective are often different to those of the prospect Products can be positioned in multiple ways, and often the best positioning is not the default positioning Bad positioning makes it harder for prospects to figure out if your product is worth thinking about. Customers point of view - what problem/pain does it solve The ways your product is uniquely different The characteristics of a potential customer The best market context to make your value uniquely obvious Competitive Alternatives - if you didn't exist, what would your customers use instead? Its what your prospects would use to do the task if your product didn't exist. It could be excel, or pen and paper. It could be nothing, (in which case maybe you product doesn't solve a real pain point.) You probably know a lot more about your market, and problem, and alternative solutions, than your prospects do. (\"Doing nothing\" could be an opportunity, not a red flag.) Its important to understand what customers will compare your product with, because this is how they will define \"better\". Is it \"easier\" than a pen and paper? Customers might never have purchased a solution like yours before. Unique Attributes - What do you have that alternative do not? Delivery Model (online vs offline, installed on-site vs not) Business model (rental vs purchase) Specific expertise (data scientist with financial and back-end web dev expertise) Value (and quantifiable objective proof) - What value do the attributes enable for customers? If unique attributes are your secret sauce, the value is why someone might care about your secret sauce Fact based, provable, demonstrable, quantifiable, objective. Third party opinions are relevant. Target market characteristics - Who cares a lot about that value? Focus on customers who are most likely to purchase quickly, wont ask for discounts, will tell their friends about you. You should clearly identify who these are and Identity what sets them apart from other groups of customers. Why are they uniquely likely to buy from you when others wouldnt or would take longer to consider and make a purchase Market Category - What context makes your value obvious to the ideal customer? Declaring that your product exists in a certain market triggers a powerful set of assumptions make these assumptions help you, not hinder you. When presented with your product, customers will try to use what they already know to figure out what your product is all about and why its special. You want them to be able to do this really quickly and easily. Make these assumptions work for you, not against you. You won't have to list every feature, because most of them will be assumed by the context of the market category. Get it right, and sales efforts (copy) wont be wasted battling those assumptions, but can instead build off of them to show secret sauce and value more obviously. (Bonus) Relevant Trends - what trends make your product relevant right now? Used carefully, trends can show prospoects why they should pay attention to your product right now. Increases urgency. It can increase urgency, excitement, coolness, credibility but the trend must be directly relevant, practically and objectively applicable. Blockchains, AI, ML are trends - they are relevant to multiple markets. Each of these components is relevant to the others",
      "length": 4478,
      "tokens": 885,
      "chunks": [
        {
          "blog_title": "Obviously Awesome",
          "blog_url": "https://www.johnmathews.is/blog/obviously-awesome",
          "blog_date": "December 03, 2020",
          "content": "My notes on \"Obviously Awesome\" by April Dunford In order to do better marketing, understand your value and differentiators better Understand what makes a best-fit customer Positioning is a fundamental input to every business tactic you use If you fail at positioning, you fail at marketing and sales Positioning is \"conext setting\" for products What your product does Why it is special Why it matters to them If your prospects can't figure out what your product does quickly, they will invent a position for you. It might hide your key strengths or misunderstand your value. Find people to demo your product to, then ask them to describe it back to you. Do the same with existing customers. If they're not saying the same thing then you have a positioning problem.",
          "content_length": 765,
          "content_tokens": 153,
          "embedding": []
        },
        {
          "blog_title": "Obviously Awesome",
          "blog_url": "https://www.johnmathews.is/blog/obviously-awesome",
          "blog_date": "December 03, 2020",
          "content": "Find the best kind of customer Make the value obvious Sell quickly Without positioning to guide us, we don't know how to understnad a product who a product is for what its main features are how much it costs Without it we would be paralyzed by choice, and we wouldnt be able to make sense of all the products around us. The context and purpose of a product from the founders/engineers perspective are often different to those of the prospect Products can be positioned in multiple ways, and often the best positioning is not the default positioning Bad positioning makes it harder for prospects to figure out if your product is worth thinking about. Customers point of view - what problem/pain does it solve The ways your product is uniquely different The characteristics of a potential customer The best market context to make your value uniquely obvious Competitive Alternatives - if you didn't exist, what would your customers use instead? Its what your prospects would use to do the task if your product didn't exist.",
          "content_length": 1021,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Obviously Awesome",
          "blog_url": "https://www.johnmathews.is/blog/obviously-awesome",
          "blog_date": "December 03, 2020",
          "content": "It could be excel, or pen and paper. It could be nothing, (in which case maybe you product doesn't solve a real pain point.) You probably know a lot more about your market, and problem, and alternative solutions, than your prospects do. (\"Doing nothing\" could be an opportunity, not a red flag.) Its important to understand what customers will compare your product with, because this is how they will define \"better\" Is it \"easier\" than a pen and paper? Customers might never have purchased a solution like yours before.",
          "content_length": 520,
          "content_tokens": 112,
          "embedding": []
        },
        {
          "blog_title": "Obviously Awesome",
          "blog_url": "https://www.johnmathews.is/blog/obviously-awesome",
          "blog_date": "December 03, 2020",
          "content": "Unique Attributes - What do you have that alternative do not? Delivery Model (online vs offline, installed on-site vs not) Business model (rental vs purchase) Specific expertise (data scientist with financial and back-end web dev expertise) Value (and quantifiable objective proof) - What value do the attributes enable for customers? If unique attributes are your secret sauce, the value is why someone might care about your secret sauce Fact based, provable, demonstrable, quantifiable, objective. Third party opinions are relevant. Target market characteristics - Who cares a lot about that value? Focus on customers who are most likely to purchase quickly, wont ask for discounts, will tell their friends about you. You should clearly identify who these are and Identity what sets them apart from other groups of customers.",
          "content_length": 827,
          "content_tokens": 160,
          "embedding": []
        },
        {
          "blog_title": "Obviously Awesome",
          "blog_url": "https://www.johnmathews.is/blog/obviously-awesome",
          "blog_date": "December 03, 2020",
          "content": "Why are they uniquely likely to buy from you when others wouldnt or would take longer to consider and make a purchase Market Category - What context makes your value obvious to the ideal customer? Declaring that your product exists in a certain market triggers a powerful set of assumptions make these assumptions help you, not hinder you. When presented with your product, customers will try to use what they already know to figure out what your product is all about and why its special. You want them to be able to do this really quickly and easily. Make these assumptions work for you, not against you. You won't have to list every feature, because most of them will be assumed by the context of the market category. Get it right, and sales efforts (copy) wont be wasted battling those assumptions, but can instead build off of them to show secret sauce and value more obviously. (Bonus) Relevant Trends - what trends make your product relevant right now? Used carefully, trends can show prospoects why they should pay attention to your product right now. Increases urgency. It can increase urgency, excitement, coolness, credibility but the trend must be directly relevant, practically and objectively applicable. Blockchains, AI, ML are trends - they are relevant to multiple markets. Each of these components is relevant to the others.",
          "content_length": 1340,
          "content_tokens": 265,
          "embedding": []
        }
      ]
    },
    {
      "title": "How I learnt to code",
      "url": "https://www.johnmathews.is/blog/How-I-learnt-to-code",
      "date": "December 01, 2020",
      "content": "4 years ago I started learning how to code, and it was difficult! It still is difficult, but I now have a collection of tools and perspectives that make it less daunting. Leveling up requires one more abstraction to wrap my head around, or one more API to understand. I can do it. Code School Meta Learning to code has been fun, ultimately successful, and life changing (hello job security!) but at the beginning it was sooo slow, and super tricky. Imposter syndrome is real, and I definitely felt it. I hadn't taken any classes in computer science, and I felt like I knew almost nothing about anything. the great tutorial pelican That led to HTML and CSS (and also JavaScript, which I tried very hard to avoid for as long as possible). I felt like a monkey bashing a keyboard as I tried to make HTML elements do what I wanted. amazing tutorial I suddenly realized that great learning materials are crucial if I was going to keep momentum and keep on enjoying the thrill of seeing the computer do something I hadn't made it do before. Code School: Meta check it out",
      "length": 1065,
      "tokens": 223,
      "chunks": [
        {
          "blog_title": "How I learnt to code",
          "blog_url": "https://www.johnmathews.is/blog/How-I-learnt-to-code",
          "blog_date": "December 01, 2020",
          "content": "4 years ago I started learning how to code, and it was difficult! It still is difficult, but I now have a collection of tools and perspectives that make it less daunting. Leveling up requires one more abstraction to wrap my head around, or one more API to understand. I can do it. Code School Meta Learning to code has been fun, ultimately successful, and life changing (hello job security!) but at the beginning it was sooo slow, and super tricky. Imposter syndrome is real, and I definitely felt it. I hadn't taken any classes in computer science, and I felt like I knew almost nothing about anything. the great tutorial pelican That led to HTML and CSS (and also JavaScript, which I tried very hard to avoid for as long as possible) I felt like a monkey bashing a keyboard as I tried to make HTML elements do what I wanted. amazing tutorial I suddenly realized that great learning materials are crucial if I was going to keep momentum and keep on enjoying the thrill of seeing the computer do something I hadn't made it do before. Code School: Meta check it out.",
          "content_length": 1064,
          "content_tokens": 225,
          "embedding": []
        }
      ]
    },
    {
      "title": "The 1-Page Marketing Plan",
      "url": "https://www.johnmathews.is/blog/1-page-marketing-plan",
      "date": "November 19, 2020",
      "content": "My notes on \"The 1-Page Marketing Plan\" by Allan Dib Before (prospect) - get people to know you and indicate interest During (lead) - get the to like you and buy from you for the first time After (customer) - get them to trust you, buy from you regularly, and refer new customers strategy tactics Advertising Promotion Publicity Public relations Sales Marketing",
      "length": 361,
      "tokens": 78,
      "chunks": [
        {
          "blog_title": "The 1-Page Marketing Plan",
          "blog_url": "https://www.johnmathews.is/blog/1-page-marketing-plan",
          "blog_date": "November 19, 2020",
          "content": "My notes on \"The 1-Page Marketing Plan\" by Allan Dib Before (prospect) - get people to know you and indicate interest During (lead) - get the to like you and buy from you for the first time After (customer) - get them to trust you, buy from you regularly, and refer new customers strategy tactics Advertising Promotion Publicity Public relations Sales Marketing",
          "content_length": 361,
          "content_tokens": 78,
          "embedding": []
        }
      ]
    },
    {
      "title": "Learning to market",
      "url": "https://www.johnmathews.is/blog/marketing-101",
      "date": "November 19, 2020",
      "content": "I've learnt many things this year by being a solo technical founder, but so far marketing isn't one of them. I'm trying to change that. Since April I've been able to work full time as a solo founder. I've challenged myself to build something useful enough that customers would want to pay for it and in the process of seeking that goal I've become a much better and more rounded developer. I've been working solo for about 7 months now, and in that time I've begun using test driven development, I've built non-trivial data driven web apps using Django, and I've learnt how to deploy and monitor those apps in production and make them performant. moneybar.nl pippip.email I'm realising though, that I still have much to learn in other spheres. Being a great developer is deeply meaningful to me. It's literally a bucket list item for me and I intend to be writing code as long as I live. But there is no point creating products if no one knows they exist. This is where marketing and positioning comes in. Right now it feels like I know nothing about how to get users, or validate an idea, or position a product. These are all super necessary and super unknown. On a more meta level, I'm confronted with the lost benefits of working with co-founders, or of having friends doing similar things. I want to work faster and make progress more efficiently. I need to be part of a community. Working in isolation does have its advantages, though. I'm self-taught and self-directed, figuring out the contours of uncharted territory and creating my own personal map. In my mind, I have a deep and almost personal relationship with the coding abstractions and tools I've learnt to work with. Classes and functions, strings and floats, literally have (to me) their own textures, colors and weights when I think or dream about them. It feels like I can pick up these abstractions as if they were physical objects and turn them around to examine them. Place them next to each other and compare the differences. Run thought experiements. In my experience, this kind of relationship and affection simply doesn't happen when taking a class or following someone elses schedule. It's satisying to feel ownership of a skill like this, and it's one of the primary reasons I consider coding to be similar to a craft. Having said all that, now that I realise I need to validate my product, position it, and figure out marketing, I've stopped writing code, put down my tools, and I'm going to learn marketing. I've bought some books. Maybe I'll post some reviews here later. In no particular order here is what I plan to read: The 1-Page marketing plan, by Allan Dib Obviously Awesome, by April Dunford Lean Analytics, Hooked, How to build habit-forming products, by Nir Eyal The Mom Test, by Rob Fitzpatrick This is marketing, by Seth Godin Product-led growth, by Wes Bush I don't know if I've covered 90% of the distance required or 50%. It's exhausting but I'm here for the journey not the destination.",
      "length": 2983,
      "tokens": 652,
      "chunks": [
        {
          "blog_title": "Learning to market",
          "blog_url": "https://www.johnmathews.is/blog/marketing-101",
          "blog_date": "November 19, 2020",
          "content": "I've learnt many things this year by being a solo technical founder, but so far marketing isn't one of them. I'm trying to change that. Since April I've been able to work full time as a solo founder. I've challenged myself to build something useful enough that customers would want to pay for it and in the process of seeking that goal I've become a much better and more rounded developer. I've been working solo for about 7 months now, and in that time I've begun using test driven development, I've built non-trivial data driven web apps using Django, and I've learnt how to deploy and monitor those apps in production and make them performant. moneybar.nl pippip.email I'm realising though, that I still have much to learn in other spheres. Being a great developer is deeply meaningful to me. It's literally a bucket list item for me and I intend to be writing code as long as I live.",
          "content_length": 887,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "Learning to market",
          "blog_url": "https://www.johnmathews.is/blog/marketing-101",
          "blog_date": "November 19, 2020",
          "content": "But there is no point creating products if no one knows they exist. This is where marketing and positioning comes in. Right now it feels like I know nothing about how to get users, or validate an idea, or position a product. These are all super necessary and super unknown. On a more meta level, I'm confronted with the lost benefits of working with co-founders, or of having friends doing similar things. I want to work faster and make progress more efficiently. I need to be part of a community. Working in isolation does have its advantages, though. I'm self-taught and self-directed, figuring out the contours of uncharted territory and creating my own personal map. In my mind, I have a deep and almost personal relationship with the coding abstractions and tools I've learnt to work with. Classes and functions, strings and floats, literally have (to me) their own textures, colors and weights when I think or dream about them.",
          "content_length": 933,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "Learning to market",
          "blog_url": "https://www.johnmathews.is/blog/marketing-101",
          "blog_date": "November 19, 2020",
          "content": "It feels like I can pick up these abstractions as if they were physical objects and turn them around to examine them. Place them next to each other and compare the differences. Run thought experiements. In my experience, this kind of relationship and affection simply doesn't happen when taking a class or following someone elses schedule. It's satisying to feel ownership of a skill like this, and it's one of the primary reasons I consider coding to be similar to a craft. Having said all that, now that I realise I need to validate my product, position it, and figure out marketing, I've stopped writing code, put down my tools, and I'm going to learn marketing. I've bought some books. Maybe I'll post some reviews here later.",
          "content_length": 730,
          "content_tokens": 156,
          "embedding": []
        },
        {
          "blog_title": "Learning to market",
          "blog_url": "https://www.johnmathews.is/blog/marketing-101",
          "blog_date": "November 19, 2020",
          "content": "In no particular order here is what I plan to read: The 1-Page marketing plan, by Allan Dib Obviously Awesome, by April Dunford Lean Analytics, Hooked, How to build habit-forming products, by Nir Eyal The Mom Test, by Rob Fitzpatrick This is marketing, by Seth Godin Product-led growth, by Wes Bush I don't know if I've covered 90% of the distance required or 50% It's exhausting but I'm here for the journey not the destination.",
          "content_length": 429,
          "content_tokens": 102,
          "embedding": []
        }
      ]
    },
    {
      "title": "Pippip.Email",
      "url": "https://www.johnmathews.is/blog/pippip.email",
      "date": "October 28, 2020",
      "content": "PipPip 6 weeks ago I had an idea for a product whilst reading a news article. It would be great if the writing and sending of important messages could be separated, so that I could write something long before I needed to send it, and know that then sending would happen at the right time without having to think about it. This could be useful for sending my daughter a message on her 15th birthday, or to my wife on our 10th anniversary. I also designed a check-in mechanism, so that messages could be sent if I disappeared or pass away. PipPip We're working on validating the idea and finding the right niche audience.",
      "length": 619,
      "tokens": 134,
      "chunks": [
        {
          "blog_title": "Pippip.Email",
          "blog_url": "https://www.johnmathews.is/blog/pippip.email",
          "blog_date": "October 28, 2020",
          "content": "PipPip 6 weeks ago I had an idea for a product whilst reading a news article. It would be great if the writing and sending of important messages could be separated, so that I could write something long before I needed to send it, and know that then sending would happen at the right time without having to think about it. This could be useful for sending my daughter a message on her 15th birthday, or to my wife on our 10th anniversary. I also designed a check-in mechanism, so that messages could be sent if I disappeared or pass away. PipPip We're working on validating the idea and finding the right niche audience.",
          "content_length": 619,
          "content_tokens": 134,
          "embedding": []
        }
      ]
    },
    {
      "title": "Between Clients",
      "url": "https://www.johnmathews.is/blog/between-clients",
      "date": "October 08, 2019",
      "content": "As a freelance data scientist, I use time between client engagements to up-skill and pursue professional interests that I wouldn't otherwise be able to. At the end of the summer I had time between engagements to work on some side projects and grapple with some new (to me) libraries and technologies. Django django-plotly-dash Plotly Dash Plotly Dash Django django-plotly-dash CoinMetrics.io this investigation Atlas Consulting Internatonal Spent a lot of time working at the cafe in IKEA because my co-working space wouldn't let me stay late or work on public holidays new coworking space Bought our first car. It required a lot more time and research than I expected. Texni Data Consultancy Texni Data Google Cloud Platform App Engine business website blog firebase johnmathews.is blog.johnmathews.is PhotoBox Chose a primary school for my daughter to go to next year.",
      "length": 870,
      "tokens": 191,
      "chunks": [
        {
          "blog_title": "Between Clients",
          "blog_url": "https://www.johnmathews.is/blog/between-clients",
          "blog_date": "October 08, 2019",
          "content": "As a freelance data scientist, I use time between client engagements to up-skill and pursue professional interests that I wouldn't otherwise be able to. At the end of the summer I had time between engagements to work on some side projects and grapple with some new (to me) libraries and technologies. Django django-plotly-dash Plotly Dash Plotly Dash Django django-plotly-dash CoinMetrics.io this investigation Atlas Consulting Internatonal Spent a lot of time working at the cafe in IKEA because my co-working space wouldn't let me stay late or work on public holidays new coworking space Bought our first car. It required a lot more time and research than I expected. Texni Data Consultancy Texni Data Google Cloud Platform App Engine business website blog firebase johnmathews.is blog.johnmathews.is PhotoBox Chose a primary school for my daughter to go to next year.",
          "content_length": 870,
          "content_tokens": 191,
          "embedding": []
        }
      ]
    },
    {
      "title": "Analysis of the mean and median value of transactions on 5 Blockchains",
      "url": "https://www.johnmathews.is/blog/btc-fork-analysis",
      "date": "September 02, 2019",
      "content": "Comparing the daily mean and median value of on-chain transactions gives an indication of the extent of organic blockchain use. Comparing the mean-median ratio (MMR) across different Bitcoin forks shows that Bitcoin (BTC) is the least influenced by \"whales\".",
      "length": 258,
      "tokens": 55,
      "chunks": [
        {
          "blog_title": "Analysis of the mean and median value of transactions on 5 Blockchains",
          "blog_url": "https://www.johnmathews.is/blog/btc-fork-analysis",
          "blog_date": "September 02, 2019",
          "content": "Comparing the daily mean and median value of on-chain transactions gives an indication of the extent of organic blockchain use. Comparing the mean-median ratio (MMR) across different Bitcoin forks shows that Bitcoin (BTC) is the least influenced by \"whales\".",
          "content_length": 258,
          "content_tokens": 55,
          "embedding": []
        }
      ]
    },
    {
      "title": "A faster zsh",
      "url": "https://www.johnmathews.is/blog/shell",
      "date": "February 14, 2019",
      "content": "zsh was loading significantly slower than bash, so I used profiling to see what was slowing things down Opening up a new shell was annoyingly slow. Not terrible, but enough to notice. Its a niggle. time To measure the startup speed of your shell, do: for i in $(seq 1 10); do /usr/bin/time $SHELL -i -c exit; done zsh $SHELL zsh bash fish BASH zsh zsh -xv zmodload zsh/zprof .zshrc zprof zsh Next steps - make virtualenvwrapper run faster, or asyncronously, or not at all... virtualenvwrapper lazy loading",
      "length": 505,
      "tokens": 139,
      "chunks": [
        {
          "blog_title": "A faster zsh",
          "blog_url": "https://www.johnmathews.is/blog/shell",
          "blog_date": "February 14, 2019",
          "content": "zsh was loading significantly slower than bash, so I used profiling to see what was slowing things down Opening up a new shell was annoyingly slow. Not terrible, but enough to notice. Its a niggle. time To measure the startup speed of your shell, do: for i in $(seq 1 10); do /usr/bin/time $SHELL -i -c exit; done zsh $SHELL zsh bash fish BASH zsh zsh -xv zmodload zsh/zprof .zshrc zprof zsh Next steps - make virtualenvwrapper run faster, or asyncronously, or not at all... virtualenvwrapper lazy loading",
          "content_length": 505,
          "content_tokens": 139,
          "embedding": []
        }
      ]
    },
    {
      "title": "Bitcoin Lightning",
      "url": "https://www.johnmathews.is/blog/bitcoin-lightning",
      "date": "January 24, 2019",
      "content": "I set up a node on the Bitcoin Lightning network and sent a payment of &#36;0.005 which confirmed in a few seconds. One of the largest obstacles (second only to privacy in my opinion) to widespread adoption of Bitcoin is its limited volume. Bitcoin cannot faciliate payments fast enough such that it could compete with Visa or Mastercard. Lightning protocol There are a lot of resources about what the Lightning network is, why it's neccesary and how it works. There are also several good guides available about how to set up and maintain a node. I used a Raspberry Pi with an external hdd. It took a few attempts, mostly because it's my first time working with an unix operating system and I tried to move a swap file to a disk that wasnt formmated as ext4... Anyway, I've opened and closed some channels, connected to peers, and made some transactions. I even bought some stickers using Lightning! You can find my node using these details: Alias: \"johnmathews.is\" Public Key: \"025469b50de125b4cd97457c0da67365519f0cd0f441c2ced0978fb6ae7802ae76\" IP address: 85.145.183.145 Port: 9735 Some useful resources: Lightning network explorer Lightning node information Interesting things to do",
      "length": 1186,
      "tokens": 283,
      "chunks": [
        {
          "blog_title": "Bitcoin Lightning",
          "blog_url": "https://www.johnmathews.is/blog/bitcoin-lightning",
          "blog_date": "January 24, 2019",
          "content": "I set up a node on the Bitcoin Lightning network and sent a payment of &#36;0.005 which confirmed in a few seconds. One of the largest obstacles (second only to privacy in my opinion) to widespread adoption of Bitcoin is its limited volume. Bitcoin cannot faciliate payments fast enough such that it could compete with Visa or Mastercard. Lightning protocol There are a lot of resources about what the Lightning network is, why it's neccesary and how it works. There are also several good guides available about how to set up and maintain a node. I used a Raspberry Pi with an external hdd. It took a few attempts, mostly because it's my first time working with an unix operating system and I tried to move a swap file to a disk that wasnt formmated as ext4.. Anyway, I've opened and closed some channels, connected to peers, and made some transactions. I even bought some stickers using Lightning! You can find my node using these details: Alias: \"johnmathews.is\" Public Key: \"025469b50de125b4cd97457c0da67365519f0cd0f441c2ced0978fb6ae7802ae76\" IP address: 85.145.183.145 Port: 9735 Some useful resources: Lightning network explorer Lightning node information Interesting things to do.",
          "content_length": 1185,
          "content_tokens": 284,
          "embedding": []
        }
      ]
    },
    {
      "title": "Sync a BTC node, quickly",
      "url": "https://www.johnmathews.is/blog/sync-bitcoin-core-node",
      "date": "October 13, 2018",
      "content": "Sync a Bitcoin node for the first time, quickly, on a spinning disk by moving chainstate to an SSD and symlinking to it. In order to run your own bitcoin node, or lightning node, you'll need to download the entire bitcoin blockchain and then validate it. This takes ages on a magnetic disk due to the random access speed of the contents of the chainstate directory. on the Bitcoin wiki",
      "length": 385,
      "tokens": 82,
      "chunks": [
        {
          "blog_title": "Sync a BTC node, quickly",
          "blog_url": "https://www.johnmathews.is/blog/sync-bitcoin-core-node",
          "blog_date": "October 13, 2018",
          "content": "Sync a Bitcoin node for the first time, quickly, on a spinning disk by moving chainstate to an SSD and symlinking to it. In order to run your own bitcoin node, or lightning node, you'll need to download the entire bitcoin blockchain and then validate it. This takes ages on a magnetic disk due to the random access speed of the contents of the chainstate directory. on the Bitcoin wiki",
          "content_length": 385,
          "content_tokens": 82,
          "embedding": []
        }
      ]
    },
    {
      "title": "Bakke-Rij",
      "url": "https://www.johnmathews.is/blog/bakkerij",
      "date": "June 11, 2018",
      "content": "This is a great example of a creative and innovative coworking space. I recently began working in a new coworking space, sharing an office unit with another entrepreneur. What makes this coworking space unique is it's conversion from an industrial bakery to a coworking space. Where the machinery once stood, converted shipping containers with glass walls have become offices for startups and freelancers. The skylights, glass walls and bright colors create a light and airy atmosphere, and the space seems popular with designers and founders working in creative industries. It's an energetic space with a creative feel to it.",
      "length": 626,
      "tokens": 119,
      "chunks": [
        {
          "blog_title": "Bakke-Rij",
          "blog_url": "https://www.johnmathews.is/blog/bakkerij",
          "blog_date": "June 11, 2018",
          "content": "This is a great example of a creative and innovative coworking space. I recently began working in a new coworking space, sharing an office unit with another entrepreneur. What makes this coworking space unique is it's conversion from an industrial bakery to a coworking space. Where the machinery once stood, converted shipping containers with glass walls have become offices for startups and freelancers. The skylights, glass walls and bright colors create a light and airy atmosphere, and the space seems popular with designers and founders working in creative industries. It's an energetic space with a creative feel to it.",
          "content_length": 626,
          "content_tokens": 119,
          "embedding": []
        }
      ]
    },
    {
      "title": "Prediction Markets",
      "url": "https://www.johnmathews.is/blog/prediction",
      "date": "June 07, 2018",
      "content": "Prediction markets can be more accurate than surveys, experts, and polls, and they're becoming easier and cheaper to create. prediction market 1 Prediction markets enables participants to purchase shares or tokens tied to the outcome of a specific future event. Once the event has occurred, holders of the tokens representing the actual outcome will receive a reward of predefined value. This creates an incentive to hold tokens corresponding to the correct outcome, and the market dynamics of supply and demand allow the price to reflect perceived probabilities of different outcomes. Helpfully, the price of each type of token corresponds to the relative probability of each outcome occurring which allows for simple interpretation of the results. If the reward for holding a share corresponding to the correct outcome is $1, and the present price of this share is 50 cents, then the market's estimate of the likelihood of this outcome occurring is 50%. Shares can be traded continuously. As trading occurs over time the probability of different outcomes will change as new information becomes known, and the changing price of the shares quantify this. Let's describe how this could work with an example: 2 Dover 3 If the number of vehicles is lower than would otherwise be expected, (around 12000) this would likely be due to the impact of Brexit and thus the market will serve as a useful proxy for predicting what kind of Brexit will occur. One reason that prediction markets work so well is because they aggregate information from disparate sources and the price shows not only an impartial assessment of the most likely outcome but the aggregated level of confidence that the participants have. Since no one is obliged to participate, those that do believe they have valuable information which gives them a competitive advantage. This creates a mechanism that moves good quality information into the prediction market, with the resulting prices reflecting the probability of a range of outcomes. In our example, people with relevant information would include port employees, business owners in the UK and in Europe, politicians, civil servants, business analysts, bankers, etc. Whilst it is clear that any of these roles may have useful information or judgement about the outcome, it is not clear how useful each participants role is relative to the others. By allowing a participant to bid for as many shares in as many different categories as they want, each participant's confidence in their information can be quantified. In this way, prediction markets align the incentives of market participants and observers. If the market is large enough then it becomes prohibitively expensive to distort the market and promote poor quality information, including information designed to create FUD (Fear, Uncertainty, Doubt), fake news, or alternative facts. Prediction markets are nothing new, with political betting being used to make predictions as early as the 1500s. However the adoption of the internet and decentralised networks now allow prediction markets to be used more widely and cheaply than ever before. Gnosis is building a platform on the Ethereum blockchain on which others can build new applications which harness the power of prediction markets. By lowering the cost and complexity of creating a prediction market, observers can benefit from high quality and impartial predictive information about future events, and market participants are rewarded for accurate assessments of likely outcomes. This will enable better decision making and empower observers with previously unobtainable insight. In our example, the market could be created and funded by any organisation that would benefit from knowing the results of the prediction market. This could be the port of Dover itself, news organisations, or market research firms. Any of these businesses would benefit from an accurate prediction. ↩ https://www.nytimes.com/2018/06/03/world/europe/brexit-customs-union-dover-border.html ↩ https://www.doverport.co.uk/about/performance/ ↩",
      "length": 4052,
      "tokens": 755,
      "chunks": [
        {
          "blog_title": "Prediction Markets",
          "blog_url": "https://www.johnmathews.is/blog/prediction",
          "blog_date": "June 07, 2018",
          "content": "Prediction markets can be more accurate than surveys, experts, and polls, and they're becoming easier and cheaper to create. prediction market 1 Prediction markets enables participants to purchase shares or tokens tied to the outcome of a specific future event. Once the event has occurred, holders of the tokens representing the actual outcome will receive a reward of predefined value. This creates an incentive to hold tokens corresponding to the correct outcome, and the market dynamics of supply and demand allow the price to reflect perceived probabilities of different outcomes. Helpfully, the price of each type of token corresponds to the relative probability of each outcome occurring which allows for simple interpretation of the results. If the reward for holding a share corresponding to the correct outcome is $1, and the present price of this share is 50 cents, then the market's estimate of the likelihood of this outcome occurring is 50% Shares can be traded continuously.",
          "content_length": 989,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "Prediction Markets",
          "blog_url": "https://www.johnmathews.is/blog/prediction",
          "blog_date": "June 07, 2018",
          "content": "As trading occurs over time the probability of different outcomes will change as new information becomes known, and the changing price of the shares quantify this. Let's describe how this could work with an example: 2 Dover 3 If the number of vehicles is lower than would otherwise be expected, (around 12000) this would likely be due to the impact of Brexit and thus the market will serve as a useful proxy for predicting what kind of Brexit will occur. One reason that prediction markets work so well is because they aggregate information from disparate sources and the price shows not only an impartial assessment of the most likely outcome but the aggregated level of confidence that the participants have. Since no one is obliged to participate, those that do believe they have valuable information which gives them a competitive advantage. This creates a mechanism that moves good quality information into the prediction market, with the resulting prices reflecting the probability of a range of outcomes.",
          "content_length": 1011,
          "content_tokens": 181,
          "embedding": []
        },
        {
          "blog_title": "Prediction Markets",
          "blog_url": "https://www.johnmathews.is/blog/prediction",
          "blog_date": "June 07, 2018",
          "content": "In our example, people with relevant information would include port employees, business owners in the UK and in Europe, politicians, civil servants, business analysts, bankers, etc. Whilst it is clear that any of these roles may have useful information or judgement about the outcome, it is not clear how useful each participants role is relative to the others. By allowing a participant to bid for as many shares in as many different categories as they want, each participant's confidence in their information can be quantified. In this way, prediction markets align the incentives of market participants and observers. If the market is large enough then it becomes prohibitively expensive to distort the market and promote poor quality information, including information designed to create FUD (Fear, Uncertainty, Doubt), fake news, or alternative facts. Prediction markets are nothing new, with political betting being used to make predictions as early as the 1500s.",
          "content_length": 969,
          "content_tokens": 182,
          "embedding": []
        },
        {
          "blog_title": "Prediction Markets",
          "blog_url": "https://www.johnmathews.is/blog/prediction",
          "blog_date": "June 07, 2018",
          "content": "However the adoption of the internet and decentralised networks now allow prediction markets to be used more widely and cheaply than ever before. Gnosis is building a platform on the Ethereum blockchain on which others can build new applications which harness the power of prediction markets. By lowering the cost and complexity of creating a prediction market, observers can benefit from high quality and impartial predictive information about future events, and market participants are rewarded for accurate assessments of likely outcomes. This will enable better decision making and empower observers with previously unobtainable insight. In our example, the market could be created and funded by any organisation that would benefit from knowing the results of the prediction market. This could be the port of Dover itself, news organisations, or market research firms. Any of these businesses would benefit from an accurate prediction. ↩ https://www.nytimes.com/2018/06/03/world/europe/brexit-customs-union-dover-border.html ↩ https://www.doverport.co.uk/about/performance/ ↩",
          "content_length": 1078,
          "content_tokens": 214,
          "embedding": []
        }
      ]
    },
    {
      "title": "Reading: April 2018",
      "url": "https://www.johnmathews.is/blog/reading-april-2018",
      "date": "June 04, 2018",
      "content": "A list of interesting things. June 2018 Mental models Life is short Invisible asymptotes Factors from scratch This is tragic Vim Cryptocurrency regulations around the world On the 2008 financial crisis Jill Carlson Georges St-Pierre Ricardo Spagni data sets",
      "length": 257,
      "tokens": 50,
      "chunks": [
        {
          "blog_title": "Reading: April 2018",
          "blog_url": "https://www.johnmathews.is/blog/reading-april-2018",
          "blog_date": "June 04, 2018",
          "content": "A list of interesting things. June 2018 Mental models Life is short Invisible asymptotes Factors from scratch This is tragic Vim Cryptocurrency regulations around the world On the 2008 financial crisis Jill Carlson Georges St-Pierre Ricardo Spagni data sets",
          "content_length": 257,
          "content_tokens": 50,
          "embedding": []
        }
      ]
    },
    {
      "title": "Ry's Git Tutorial",
      "url": "https://www.johnmathews.is/blog/rys-git-tutorial",
      "date": "June 01, 2018",
      "content": "Ry's Git Tutorial is a great way to learn Git. Learn by doing as you create and maintain a simple website. For tracking changes to a collection of files, Git is the ubiquitous solution. It's free, robust, comprehensive, and there is a plethora of resources that are easy to find. I usually find the commands difficult to remember though, and the concepts which Git is built on often seem counter-intuitive to me. This means I spend a lot of time searching for answers and trying to remember how I can use Git to experiment with a project without fear of losing any hard-won progress. 1 The tutorial was first published in 2012 and the website which originally hosted the examples no longer exists. Each tutorial chapter starts with a link to download the project files up to that point, so the reader doesn't need to start at the beginning but can jump into the guide at any point. Unfortunately these links no longer work and I'm going to make the materials available here so that they can continue to be useful. If the author would like to get in touch, please do. I'd like to keep this great resource available so that others can benefit from it. .epub .pdf Download the example files for each module below: Chapter 2: Undoing Changes Chapter 3: Branches I Chapter 4: Branches II Chapter 5: Rebasing Chapter 6: Rewriting History Chapter 7: Remotes Chapter 8: Centralized Workflows Chapter 9: Distributed Workflows Chapter 10: Patch Workflows Chapter 11: Tips & Tricks Chapter 12: Plumbing end ↩",
      "length": 1497,
      "tokens": 318,
      "chunks": [
        {
          "blog_title": "Ry's Git Tutorial",
          "blog_url": "https://www.johnmathews.is/blog/rys-git-tutorial",
          "blog_date": "June 01, 2018",
          "content": "Ry's Git Tutorial is a great way to learn Git. Learn by doing as you create and maintain a simple website. For tracking changes to a collection of files, Git is the ubiquitous solution. It's free, robust, comprehensive, and there is a plethora of resources that are easy to find. I usually find the commands difficult to remember though, and the concepts which Git is built on often seem counter-intuitive to me. This means I spend a lot of time searching for answers and trying to remember how I can use Git to experiment with a project without fear of losing any hard-won progress. 1 The tutorial was first published in 2012 and the website which originally hosted the examples no longer exists. Each tutorial chapter starts with a link to download the project files up to that point, so the reader doesn't need to start at the beginning but can jump into the guide at any point.",
          "content_length": 881,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Ry's Git Tutorial",
          "blog_url": "https://www.johnmathews.is/blog/rys-git-tutorial",
          "blog_date": "June 01, 2018",
          "content": "Unfortunately these links no longer work and I'm going to make the materials available here so that they can continue to be useful. If the author would like to get in touch, please do. I'd like to keep this great resource available so that others can benefit from it. .epub .pdf Download the example files for each module below: Chapter 2: Undoing Changes Chapter 3: Branches I Chapter 4: Branches II Chapter 5: Rebasing Chapter 6: Rewriting History Chapter 7: Remotes Chapter 8: Centralized Workflows Chapter 9: Distributed Workflows Chapter 10: Patch Workflows Chapter 11: Tips & Tricks Chapter 12: Plumbing end ↩",
          "content_length": 615,
          "content_tokens": 139,
          "embedding": []
        }
      ]
    },
    {
      "title": "The Bitcoin Lightning Network",
      "url": "https://www.johnmathews.is/blog/lightning",
      "date": "April 12, 2018",
      "content": "This is an unfinished article from 2018. I'm publishing it in 2021 because it has a few ideas I'd like to be able to refer to in future. The lightning network is a protocol that operates on top of the Bitcoin network. It allows instant transactions between participants and is the leading solution to current scalability problems. here Bitcoin doesn't scale well enough to facilitate the rate of transactions necessary for it to become a medium of exchange in everyday life. This is because Transactions aren't instant - the average block time is 10 minutes Transaction fees are variable and too high (particularly when blocks are almost full) to enable low value transactions (micro-payments) (link) In 2017 there was a lot of contentious debate about how to solve Bitcoins scaling problems. One of the most frequently suggested solutions is to increase the block size, so that more transactions can fit into each block. If you had 7 billion people making 2 transactions per day, you would need 24GB blocks, generating data at a rate of 3.5TB/day. This would make running a full bitcoin node impractical for many people which would result in centralisation, fewer miners and lower security. (Note: you would expect corporations and large miners to support efforts to increase block sizes, because the associated infrastructure cost increases create a higher barrier for entry to newcomers. This would decrease the competition for new blocks and protect their revenue from miners fees.) SQL is a much more efficient database model than a blockchain. Its scalable and fast, and is what is used today to power visa, master card, central banks. But it isn't trustless. With a SQL database model you have a trusted 3rd party maintaining the database which everyone else needs to query to discover or verify a balance. This is equivalent to giving the 3rd party your money and trusting they do the right thing. A blockchain with other blockchains running parallel to it. Maybe like a a rope made of many different chords. Side chains are not primarily a scaling solution. If you want to send a payment to an address that is on a different side chain you would create 2 transactions. Not any-to-any. Many payments between two predetermined parties. Useful when two parties pay each other multiple times, not necessarily good for paying many different accounts relatively few times each. Its not any-to-any. anyone to anyone Payment channels between many parties in a multi-hop hub and spoke model Minimally trusted intermediaries - they can't take your coins, but they could conceivably delay setllement Requires the malleability fix that occurred in 2017 Previous soft forks: Pay to script hash, bip34 (coinbase transactions) Uses multisig Allows two people to send transactions to each other quickly without hitting the blockchain everytime Alice and Bob create a multisig address that they each control Alice wants to send 1 BTC to the multisig address Before she does this, she gets Bobs refund signature, this means that at worst, Alice loses her coin for 30 days. Bob creates a 30 day nLock time refund signature, signs it, and sends it to Alice. Alice can either sign it immediately and keep it, or wait to sign it herself (keeping it half-signed). Once Alice has the refund signature she knows its safe to send her BTC to the multisig address she and Bob just created.",
      "length": 3370,
      "tokens": 673,
      "chunks": [
        {
          "blog_title": "The Bitcoin Lightning Network",
          "blog_url": "https://www.johnmathews.is/blog/lightning",
          "blog_date": "April 12, 2018",
          "content": "This is an unfinished article from 2018. I'm publishing it in 2021 because it has a few ideas I'd like to be able to refer to in future. The lightning network is a protocol that operates on top of the Bitcoin network. It allows instant transactions between participants and is the leading solution to current scalability problems. here Bitcoin doesn't scale well enough to facilitate the rate of transactions necessary for it to become a medium of exchange in everyday life. This is because Transactions aren't instant - the average block time is 10 minutes Transaction fees are variable and too high (particularly when blocks are almost full) to enable low value transactions (micro-payments) (link) In 2017 there was a lot of contentious debate about how to solve Bitcoins scaling problems. One of the most frequently suggested solutions is to increase the block size, so that more transactions can fit into each block.",
          "content_length": 921,
          "content_tokens": 175,
          "embedding": []
        },
        {
          "blog_title": "The Bitcoin Lightning Network",
          "blog_url": "https://www.johnmathews.is/blog/lightning",
          "blog_date": "April 12, 2018",
          "content": "If you had 7 billion people making 2 transactions per day, you would need 24GB blocks, generating data at a rate of 3.5TB/day. This would make running a full bitcoin node impractical for many people which would result in centralisation, fewer miners and lower security. (Note: you would expect corporations and large miners to support efforts to increase block sizes, because the associated infrastructure cost increases create a higher barrier for entry to newcomers. This would decrease the competition for new blocks and protect their revenue from miners fees.) SQL is a much more efficient database model than a blockchain. Its scalable and fast, and is what is used today to power visa, master card, central banks. But it isn't trustless. With a SQL database model you have a trusted 3rd party maintaining the database which everyone else needs to query to discover or verify a balance. This is equivalent to giving the 3rd party your money and trusting they do the right thing. A blockchain with other blockchains running parallel to it. Maybe like a a rope made of many different chords. Side chains are not primarily a scaling solution. If you want to send a payment to an address that is on a different side chain you would create 2 transactions. Not any-to-any. Many payments between two predetermined parties. Useful when two parties pay each other multiple times, not necessarily good for paying many different accounts relatively few times each. Its not any-to-any.",
          "content_length": 1477,
          "content_tokens": 292,
          "embedding": []
        },
        {
          "blog_title": "The Bitcoin Lightning Network",
          "blog_url": "https://www.johnmathews.is/blog/lightning",
          "blog_date": "April 12, 2018",
          "content": "anyone to anyone Payment channels between many parties in a multi-hop hub and spoke model Minimally trusted intermediaries - they can't take your coins, but they could conceivably delay setllement Requires the malleability fix that occurred in 2017 Previous soft forks: Pay to script hash, bip34 (coinbase transactions) Uses multisig Allows two people to send transactions to each other quickly without hitting the blockchain everytime Alice and Bob create a multisig address that they each control Alice wants to send 1 BTC to the multisig address Before she does this, she gets Bobs refund signature, this means that at worst, Alice loses her coin for 30 days. Bob creates a 30 day nLock time refund signature, signs it, and sends it to Alice. Alice can either sign it immediately and keep it, or wait to sign it herself (keeping it half-signed) Once Alice has the refund signature she knows its safe to send her BTC to the multisig address she and Bob just created.",
          "content_length": 967,
          "content_tokens": 207,
          "embedding": []
        }
      ]
    },
    {
      "title": "How to buy Bitcoin",
      "url": "https://www.johnmathews.is/blog/buying-btc",
      "date": "December 07, 2017",
      "content": "Recently a few friends have asked me how they can buy Bitcoin. I'm not a financial advisor, but here are a few things that come to mind: Don't invest what you can't afford to lose. If the price falls 50%, you need to be able to wait whilst the price recovers. Write down the following: How much can you afford to invest? Consider how much cash you will need over the next year, how long it would take to recover any losses, etc. How long do you want to invest for? How much profit do you want to make? Don't have an open-ended goal. You will need to get good at identifying and ignoring the following, even from your friends: Hype Fake news Fear, Uncertainty, Doubt (FUD) Don't trust without verifying. The previous point is really important, and also difficult. By putting something you care about in a risky situation (it is risky) you will experience anxiety and excitement. You need to control your psychology and identity when other people are trying to manipulate you. This is useful in all areas of life. Investing is good mental exercise because money has an intensely psychological quality about it, and crypto currencies are the most intense trading experience there is right now. Almost no one has a clue what's happening. Conventional economists and traders certainly don't. This is crypto-economics and the rules haven't been worked out yet. We've never had this tech before, and the internet has made everything - communication and innovation - much quicker. This is a powerful combination of factors and we haven't seen them play out before. Take some time to read about the fundamentals and understand the tech as much as you can. Think about why people would behave in certain ways and what makes bitcoin useful, or not. Get started on this today, it will take some time. lopp.net namamotoinstitute.org Twitter has a lot of current and new information, but also a lot of bots and scammers spreading hype and FUD (see point 4). If you're going to lose sleep over your investment, invest less. Prices fall. chart Coinbase Don't make financial decisions when you're feeling rushed. Check your psychology. If you've bought some Bitcoin or other cryptocurrencies, don't store them on an exchange. Transfer them to a wallet that you control. If you don't own your private key, you don't own the asset. If you don't know what that means, google it (Point 8).",
      "length": 2368,
      "tokens": 507,
      "chunks": [
        {
          "blog_title": "How to buy Bitcoin",
          "blog_url": "https://www.johnmathews.is/blog/buying-btc",
          "blog_date": "December 07, 2017",
          "content": "Recently a few friends have asked me how they can buy Bitcoin. I'm not a financial advisor, but here are a few things that come to mind: Don't invest what you can't afford to lose. If the price falls 50%, you need to be able to wait whilst the price recovers. Write down the following: How much can you afford to invest? Consider how much cash you will need over the next year, how long it would take to recover any losses, etc. How long do you want to invest for? How much profit do you want to make? Don't have an open-ended goal. You will need to get good at identifying and ignoring the following, even from your friends: Hype Fake news Fear, Uncertainty, Doubt (FUD) Don't trust without verifying. The previous point is really important, and also difficult. By putting something you care about in a risky situation (it is risky) you will experience anxiety and excitement.",
          "content_length": 877,
          "content_tokens": 197,
          "embedding": []
        },
        {
          "blog_title": "How to buy Bitcoin",
          "blog_url": "https://www.johnmathews.is/blog/buying-btc",
          "blog_date": "December 07, 2017",
          "content": "You need to control your psychology and identity when other people are trying to manipulate you. This is useful in all areas of life. Investing is good mental exercise because money has an intensely psychological quality about it, and crypto currencies are the most intense trading experience there is right now. Almost no one has a clue what's happening. Conventional economists and traders certainly don't. This is crypto-economics and the rules haven't been worked out yet. We've never had this tech before, and the internet has made everything - communication and innovation - much quicker. This is a powerful combination of factors and we haven't seen them play out before. Take some time to read about the fundamentals and understand the tech as much as you can. Think about why people would behave in certain ways and what makes bitcoin useful, or not. Get started on this today, it will take some time.",
          "content_length": 910,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "How to buy Bitcoin",
          "blog_url": "https://www.johnmathews.is/blog/buying-btc",
          "blog_date": "December 07, 2017",
          "content": "lopp.net namamotoinstitute.org Twitter has a lot of current and new information, but also a lot of bots and scammers spreading hype and FUD (see point 4) If you're going to lose sleep over your investment, invest less. Prices fall. chart Coinbase Don't make financial decisions when you're feeling rushed. Check your psychology. If you've bought some Bitcoin or other cryptocurrencies, don't store them on an exchange. Transfer them to a wallet that you control. If you don't own your private key, you don't own the asset. If you don't know what that means, google it (Point 8).",
          "content_length": 578,
          "content_tokens": 131,
          "embedding": []
        }
      ]
    },
    {
      "title": "Live near the ocean",
      "url": "https://www.johnmathews.is/blog/ocean",
      "date": "November 23, 2017",
      "content": "Being near water is better.",
      "length": 27,
      "tokens": 6,
      "chunks": [
        {
          "blog_title": "Live near the ocean",
          "blog_url": "https://www.johnmathews.is/blog/ocean",
          "blog_date": "November 23, 2017",
          "content": "Being near water is better.",
          "content_length": 27,
          "content_tokens": 6,
          "embedding": []
        }
      ]
    },
    {
      "title": "Pangea",
      "url": "https://www.johnmathews.is/blog/pangea",
      "date": "November 22, 2017",
      "content": "Communities will always need to create reliable and enforceable agreements with each other. In many countries the ability to create legally binding agreements is not available to average citizens. Legal services are often unaffordable and opaque, or service providers are corrupt. Legal services are in need of disruption. Bitnation (who I consult for) intends to address this problem by empowering people to self-organise and self-govern. We are building a platform called Pangea which allows users to create, notarise and arbitrate contracts according to a jurisdiction which each party joins voluntarily, irrespective of their geographical location. Pangea is a smart phone app that looks and feels like a chat app, the back-end (called Panthalassa) is an encrypted mesh network hooked up to the Ethereum blockchain. On Pangea, people are incentivised to be good citizens by receiving rewards for doing good, rather than being coerced by the threat of punishment for bad behaviour. This platform would fulfil a vast and unmet need, particularly in countries whose legal systems function poorly. On Pangea, a user voluntarily chooses which jurisdiction to be a part of. Contracts are then notarised, executed and arbitrated according to that jurisdiction. Users voluntarily join a decentralised borderless voluntary nation (DBVN) and will receive tokens (Pangea Arbitration Tokens) as a reward for good behaviour. The tokens will be tradable and will be used as payment on Pangea for notarisation and arbitration services. Societies cannot escape their need to use currency as stores of value. They also cannot escape their need to create reliable and enforceable agreements (contracts) with each other. Generating Bitcoin through proof of work occurs because individuals believe that Bitcoin will be continuously used — that it will meet an ongoing need to transact using a decentralised and disintermediated method. Generating PAT by being a good citizen will occur because individuals believe that Pangea will be continuously used — that it will meet an ongoing need to create enforceable agreements using a voluntary and geographically agnostic (and decentralised) method. website",
      "length": 2186,
      "tokens": 425,
      "chunks": [
        {
          "blog_title": "Pangea",
          "blog_url": "https://www.johnmathews.is/blog/pangea",
          "blog_date": "November 22, 2017",
          "content": "Communities will always need to create reliable and enforceable agreements with each other. In many countries the ability to create legally binding agreements is not available to average citizens. Legal services are often unaffordable and opaque, or service providers are corrupt. Legal services are in need of disruption. Bitnation (who I consult for) intends to address this problem by empowering people to self-organise and self-govern. We are building a platform called Pangea which allows users to create, notarise and arbitrate contracts according to a jurisdiction which each party joins voluntarily, irrespective of their geographical location. Pangea is a smart phone app that looks and feels like a chat app, the back-end (called Panthalassa) is an encrypted mesh network hooked up to the Ethereum blockchain. On Pangea, people are incentivised to be good citizens by receiving rewards for doing good, rather than being coerced by the threat of punishment for bad behaviour.",
          "content_length": 984,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "Pangea",
          "blog_url": "https://www.johnmathews.is/blog/pangea",
          "blog_date": "November 22, 2017",
          "content": "This platform would fulfil a vast and unmet need, particularly in countries whose legal systems function poorly. On Pangea, a user voluntarily chooses which jurisdiction to be a part of. Contracts are then notarised, executed and arbitrated according to that jurisdiction. Users voluntarily join a decentralised borderless voluntary nation (DBVN) and will receive tokens (Pangea Arbitration Tokens) as a reward for good behaviour. The tokens will be tradable and will be used as payment on Pangea for notarisation and arbitration services. Societies cannot escape their need to use currency as stores of value. They also cannot escape their need to create reliable and enforceable agreements (contracts) with each other. Generating Bitcoin through proof of work occurs because individuals believe that Bitcoin will be continuously used — that it will meet an ongoing need to transact using a decentralised and disintermediated method. Generating PAT by being a good citizen will occur because individuals believe that Pangea will be continuously used — that it will meet an ongoing need to create enforceable agreements using a voluntary and geographically agnostic (and decentralised) method. website.",
          "content_length": 1201,
          "content_tokens": 233,
          "embedding": []
        }
      ]
    },
    {
      "title": "Bitcoin compared to gold",
      "url": "https://www.johnmathews.is/blog/bitcoin-vs-gold",
      "date": "November 21, 2017",
      "content": "Bitcoin will become a safe haven asset comparable to gold A safe haven asset is something to buy during economic uncertainty. Historically, the safest asset you can buy has been gold. This is not because of anything inherently special about gold, but because that is what people believe to be the best long term method of storing value. People believe gold is special because they assume that in future other people will believe it's special. A safe-haven asset must fulfil the following criteria: Price isn't controlled by any single party, including a state or bank. The market is spread out beyond the reach of any one organisation. This is important because an asset which is issued, controlled or backed by an organisation has its value tied to the health of that organisation. Supply isn't controlled by any single party, including a state, bank or anyone else - it exists naturally and the rate at which it's produced or traded is beyond the control of any one organisation. Supply is limited. The effort required to create the asset naturally limits the supply. The asset doesn't wear out or expire. It's prohibitively expensive to fake. Almost everyone considers it to be precious and valuable. It can be stored and transported simply. It's not delicate or volatile. For these reasons, and because of historical consensus, people have been happy to use gold as a store of value in times of economic uncertainty or for long durations. Other assets also meets these requirements to lesser extents. Consider why gold is so good as a safe haven asset and long term value store. For all the reasons above, bitcoin is better, except one: At present, not many people consider it to be precious and valuable, so the market is small. This will change as confidence and awareness increases, and the eco-system of services and applications matures. The fundamentals are already established: A decentralised network ensures that Bitcoin can't be regulated or manipulated by any single government or organisation. The Bitcoin network can't be turned off. The present and future rate of supply is publicly available and unchangeable. This increases market efficiency and creates more rational pricing than a market where the rate of supply is unverifiable. Supply is naturally (mathematically) limited using proof of work algorithms. Bitcoin doesn't corrode or wear out. Bitcoin is impossible to fake. Bitcoin can be stored and transported more easily than gold. - If you can remember 24 words then you can access your bitcoin for free from any internet connection. article",
      "length": 2568,
      "tokens": 495,
      "chunks": [
        {
          "blog_title": "Bitcoin compared to gold",
          "blog_url": "https://www.johnmathews.is/blog/bitcoin-vs-gold",
          "blog_date": "November 21, 2017",
          "content": "Bitcoin will become a safe haven asset comparable to gold A safe haven asset is something to buy during economic uncertainty. Historically, the safest asset you can buy has been gold. This is not because of anything inherently special about gold, but because that is what people believe to be the best long term method of storing value. People believe gold is special because they assume that in future other people will believe it's special. A safe-haven asset must fulfil the following criteria: Price isn't controlled by any single party, including a state or bank. The market is spread out beyond the reach of any one organisation. This is important because an asset which is issued, controlled or backed by an organisation has its value tied to the health of that organisation. Supply isn't controlled by any single party, including a state, bank or anyone else - it exists naturally and the rate at which it's produced or traded is beyond the control of any one organisation. Supply is limited.",
          "content_length": 1000,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Bitcoin compared to gold",
          "blog_url": "https://www.johnmathews.is/blog/bitcoin-vs-gold",
          "blog_date": "November 21, 2017",
          "content": "The effort required to create the asset naturally limits the supply. The asset doesn't wear out or expire. It's prohibitively expensive to fake. Almost everyone considers it to be precious and valuable. It can be stored and transported simply. It's not delicate or volatile. For these reasons, and because of historical consensus, people have been happy to use gold as a store of value in times of economic uncertainty or for long durations. Other assets also meets these requirements to lesser extents. Consider why gold is so good as a safe haven asset and long term value store. For all the reasons above, bitcoin is better, except one: At present, not many people consider it to be precious and valuable, so the market is small. This will change as confidence and awareness increases, and the eco-system of services and applications matures. The fundamentals are already established: A decentralised network ensures that Bitcoin can't be regulated or manipulated by any single government or organisation.",
          "content_length": 1008,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Bitcoin compared to gold",
          "blog_url": "https://www.johnmathews.is/blog/bitcoin-vs-gold",
          "blog_date": "November 21, 2017",
          "content": "The Bitcoin network can't be turned off. The present and future rate of supply is publicly available and unchangeable. This increases market efficiency and creates more rational pricing than a market where the rate of supply is unverifiable. Supply is naturally (mathematically) limited using proof of work algorithms. Bitcoin doesn't corrode or wear out. Bitcoin is impossible to fake. Bitcoin can be stored and transported more easily than gold. - If you can remember 24 words then you can access your bitcoin for free from any internet connection. article.",
          "content_length": 559,
          "content_tokens": 108,
          "embedding": []
        }
      ]
    },
    {
      "title": "Hardware Wallets",
      "url": "https://www.johnmathews.is/blog/wallet",
      "date": "November 08, 2017",
      "content": "Current hardware wallets are technically good but are awkward to use. A good solution would solve the following problems: A hardware wallet (HW wallet) is a physical device that stores the information required to access digital currency or assets. It is plugged into a computer via USB in order to initiate or confirm transactions on the Bitcoin, Ethereum or other digital asset blockchain networks. They are a secure method of storing cryptographic data. They are so secure that they can be used on a compromised computer. All that is needed to access funds using a HW wallet (in addition to the device itself) is a PIN code which the user chooses. A single HW wallet can store multiple currencies in multiple accounts. HW wallets are an easier solution than remembering a good password, and safer than storing the data in a file on my computer or online. Ledger Trezor HW wallets are technically great, but their size and shape creates a bad user experience. A good hardware wallet should be convenient to use multiple times each day, like a credit card is. Current hardware wallets don't fit into a (money) wallet and people don't want to carry more any objects in their pockets. They are too big and are a bad shape. HW wallets look like they might belong on a keyring, but it's inconvenient and insecure to attach a credit card to a keyring and the same is true for an HW wallet. I might store my keys on a hook by my door, but I would never leave my wallet there overnight. I often want to keep my keys and money separate because I need my keys when I’m near my house, where I don’t need to buy stuff, and I need my money when I’m away from my house where I don’t need to unlock anything. I want to keep my bank cards and cash together in one safe place, and I don’t want to carry around a dongle as well. It's inconvenient. It’s easier to have a separate dongle lost or stolen than something that would fit next to my credit card in my wallet. The inconvenience is a barrier to enjoying the advantages of digital currencies. Create a HW wallet that is the size and shape of a credit card, it could be 3 times thicker than a credit card and still fit in a normal wallet. It needs A display - it could be a low resolution b&w display Two or more buttons To plug into a USB port Securely sign transactions and create addresses",
      "length": 2330,
      "tokens": 503,
      "chunks": [
        {
          "blog_title": "Hardware Wallets",
          "blog_url": "https://www.johnmathews.is/blog/wallet",
          "blog_date": "November 08, 2017",
          "content": "Current hardware wallets are technically good but are awkward to use. A good solution would solve the following problems: A hardware wallet (HW wallet) is a physical device that stores the information required to access digital currency or assets. It is plugged into a computer via USB in order to initiate or confirm transactions on the Bitcoin, Ethereum or other digital asset blockchain networks. They are a secure method of storing cryptographic data. They are so secure that they can be used on a compromised computer. All that is needed to access funds using a HW wallet (in addition to the device itself) is a PIN code which the user chooses. A single HW wallet can store multiple currencies in multiple accounts. HW wallets are an easier solution than remembering a good password, and safer than storing the data in a file on my computer or online. Ledger Trezor HW wallets are technically great, but their size and shape creates a bad user experience.",
          "content_length": 960,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Hardware Wallets",
          "blog_url": "https://www.johnmathews.is/blog/wallet",
          "blog_date": "November 08, 2017",
          "content": "A good hardware wallet should be convenient to use multiple times each day, like a credit card is. Current hardware wallets don't fit into a (money) wallet and people don't want to carry more any objects in their pockets. They are too big and are a bad shape. HW wallets look like they might belong on a keyring, but it's inconvenient and insecure to attach a credit card to a keyring and the same is true for an HW wallet. I might store my keys on a hook by my door, but I would never leave my wallet there overnight. I often want to keep my keys and money separate because I need my keys when I’m near my house, where I don’t need to buy stuff, and I need my money when I’m away from my house where I don’t need to unlock anything.",
          "content_length": 733,
          "content_tokens": 175,
          "embedding": []
        },
        {
          "blog_title": "Hardware Wallets",
          "blog_url": "https://www.johnmathews.is/blog/wallet",
          "blog_date": "November 08, 2017",
          "content": "I want to keep my bank cards and cash together in one safe place, and I don’t want to carry around a dongle as well. It's inconvenient. It’s easier to have a separate dongle lost or stolen than something that would fit next to my credit card in my wallet. The inconvenience is a barrier to enjoying the advantages of digital currencies. Create a HW wallet that is the size and shape of a credit card, it could be 3 times thicker than a credit card and still fit in a normal wallet. It needs A display - it could be a low resolution b&w display Two or more buttons To plug into a USB port Securely sign transactions and create addresses.",
          "content_length": 636,
          "content_tokens": 144,
          "embedding": []
        }
      ]
    },
    {
      "title": "Trading digital assets",
      "url": "https://www.johnmathews.is/blog/sma-trader-blog",
      "date": "October 28, 2017",
      "content": "Quantification of the efficiency of trading ETH/BTC or LTC/BTC using simple moving averages",
      "length": 91,
      "tokens": 19,
      "chunks": [
        {
          "blog_title": "Trading digital assets",
          "blog_url": "https://www.johnmathews.is/blog/sma-trader-blog",
          "blog_date": "October 28, 2017",
          "content": "Quantification of the efficiency of trading ETH/BTC or LTC/BTC using simple moving averages",
          "content_length": 91,
          "content_tokens": 19,
          "embedding": []
        }
      ]
    },
    {
      "title": "I'm a chartered accountant",
      "url": "https://www.johnmathews.is/blog/chartered",
      "date": "October 19, 2017",
      "content": "I've qualified as a chartered accountant and will soon become a member of the Institute of Chartered Accountants in England and Wales. Earlier this year I qualified as a chartered accountant. Qualification requires passing 15 exams and gaining 3150 hours of work experience. To celebrate passing your exams and verify your success, the ICAEW print the names of everyone who passed in an advert in the Financial Times. This happened for me on the 26 January.",
      "length": 457,
      "tokens": 91,
      "chunks": [
        {
          "blog_title": "I'm a chartered accountant",
          "blog_url": "https://www.johnmathews.is/blog/chartered",
          "blog_date": "October 19, 2017",
          "content": "I've qualified as a chartered accountant and will soon become a member of the Institute of Chartered Accountants in England and Wales. Earlier this year I qualified as a chartered accountant. Qualification requires passing 15 exams and gaining 3150 hours of work experience. To celebrate passing your exams and verify your success, the ICAEW print the names of everyone who passed in an advert in the Financial Times. This happened for me on the 26 January.",
          "content_length": 457,
          "content_tokens": 91,
          "embedding": []
        }
      ]
    },
    {
      "title": "Coworking in Dublin",
      "url": "https://www.johnmathews.is/blog/coworking",
      "date": "September 15, 2017",
      "content": "A review of eight coworking spaces in Dublin Last week I arrived in Dublin and had two days to find a coworking space. I ran around Dublin visiting as many as possible. I'm looking to rent a hotdesk, which means I don't have any storage space at the office and I don't have a particular desk. Below are my impressions of eight businesses offering either hot desks or dedicated desks, ranked in order of preference. It's subjective. The going rate in Dublin seems to be €200 — €300 per month for a hot desk. Hours range from 9am - 7pm Monday - Friday, to 24/7. Dogpatch Labs Dogpatch offer a coworking space and access to a community of tech startups. They run regular networking and mentoring events and occupy 3 floors of a warehouse next to an old dock. The offices have a range of interiors styles. The middle level is fairly standard but pleasant open plan offices, the top floor is a flexible working space with event areas. The lower level is a series of vaults that each contain meeting rooms of various sizes. There's a lot going on and there's a good buzz in the air. The range of interior spaces is a big plus for me and I'm looking forward to being able to switch up my working environment through the day. There's a couple of kitchen areas, and a table football and table-tennis table on the top level. Access is 6am - midnight, and a hot desk is €200 per month. A dedicated desk is €400. Dogpatch occupy less than a quarter of the warehouse building, the remainder of the space is used as a shopping mall and a museum. In my opinion Dogpatch is by far the best value and if you're working in tech it'll probably be your go-to solution. Studio9 These guys are great. The space is a lot smaller that Dogpatch, comprising only ~12 desks. It's a basement, but don't let that put you off — its open plan and has large windows at either end. The space is well designed and uses a lot of light colours and textures, including wood on the walls and floors. There are also plenty of pot plants. These combine to give a bright and airy atmosphere that feels very natural and bright. There are alcoves down one side of the main room which serve as meeting rooms, and a garden and basic kitchen at the back. The owners want the space to foster a community, and I expect that this is achieved. There are no dedicated offices and no teams using multiple desks, everyone is an independent worker. The desks are large, and each has its own little wall to provide some privacy. €200 per month ongoing, or €250 for just one month. They offer a trial day for free. OfficeSuites The building looks well run and appears clean and fresh with adequate resources. The building is an old Georgian tenement with high ceilings, cornicing and lots of natural light. The furnishings and decor lean towards corporate rather than something more interesting, but this works well to add a professional feel to the homely architecture. Access is 24/7. There's only two rooms for hotdesking, and most of the building is given to private offices. There's a garden with bike storage, meeting rooms and a quiet room for calls. Lockers are extra. They also offer a free day as a trial. €249 p/m for desk access 9am-7pm Monday - Friday Element78 Friendly and well resourced, but very corporate. The architecture is corporate glass and steel. They're situated on the ground floor in a posh business district with large financials for neighbours. It's too corporate for me, but if you wanted an impressive place to meet clients and a nice address, this could be it. There were about 15 hot-desks for rent, plus plenty of dedicated desks. Clients seemed to include mostly young tech companies and tech freelancers. I'm hoping to find somewhere with more of a community, more inspiring architecture, and more character. I was offered a free day as a trial. €200 for the first month then €350 p/m Glandore Glandore offer a relatively luxurious package with a corporate feel. They have a few buildings in Dublin and only the flagship has hotdesking space. There's a super looking restaurant and a large club room to relax in, but these are features that I don't need, and the rates aren't competitive if all you need is a desk and somewhere to take calls. It's set up for teams and for impressing clients, and independent tech workers are probably better off elsewhere. €295 p/m Regus Regus offer a polished on boarding experience and the friendly staff were quick to respond and generally helpful, but the office space was bland, grey and generic. The rooms I visited didn't have external windows and it reminded me of the rooms banks often put auditors in. If grey walls and tube lights are your thing then this is for you. 24/7 access, and meeting rooms equipped with A/V. €299.70 p/m. CoCreate I visited the southern branch and thought the building was a bit shabby and needed a new layer of paint. I recognised the desks as some of the cheapest available from IKEA. The rooms were small and needed cleaning, and there was weird art on the wall. The thought of paying €200 a month to sit at a small wobbly desk put me off. The place was also almost deserted. Maybe their other branch is better, but this is not for me. €220 p/m. tCube Last and least, tCube seems to be putting in zero effort. When I visited I saw two rooms that needed painting, disorganised furniture and abandoned bits of computers lying around. The kitchen isn't high spec and the meeting room isn't big enough. I was also given a speech about how great the wifi was - a prerequisite that was taken for granted everywhere else. At €300 p/m for a dedicated desk its easy to find better value elsewhere.",
      "length": 5642,
      "tokens": 1244,
      "chunks": [
        {
          "blog_title": "Coworking in Dublin",
          "blog_url": "https://www.johnmathews.is/blog/coworking",
          "blog_date": "September 15, 2017",
          "content": "A review of eight coworking spaces in Dublin Last week I arrived in Dublin and had two days to find a coworking space. I ran around Dublin visiting as many as possible. I'm looking to rent a hotdesk, which means I don't have any storage space at the office and I don't have a particular desk. Below are my impressions of eight businesses offering either hot desks or dedicated desks, ranked in order of preference. It's subjective. The going rate in Dublin seems to be €200 — €300 per month for a hot desk. Hours range from 9am - 7pm Monday - Friday, to 24/7. Dogpatch Labs Dogpatch offer a coworking space and access to a community of tech startups. They run regular networking and mentoring events and occupy 3 floors of a warehouse next to an old dock. The offices have a range of interiors styles.",
          "content_length": 801,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Coworking in Dublin",
          "blog_url": "https://www.johnmathews.is/blog/coworking",
          "blog_date": "September 15, 2017",
          "content": "The middle level is fairly standard but pleasant open plan offices, the top floor is a flexible working space with event areas. The lower level is a series of vaults that each contain meeting rooms of various sizes. There's a lot going on and there's a good buzz in the air. The range of interior spaces is a big plus for me and I'm looking forward to being able to switch up my working environment through the day. There's a couple of kitchen areas, and a table football and table-tennis table on the top level. Access is 6am - midnight, and a hot desk is €200 per month. A dedicated desk is €400. Dogpatch occupy less than a quarter of the warehouse building, the remainder of the space is used as a shopping mall and a museum. In my opinion Dogpatch is by far the best value and if you're working in tech it'll probably be your go-to solution. Studio9 These guys are great.",
          "content_length": 876,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Coworking in Dublin",
          "blog_url": "https://www.johnmathews.is/blog/coworking",
          "blog_date": "September 15, 2017",
          "content": "The space is a lot smaller that Dogpatch, comprising only ~12 desks. It's a basement, but don't let that put you off — its open plan and has large windows at either end. The space is well designed and uses a lot of light colours and textures, including wood on the walls and floors. There are also plenty of pot plants. These combine to give a bright and airy atmosphere that feels very natural and bright. There are alcoves down one side of the main room which serve as meeting rooms, and a garden and basic kitchen at the back. The owners want the space to foster a community, and I expect that this is achieved. There are no dedicated offices and no teams using multiple desks, everyone is an independent worker. The desks are large, and each has its own little wall to provide some privacy. €200 per month ongoing, or €250 for just one month. They offer a trial day for free.",
          "content_length": 879,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Coworking in Dublin",
          "blog_url": "https://www.johnmathews.is/blog/coworking",
          "blog_date": "September 15, 2017",
          "content": "OfficeSuites The building looks well run and appears clean and fresh with adequate resources. The building is an old Georgian tenement with high ceilings, cornicing and lots of natural light. The furnishings and decor lean towards corporate rather than something more interesting, but this works well to add a professional feel to the homely architecture. Access is 24/7. There's only two rooms for hotdesking, and most of the building is given to private offices. There's a garden with bike storage, meeting rooms and a quiet room for calls. Lockers are extra. They also offer a free day as a trial. €249 p/m for desk access 9am-7pm Monday - Friday Element78 Friendly and well resourced, but very corporate. The architecture is corporate glass and steel. They're situated on the ground floor in a posh business district with large financials for neighbours.",
          "content_length": 858,
          "content_tokens": 181,
          "embedding": []
        },
        {
          "blog_title": "Coworking in Dublin",
          "blog_url": "https://www.johnmathews.is/blog/coworking",
          "blog_date": "September 15, 2017",
          "content": "It's too corporate for me, but if you wanted an impressive place to meet clients and a nice address, this could be it. There were about 15 hot-desks for rent, plus plenty of dedicated desks. Clients seemed to include mostly young tech companies and tech freelancers. I'm hoping to find somewhere with more of a community, more inspiring architecture, and more character. I was offered a free day as a trial. €200 for the first month then €350 p/m Glandore Glandore offer a relatively luxurious package with a corporate feel. They have a few buildings in Dublin and only the flagship has hotdesking space. There's a super looking restaurant and a large club room to relax in, but these are features that I don't need, and the rates aren't competitive if all you need is a desk and somewhere to take calls. It's set up for teams and for impressing clients, and independent tech workers are probably better off elsewhere.",
          "content_length": 918,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "Coworking in Dublin",
          "blog_url": "https://www.johnmathews.is/blog/coworking",
          "blog_date": "September 15, 2017",
          "content": "€295 p/m Regus Regus offer a polished on boarding experience and the friendly staff were quick to respond and generally helpful, but the office space was bland, grey and generic. The rooms I visited didn't have external windows and it reminded me of the rooms banks often put auditors in. If grey walls and tube lights are your thing then this is for you. 24/7 access, and meeting rooms equipped with A/V. €299.70 p/m. CoCreate I visited the southern branch and thought the building was a bit shabby and needed a new layer of paint. I recognised the desks as some of the cheapest available from IKEA. The rooms were small and needed cleaning, and there was weird art on the wall. The thought of paying €200 a month to sit at a small wobbly desk put me off. The place was also almost deserted. Maybe their other branch is better, but this is not for me.",
          "content_length": 852,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Coworking in Dublin",
          "blog_url": "https://www.johnmathews.is/blog/coworking",
          "blog_date": "September 15, 2017",
          "content": "€220 p/m. tCube Last and least, tCube seems to be putting in zero effort. When I visited I saw two rooms that needed painting, disorganised furniture and abandoned bits of computers lying around. The kitchen isn't high spec and the meeting room isn't big enough. I was also given a speech about how great the wifi was - a prerequisite that was taken for granted everywhere else. At €300 p/m for a dedicated desk its easy to find better value elsewhere.",
          "content_length": 452,
          "content_tokens": 101,
          "embedding": []
        }
      ]
    },
    {
      "title": "Bitnation",
      "url": "https://www.johnmathews.is/blog/bitnation",
      "date": "September 14, 2017",
      "content": "Bitnation Bitnation's purpose is to offer the same services as governments do, in a way that delivers more benefit to users. In the West this may not immediately sound like a big deal. Our governments are fairly organised and the services are usually \"good enough\". Most significantly, we are not used to thinking about ID services (passports, visa, drivers licences) or registration services (land registry, marriage certificates) as a service that we are customers of - like our internet service provider, or our electricity supplier. In many parts of the world dysfunctional or unjust governments represent a huge obstacle to improving everyday life, the progress and achievement that many people can hope to realise is limited because of this. If there was a viable alternative to a passport from a jurisdiction renowned for forgery, or a credit rating that acknowledged your land holdings despite your governments inability to maintain a credible database, then you could begin to travel, trade and enjoy the benefits that citizens of many western states take for granted. I'm excited that I get to use my skills in an innovative tech company that is aiming to do something really positive. Services include secure ID systems, asset registry and dispute resolution. Identification (in particular) is an area full of problems, and blockchain tech could offer some really significant improvements. Bitnation wants to create a platform where voluntary nations can be created and administered, and where people can choose what jurisdictional system they are part of. If this is widely implemented it will be unprecedented. Jurisdictions would offer their own services according to their own principles, and because they are easy to create and membership is voluntarily, jurisdictions would compete to attract citizens. This should lead to improvements for the users of each service, and is intended to provide an alternative to the slow, expensive and opaque processing methods commonly associated with services from geographically defined nation states.",
      "length": 2055,
      "tokens": 367,
      "chunks": [
        {
          "blog_title": "Bitnation",
          "blog_url": "https://www.johnmathews.is/blog/bitnation",
          "blog_date": "September 14, 2017",
          "content": "Bitnation Bitnation's purpose is to offer the same services as governments do, in a way that delivers more benefit to users. In the West this may not immediately sound like a big deal. Our governments are fairly organised and the services are usually \"good enough\" Most significantly, we are not used to thinking about ID services (passports, visa, drivers licences) or registration services (land registry, marriage certificates) as a service that we are customers of - like our internet service provider, or our electricity supplier. In many parts of the world dysfunctional or unjust governments represent a huge obstacle to improving everyday life, the progress and achievement that many people can hope to realise is limited because of this. If there was a viable alternative to a passport from a jurisdiction renowned for forgery, or a credit rating that acknowledged your land holdings despite your governments inability to maintain a credible database, then you could begin to travel, trade and enjoy the benefits that citizens of many western states take for granted.",
          "content_length": 1076,
          "content_tokens": 198,
          "embedding": []
        },
        {
          "blog_title": "Bitnation",
          "blog_url": "https://www.johnmathews.is/blog/bitnation",
          "blog_date": "September 14, 2017",
          "content": "I'm excited that I get to use my skills in an innovative tech company that is aiming to do something really positive. Services include secure ID systems, asset registry and dispute resolution. Identification (in particular) is an area full of problems, and blockchain tech could offer some really significant improvements. Bitnation wants to create a platform where voluntary nations can be created and administered, and where people can choose what jurisdictional system they are part of. If this is widely implemented it will be unprecedented. Jurisdictions would offer their own services according to their own principles, and because they are easy to create and membership is voluntarily, jurisdictions would compete to attract citizens. This should lead to improvements for the users of each service, and is intended to provide an alternative to the slow, expensive and opaque processing methods commonly associated with services from geographically defined nation states.",
          "content_length": 977,
          "content_tokens": 169,
          "embedding": []
        }
      ]
    },
    {
      "title": "Create a Multi-Signature Ethereum wallet using Parity",
      "url": "https://www.johnmathews.is/blog/ethereum-parity-multisig-wallet",
      "date": "August 13, 2017",
      "content": "Set up and use Parity to create and manage multi-signature Ethereum wallets, edit the wallet's settings and view pending and past transactions I recently set up a multi-sig Ethereum wallet and I couldn't find clear instructions. Here they are, I hope these instructions are useful for someone looking to get started. You'll need a way to interact with the Ethereum blockchain in order to deploy a wallet. There are several apps that you can use. I've used Parity because I found it simple and quick. Wallets are a type of contract and there are two types of wallet, the Multi-Sig wallet and the Watch wallet. An Ethereum account is required to communicate with a contract so if you want a multi-sig wallet with 3 signatories (for example) then you will need to have set up at least 1 of those 3 Ethereum accounts before creating the wallet. From their website: Integrated directly into your Web browser, Parity is the fastest and most secure way of interacting with the Ethereum network. You can do a bunch of stuff with Parity including mining Ether, manage accounts, interact with different dapps, send/receive from different accounts, and set up contracts. On the accounts tab, you can quickly set up Multi-Signature wallets. If you use the Chrome plugin you will also get handy notifications when transactions are confirmed or contracts deployed. installer bash < ( curl ) here brew tap paritytech/paritytech install --stable If you used the installer, then you open Parity opening the app and then using the logo in the menubar. If you used Brew, then start Parity with the following command parity and then go to the following address in your browser: http://127.0.0.1:8180/ You should now see something similar to this: + Account + Wallet Multi-Sig wallet name description From account Be one of the signatories. Need to have enough Ether to pay for the execution of the contract on the blockchain. Other wallet owners required owners wallet day limit without Click \"next\" and you'll be shown a pop-up window to approve the creation of the wallet. You will need to enter the password of the account which is creating the wallet, and once you click \"Confirm request\" the funds in the creators accounts will be used to deploy the contract on chain and create the multi-sig wallet. Once your wallet is created and deployed, you'll need to add it to other parity clients so that the other signatories can make or confirm transactions, and view the wallets balance. This is done by adding a watch wallet. Process: Accounts tab > + Wallet > Watch wallet > enter the address of the multi-sig wallet. The other signatories will now be able to view the wallet's balance, get notifications about pending confirmations, and be able to make and monitor transactions. Anyone can put funds into the wallet, just like a normal account. Just send Ether to the wallet's address. Edit Settings Forget Transfer Select the token you want to transfer - Ethereum is the only default option. Sender address Recipient address Amount to transfer advanced sending options Clicking \"send\" will bring you to the confirmation stage where you can enter the password for the account which is requesting the transfer. If approval from other wallet owners is required and they are also using Parity, then they can see that their approval is required in two ways: The signer tab will show there is a pending request.",
      "length": 3389,
      "tokens": 705,
      "chunks": [
        {
          "blog_title": "Create a Multi-Signature Ethereum wallet using Parity",
          "blog_url": "https://www.johnmathews.is/blog/ethereum-parity-multisig-wallet",
          "blog_date": "August 13, 2017",
          "content": "Set up and use Parity to create and manage multi-signature Ethereum wallets, edit the wallet's settings and view pending and past transactions I recently set up a multi-sig Ethereum wallet and I couldn't find clear instructions. Here they are, I hope these instructions are useful for someone looking to get started. You'll need a way to interact with the Ethereum blockchain in order to deploy a wallet. There are several apps that you can use. I've used Parity because I found it simple and quick. Wallets are a type of contract and there are two types of wallet, the Multi-Sig wallet and the Watch wallet. An Ethereum account is required to communicate with a contract so if you want a multi-sig wallet with 3 signatories (for example) then you will need to have set up at least 1 of those 3 Ethereum accounts before creating the wallet.",
          "content_length": 840,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Create a Multi-Signature Ethereum wallet using Parity",
          "blog_url": "https://www.johnmathews.is/blog/ethereum-parity-multisig-wallet",
          "blog_date": "August 13, 2017",
          "content": "From their website: Integrated directly into your Web browser, Parity is the fastest and most secure way of interacting with the Ethereum network. You can do a bunch of stuff with Parity including mining Ether, manage accounts, interact with different dapps, send/receive from different accounts, and set up contracts. On the accounts tab, you can quickly set up Multi-Signature wallets. If you use the Chrome plugin you will also get handy notifications when transactions are confirmed or contracts deployed. installer bash < ( curl ) here brew tap paritytech/paritytech install --stable If you used the installer, then you open Parity opening the app and then using the logo in the menubar.",
          "content_length": 692,
          "content_tokens": 142,
          "embedding": []
        },
        {
          "blog_title": "Create a Multi-Signature Ethereum wallet using Parity",
          "blog_url": "https://www.johnmathews.is/blog/ethereum-parity-multisig-wallet",
          "blog_date": "August 13, 2017",
          "content": "If you used Brew, then start Parity with the following command parity and then go to the following address in your browser: http://127.0.0.1:8180/ You should now see something similar to this: + Account + Wallet Multi-Sig wallet name description From account Be one of the signatories. Need to have enough Ether to pay for the execution of the contract on the blockchain. Other wallet owners required owners wallet day limit without Click \"next\" and you'll be shown a pop-up window to approve the creation of the wallet. You will need to enter the password of the account which is creating the wallet, and once you click \"Confirm request\" the funds in the creators accounts will be used to deploy the contract on chain and create the multi-sig wallet. Once your wallet is created and deployed, you'll need to add it to other parity clients so that the other signatories can make or confirm transactions, and view the wallets balance.",
          "content_length": 933,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Create a Multi-Signature Ethereum wallet using Parity",
          "blog_url": "https://www.johnmathews.is/blog/ethereum-parity-multisig-wallet",
          "blog_date": "August 13, 2017",
          "content": "This is done by adding a watch wallet. Process: Accounts tab > + Wallet > Watch wallet > enter the address of the multi-sig wallet. The other signatories will now be able to view the wallet's balance, get notifications about pending confirmations, and be able to make and monitor transactions. Anyone can put funds into the wallet, just like a normal account. Just send Ether to the wallet's address. Edit Settings Forget Transfer Select the token you want to transfer - Ethereum is the only default option. Sender address Recipient address Amount to transfer advanced sending options Clicking \"send\" will bring you to the confirmation stage where you can enter the password for the account which is requesting the transfer. If approval from other wallet owners is required and they are also using Parity, then they can see that their approval is required in two ways: The signer tab will show there is a pending request.",
          "content_length": 921,
          "content_tokens": 184,
          "embedding": []
        }
      ]
    },
    {
      "title": "Macro Analysis of the Bitcoin Blockchain",
      "url": "https://www.johnmathews.is/blog/btc-analysis",
      "date": "August 03, 2017",
      "content": "The number of unconfirmed transactions on the Bitcoin blockchain spiked in May 2017. Attempting to identify why led to an analysis of several key performance metrics for the network",
      "length": 181,
      "tokens": 32,
      "chunks": [
        {
          "blog_title": "Macro Analysis of the Bitcoin Blockchain",
          "blog_url": "https://www.johnmathews.is/blog/btc-analysis",
          "blog_date": "August 03, 2017",
          "content": "The number of unconfirmed transactions on the Bitcoin blockchain spiked in May 2017. Attempting to identify why led to an analysis of several key performance metrics for the network",
          "content_length": 181,
          "content_tokens": 32,
          "embedding": []
        }
      ]
    },
    {
      "title": "Corporate London",
      "url": "https://www.johnmathews.is/blog/corporate",
      "date": "July 10, 2017",
      "content": "Reflections on 3 years living and working in London Having made arrangements to leave London, it seems like a reasonable time to reflect on my time here. London is a tough city to live in — it's big enough that a sub 1-hour commute is considered good, and it's super expensive. My stay in London has been defined by my quest to complete my graduate scheme and qualify as an accountant. When I first arrived I had no idea what London or working in a corporate would be like. I was coming from academia, and my motivation for moving to finance could be summed up in two points: Understand more about the 2008 financial crisis Get paid more for using mostly the same skills (math) as in engineering I don’t think there’s anything wrong with these motivations, but I should have been making a long term career plan instead. When I started my job I was surprised at the 6 weeks of induction and hot-desking. Life as an auditor felt nomadic, as everyone would spend large amounts of time at client's offices, and no-one has their own desk in our office. The only thing you really own is your knowledge and your network of relationships. In 2014, I arrived with a high opinion of my employer and the view that I would be staying for several years. Having escaped the financial insecurity of short-term research grants, I’d moved back to my home country to contribute to the system that educated me. I was happy to have a regular job with a decent, predictable salary. A phrase that kept coming to mind back then was “accountant factory”. Our training materials were scripted and everything was a standardised process. We were being processed. Graduates in, corporate accountants out. The company is huge and so are the efficiencies and barriers to competition that come with this. When I arrived I was impressed there were free biscuits, and it felt presumptuous to put a meeting in someones diary. Now I ignore any communications addressed to a mailing list. The toughest experiences were related to the accountancy qualification. Naïvely I had believed that the qualification wouldn’t be a big deal and I didn’t give any thought to it when I applied — I just wanted to find out how banks worked. If there were some exams to be done then it would be fine, I’d already achieved a PhD and I would handle it. That turned out to be a mistake. A huge mistake. The alarm bells should have rung louder when I realised most of my graduate colleagues had only applied so that they could get the qualification (and were already intending to leave asap afterwards). Doing the pre-course work before college wasn't trivial. College - I was being sent to a classroom again. We were being taken out of the office, away from clients, and put in a classroom to prepare for these exams… Starting a job that required becoming a chartered accountant, without considering the effort and time involved to qualify was dumb. It’s an oversight I find hard to believe. The disappointment and sadness at having to study again was profound. The teaching and assessment style was several steps behind what I’d become used to. Compared to the depth, autonomy and research-focus of a doctorate, writing cookie-cutter essays in time-pressured exams felt stupid. The exams were hard and I failed several of them, probably because of my low morale whilst revising. Retaking them required more weekends and annual leave being spent away from my family, camped-out in libraries and offices. This required much patience and generosity from Ritsya, who having not seen me for long periods during my doctorate expected us to have a more normal lifestyle when we came to London. I found it miserable to pause my social life and other interests whilst studying, and then I would try to rush back to them when I had the time, knowing that soon I’d have to pause them again. If I hadn’t already studied in Vienna, this process of working and studying in London would have been exciting and felt valuable or special. I’d passed enough exams though to know that they’re never as important as they’re made out to be, and whatever it was that was missing from my life wasn’t going to be found in another qualification. On the upside though, the ACA is the most practical qualification I’ve gained and has taught me many useful aspects of business and finance. I’m glad to finally see business not as some mysterious system but something attainable and understandable. Living in London has also required a lot of time on trains — my door to desk commute is about an hour each way, and I’ve never lived somewhere in London that hasn’t felt transient. We’ve needed to live near a station and didn’t want to commute more than an hour and that’s put us in neighbourhoods with other young professionals who also don’t have long term plans (or financial ability) to stay in the city. We’re all looking to move on and move up as fast as possible. I want to leave London partly because there are so many people with the same attitudes and priorities as my own… Back in the office I spent the first few months figuring out how people were organised, how teams operated and how decisions were made. I think it took me about a year to feel like I understood how things really worked, and 1.5 years to feel like I could do all aspects of my job with certainty. There is a difference between how things are spoken about, and how things actually happen. 1 Corporate finance usually appears clean and well presented. Its people appear dependable and capable. The culture is sanitised and there's a lot of pressure to conform - you can see it in the clothes and accessories we wear and the jokes we tell each other in the canteen. I came to see my office as a glass and steel cathedral. I read about the Middle East, and migrants arriving in Europe, and tower blocks burning, and felt really disconnected. Despite the high regard with which we hold ourselves, we don’t ask each other how we can help. Maybe we are too busy, or feel powerless to help. Apparently we do not know how to help, despite our wealth, talents, education and connections. I remember watching a man leave the office one day and thought that if he gave his whole career and left his firm after decades of service, there would be nothing left to identify him after a few weeks. The work will always get done. Market forces will dictate how the business adapts and grows. The City rolls on. ↩",
      "length": 6393,
      "tokens": 1371,
      "chunks": [
        {
          "blog_title": "Corporate London",
          "blog_url": "https://www.johnmathews.is/blog/corporate",
          "blog_date": "July 10, 2017",
          "content": "Reflections on 3 years living and working in London Having made arrangements to leave London, it seems like a reasonable time to reflect on my time here. London is a tough city to live in — it's big enough that a sub 1-hour commute is considered good, and it's super expensive. My stay in London has been defined by my quest to complete my graduate scheme and qualify as an accountant. When I first arrived I had no idea what London or working in a corporate would be like. I was coming from academia, and my motivation for moving to finance could be summed up in two points: Understand more about the 2008 financial crisis Get paid more for using mostly the same skills (math) as in engineering I don’t think there’s anything wrong with these motivations, but I should have been making a long term career plan instead. When I started my job I was surprised at the 6 weeks of induction and hot-desking.",
          "content_length": 902,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Corporate London",
          "blog_url": "https://www.johnmathews.is/blog/corporate",
          "blog_date": "July 10, 2017",
          "content": "Life as an auditor felt nomadic, as everyone would spend large amounts of time at client's offices, and no-one has their own desk in our office. The only thing you really own is your knowledge and your network of relationships. In 2014, I arrived with a high opinion of my employer and the view that I would be staying for several years. Having escaped the financial insecurity of short-term research grants, I’d moved back to my home country to contribute to the system that educated me. I was happy to have a regular job with a decent, predictable salary. A phrase that kept coming to mind back then was “accountant factory” Our training materials were scripted and everything was a standardised process. We were being processed. Graduates in, corporate accountants out. The company is huge and so are the efficiencies and barriers to competition that come with this.",
          "content_length": 869,
          "content_tokens": 181,
          "embedding": []
        },
        {
          "blog_title": "Corporate London",
          "blog_url": "https://www.johnmathews.is/blog/corporate",
          "blog_date": "July 10, 2017",
          "content": "When I arrived I was impressed there were free biscuits, and it felt presumptuous to put a meeting in someones diary. Now I ignore any communications addressed to a mailing list. The toughest experiences were related to the accountancy qualification. Naïvely I had believed that the qualification wouldn’t be a big deal and I didn’t give any thought to it when I applied — I just wanted to find out how banks worked. If there were some exams to be done then it would be fine, I’d already achieved a PhD and I would handle it. That turned out to be a mistake. A huge mistake. The alarm bells should have rung louder when I realised most of my graduate colleagues had only applied so that they could get the qualification (and were already intending to leave asap afterwards) Doing the pre-course work before college wasn't trivial. College - I was being sent to a classroom again.",
          "content_length": 879,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Corporate London",
          "blog_url": "https://www.johnmathews.is/blog/corporate",
          "blog_date": "July 10, 2017",
          "content": "We were being taken out of the office, away from clients, and put in a classroom to prepare for these exams… Starting a job that required becoming a chartered accountant, without considering the effort and time involved to qualify was dumb. It’s an oversight I find hard to believe. The disappointment and sadness at having to study again was profound. The teaching and assessment style was several steps behind what I’d become used to. Compared to the depth, autonomy and research-focus of a doctorate, writing cookie-cutter essays in time-pressured exams felt stupid. The exams were hard and I failed several of them, probably because of my low morale whilst revising. Retaking them required more weekends and annual leave being spent away from my family, camped-out in libraries and offices.",
          "content_length": 794,
          "content_tokens": 165,
          "embedding": []
        },
        {
          "blog_title": "Corporate London",
          "blog_url": "https://www.johnmathews.is/blog/corporate",
          "blog_date": "July 10, 2017",
          "content": "This required much patience and generosity from Ritsya, who having not seen me for long periods during my doctorate expected us to have a more normal lifestyle when we came to London. I found it miserable to pause my social life and other interests whilst studying, and then I would try to rush back to them when I had the time, knowing that soon I’d have to pause them again. If I hadn’t already studied in Vienna, this process of working and studying in London would have been exciting and felt valuable or special. I’d passed enough exams though to know that they’re never as important as they’re made out to be, and whatever it was that was missing from my life wasn’t going to be found in another qualification. On the upside though, the ACA is the most practical qualification I’ve gained and has taught me many useful aspects of business and finance.",
          "content_length": 857,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Corporate London",
          "blog_url": "https://www.johnmathews.is/blog/corporate",
          "blog_date": "July 10, 2017",
          "content": "I’m glad to finally see business not as some mysterious system but something attainable and understandable. Living in London has also required a lot of time on trains — my door to desk commute is about an hour each way, and I’ve never lived somewhere in London that hasn’t felt transient. We’ve needed to live near a station and didn’t want to commute more than an hour and that’s put us in neighbourhoods with other young professionals who also don’t have long term plans (or financial ability) to stay in the city. We’re all looking to move on and move up as fast as possible. I want to leave London partly because there are so many people with the same attitudes and priorities as my own… Back in the office I spent the first few months figuring out how people were organised, how teams operated and how decisions were made.",
          "content_length": 827,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Corporate London",
          "blog_url": "https://www.johnmathews.is/blog/corporate",
          "blog_date": "July 10, 2017",
          "content": "I think it took me about a year to feel like I understood how things really worked, and 1.5 years to feel like I could do all aspects of my job with certainty. There is a difference between how things are spoken about, and how things actually happen. 1 Corporate finance usually appears clean and well presented. Its people appear dependable and capable. The culture is sanitised and there's a lot of pressure to conform - you can see it in the clothes and accessories we wear and the jokes we tell each other in the canteen. I came to see my office as a glass and steel cathedral. I read about the Middle East, and migrants arriving in Europe, and tower blocks burning, and felt really disconnected. Despite the high regard with which we hold ourselves, we don’t ask each other how we can help. Maybe we are too busy, or feel powerless to help. Apparently we do not know how to help, despite our wealth, talents, education and connections. I remember watching a man leave the office one day and thought that if he gave his whole career and left his firm after decades of service, there would be nothing left to identify him after a few weeks. The work will always get done. Market forces will dictate how the business adapts and grows. The City rolls on.",
          "content_length": 1254,
          "content_tokens": 266,
          "embedding": []
        }
      ]
    },
    {
      "title": "Blockchains from the ground up: Part 2",
      "url": "https://www.johnmathews.is/blog/blockchain-networks",
      "date": "July 08, 2017",
      "content": "An overview of the essential features of a blockchain, using proof-of-work for consensus Part 1 Part 1 Ensured transaction integrity Prevented participants claiming that they didn't make a past transaction Prevents anyone creating a transaction on someone else's behalf without their consent. As the number of people in the network grows, the transfer of coins from one user to another becomes harder to track. If every users ledger is not identical then the opportunity arises to use coins that have already been spent to pay someone who doesn't know they've already been used. weak consistency Weak consistency could be solved by requiring that everyone votes to accept a transaction before it is accepted into the ledger (Unanimous consensus), or to save time we could reduce the requirements so that only 50% of all users validate a transaction before it is accepted into the ledger (Quorum consensus). Either of these solutions is possible for a small local group with a list of all users. However Unanimous or Quorum Consensus doesn't solve the weak consistency problem if: The group is large The group is small but spread across different locations or timezones It is not possible to know how many members there are and therefore what proportion of users are participating. real wikipedia The consensus problem requires agreement among a number of agents for a single data value. Some of the processes (agents) may fail or be unreliable in other ways, so consensus protocols must be fault tolerant or resilient. The processes must somehow put forth their candidate values, communicate with one another, and agree on a single consensus value. Paxos Two-phase commit Sybil attack The solution to the Sybil attack is to increase the cost of verifying a transaction such that the cost exceeds the reward. This is achieved through proof-of-work (PoW) algorithms, which are computationally expensive for a sender claiming to have verified a transaction, and computationally simple for the receiver to verify that the sender has validated the transaction. nonce This is because a hash is a random list of characters, and altering even a single part of the data being hashed will result in a completely different hash value. Therefore there is no way to predict a hash value. The only way to generate a hash with the required none is to repeatedly alter the data being hashed (even by just one character) until a hash with the required features is randomly achieved. This is computationally expensive to achieve, but computationally simple to verify. Using the method, a user who seeks to verify a transaction and broadcast the result must (once they've verified the transactions) repeatedly try different messages until they randomly find a message that meets the nonce requirements. It is simple for a user to check if a transaction verification message meets the nonce requirements, because it is simple to inspect a hash and compare it to the nonce. The effect of this requirement is a process that makes it expensive to claim that a transaction has been verified and cheap to check that verification claim. This removes the threat of a Sybil attack, but does not remove the distributed consensus problems created by not knowing: The true identity of users in the network How many users exist This problem cannot be completely solved, and the practical solution is to relax the requirements such that the probability of accepting a fraudulent transaction is lower than some user defined threshold. This is acceptable because a user would require a higher degree of confirmation for a high-value transaction than they would for a low-value transaction, and would therefore be willing to incur more time and cost to verify a high value transaction and reduce the probability of accepting an incorrect transaction below a threshold. If a user wishes to make fast or low-value transactions, or trusts the party they're transacting with, then they may accept a transaction without any other users on the network verifying that the sender has the required funds available. However when the senders trustworthiness is not assured, verification is required. The more risky or valuable the transaction, the more users the receiver of the funds will ask to verify that the sender has access to the required funds. The higher the number of users, the higher the probability that a dishonest transaction will be identified before being accepted. An appropriate level of verification will depend on the amount being transferred and how well the receiver of the funds knows the sender. Asking peers on the network to verify transactions introduces a new problem. Verifying a transaction requires time and effort, and incurs a cost. This cost requires that network participants be rewarded for correctly verifying transactions between other participants. An attacker would only attack if the cost is less than the reward. Therefore the number and cost of verifications required should be just enough to make the cost of an attack more than the value of the transaction. This introduces the problem that it costs more to verify a transaction than the value of the transaction itself. It is also create the recursive problem where the users who verified the first transaction would need to verify that the payment they received was then also valid. Furthermore, a high proportion of the original transaction value is spent as a transaction fee (for verification) which is not efficient. These problems are avoided by combining multiple transactions and verifying them at the same time, broadcasting the successful verification of multiple transactions simultaneously by grouping the transactions together into a block of transactions. By confirming multiple transactions at once (and proving it using proof-of-work), transaction fees can be aggregated (allowing each individual fee to be much lower). Each block includes a list of verified transactions, a reference to the previous block, and a block ID. The transaction verification process outlined above is remarkable because it creates a demand for new participants to the network by creating a financial incentive to verify transactions. This makes the network more secure as increasing the number of participants makes a sybil attack more difficult. Users generate new transactions and broadcast them on a peer-to-peer network for verification An idle user listens for new transactions and collects them until the sum of all transactions' verification fees is greater than the cost the user will incur to verify them and meet the proof-of-work requirements The idle user adds an extra transaction to their list of transactions that transfers the sum of the transaction fees to their own address. The idle user generates the block of newly verified transactions, referencing the previously verified block so that transactions can be chronologically ordered and completing the proof-of-work challenge. This new block is then broadcast to the network. Other users are listening for new block announcements. These users verify that the block is valid according to the proof-of-work requirements and the order of the blocks. Users with unverified transactions look inside the verified block to see if their pending transactions have been accepted. Each user can choose which transactions they verify, and how many to verify before beginning the proof-of-work requirement and hopefully collecting the transaction fees. This lack of order around transaction verification is fine because the only way to increase the probability of being the first to claim the transaction fees associated with a collection of transactions (a block) is to spend more CPU power searching for the required partial hash collision. If two users complete a block at approximately the same time then the blockchain will look different in different parts of the network, as each completed block begins to propagate and other users accept the new block and add it to their ledger. This is ok if a rule is enforced that requires a user to always accept the longest chain of blocks. This works because if multiple blocks are created at the same time, the time it takes to create subsequent blocks will vary due to the random behaviour of the proof-of-work algorithm. Therefore chains of different length will always exist and one version of the block chain will be longer than the others, providing a clear candidate for which branch of the blockchain to use. If there are transactions in the discarded branch which are not present in the new (longest) blockchain then they are added back into the pool of transactions awaiting verification. The above procedure for verifying transactions and adding new blocks onto the chain means that even if a user inspects a new block and sees that their transaction has been verified, its possible that in the future a longer chain will be discovered (which must be accepted) which doesn't include their transaction. after If you are willing to accept a high level of risk, or you trust the party you are transacting with you could opt for a small number of blocks to be added after the block containing your transaction. This has the benefit of increasing the speed of the transaction verification. If the transaction is risky or high-value, you might require a larger number of blocks to be added to the chain before accepting the transaction. This will increase the time required to verify the transaction, but reduce the probability that a longer chain will undo the block containing the transaction in question.",
      "length": 9562,
      "tokens": 1757,
      "chunks": [
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "An overview of the essential features of a blockchain, using proof-of-work for consensus Part 1 Part 1 Ensured transaction integrity Prevented participants claiming that they didn't make a past transaction Prevents anyone creating a transaction on someone else's behalf without their consent. As the number of people in the network grows, the transfer of coins from one user to another becomes harder to track. If every users ledger is not identical then the opportunity arises to use coins that have already been spent to pay someone who doesn't know they've already been used. weak consistency Weak consistency could be solved by requiring that everyone votes to accept a transaction before it is accepted into the ledger (Unanimous consensus), or to save time we could reduce the requirements so that only 50% of all users validate a transaction before it is accepted into the ledger (Quorum consensus) Either of these solutions is possible for a small local group with a list of all users.",
          "content_length": 993,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "However Unanimous or Quorum Consensus doesn't solve the weak consistency problem if: The group is large The group is small but spread across different locations or timezones It is not possible to know how many members there are and therefore what proportion of users are participating. real wikipedia The consensus problem requires agreement among a number of agents for a single data value. Some of the processes (agents) may fail or be unreliable in other ways, so consensus protocols must be fault tolerant or resilient. The processes must somehow put forth their candidate values, communicate with one another, and agree on a single consensus value. Paxos Two-phase commit Sybil attack The solution to the Sybil attack is to increase the cost of verifying a transaction such that the cost exceeds the reward.",
          "content_length": 812,
          "content_tokens": 155,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "This is achieved through proof-of-work (PoW) algorithms, which are computationally expensive for a sender claiming to have verified a transaction, and computationally simple for the receiver to verify that the sender has validated the transaction. nonce This is because a hash is a random list of characters, and altering even a single part of the data being hashed will result in a completely different hash value. Therefore there is no way to predict a hash value. The only way to generate a hash with the required none is to repeatedly alter the data being hashed (even by just one character) until a hash with the required features is randomly achieved. This is computationally expensive to achieve, but computationally simple to verify. Using the method, a user who seeks to verify a transaction and broadcast the result must (once they've verified the transactions) repeatedly try different messages until they randomly find a message that meets the nonce requirements.",
          "content_length": 975,
          "content_tokens": 188,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "It is simple for a user to check if a transaction verification message meets the nonce requirements, because it is simple to inspect a hash and compare it to the nonce. The effect of this requirement is a process that makes it expensive to claim that a transaction has been verified and cheap to check that verification claim. This removes the threat of a Sybil attack, but does not remove the distributed consensus problems created by not knowing: The true identity of users in the network How many users exist This problem cannot be completely solved, and the practical solution is to relax the requirements such that the probability of accepting a fraudulent transaction is lower than some user defined threshold. This is acceptable because a user would require a higher degree of confirmation for a high-value transaction than they would for a low-value transaction, and would therefore be willing to incur more time and cost to verify a high value transaction and reduce the probability of accepting an incorrect transaction below a threshold.",
          "content_length": 1048,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "If a user wishes to make fast or low-value transactions, or trusts the party they're transacting with, then they may accept a transaction without any other users on the network verifying that the sender has the required funds available. However when the senders trustworthiness is not assured, verification is required. The more risky or valuable the transaction, the more users the receiver of the funds will ask to verify that the sender has access to the required funds. The higher the number of users, the higher the probability that a dishonest transaction will be identified before being accepted. An appropriate level of verification will depend on the amount being transferred and how well the receiver of the funds knows the sender. Asking peers on the network to verify transactions introduces a new problem. Verifying a transaction requires time and effort, and incurs a cost. This cost requires that network participants be rewarded for correctly verifying transactions between other participants. An attacker would only attack if the cost is less than the reward.",
          "content_length": 1076,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "Therefore the number and cost of verifications required should be just enough to make the cost of an attack more than the value of the transaction. This introduces the problem that it costs more to verify a transaction than the value of the transaction itself. It is also create the recursive problem where the users who verified the first transaction would need to verify that the payment they received was then also valid. Furthermore, a high proportion of the original transaction value is spent as a transaction fee (for verification) which is not efficient. These problems are avoided by combining multiple transactions and verifying them at the same time, broadcasting the successful verification of multiple transactions simultaneously by grouping the transactions together into a block of transactions. By confirming multiple transactions at once (and proving it using proof-of-work), transaction fees can be aggregated (allowing each individual fee to be much lower) Each block includes a list of verified transactions, a reference to the previous block, and a block ID.",
          "content_length": 1079,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "The transaction verification process outlined above is remarkable because it creates a demand for new participants to the network by creating a financial incentive to verify transactions. This makes the network more secure as increasing the number of participants makes a sybil attack more difficult. Users generate new transactions and broadcast them on a peer-to-peer network for verification An idle user listens for new transactions and collects them until the sum of all transactions' verification fees is greater than the cost the user will incur to verify them and meet the proof-of-work requirements The idle user adds an extra transaction to their list of transactions that transfers the sum of the transaction fees to their own address. The idle user generates the block of newly verified transactions, referencing the previously verified block so that transactions can be chronologically ordered and completing the proof-of-work challenge. This new block is then broadcast to the network. Other users are listening for new block announcements.",
          "content_length": 1054,
          "content_tokens": 183,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "These users verify that the block is valid according to the proof-of-work requirements and the order of the blocks. Users with unverified transactions look inside the verified block to see if their pending transactions have been accepted. Each user can choose which transactions they verify, and how many to verify before beginning the proof-of-work requirement and hopefully collecting the transaction fees. This lack of order around transaction verification is fine because the only way to increase the probability of being the first to claim the transaction fees associated with a collection of transactions (a block) is to spend more CPU power searching for the required partial hash collision. If two users complete a block at approximately the same time then the blockchain will look different in different parts of the network, as each completed block begins to propagate and other users accept the new block and add it to their ledger. This is ok if a rule is enforced that requires a user to always accept the longest chain of blocks.",
          "content_length": 1043,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "This works because if multiple blocks are created at the same time, the time it takes to create subsequent blocks will vary due to the random behaviour of the proof-of-work algorithm. Therefore chains of different length will always exist and one version of the block chain will be longer than the others, providing a clear candidate for which branch of the blockchain to use. If there are transactions in the discarded branch which are not present in the new (longest) blockchain then they are added back into the pool of transactions awaiting verification. The above procedure for verifying transactions and adding new blocks onto the chain means that even if a user inspects a new block and sees that their transaction has been verified, its possible that in the future a longer chain will be discovered (which must be accepted) which doesn't include their transaction.",
          "content_length": 872,
          "content_tokens": 163,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 2",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-networks",
          "blog_date": "July 08, 2017",
          "content": "after If you are willing to accept a high level of risk, or you trust the party you are transacting with you could opt for a small number of blocks to be added after the block containing your transaction. This has the benefit of increasing the speed of the transaction verification. If the transaction is risky or high-value, you might require a larger number of blocks to be added to the chain before accepting the transaction. This will increase the time required to verify the transaction, but reduce the probability that a longer chain will undo the block containing the transaction in question.",
          "content_length": 599,
          "content_tokens": 113,
          "embedding": []
        }
      ]
    },
    {
      "title": "Move",
      "url": "https://www.johnmathews.is/blog/move",
      "date": "July 08, 2017",
      "content": "Training's over Since I was 15, one of my ambitions has been to be an entrepreneur. I used to joke with my dad about buying him a nice boat one day. Life so far has been predominantly about education, and that stage is over now. I’m walking away from what I've come to see as a lifestyle and career that has too many contradictions, it doesn't make sense to live like this. Ultimately I want to develop multiple sources of passive income. I want to create. The last few months have been intense, with some weeks leaving me feeling ambitious and energetic, and others feeling anxious and overwhelmed. I need to get better at defining a goal, taking the quickest path there, and ignoring interesting distractions. Ritsya is brave enough and imaginative enough to force me to think big and consider how to live a better life. My biggest fear is that I screw it up, shooting myself in the foot and Ritsya and my daughter also. We were headed safely to an unremarkable existence and it would be terrible to swap that for something worse. That won't happen. I know that I make better decisions and produce my best work under pressure, I thrive when I'm perceived as an underdog. I need to accept this without using it as a reason to be foolish. Whilst I don’t have a clear plan, or direction, or goal, (I have many of them) I’ve got skills and I want to see what I can make. I’ll never do my best work, using my most productive combination of skills and experiences, if I’m a cog in someone else's machine. It’s safer being an employee than self-employed. I guess the price of removing self-employment risks is the difference between the value you generate for your employer and what you’re paid. I think those risks are overpriced, and most people are more capable than they realise. Sometimes you have to walk into a situation to find out how to make the most of it. And sometimes you have to leave a place in order to gain perspective. Last year my boss gave me some advice that was supposed to be encouraging. I’d requested to reduce my involvement with some stuff that was unrelated to my job so that I could contribute more to my team and still maintain some semblance of a work/life balance. My boss was pretty clear that reducing my involvement in the extra stuff would not be possible. During our conversation he advised me not to worry about how much I contributed to the team because “the work will get done anyway”. This was meant to be encouraging, but instead removed any conviction that the work I did was important.",
      "length": 2525,
      "tokens": 548,
      "chunks": [
        {
          "blog_title": "Move",
          "blog_url": "https://www.johnmathews.is/blog/move",
          "blog_date": "July 08, 2017",
          "content": "Training's over Since I was 15, one of my ambitions has been to be an entrepreneur. I used to joke with my dad about buying him a nice boat one day. Life so far has been predominantly about education, and that stage is over now. I’m walking away from what I've come to see as a lifestyle and career that has too many contradictions, it doesn't make sense to live like this. Ultimately I want to develop multiple sources of passive income. I want to create. The last few months have been intense, with some weeks leaving me feeling ambitious and energetic, and others feeling anxious and overwhelmed. I need to get better at defining a goal, taking the quickest path there, and ignoring interesting distractions. Ritsya is brave enough and imaginative enough to force me to think big and consider how to live a better life. My biggest fear is that I screw it up, shooting myself in the foot and Ritsya and my daughter also.",
          "content_length": 922,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Move",
          "blog_url": "https://www.johnmathews.is/blog/move",
          "blog_date": "July 08, 2017",
          "content": "We were headed safely to an unremarkable existence and it would be terrible to swap that for something worse. That won't happen. I know that I make better decisions and produce my best work under pressure, I thrive when I'm perceived as an underdog. I need to accept this without using it as a reason to be foolish. Whilst I don’t have a clear plan, or direction, or goal, (I have many of them) I’ve got skills and I want to see what I can make. I’ll never do my best work, using my most productive combination of skills and experiences, if I’m a cog in someone else's machine. It’s safer being an employee than self-employed. I guess the price of removing self-employment risks is the difference between the value you generate for your employer and what you’re paid. I think those risks are overpriced, and most people are more capable than they realise.",
          "content_length": 855,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "Move",
          "blog_url": "https://www.johnmathews.is/blog/move",
          "blog_date": "July 08, 2017",
          "content": "Sometimes you have to walk into a situation to find out how to make the most of it. And sometimes you have to leave a place in order to gain perspective. Last year my boss gave me some advice that was supposed to be encouraging. I’d requested to reduce my involvement with some stuff that was unrelated to my job so that I could contribute more to my team and still maintain some semblance of a work/life balance. My boss was pretty clear that reducing my involvement in the extra stuff would not be possible. During our conversation he advised me not to worry about how much I contributed to the team because “the work will get done anyway” This was meant to be encouraging, but instead removed any conviction that the work I did was important.",
          "content_length": 745,
          "content_tokens": 153,
          "embedding": []
        }
      ]
    },
    {
      "title": "Flee",
      "url": "https://www.johnmathews.is/blog/flee",
      "date": "July 04, 2017",
      "content": "Got to get out.",
      "length": 15,
      "tokens": 5,
      "chunks": [
        {
          "blog_title": "Flee",
          "blog_url": "https://www.johnmathews.is/blog/flee",
          "blog_date": "July 04, 2017",
          "content": "Got to get out.",
          "content_length": 15,
          "content_tokens": 5,
          "embedding": []
        }
      ]
    },
    {
      "title": "Understanding VC Investment",
      "url": "https://www.johnmathews.is/blog/investment",
      "date": "June 10, 2017",
      "content": "How to pitch to a VC: Market, Management, Model, Momentum Lisbon Investment Summit here Boris Golden VC's are seeking to identify high-potential startups, and then support and fund them. They are looking for something that is innovative and unproven. A startup is not a company but an organisation searching for a business model, Whilst executing and discovering a scalable way to grow. Startups need money for ambitious but credible growth plans. A typical stake for a VC could be roughly 20%. VC's want an exit price of at least 100m, otherwise their business models don't work out. $10m can seem a lot for a founder with a 30% stake, but it's not enough to attract VCs, so aim higher. Identify specific people with real needs Size of market Why now? What is your clear competitive advantage - why can no-one else do this? Find a large and attractive market… Build a smart, skilled and cohesive team With a strong ability to deliver quickly and to learn quickly That is ready to go big whatever it takes With a unique vision and project-fit Valuable and differentiated products Efficient go-to-market and growth channels Profitable monetisation strategy Scalability and defensibility Show traction and that you've cracked the important problem Show ambitous and credible growth plans With a capital-efficient growth model And a clear strategy to scale and win",
      "length": 1361,
      "tokens": 281,
      "chunks": [
        {
          "blog_title": "Understanding VC Investment",
          "blog_url": "https://www.johnmathews.is/blog/investment",
          "blog_date": "June 10, 2017",
          "content": "How to pitch to a VC: Market, Management, Model, Momentum Lisbon Investment Summit here Boris Golden VC's are seeking to identify high-potential startups, and then support and fund them. They are looking for something that is innovative and unproven. A startup is not a company but an organisation searching for a business model, Whilst executing and discovering a scalable way to grow. Startups need money for ambitious but credible growth plans. A typical stake for a VC could be roughly 20% VC's want an exit price of at least 100m, otherwise their business models don't work out. $10m can seem a lot for a founder with a 30% stake, but it's not enough to attract VCs, so aim higher.",
          "content_length": 686,
          "content_tokens": 150,
          "embedding": []
        },
        {
          "blog_title": "Understanding VC Investment",
          "blog_url": "https://www.johnmathews.is/blog/investment",
          "blog_date": "June 10, 2017",
          "content": "Identify specific people with real needs Size of market Why now? What is your clear competitive advantage - why can no-one else do this? Find a large and attractive market… Build a smart, skilled and cohesive team With a strong ability to deliver quickly and to learn quickly That is ready to go big whatever it takes With a unique vision and project-fit Valuable and differentiated products Efficient go-to-market and growth channels Profitable monetisation strategy Scalability and defensibility Show traction and that you've cracked the important problem Show ambitous and credible growth plans With a capital-efficient growth model And a clear strategy to scale and win.",
          "content_length": 674,
          "content_tokens": 132,
          "embedding": []
        }
      ]
    },
    {
      "title": "How to be an ambitious founder in Europe",
      "url": "https://www.johnmathews.is/blog/ambitious",
      "date": "June 09, 2017",
      "content": "Creating something that matters is hard. Learn to leverage your time, you can never get it back. Being a successful founder is not impossible, it is always exciting. Lisbon Investment Summit Oussama Ammar here. Oussama spoke with passion and humour. It's clear that he cares about encouraging would-be founders and confronting some of the cultural hurdles that exist in Europe. These are my notes from the session: If you are serious about building something that matters then you have a great and exciting future ahead. You can never predict who will be successful and who will fail. There are a lot of dumb successful people and clever founders can fail. It's really important to learn how to leverage your time effectively. You can lose anything else and get it back but you can never recover the time you've already spent. The only way to succeed is to try hard. It's hard to do something that matters. In Europe you need to be more ambitious than average (measured against other countries) because the environment makes it harder to be an entrepreneur. (Attitudes to risk, comfort, security, expectations of failure.. are all unhelpful for founders.) It's not impossible, just harder. So be more ambitious. Everyone is replaceable, no-one is unique. You can always lose money and replace it. There is so much money in the world. 1 m − 1m - 1 m − If you lose money on a project you will learn things from that experience and you can leverage that learning … But you will never get back the time you spent. Zombies are companies that make enough money to survive but not enough to provide joy to the people in the company - aim high and… Starting a company is a big deal, like starting a marriage. Think hard about what you will be doing, what problem you are trying to solve, who you will be working with. In Europe there is not enough money to go around and this makes pitching hard. Silicon Valley doesn't have this problem. On average a startup in Europe will raise less than a startup in the USA. Europe is irrationally concerned about risk. USA is less concerned with risk and this is very helpful. So be pragmatic about risk. Incorporate in London where the laws are good, even if you don't want to operate in the UK. It has a better designed system of corporate law. Estonia is also good. London, Paris, Berlin.. There isn't a best city because none are holistic London has the money Paris has engineering and product development (and no-one outside Paris knows the products exist) Berlin has automation and execution, execution and scaling …You need to draw on all 3 of these cities, which when taken together can surpass Silicon Valley. The founder of Slack lives in Vancouver with his wife and kids. He spends 1 day each week in California and everyone thinks Slack is Californian due to good marketing. Forget national pride, be pragmatic. Leverage the internet. The founders of Airbnb would fly from New York to California for 1 day each week. They were originally in California where AirBnB started, but decided that if they could make it work in New York then AirBnB would be a success, so they moved to New York and flew back for meetings , etc. If you ask Europeans to come to a meeting in London (which is not as far as California is from New York) people start complaining and deciding they can't be bothered.",
      "length": 3331,
      "tokens": 697,
      "chunks": [
        {
          "blog_title": "How to be an ambitious founder in Europe",
          "blog_url": "https://www.johnmathews.is/blog/ambitious",
          "blog_date": "June 09, 2017",
          "content": "Creating something that matters is hard. Learn to leverage your time, you can never get it back. Being a successful founder is not impossible, it is always exciting. Lisbon Investment Summit Oussama Ammar here. Oussama spoke with passion and humour. It's clear that he cares about encouraging would-be founders and confronting some of the cultural hurdles that exist in Europe. These are my notes from the session: If you are serious about building something that matters then you have a great and exciting future ahead. You can never predict who will be successful and who will fail. There are a lot of dumb successful people and clever founders can fail. It's really important to learn how to leverage your time effectively. You can lose anything else and get it back but you can never recover the time you've already spent. The only way to succeed is to try hard. It's hard to do something that matters.",
          "content_length": 906,
          "content_tokens": 183,
          "embedding": []
        },
        {
          "blog_title": "How to be an ambitious founder in Europe",
          "blog_url": "https://www.johnmathews.is/blog/ambitious",
          "blog_date": "June 09, 2017",
          "content": "In Europe you need to be more ambitious than average (measured against other countries) because the environment makes it harder to be an entrepreneur. (Attitudes to risk, comfort, security, expectations of failure. are all unhelpful for founders.) It's not impossible, just harder. So be more ambitious. Everyone is replaceable, no-one is unique. You can always lose money and replace it. There is so much money in the world. 1 m − 1m - 1 m − If you lose money on a project you will learn things from that experience and you can leverage that learning … But you will never get back the time you spent. Zombies are companies that make enough money to survive but not enough to provide joy to the people in the company - aim high and… Starting a company is a big deal, like starting a marriage. Think hard about what you will be doing, what problem you are trying to solve, who you will be working with.",
          "content_length": 901,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "How to be an ambitious founder in Europe",
          "blog_url": "https://www.johnmathews.is/blog/ambitious",
          "blog_date": "June 09, 2017",
          "content": "In Europe there is not enough money to go around and this makes pitching hard. Silicon Valley doesn't have this problem. On average a startup in Europe will raise less than a startup in the USA. Europe is irrationally concerned about risk. USA is less concerned with risk and this is very helpful. So be pragmatic about risk. Incorporate in London where the laws are good, even if you don't want to operate in the UK. It has a better designed system of corporate law. Estonia is also good. London, Paris, Berlin. There isn't a best city because none are holistic London has the money Paris has engineering and product development (and no-one outside Paris knows the products exist) Berlin has automation and execution, execution and scaling …You need to draw on all 3 of these cities, which when taken together can surpass Silicon Valley. The founder of Slack lives in Vancouver with his wife and kids.",
          "content_length": 902,
          "content_tokens": 186,
          "embedding": []
        },
        {
          "blog_title": "How to be an ambitious founder in Europe",
          "blog_url": "https://www.johnmathews.is/blog/ambitious",
          "blog_date": "June 09, 2017",
          "content": "He spends 1 day each week in California and everyone thinks Slack is Californian due to good marketing. Forget national pride, be pragmatic. Leverage the internet. The founders of Airbnb would fly from New York to California for 1 day each week. They were originally in California where AirBnB started, but decided that if they could make it work in New York then AirBnB would be a success, so they moved to New York and flew back for meetings , etc. If you ask Europeans to come to a meeting in London (which is not as far as California is from New York) people start complaining and deciding they can't be bothered.",
          "content_length": 617,
          "content_tokens": 132,
          "embedding": []
        }
      ]
    },
    {
      "title": "The Lisbon Investment Summit",
      "url": "https://www.johnmathews.is/blog/lis17",
      "date": "June 09, 2017",
      "content": "The Lisbon investment Summit was full of Investors as well as Founders. The sessions were good enough but the real value was in the conversations. Lisbon Investment Summit Oula.la John Sullivan As well as some outstanding sessions there was a high ratio of investors to startups. This made talking to VCs, bankers and M&A lawyers really easy. I was happy to meet a London-based and Fintech-focussed VC when I sat down to have lunch, and thanks to interrupting a session to ask blockchain related questions on Day 1, a banker struck up a conversation with me over breakfast the next day. I met a lot of people across many relevant roles, and once I've worked through my notes and my new collection of business cards I hope to have some great follow-up meetings. The most useful sessions for me were: \"What it means to be ambitious for founders in Europe\" Oussama Ammar TheFamily \"Understanding Investment\" Boris Golden Partech Ventures Kevin Loaec Chainsmiths Mir Serena Liponi Blockchain Lab The blockchain session was valuable because it's unusual to meet people who have been working in the blockchain space for several years. I'm always wary of being distracted by the hype and noise around developments in the blockchain space so I appreciated hearing some informed and level-headed opinions. The opening session included a speech from the Mayor of Lisbon and the next day opened with a speech from the Secretary of Industry. Both speeches conveyed an open and progressive attitude to international cooperation aimed at promoting and supporting founders and startups in Portugal. The warm words were supported by practical measures including tax incentives and a state-backed scheme to match amounts contributed by private investors. It was really refreshing to hear a politician extol the virtues of multinational cooperation and bringing different cultures into Portugal. I wish Britain could do this too. On the topic of Brexit, which inevitably arose due to London's present role as a centre of finance and innovation, it seems Europe is still expecting the UK to come to its senses, and cannot understand why it's destroying its goodwill and reputation so thoroughly. Oula.la affordable!",
      "length": 2196,
      "tokens": 424,
      "chunks": [
        {
          "blog_title": "The Lisbon Investment Summit",
          "blog_url": "https://www.johnmathews.is/blog/lis17",
          "blog_date": "June 09, 2017",
          "content": "The Lisbon investment Summit was full of Investors as well as Founders. The sessions were good enough but the real value was in the conversations. Lisbon Investment Summit Oula.la John Sullivan As well as some outstanding sessions there was a high ratio of investors to startups. This made talking to VCs, bankers and M&A lawyers really easy. I was happy to meet a London-based and Fintech-focussed VC when I sat down to have lunch, and thanks to interrupting a session to ask blockchain related questions on Day 1, a banker struck up a conversation with me over breakfast the next day. I met a lot of people across many relevant roles, and once I've worked through my notes and my new collection of business cards I hope to have some great follow-up meetings.",
          "content_length": 760,
          "content_tokens": 161,
          "embedding": []
        },
        {
          "blog_title": "The Lisbon Investment Summit",
          "blog_url": "https://www.johnmathews.is/blog/lis17",
          "blog_date": "June 09, 2017",
          "content": "The most useful sessions for me were: \"What it means to be ambitious for founders in Europe\" Oussama Ammar TheFamily \"Understanding Investment\" Boris Golden Partech Ventures Kevin Loaec Chainsmiths Mir Serena Liponi Blockchain Lab The blockchain session was valuable because it's unusual to meet people who have been working in the blockchain space for several years. I'm always wary of being distracted by the hype and noise around developments in the blockchain space so I appreciated hearing some informed and level-headed opinions. The opening session included a speech from the Mayor of Lisbon and the next day opened with a speech from the Secretary of Industry. Both speeches conveyed an open and progressive attitude to international cooperation aimed at promoting and supporting founders and startups in Portugal. The warm words were supported by practical measures including tax incentives and a state-backed scheme to match amounts contributed by private investors. It was really refreshing to hear a politician extol the virtues of multinational cooperation and bringing different cultures into Portugal. I wish Britain could do this too. On the topic of Brexit, which inevitably arose due to London's present role as a centre of finance and innovation, it seems Europe is still expecting the UK to come to its senses, and cannot understand why it's destroying its goodwill and reputation so thoroughly. Oula.la affordable!",
          "content_length": 1434,
          "content_tokens": 263,
          "embedding": []
        }
      ]
    },
    {
      "title": "Blogging with Pelican: Design, Plugins, Sharing",
      "url": "https://www.johnmathews.is/blog/pelican2",
      "date": "June 01, 2017",
      "content": "My site is optimised for speed and clarity. I've added share buttons using a plugin which I modified and improved, and added meta tags to control how Twitter and Facebook show my articles in feeds. My approach to building my blog is to keep it as simple as possible, only adding features when they make a significant improvement to how the content is understood and used. Therefore I've done away with several features that would normally come baked into a WordPress theme. For example a footer full of links that would never be used, and a sidebar full of distractions. I opted for a single column design that hopefully presents text-heavy articles clearly and intuitively (please leave a comment and tell me what you think). Neighbors Tag Cloud Assets Optimize Images I've also arranged the homepage so that posts are shown by their category and then by posting date. This may not work very well with a larger number of posts, but I'll only consider that problem once it presents itself. Designing for hypotheticals or conditions that don't yet exist is a waste of time. There are examples of how I've used Jinja templates below in the context of sharing my articles on Twitter and Facebook. Share Post Installing and initial set-up was simple thanks to the readme on the git repo. You need to copy the plugin folder to the plugins directory, and add the name of the plugin to the list in pelicanconf.py. Then you need to copy paste some Jinja/HTML into the article.html template. That's enough to make it work. I noted though that when I shared to Twitter the text to be tweeted was encapsulated in quotes and there was a 'b' at the front. I realised this was due to using Python 3.x when the plugin (which hadn't been updated for 2 years) was likely written for Python 2.x. A quick google and the obligatory trip to SO showed me how to convert a bytes string to a normal text string. # Python 2 = ( '%s%s' % ( , ) ) . ( 'utf-8' ) # Python 3 = ( '%s%s' % ( , ) ) . ( 'utf-8' ) = str ( , 'utf-8' ) I also found that an article couldn't be shared to twitter from a mobile device and this was due to the URL being incorrectly formatted. The new URL format required separate arguments for the URL, additional text and the twitter handle: # Incorrect = 'http://twitter.com/home?status=%s' % # Correnct = 'http://twitter.com/share?url=%s&text=%s&via=%s' % ( , , ) I thought it would be cool to add some default text to a tweet, as I've enjoyed this feature on other blogs when I've found a post I wanted to share on Twitter. - A user may know they want to share an article but if they're in a hurry it might be hard to find the right words, so why not provide a ready-made tweet. The text is editable so it's only a suggestion. The text would be different for each post so it makes sense to specify it when writing the article. The article 'summary' would be too long, and I know that Pelican supports arbitrary meta-data tags. I assumed that Jinja would pick up the data the same way it picks up the 'standard' meta-data and added a function to share_post.py. def article_tweet ( ) : = '' if hasattr ( , 'tweet' ) : = ( . , 'html.parser' ) . ( ) . ( ) return ( ( '%s' % ( ) ) . ( ) . ( 'utf-8' ) ) else : return ' ' Once this function was working it was simply a case of calling the function and assigning the output to a variable I called \"Tweet\", and then adding \"Tweet\" to the text string to be included in a tweets text: = ( ) = ( '%s' % ( ) ) . ( 'utf-8' ) = str ( , 'utf-8' ) = ( ) Time Until Sharing to Facebook worked without any formatting problems, but it bugged me that the opening text of the article was being used in the preview that was shared to Facebook when I had a summary already prepared and that would be much more useful to potential readers. For some articles I also had an article image that I wanted to see being used. Googling revealed that I needed to use particular meta tags in the webpage's header if I wanted to control what Facebook would pickup. Facebook uses the \"open graph\" standards so I would need the headers in my article pages to include the following: <!-- Open Graph data --> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> I could see that I already had some meta tags being generated using the Jinja templates so I set about copy-pasting and modifying them to build the new tags. I had some issues with trailing white space or line breaks being included within the content string. This was solved like so: {# Adding '-' after and before the %'s strips white space and line breaks #} {% block description %} {%- if article . summary -%} {{ article . summary | striptags | truncate ( 200 ) | e }} {%- else -%} {{ article . content | striptags | truncate ( 200 ) | e }} {%- endif -%} {% endblock description %} I also needed to use some blocks more than once, because a description tag was already included but Facebook wants an \"og:description\", and Twitter wants a \"Twitter:Description\" too. All three of these tags will include the same text (generated in the Jinja2 snippet above). If a block only needs to be used once then it's generated like this; < name = \" \" content = \" {% block description %} {% endblock description %} \" > {% block description %} {% endblock description %} If you call the above more than once Jinja will throw you an error. The documentation (and SO) reveal that the solution is to use: < property = \" \" content = \" {{ self . description ( ) }} \" > This allows you to reuse blocks multiple times and keep your templates tidy. Facebook linter/debugger You can see the new sharing buttons below, please click them and see what happens! here",
      "length": 5731,
      "tokens": 1378,
      "chunks": [
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "My site is optimised for speed and clarity. I've added share buttons using a plugin which I modified and improved, and added meta tags to control how Twitter and Facebook show my articles in feeds. My approach to building my blog is to keep it as simple as possible, only adding features when they make a significant improvement to how the content is understood and used. Therefore I've done away with several features that would normally come baked into a WordPress theme. For example a footer full of links that would never be used, and a sidebar full of distractions. I opted for a single column design that hopefully presents text-heavy articles clearly and intuitively (please leave a comment and tell me what you think) Neighbors Tag Cloud Assets Optimize Images I've also arranged the homepage so that posts are shown by their category and then by posting date. This may not work very well with a larger number of posts, but I'll only consider that problem once it presents itself.",
          "content_length": 988,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "Designing for hypotheticals or conditions that don't yet exist is a waste of time. There are examples of how I've used Jinja templates below in the context of sharing my articles on Twitter and Facebook. Share Post Installing and initial set-up was simple thanks to the readme on the git repo. You need to copy the plugin folder to the plugins directory, and add the name of the plugin to the list in pelicanconf.py. Then you need to copy paste some Jinja/HTML into the article.html template. That's enough to make it work. I noted though that when I shared to Twitter the text to be tweeted was encapsulated in quotes and there was a 'b' at the front. I realised this was due to using Python 3.x when the plugin (which hadn't been updated for 2 years) was likely written for Python 2.x.",
          "content_length": 787,
          "content_tokens": 182,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "A quick google and the obligatory trip to SO showed me how to convert a bytes string to a normal text string. # Python 2 = ( '%s%s' % ( , ) )  ( 'utf-8' ) # Python 3 = ( '%s%s' % ( , ) )  ( 'utf-8' ) = str ( , 'utf-8' ) I also found that an article couldn't be shared to twitter from a mobile device and this was due to the URL being incorrectly formatted.",
          "content_length": 356,
          "content_tokens": 108,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "The new URL format required separate arguments for the URL, additional text and the twitter handle: # Incorrect = 'http://twitter.com/home?status=%s' % # Correnct = 'http://twitter.com/share?url=%s&text=%s&via=%s' % ( , , ) I thought it would be cool to add some default text to a tweet, as I've enjoyed this feature on other blogs when I've found a post I wanted to share on Twitter. - A user may know they want to share an article but if they're in a hurry it might be hard to find the right words, so why not provide a ready-made tweet. The text is editable so it's only a suggestion. The text would be different for each post so it makes sense to specify it when writing the article.",
          "content_length": 687,
          "content_tokens": 178,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "The article 'summary' would be too long, and I know that Pelican supports arbitrary meta-data tags. I assumed that Jinja would pick up the data the same way it picks up the 'standard' meta-data and added a function to share_post.py. def article_tweet ( ) : = '' if hasattr ( , 'tweet' ) : = (  , 'html.parser' )  ( )  ( ) return ( ( '%s' % ( ) )  ( )  ( 'utf-8' ) ) else : return ' ' Once this function was working it was simply a case of calling the function and assigning the output to a variable I called \"Tweet\", and then adding \"Tweet\" to the text string to be included in a tweets text: = ( ) = ( '%s' % ( ) )",
          "content_length": 615,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "( 'utf-8' ) = str ( , 'utf-8' ) = ( ) Time Until Sharing to Facebook worked without any formatting problems, but it bugged me that the opening text of the article was being used in the preview that was shared to Facebook when I had a summary already prepared and that would be much more useful to potential readers. For some articles I also had an article image that I wanted to see being used. Googling revealed that I needed to use particular meta tags in the webpage's header if I wanted to control what Facebook would pickup.",
          "content_length": 529,
          "content_tokens": 116,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "Facebook uses the \"open graph\" standards so I would need the headers in my article pages to include the following: <!-- Open Graph data --> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> < property = \" \" content = \" \" /> I could see that I already had some meta tags being generated using the Jinja templates so I set about copy-pasting and modifying them to build the new tags. I had some issues with trailing white space or line breaks being included within the content string. This was solved like so: {# Adding '-' after and before the %'s strips white space and line breaks #} {% block description %} {%- if article  summary -%} {{ article  summary | striptags | truncate ( 200 ) | e }} {%- else -%} {{ article",
          "content_length": 804,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican: Design, Plugins, Sharing",
          "blog_url": "https://www.johnmathews.is/blog/pelican2",
          "blog_date": "June 01, 2017",
          "content": "content | striptags | truncate ( 200 ) | e }} {%- endif -%} {% endblock description %} I also needed to use some blocks more than once, because a description tag was already included but Facebook wants an \"og:description\", and Twitter wants a \"Twitter:Description\" too. All three of these tags will include the same text (generated in the Jinja2 snippet above) If a block only needs to be used once then it's generated like this; < name = \" \" content = \" {% block description %} {% endblock description %} \" > {% block description %} {% endblock description %} If you call the above more than once Jinja will throw you an error. The documentation (and SO) reveal that the solution is to use: < property = \" \" content = \" {{ self  description ( ) }} \" > This allows you to reuse blocks multiple times and keep your templates tidy. Facebook linter/debugger You can see the new sharing buttons below, please click them and see what happens! here.",
          "content_length": 942,
          "content_tokens": 223,
          "embedding": []
        }
      ]
    },
    {
      "title": "Blockchains from the ground up: Part 1",
      "url": "https://www.johnmathews.is/blog/blockchain-introduction",
      "date": "May 25, 2017",
      "content": "Using a scenario that begins with the exchange of apples for oranges, understand the essential concepts and advantages of blockchains. This is part 1 of an introduction to the key features of a generalised blockchain. I haven't included references to Bitcoin or any particular digital currencies or blockchain implementations. This is because a digital currency is just one application of blockchain technology. Let's imagine there is a village somewhere where people still trade by bartering. John has some apples whilst Lizzie has some oranges. John would like an orange, and offers Lizzie an apple in exchange. She accepts, and writes John a receipt. date: '1234' From: Lizzie To: John What: 1 Orange Price: 1 Apple IOU date: '1234' From: John To: Lizzie What: 1 Orange Signed: John's signature, Lizzie's signature This IOU is a nice gesture, but it's simple to forge. Lizzie has the only copy of the IOU and once Lizzie has seen Johns signature, she could easily copy it and create more IOU's. She could also change this IOU from 1 orange to 11 oranges (for example) and John couldn't prove what the original amount was. If Lizzie and John disagreed over what was owed it would be impossible to know who was telling the truth. It's one person's word against the other. Lizzie realises this and suggests an improvement - they will find a witness and make 3 copies of the IOU. Each copy will be signed by Lizzie, John and the Witness. Lets call this witness \"Walter\". date: '1234' From: John To: Lizzie What: 1 Orange Witness: Walter Signed: \"John's signature\", \"Lizzie's signature\", \"Walter's signature\" This is a much stronger document and is more difficult to forge. If Lizzie changes the \"What:\" to \"11 Oranges\", both John and Walter will have copies of the original with her signature on it. It will be 2 pieces of evidence against Lizzie's 1. Lizzie will be laughed out of court. Hahaha. 3 Party transactions work pretty well, and this is how most transactions are recorded today. But there is a weakness: If Lizzie can bribe Walter then the transaction can be falsified! John would rely on Walter to verify his version of the transaction but would be let down by Walters lack of integrity. Lizzie and Walter could change 1 orange to 11 oranges and if Lizzie offered Walter some of the extra oranges this would give them both an incentive to forge the documentation. If Walter liked oranges enough, he might not care that his career as a witness will be ruined. This is a problem for modern financial systems and a great deal of time, money and regulation is devoted to trying to ensure that third parties are trustworthy. E.G. If I buy a car and my bank is in cahoots with the car dealership, I could be defrauded. Reducing this risk to an acceptably low level makes financial services slower and more expensive than they would otherwise need to be. public-key infrastructure previous post A public key is derived from a private key, and this pair together have a set of unique mathematical properties. Either key can be used to encrypt a message but only the other key can be used to decrypt it. You cannot use the same key to encrypt and decrypt a message. If the private key is used to encrypt then anybody can decrypt (because the public key is publicly available) and whilst this is clearly a terrible way to keep a secret it's a great way to verify who encrypted the message, because only one person has the private key. Because of this, using a private key to encrypt a message is effectively creating a digital signature which cannot be forged. (If the public key is used to encrypt a message then only the private key can be used to decrypt it, and this approach is used to transfer secret data securely). Back to the fruit. If Lizzie wants to accept John's IOU she can use public-key cryptography and no-one needs to worry about Walter. There are 3 steps to the transaction. 1] Create the IOU stating that John owes Lizzie 1 orange. date: '1234 From: John To: Lizzie What: 1 Orange' 2] John creates a public private key pair and encrypts the IOU using his private key. He adds an unencrypted \"From\" line. From: John date: '1234 To: Lizzie, What: 1 Orange <- Signed and encrypted by John using his private key' 3] John makes his public key freely available to anyone who wants it. This will work because anybody (not just Lizzie) can check that John signed the IOU. The transaction can be verified by looking at the \"From\" part of that transaction, noticing that this transaction is supposedly from John and then using John's public key to decrypt the encoded \"signature\" line. The signature can only be decrypted using John's public key if his private key was used to encrypt it. Because John is the only person with his private key, that proves the transaction is valid, and Lizzie isn't dishonestly creating a debt for John to pay. Clearly if John discloses his private key (or its stolen) then he will make the system insecure, but this is a problem with John and his security protocols, not with public-key cryptography. So far we've seen how 1 IOU (for an orange) can be securely created, signed and verified. This process can extended to be used by more people to exchange more fruit. For example. The original note: From: John date: '1234, To: Lizzie, What: 1 Orange <- Signed and encrypted by John using his private key' Then some additional transactions: From: Lizzie // Date: 1235, To: John, What: 2 Apples <- Signed and encrypted by Lizzie using her private key From: John // Date: 1236, To: Chris, What: 1 Banana <- Signed and encrypted by John using his private key From: Chris // Date: 1237, To: Lizzie, What: 2 Bananas <- Signed and encrypted by Chris using his private key After these 4 transactions, between John, Chris and Lizzie: John owes 1 orange to Lizzie and 1 banana to Chris Lizzie owes 2 apples to John Chris owes 2 bananas to Lizzie. This is confusing, (and ridiculous). It is not possible to know who is the most in debt or who is the most wealthy. Lizzie owes 2 apples, but is owed 2 bananas and 1 apple. Does that mean her fruit business is losing money or making money? We cannot say. To be able to know we need to use the same unit of value for all the fruits. Lets say that an orange is worth 2 apples, and a banana is also worth 2 apples (therefore 1 banana = 1 orange.), also lets invent a currency called \"coins\" and say 1 apple is worth 1 coin. The 4 transactions can now be rewritten as: From: John // Date: 1234, To: Lizzie, What: 2 coins <- Signed and encrypted by John using his private key From: Lizzie // Date: 1235, To: John, What: 2 coins <- Signed and encrypted by Lizzie using her private key From: John // Date: 1236, To: Chris, What: 2 coins <- Signed and encrypted by John using his private key From: Chris // Date: 1237, To: Lizzie, What: 4 coins <- Signed and encrypted by Chris using his private key By going through the list of transactions we can see that: John owes Lizzie and Chris 2 coins each, and is owed 2 coins from Lizzie. His net amount is -2 Lizzie owes John 2 coins but is owed 4 coins from Chris. Her net amount is +2 Chris owes Lizzie 4 coins but is owed 2 coins from John. His net amount is -2 So far Lizzie is the only person who appears to have any business skills. What if Lizzie wanted to use the 4 coins that she is owed by Chris to buy something from John? Could she use this system to transfer Chris' promise to pay her 4 coins so that Chris would pay John instead? The fact that everyone can be sure that the record of the transactions is accurate and authentic allows a debt to be used as payment. Lizzie's transaction would look like this: From: Lizzie // Date: 1235, To: John, What: ba781... <- Signed and encrypted by Lizzie using her private key hash This shows how public-private key infrastructure can be used to securely record transactions and enable trade between a group of people, - under certain conditions. Blockchains can be used to transfer units of value like in this example, but we could just as easily put selfies or certificates of ownership (for houses, financial instruments, diamonds, etc) inside the \"What\" part of the transaction. If we make two other changes - removing the \"To\" part of the transaction, and including a hash of the transaction as part of the text which is signed using a private key. If we do this, then a record would be: From: Chris // Date: 2345, What: \"A photo of me\" <- Signed and encrypted by Chris using his private key This would create a reliable record of what Chris claims he looks like. He can confidently send anyone this record and if they have his public key then they can verify that it is Chris himself who signed it and is asserting that the photo is him. If somebody changed the photo then the data in the transaction would change and the transaction will have a new hash value. The new hash value will not match the hash value contained within the signature, and the text in the signature cannot be changed because it can only be encrypted using Chris' private key, which only Chris has. Therefore it will be simple to show that someone other than Chris is trying to change the photo. Another use for public-key cryptography arises if Chris were an employee in a bank, and the \"What\" contained documents about a customer the bank is providing financial services for. In this scenario, Chris (representing the bank) is effectively confirming the customer's true identity and documenting the evidence that's been collected to show that the bank knows who their customer really is. If the transaction included a new section called \"Customer ID\" (for example) then a database of all customers whose identity checks have been successfully completed can be made. This can be shared with other departments (or banks) easily and immutably. This is the concept behind KYC on a blockchain. Back to our fruit traders: At the moment a participant is allowed to carry a net negative balance. For this system to work in reality, the creation of \"coins\" will need to be controlled in order to maintain their value. In the example above, people can freely create \"coins\" and can also carry negative amounts of \"coins\". This would result in the value of a \"coin\" plummeting. Therefore their creation (and conversion from fruit) must be controlled in a predictable manner. part 2",
      "length": 10321,
      "tokens": 2323,
      "chunks": [
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "Using a scenario that begins with the exchange of apples for oranges, understand the essential concepts and advantages of blockchains. This is part 1 of an introduction to the key features of a generalised blockchain. I haven't included references to Bitcoin or any particular digital currencies or blockchain implementations. This is because a digital currency is just one application of blockchain technology. Let's imagine there is a village somewhere where people still trade by bartering. John has some apples whilst Lizzie has some oranges. John would like an orange, and offers Lizzie an apple in exchange. She accepts, and writes John a receipt. date: '1234' From: Lizzie To: John What: 1 Orange Price: 1 Apple IOU date: '1234' From: John To: Lizzie What: 1 Orange Signed: John's signature, Lizzie's signature This IOU is a nice gesture, but it's simple to forge.",
          "content_length": 871,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "Lizzie has the only copy of the IOU and once Lizzie has seen Johns signature, she could easily copy it and create more IOU's. She could also change this IOU from 1 orange to 11 oranges (for example) and John couldn't prove what the original amount was. If Lizzie and John disagreed over what was owed it would be impossible to know who was telling the truth. It's one person's word against the other. Lizzie realises this and suggests an improvement - they will find a witness and make 3 copies of the IOU. Each copy will be signed by Lizzie, John and the Witness. Lets call this witness \"Walter\" date: '1234' From: John To: Lizzie What: 1 Orange Witness: Walter Signed: \"John's signature\", \"Lizzie's signature\", \"Walter's signature\" This is a much stronger document and is more difficult to forge.",
          "content_length": 798,
          "content_tokens": 196,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "If Lizzie changes the \"What:\" to \"11 Oranges\", both John and Walter will have copies of the original with her signature on it. It will be 2 pieces of evidence against Lizzie's 1. Lizzie will be laughed out of court. Hahaha. 3 Party transactions work pretty well, and this is how most transactions are recorded today. But there is a weakness: If Lizzie can bribe Walter then the transaction can be falsified! John would rely on Walter to verify his version of the transaction but would be let down by Walters lack of integrity. Lizzie and Walter could change 1 orange to 11 oranges and if Lizzie offered Walter some of the extra oranges this would give them both an incentive to forge the documentation. If Walter liked oranges enough, he might not care that his career as a witness will be ruined.",
          "content_length": 797,
          "content_tokens": 176,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "This is a problem for modern financial systems and a great deal of time, money and regulation is devoted to trying to ensure that third parties are trustworthy. E.G. If I buy a car and my bank is in cahoots with the car dealership, I could be defrauded. Reducing this risk to an acceptably low level makes financial services slower and more expensive than they would otherwise need to be. public-key infrastructure previous post A public key is derived from a private key, and this pair together have a set of unique mathematical properties. Either key can be used to encrypt a message but only the other key can be used to decrypt it. You cannot use the same key to encrypt and decrypt a message. If the private key is used to encrypt then anybody can decrypt (because the public key is publicly available) and whilst this is clearly a terrible way to keep a secret it's a great way to verify who encrypted the message, because only one person has the private key.",
          "content_length": 965,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "Because of this, using a private key to encrypt a message is effectively creating a digital signature which cannot be forged. (If the public key is used to encrypt a message then only the private key can be used to decrypt it, and this approach is used to transfer secret data securely) Back to the fruit. If Lizzie wants to accept John's IOU she can use public-key cryptography and no-one needs to worry about Walter. There are 3 steps to the transaction. 1] Create the IOU stating that John owes Lizzie 1 orange. date: '1234 From: John To: Lizzie What: 1 Orange' 2] John creates a public private key pair and encrypts the IOU using his private key. He adds an unencrypted \"From\" line.",
          "content_length": 686,
          "content_tokens": 162,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "From: John date: '1234 To: Lizzie, What: 1 Orange <- Signed and encrypted by John using his private key' 3] John makes his public key freely available to anyone who wants it. This will work because anybody (not just Lizzie) can check that John signed the IOU. The transaction can be verified by looking at the \"From\" part of that transaction, noticing that this transaction is supposedly from John and then using John's public key to decrypt the encoded \"signature\" line. The signature can only be decrypted using John's public key if his private key was used to encrypt it. Because John is the only person with his private key, that proves the transaction is valid, and Lizzie isn't dishonestly creating a debt for John to pay. Clearly if John discloses his private key (or its stolen) then he will make the system insecure, but this is a problem with John and his security protocols, not with public-key cryptography. So far we've seen how 1 IOU (for an orange) can be securely created, signed and verified. This process can extended to be used by more people to exchange more fruit. For example.",
          "content_length": 1097,
          "content_tokens": 244,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "The original note: From: John date: '1234, To: Lizzie, What: 1 Orange <- Signed and encrypted by John using his private key' Then some additional transactions: From: Lizzie // Date: 1235, To: John, What: 2 Apples <- Signed and encrypted by Lizzie using her private key From: John // Date: 1236, To: Chris, What: 1 Banana <- Signed and encrypted by John using his private key From: Chris // Date: 1237, To: Lizzie, What: 2 Bananas <- Signed and encrypted by Chris using his private key After these 4 transactions, between John, Chris and Lizzie: John owes 1 orange to Lizzie and 1 banana to Chris Lizzie owes 2 apples to John Chris owes 2 bananas to Lizzie. This is confusing, (and ridiculous) It is not possible to know who is the most in debt or who is the most wealthy. Lizzie owes 2 apples, but is owed 2 bananas and 1 apple. Does that mean her fruit business is losing money or making money? We cannot say. To be able to know we need to use the same unit of value for all the fruits. Lets say that an orange is worth 2 apples, and a banana is also worth 2 apples (therefore 1 banana = 1 orange.), also lets invent a currency called \"coins\" and say 1 apple is worth 1 coin.",
          "content_length": 1175,
          "content_tokens": 296,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "The 4 transactions can now be rewritten as: From: John // Date: 1234, To: Lizzie, What: 2 coins <- Signed and encrypted by John using his private key From: Lizzie // Date: 1235, To: John, What: 2 coins <- Signed and encrypted by Lizzie using her private key From: John // Date: 1236, To: Chris, What: 2 coins <- Signed and encrypted by John using his private key From: Chris // Date: 1237, To: Lizzie, What: 4 coins <- Signed and encrypted by Chris using his private key By going through the list of transactions we can see that: John owes Lizzie and Chris 2 coins each, and is owed 2 coins from Lizzie. His net amount is -2 Lizzie owes John 2 coins but is owed 4 coins from Chris. Her net amount is +2 Chris owes Lizzie 4 coins but is owed 2 coins from John.",
          "content_length": 759,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "His net amount is -2 So far Lizzie is the only person who appears to have any business skills. What if Lizzie wanted to use the 4 coins that she is owed by Chris to buy something from John? Could she use this system to transfer Chris' promise to pay her 4 coins so that Chris would pay John instead? The fact that everyone can be sure that the record of the transactions is accurate and authentic allows a debt to be used as payment. Lizzie's transaction would look like this: From: Lizzie // Date: 1235, To: John, What: ba781.. <- Signed and encrypted by Lizzie using her private key hash This shows how public-private key infrastructure can be used to securely record transactions and enable trade between a group of people, - under certain conditions.",
          "content_length": 754,
          "content_tokens": 167,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "Blockchains can be used to transfer units of value like in this example, but we could just as easily put selfies or certificates of ownership (for houses, financial instruments, diamonds, etc) inside the \"What\" part of the transaction. If we make two other changes - removing the \"To\" part of the transaction, and including a hash of the transaction as part of the text which is signed using a private key. If we do this, then a record would be: From: Chris // Date: 2345, What: \"A photo of me\" <- Signed and encrypted by Chris using his private key This would create a reliable record of what Chris claims he looks like. He can confidently send anyone this record and if they have his public key then they can verify that it is Chris himself who signed it and is asserting that the photo is him. If somebody changed the photo then the data in the transaction would change and the transaction will have a new hash value.",
          "content_length": 920,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "The new hash value will not match the hash value contained within the signature, and the text in the signature cannot be changed because it can only be encrypted using Chris' private key, which only Chris has. Therefore it will be simple to show that someone other than Chris is trying to change the photo. Another use for public-key cryptography arises if Chris were an employee in a bank, and the \"What\" contained documents about a customer the bank is providing financial services for. In this scenario, Chris (representing the bank) is effectively confirming the customer's true identity and documenting the evidence that's been collected to show that the bank knows who their customer really is. If the transaction included a new section called \"Customer ID\" (for example) then a database of all customers whose identity checks have been successfully completed can be made. This can be shared with other departments (or banks) easily and immutably. This is the concept behind KYC on a blockchain.",
          "content_length": 1001,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Blockchains from the ground up: Part 1",
          "blog_url": "https://www.johnmathews.is/blog/blockchain-introduction",
          "blog_date": "May 25, 2017",
          "content": "Back to our fruit traders: At the moment a participant is allowed to carry a net negative balance. For this system to work in reality, the creation of \"coins\" will need to be controlled in order to maintain their value. In the example above, people can freely create \"coins\" and can also carry negative amounts of \"coins\" This would result in the value of a \"coin\" plummeting. Therefore their creation (and conversion from fruit) must be controlled in a predictable manner. part 2.",
          "content_length": 481,
          "content_tokens": 102,
          "embedding": []
        }
      ]
    },
    {
      "title": "London Rent vs. London Salaries",
      "url": "https://www.johnmathews.is/blog/london",
      "date": "May 13, 2017",
      "content": "Living in London is only financially possible if you are either single or household income is more than £60k/year. Living in London is expensive, everyone in the UK knows this. Everyone knows that this is mostly due to the price of property, which we all enjoy talking about. I've lived here for 3 years now, and when my wife and I were both working we lived comfortably. Two incomes under one roof is just fine. Not as fine as in many other cities, but reasonable. Just over a year ago my first child was born, and now that my wife's maternity pay has ended we are a single income household. This is not fine. Even though I earn almost £50k/year, and any salary increase will be taxed at 40%, I cannot cover essential day-to-day costs. I'm in the 40% tax bracket, and my basic monthly outgoings exceed my monthly take home pay by £400. If my employer wanted to pay me enough to cover essential costs, it would cost them approximately double the shortfall due to tax. None of this makes sense. Salaries and living expenses have become really disconnected. For most people the most obvious way to increase wealth is to buy property. Mortgage repayments are cheaper than rent, and the value of the property increases over time. Double win. But there is a big hurdle to overcome before this is possible - saving money for a deposit on a house is often impossible without external help (i.e. the \"Bank of Mum and Dad\"), because so much of the money earnt must be spent on rent first. It's a trap. Repayments on a mortgage are cheaper than paying rent, but you cannot save enough for a deposit because; 1 flat 2 What if my partner went back to work and we put our baby in childcare? Childcare is not cheap, and working would need to bring in more than the cost of childcare. This requires a higher than average salary from a graduate job, (which is the life stage when people might reasonably start having children), so unless both parents are unusually high earners that option isnt viable either. Living in London is only financially possible if you are either single or household income is more than £60k/year. ↩ Rightmove ↩",
      "length": 2122,
      "tokens": 460,
      "chunks": [
        {
          "blog_title": "London Rent vs. London Salaries",
          "blog_url": "https://www.johnmathews.is/blog/london",
          "blog_date": "May 13, 2017",
          "content": "Living in London is only financially possible if you are either single or household income is more than £60k/year. Living in London is expensive, everyone in the UK knows this. Everyone knows that this is mostly due to the price of property, which we all enjoy talking about. I've lived here for 3 years now, and when my wife and I were both working we lived comfortably. Two incomes under one roof is just fine. Not as fine as in many other cities, but reasonable. Just over a year ago my first child was born, and now that my wife's maternity pay has ended we are a single income household. This is not fine. Even though I earn almost £50k/year, and any salary increase will be taxed at 40%, I cannot cover essential day-to-day costs. I'm in the 40% tax bracket, and my basic monthly outgoings exceed my monthly take home pay by £400.",
          "content_length": 836,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "London Rent vs. London Salaries",
          "blog_url": "https://www.johnmathews.is/blog/london",
          "blog_date": "May 13, 2017",
          "content": "If my employer wanted to pay me enough to cover essential costs, it would cost them approximately double the shortfall due to tax. None of this makes sense. Salaries and living expenses have become really disconnected. For most people the most obvious way to increase wealth is to buy property. Mortgage repayments are cheaper than rent, and the value of the property increases over time. Double win. But there is a big hurdle to overcome before this is possible - saving money for a deposit on a house is often impossible without external help (i.e. the \"Bank of Mum and Dad\"), because so much of the money earnt must be spent on rent first. It's a trap. Repayments on a mortgage are cheaper than paying rent, but you cannot save enough for a deposit because; 1 flat 2 What if my partner went back to work and we put our baby in childcare? Childcare is not cheap, and working would need to bring in more than the cost of childcare. This requires a higher than average salary from a graduate job, (which is the life stage when people might reasonably start having children), so unless both parents are unusually high earners that option isnt viable either. Living in London is only financially possible if you are either single or household income is more than £60k/year. ↩ Rightmove ↩",
          "content_length": 1284,
          "content_tokens": 269,
          "embedding": []
        }
      ]
    },
    {
      "title": "Introduction to the Æternity blockchain project",
      "url": "https://www.johnmathews.is/blog/aeternity",
      "date": "May 05, 2017",
      "content": "Æternity is a new blockchain project aiming to facilitate large volumes of smart-contracts which can interface with external data sources. This is accomplished using a decentralised oracle based on prediction markets. These are my notes on the æternity blockchain project, I'm not affiliated with the æternity team. Æternity is a new blockchain project that is pre-launch. The headline goal is to securely facilitate large volumes of smart-contracts which interface with external data sources. This is made possible via a decentralised oracle based on prediction markets. These terms are explained below. The æternity project has proposed several notable technical features: Smart Contracts in state-channels Oracles and native prediction markets Governance by prediction markets Written in Erlang Different types of node Sharding A smart contract is a way to execute a contract without an intermediary (middle-man) and without conflict. The smart contract is a protocol which is stored and executed on a blockchain, executing transactions (outputs) based on specific inputs and programmable logic automatically. The logic often mirrors that contained in clauses of a written contract. State channels are payment networks that exchange funds off-chain and periodically settle up accounts with the main blockchain. (The Bitcoin Lightning Network is creating a system for routing Bitcoin payments through state channels.) State channels increase scalability by making groups of transactions independent of each other. This allows them to be processed in parallel. æternity proposes executing smart-contracts in Turing-complete state channels (Turing complete means, colloquially, real-world and general purpose), which should allow greater volumes of transactions, and make the smart contracts more secure and easier to analyse. This is because executing the smart-contracts off-chain makes them private and the code used to execute the smart contract won’t need to be broadcast to the primary blockchain. This should increase processing capacity by allowing contracts to execute in parallel. Disadvantages to the state-channel approach include reduced transparency, as running smart contracts in state channels requires more trust in both the contract creator and the node running it. The Oracle functionality allows smart-contracts to interact with data outside the æternity blockchain. This is possible by checking on-chain prediction market results and rewarding users who made the correct prediction. Users are rewarded through automated payments and the immediate recording of transactions in the blockchain. This creates incentives to participate in prediction markets, which have been shown to be effective. On-chain, rather than off-chain allows greater efficiency and integration The prediction market is expected to run using a native (on-chain) consensus procedure. The oracle mechanism is designed to use the same consensus infrastructure. Oracle functionality compliments prediction market functionality. Prediction markets are proposed to implement governance of the æternity blockchain. This is a new approach. The æternity protocol would be governed by user input. A prediction market will exist where changes to features and protocols would result in a higher token value. The incentive to increase the value of a token (Æon) would allow the æternity community to decide efficiently which changes to implement. Low level protocol changes to variables like block times and block capacity could be possible The consensus developed by the prediction market will initially provide input to the development team’s decision-making. Later, a fully autonomous prediction market for governance is expected (a DAO) Erlang Could make it easier to run a lightning network and process many state-channels in parallel As far as I know, ÆTernity is the first blockchain project to be written in Erlang The æternity network will contain nodes with different functions. Each type of node will contribute towards the efficient functioning of particular aspects of the network Liquidity - Lots of channels and lots of users. Open a channel to issue a contract, for a fee. Exchanges - Trustless exchanges of assets offered by market makers. Profitable to market makers because of transaction fees. Presumably features such as consensus algorithms and prediction markets will also require their own dedicated node types. Users of the node will incur transaction fees to participate, providing an incentive to run a node. Allows a greater transaction volume, removing scalability problems that Bitcoin and Ethereum have experienced. Sharding works by splitting the space of possible accounts into subspaces (for example based on the first digit of a numerical address) Each shard gets a set of validators. Each validator validates 1 shard only Contracts and transactions within the same shard work as normal Contracts and transactions across shards require alternative techniques based on \"transaction receipts\"",
      "length": 5005,
      "tokens": 922,
      "chunks": [
        {
          "blog_title": "Introduction to the Æternity blockchain project",
          "blog_url": "https://www.johnmathews.is/blog/aeternity",
          "blog_date": "May 05, 2017",
          "content": "Æternity is a new blockchain project aiming to facilitate large volumes of smart-contracts which can interface with external data sources. This is accomplished using a decentralised oracle based on prediction markets. These are my notes on the æternity blockchain project, I'm not affiliated with the æternity team. Æternity is a new blockchain project that is pre-launch. The headline goal is to securely facilitate large volumes of smart-contracts which interface with external data sources. This is made possible via a decentralised oracle based on prediction markets. These terms are explained below. The æternity project has proposed several notable technical features: Smart Contracts in state-channels Oracles and native prediction markets Governance by prediction markets Written in Erlang Different types of node Sharding A smart contract is a way to execute a contract without an intermediary (middle-man) and without conflict.",
          "content_length": 937,
          "content_tokens": 181,
          "embedding": []
        },
        {
          "blog_title": "Introduction to the Æternity blockchain project",
          "blog_url": "https://www.johnmathews.is/blog/aeternity",
          "blog_date": "May 05, 2017",
          "content": "The smart contract is a protocol which is stored and executed on a blockchain, executing transactions (outputs) based on specific inputs and programmable logic automatically. The logic often mirrors that contained in clauses of a written contract. State channels are payment networks that exchange funds off-chain and periodically settle up accounts with the main blockchain. (The Bitcoin Lightning Network is creating a system for routing Bitcoin payments through state channels.) State channels increase scalability by making groups of transactions independent of each other. This allows them to be processed in parallel. æternity proposes executing smart-contracts in Turing-complete state channels (Turing complete means, colloquially, real-world and general purpose), which should allow greater volumes of transactions, and make the smart contracts more secure and easier to analyse. This is because executing the smart-contracts off-chain makes them private and the code used to execute the smart contract won’t need to be broadcast to the primary blockchain.",
          "content_length": 1065,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Introduction to the Æternity blockchain project",
          "blog_url": "https://www.johnmathews.is/blog/aeternity",
          "blog_date": "May 05, 2017",
          "content": "This should increase processing capacity by allowing contracts to execute in parallel. Disadvantages to the state-channel approach include reduced transparency, as running smart contracts in state channels requires more trust in both the contract creator and the node running it. The Oracle functionality allows smart-contracts to interact with data outside the æternity blockchain. This is possible by checking on-chain prediction market results and rewarding users who made the correct prediction. Users are rewarded through automated payments and the immediate recording of transactions in the blockchain. This creates incentives to participate in prediction markets, which have been shown to be effective. On-chain, rather than off-chain allows greater efficiency and integration The prediction market is expected to run using a native (on-chain) consensus procedure. The oracle mechanism is designed to use the same consensus infrastructure. Oracle functionality compliments prediction market functionality. Prediction markets are proposed to implement governance of the æternity blockchain. This is a new approach.",
          "content_length": 1120,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Introduction to the Æternity blockchain project",
          "blog_url": "https://www.johnmathews.is/blog/aeternity",
          "blog_date": "May 05, 2017",
          "content": "The æternity protocol would be governed by user input. A prediction market will exist where changes to features and protocols would result in a higher token value. The incentive to increase the value of a token (Æon) would allow the æternity community to decide efficiently which changes to implement. Low level protocol changes to variables like block times and block capacity could be possible The consensus developed by the prediction market will initially provide input to the development team’s decision-making. Later, a fully autonomous prediction market for governance is expected (a DAO) Erlang Could make it easier to run a lightning network and process many state-channels in parallel As far as I know, ÆTernity is the first blockchain project to be written in Erlang The æternity network will contain nodes with different functions. Each type of node will contribute towards the efficient functioning of particular aspects of the network Liquidity - Lots of channels and lots of users.",
          "content_length": 996,
          "content_tokens": 194,
          "embedding": []
        },
        {
          "blog_title": "Introduction to the Æternity blockchain project",
          "blog_url": "https://www.johnmathews.is/blog/aeternity",
          "blog_date": "May 05, 2017",
          "content": "Open a channel to issue a contract, for a fee. Exchanges - Trustless exchanges of assets offered by market makers. Profitable to market makers because of transaction fees. Presumably features such as consensus algorithms and prediction markets will also require their own dedicated node types. Users of the node will incur transaction fees to participate, providing an incentive to run a node. Allows a greater transaction volume, removing scalability problems that Bitcoin and Ethereum have experienced. Sharding works by splitting the space of possible accounts into subspaces (for example based on the first digit of a numerical address) Each shard gets a set of validators. Each validator validates 1 shard only Contracts and transactions within the same shard work as normal Contracts and transactions across shards require alternative techniques based on \"transaction receipts\"",
          "content_length": 883,
          "content_tokens": 161,
          "embedding": []
        }
      ]
    },
    {
      "title": "The Æternity ICO: My experience",
      "url": "https://www.johnmathews.is/blog/aeternity-ico",
      "date": "May 01, 2017",
      "content": "I participated in phase 1 of the Æternity ICO by converting Sterling to Æons via Ether. I tried several exchanges and chose the quickest, cheapest conversion method. Æternity website white paper To my surprise, I realised that phase 1 of the Initial Coin Offering (ICO) was about to begin, and if I wanted I could acquire the rights to Æons (the Æternity token). During phase 1, 1 ETH would purchase 1100 Æons. In early April 2017, 1 ETH was worth about £38. I was willing to make a small and risky investment, but in order to do that I would need to work out how to convert my conventional Sterling into Bitcoin or Ether, in order to then purchase Æons. The Æternity website made it super easy to set up an Etherium wallet, and to use that wallet to invest in the Æternity project, but buying Ether immediately and putting it in my new wallet proved to be challenging. Helpfully, the Æternity project had partnered with the Swiss firm 'Bitcoin Suisse AG' who would directly convert to Æons from fiat currencies, cutting out the need to purchase an intermediate digital currency. However once I'd completed the identity checks and signed, scanned and sent the multiple forms, I realised I'd need to pay a 'signing on' fee of about £70. To Bitcoin Suisse' credit though, they did manually approve my identification and contract within an hour. previous research What followed was a fairly chaotic few hours where I would sign-up to several exchanges and see how close I could get to purchasing either Bitcoin or Ether immediately, before realising I either had to wait 48 hours for security clearances, or provide additional details, or wait for manual verification of my scanned identity documents. By the end of the evening I had a rough idea of which usernames, passwords and (small) sterling amounts had been submitted to each exchange. Coinbase Etherscan.io contribution page",
      "length": 1879,
      "tokens": 402,
      "chunks": [
        {
          "blog_title": "The Æternity ICO: My experience",
          "blog_url": "https://www.johnmathews.is/blog/aeternity-ico",
          "blog_date": "May 01, 2017",
          "content": "I participated in phase 1 of the Æternity ICO by converting Sterling to Æons via Ether. I tried several exchanges and chose the quickest, cheapest conversion method. Æternity website white paper To my surprise, I realised that phase 1 of the Initial Coin Offering (ICO) was about to begin, and if I wanted I could acquire the rights to Æons (the Æternity token) During phase 1, 1 ETH would purchase 1100 Æons. In early April 2017, 1 ETH was worth about £38. I was willing to make a small and risky investment, but in order to do that I would need to work out how to convert my conventional Sterling into Bitcoin or Ether, in order to then purchase Æons. The Æternity website made it super easy to set up an Etherium wallet, and to use that wallet to invest in the Æternity project, but buying Ether immediately and putting it in my new wallet proved to be challenging.",
          "content_length": 868,
          "content_tokens": 199,
          "embedding": []
        },
        {
          "blog_title": "The Æternity ICO: My experience",
          "blog_url": "https://www.johnmathews.is/blog/aeternity-ico",
          "blog_date": "May 01, 2017",
          "content": "Helpfully, the Æternity project had partnered with the Swiss firm 'Bitcoin Suisse AG' who would directly convert to Æons from fiat currencies, cutting out the need to purchase an intermediate digital currency. However once I'd completed the identity checks and signed, scanned and sent the multiple forms, I realised I'd need to pay a 'signing on' fee of about £70. To Bitcoin Suisse' credit though, they did manually approve my identification and contract within an hour. previous research What followed was a fairly chaotic few hours where I would sign-up to several exchanges and see how close I could get to purchasing either Bitcoin or Ether immediately, before realising I either had to wait 48 hours for security clearances, or provide additional details, or wait for manual verification of my scanned identity documents. By the end of the evening I had a rough idea of which usernames, passwords and (small) sterling amounts had been submitted to each exchange. Coinbase Etherscan.io contribution page.",
          "content_length": 1009,
          "content_tokens": 205,
          "embedding": []
        }
      ]
    },
    {
      "title": "Blogging with Pelican",
      "url": "https://www.johnmathews.is/blog/pelican",
      "date": "April 28, 2017",
      "content": "I switched to Pelican from Wordpress so that I could design the blog I wanted. Creating a blog in Pelican is a great way to learn HTML, CSS, Jinja templates and Git. unwiredcouch.com CuriousGnu Pelican Amy Hanlons … was longer than I expected. Since setting out to switch from Wordpress to Pelican, I've taught myself enough of the following tools to hack this site together. I'm really happy about this because these tools could be used in future projects too. I find HTML quirky but intuitive. Tags make sense, comments are laborious and learning by google is relatively quick. Whatever it is I'm trying to do (like add a link to jump back to the top of the page) someone will have posted the answer somewhere. Writing CSS feels a lot more concise that HTML but it also felt impossible to learn without taking a step back and reading an introductory course. Usually I learn by hacking new phrases together from existing examples so it was frustrating to go backwards before progressing. There was a lightbulb moment when I realised CSS Selectors were a thing, and realising CSS files get called in the header (usually) of an HTML file… Thinkfuls Thanks Molivier! To build a website using Pelican, you need to run commands from the terminal. There are various commands but I found myself using only a few regularly. \"Pelican-quickstart\" will generate a project skeleton to get you started. \"make devserver\" will initialise a local server and generate output files so that I can view changes locally before uploading (its opposite is \"make stopserver\"). Finally \"pelican content -s publishconf.py\" generates the html and css for remote hosting. Some of the plugins I use such as \"Assets\" which minifies the CSS only work when publshconf.py is called, which confused me initially as I didn't think it was working when I was only using \"make devserver\". This really challenged me, and I still don't feel like I know what I'm doing. Git is far more powerful than I need it to be, when all I want to do is undo some erroneous edits and upload a new version of the site to Github. I can stage and commit files, I can create local and remote repo's from the command line. I can change a remote's URL, reset a repo and force a push or a pull. That's all. I haven't tried to merge or to create a test branch, and if some part of the process goes wrong it usually takes hours to make it right again. This is one tool for which the awesome SO and Google cannot magic up the exact right answer immediatly, unfortunately. For example, there is still an output folder in the source repo that is… mysterious to me. Its not the real output, its a version frozen in time from a few weeks ago, and it has an \"@\" in its name. I don't know how it got there. It was created one afternoon in a blur of frustrated google queries and copy/paste/hope terminal commands. I find git's commands the least intuitive of all the tools I use, with its preceeding single dashes and double dashes, and random words thrown into the middle of otherwise reasonable commands. But Git is ubiquitous and Github is awesome, so I will learn it. You'll need to add a file called CNAME to the repo containing the output. CNAME should contain the address of your site in lowercase. Simple. You'll also need to update the DNS records of your domain name to point the name at Github's servers. For Github, you need two \"A Records\" with host type \"@\" and values \"192.30.252.153\" and \"192.30.252.154\" respectively. You also need a CNAME record with host type \"www\" and the value equal to \"username.github.io\". It took about 12 hours for the changes to propagate, and during that time I had variable success loading the site. One thing I didn't want when moving away from Wordpress was a site bloated with features that didn't make the content easier to read. However I found I still needed a few plugins to optimise my site and provide some basic functionality that doesn't come with the vanilla Pelican. Nikola At the end of a post there should be a link to the previous and next blog posts - I was surprised this wasn't included as standard. After putting the plugin in the plugins folder and updating pelicanconf.py, you need to copy a couple of jinja snippets into a template, and maybe add some css to make the links look nice. Make those images as small as possible to help make the site as fast as possible. Add the plugin, update pelicanconf.py, and thats all. Pingdom Pagespeed I'm super happy wth the websites design and speed. It's designed the way I want it, and I've learnt a ton of useful stuff along the way. here",
      "length": 4580,
      "tokens": 1034,
      "chunks": [
        {
          "blog_title": "Blogging with Pelican",
          "blog_url": "https://www.johnmathews.is/blog/pelican",
          "blog_date": "April 28, 2017",
          "content": "I switched to Pelican from Wordpress so that I could design the blog I wanted. Creating a blog in Pelican is a great way to learn HTML, CSS, Jinja templates and Git. unwiredcouch.com CuriousGnu Pelican Amy Hanlons … was longer than I expected. Since setting out to switch from Wordpress to Pelican, I've taught myself enough of the following tools to hack this site together. I'm really happy about this because these tools could be used in future projects too. I find HTML quirky but intuitive. Tags make sense, comments are laborious and learning by google is relatively quick. Whatever it is I'm trying to do (like add a link to jump back to the top of the page) someone will have posted the answer somewhere. Writing CSS feels a lot more concise that HTML but it also felt impossible to learn without taking a step back and reading an introductory course.",
          "content_length": 859,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican",
          "blog_url": "https://www.johnmathews.is/blog/pelican",
          "blog_date": "April 28, 2017",
          "content": "Usually I learn by hacking new phrases together from existing examples so it was frustrating to go backwards before progressing. There was a lightbulb moment when I realised CSS Selectors were a thing, and realising CSS files get called in the header (usually) of an HTML file… Thinkfuls Thanks Molivier! To build a website using Pelican, you need to run commands from the terminal. There are various commands but I found myself using only a few regularly. \"Pelican-quickstart\" will generate a project skeleton to get you started. \"make devserver\" will initialise a local server and generate output files so that I can view changes locally before uploading (its opposite is \"make stopserver\") Finally \"pelican content -s publishconf.py\" generates the html and css for remote hosting.",
          "content_length": 783,
          "content_tokens": 168,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican",
          "blog_url": "https://www.johnmathews.is/blog/pelican",
          "blog_date": "April 28, 2017",
          "content": "Some of the plugins I use such as \"Assets\" which minifies the CSS only work when publshconf.py is called, which confused me initially as I didn't think it was working when I was only using \"make devserver\" This really challenged me, and I still don't feel like I know what I'm doing. Git is far more powerful than I need it to be, when all I want to do is undo some erroneous edits and upload a new version of the site to Github. I can stage and commit files, I can create local and remote repo's from the command line. I can change a remote's URL, reset a repo and force a push or a pull. That's all. I haven't tried to merge or to create a test branch, and if some part of the process goes wrong it usually takes hours to make it right again.",
          "content_length": 744,
          "content_tokens": 179,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican",
          "blog_url": "https://www.johnmathews.is/blog/pelican",
          "blog_date": "April 28, 2017",
          "content": "This is one tool for which the awesome SO and Google cannot magic up the exact right answer immediatly, unfortunately. For example, there is still an output folder in the source repo that is… mysterious to me. Its not the real output, its a version frozen in time from a few weeks ago, and it has an \"@\" in its name. I don't know how it got there. It was created one afternoon in a blur of frustrated google queries and copy/paste/hope terminal commands. I find git's commands the least intuitive of all the tools I use, with its preceeding single dashes and double dashes, and random words thrown into the middle of otherwise reasonable commands. But Git is ubiquitous and Github is awesome, so I will learn it. You'll need to add a file called CNAME to the repo containing the output. CNAME should contain the address of your site in lowercase. Simple.",
          "content_length": 854,
          "content_tokens": 190,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican",
          "blog_url": "https://www.johnmathews.is/blog/pelican",
          "blog_date": "April 28, 2017",
          "content": "You'll also need to update the DNS records of your domain name to point the name at Github's servers. For Github, you need two \"A Records\" with host type \"@\" and values \"192.30.252.153\" and \"192.30.252.154\" respectively. You also need a CNAME record with host type \"www\" and the value equal to \"username.github.io\" It took about 12 hours for the changes to propagate, and during that time I had variable success loading the site. One thing I didn't want when moving away from Wordpress was a site bloated with features that didn't make the content easier to read. However I found I still needed a few plugins to optimise my site and provide some basic functionality that doesn't come with the vanilla Pelican. Nikola At the end of a post there should be a link to the previous and next blog posts - I was surprised this wasn't included as standard.",
          "content_length": 848,
          "content_tokens": 195,
          "embedding": []
        },
        {
          "blog_title": "Blogging with Pelican",
          "blog_url": "https://www.johnmathews.is/blog/pelican",
          "blog_date": "April 28, 2017",
          "content": "After putting the plugin in the plugins folder and updating pelicanconf.py, you need to copy a couple of jinja snippets into a template, and maybe add some css to make the links look nice. Make those images as small as possible to help make the site as fast as possible. Add the plugin, update pelicanconf.py, and thats all. Pingdom Pagespeed I'm super happy wth the websites design and speed. It's designed the way I want it, and I've learnt a ton of useful stuff along the way. here.",
          "content_length": 485,
          "content_tokens": 116,
          "embedding": []
        }
      ]
    },
    {
      "title": "Analysing a personal library",
      "url": "https://www.johnmathews.is/blog/books",
      "date": "February 01, 2017",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "Analysing a personal library",
          "blog_url": "https://www.johnmathews.is/blog/books",
          "blog_date": "February 01, 2017",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "FakeGL: A Synthetic General Ledger and Trial Balance",
      "url": "https://www.johnmathews.is/blog/fakegl",
      "date": "January 06, 2017",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "FakeGL: A Synthetic General Ledger and Trial Balance",
          "blog_url": "https://www.johnmathews.is/blog/fakegl",
          "blog_date": "January 06, 2017",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "Reconciliation of a trial balance to a general ledger",
      "url": "https://www.johnmathews.is/blog/reconciliation",
      "date": "January 03, 2017",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "Reconciliation of a trial balance to a general ledger",
          "blog_url": "https://www.johnmathews.is/blog/reconciliation",
          "blog_date": "January 03, 2017",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "Spotify song history",
      "url": "https://www.johnmathews.is/blog/spotify",
      "date": "December 22, 2016",
      "content": "",
      "length": 0,
      "tokens": 0,
      "chunks": [
        {
          "blog_title": "Spotify song history",
          "blog_url": "https://www.johnmathews.is/blog/spotify",
          "blog_date": "December 22, 2016",
          "content": "",
          "content_length": 0,
          "content_tokens": 0,
          "embedding": []
        }
      ]
    },
    {
      "title": "Vim!",
      "url": "https://www.johnmathews.is/blog/vim",
      "date": "December 01, 2016",
      "content": "Vim is a text editor renowned for its efficiency and its use of keyboard shortcuts. It's based on the Vi text editor from the 1970's. It was first released in 1991 and is still being developed today. It comes pre-installed on Unix systems (including MacOS) and can be run from the terminal. game here this interactive tutorial Vim is designed so that you don't need to take your hands off your keyboard and use a mouse. It has the 'insert' mode where you enter text as usual, and the 'command' mode where you can make use of a comprehensive and flexible shortcut language to move around, edit and search the text. With no GUI or toolbar, it's a very different approach to text editing than I'm used to. You can run Vim from the terminal, but there are also versions that run as apps. MacVim on MacOS has the option to show a tool bar of simple commands like a normal program, and lets the arrow keys move the cursor in addition to VIM's 'hjkl' functionality. This makes getting started a little simpler. This post blog post",
      "length": 1023,
      "tokens": 226,
      "chunks": [
        {
          "blog_title": "Vim!",
          "blog_url": "https://www.johnmathews.is/blog/vim",
          "blog_date": "December 01, 2016",
          "content": "Vim is a text editor renowned for its efficiency and its use of keyboard shortcuts. It's based on the Vi text editor from the 1970's. It was first released in 1991 and is still being developed today. It comes pre-installed on Unix systems (including MacOS) and can be run from the terminal. game here this interactive tutorial Vim is designed so that you don't need to take your hands off your keyboard and use a mouse. It has the 'insert' mode where you enter text as usual, and the 'command' mode where you can make use of a comprehensive and flexible shortcut language to move around, edit and search the text. With no GUI or toolbar, it's a very different approach to text editing than I'm used to. You can run Vim from the terminal, but there are also versions that run as apps. MacVim on MacOS has the option to show a tool bar of simple commands like a normal program, and lets the arrow keys move the cursor in addition to VIM's 'hjkl' functionality. This makes getting started a little simpler. This post blog post.",
          "content_length": 1023,
          "content_tokens": 227,
          "embedding": []
        }
      ]
    },
    {
      "title": "Autumn, BIN and $PATH",
      "url": "https://www.johnmathews.is/blog/autumn-bin-and-path",
      "date": "December 01, 2016",
      "content": "Two small things have been learnt recently: the importance of PATH and the contents of various BIN folders. Autumn 2016 has not gone as planned. Whilst studying for a couple of exams plans were put on hold and hobbies were ceased. Now that life is returning to normal, I have opportunity to post again. (function(){var js = \"window['__CF$cv$params']={r:'80dd0530c87cb914',t:'MTY5NTkxNDk0OS42NDgwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);\";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})(); Bin as in Binary, not Bin as in Trash. The bin folders contain binary files, which are programmes ready to be run. If I run \"echo $PATH\" from the Terminal, I see 9 folders called bin, and its only by convention that they contain binaries. They are just normal folders, which the OS is set to look in when asked to run an application. /Users/John/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/ 3.5/bin:/Users/John/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/ Library/TeX/texbin",
      "length": 1874,
      "tokens": 593,
      "chunks": [
        {
          "blog_title": "Autumn, BIN and $PATH",
          "blog_url": "https://www.johnmathews.is/blog/autumn-bin-and-path",
          "blog_date": "December 01, 2016",
          "content": "Two small things have been learnt recently: the importance of PATH and the contents of various BIN folders. Autumn 2016 has not gone as planned. Whilst studying for a couple of exams plans were put on hold and hobbies were ceased. Now that life is returning to normal, I have opportunity to post again.",
          "content_length": 302,
          "content_tokens": 61,
          "embedding": []
        },
        {
          "blog_title": "Autumn, BIN and $PATH",
          "blog_url": "https://www.johnmathews.is/blog/autumn-bin-and-path",
          "blog_date": "December 01, 2016",
          "content": "(function(){var js = \"window['__CF$cv$params']={r:'80dd0530c87cb914',t:'MTY5NTkxNDk0OS42NDgwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);\";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})(); Bin as in Binary, not Bin as in Trash.",
          "content_length": 1113,
          "content_tokens": 407,
          "embedding": []
        },
        {
          "blog_title": "Autumn, BIN and $PATH",
          "blog_url": "https://www.johnmathews.is/blog/autumn-bin-and-path",
          "blog_date": "December 01, 2016",
          "content": "The bin folders contain binary files, which are programmes ready to be run. If I run \"echo $PATH\" from the Terminal, I see 9 folders called bin, and its only by convention that they contain binaries. They are just normal folders, which the OS is set to look in when asked to run an application. /Users/John/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/ 3.5/bin:/Users/John/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/ Library/TeX/texbin.",
          "content_length": 458,
          "content_tokens": 126,
          "embedding": []
        }
      ]
    },
    {
      "title": "Introduction to my doctorate research - Silos",
      "url": "https://www.johnmathews.is/blog/silos",
      "date": "October 02, 2016",
      "content": "In this post, I want to introduce my doctorate research without assuming any engineering knowledge. From Spring 2010 until the Autumn of 2013, I was a PhD candidate living in Vienna, Austria and working at the University of Natural Resources and Life Sciences. Before working in Vienna, I completed my Masters degree in Civil and Environmental Engineering at the University of Edinburgh. thesis presentation Granular materials are a broad class of materials that are encountered everyday - salt, pills, breakfast cereal, sand, rice, soil, landslides are all granular materials. They are ubiquitous and occur in many different sizes and varieties. Silos are a common type of container for storing granular materials. You pour the granular material in from the top, store it for a while, and then dispense the material in controlled quantities from the bottom. My research focussed on quantifying how changes in gravity affected the material contained inside a silo, particularly whilst the silo was being emptied. This is pertinent because engineers and scientists do not yet have a scientific understanding of how granular materials behave. Whilst gravity clearly affects a granular materials, we cannot say exactly how. This means we can't use analytical methods to quantify the physics that occur in a real system. Instead we use empirical methods (approximations, guesses, rules-of-thumb, and knowledge of what worked in previous similar situations). This isn't necessarily bad, but it is less efficient and less reliable than an analytical approach. I built a small model silo (30cm tall) and put it into quite a large centrifuge (3 metre diameter). By rotating the model silo around the centre of the centrifuge at a constant speed I could simulate a higher gravity. I added high-speed cameras, pressure sensors and weighing scales so that I could measure how the material was moving once I opened the silo outlet and the silo began to empty. Photos of the experimental model I built can be seen below. I also programmed a computer model (using the commercial PFC 3D software and working in the FISH scripting language) to simulate and investigate if the same behaviours could be observed numerically as physically. The class of computer model I used is known as DEM (Discrete Element Modelling). These models work by considering every grain of material individually, usually as a sphere. If one sphere overlaps with another (i.e. the distance between the two particle centres is less than the sum of their radiuses) then a force proportional to the overlap size repels the two spheres away from each other. This simple approach is repeated over every grain or particle in the model, and produces life like behaviour in many situations. It has many advantages over \"continuum\" based techniques that model groups of grains as if they were all just one big particle with unusual properties. DEM has one massive limitation, though. It requires huge amounts of computational resources - and this limits its use in industrial scenarios outside. Until computers become much, much more powerful, DEM will only be used for theoretical research and niche applications. x x x ( x ) \\sqrt(x) ( ​ x ) That's good to know if you're planning on storing stuff on the moon, but it's also a useful step towards explaining exactly why bulk granular materials behave the way they do. An overview of my research, my doctorate thesis and published papers can be downloaded below. PDFs containing 3D models and movies require flash to render, and Adobe Reader Desktop must be used in order to view them. PhD Thesis (2013) Modeling silo discharge in a centrifuge (Powder Technology) Experimental investigation of flow and segregation behaviour of bulk solids in silos under high gravity conditions (Particles 2013 conference proceedings) Centrifugal modelling of granular flows (Eurofuge conference proceedings) Overview of research (PhD defence, 2013)",
      "length": 3934,
      "tokens": 783,
      "chunks": [
        {
          "blog_title": "Introduction to my doctorate research - Silos",
          "blog_url": "https://www.johnmathews.is/blog/silos",
          "blog_date": "October 02, 2016",
          "content": "In this post, I want to introduce my doctorate research without assuming any engineering knowledge. From Spring 2010 until the Autumn of 2013, I was a PhD candidate living in Vienna, Austria and working at the University of Natural Resources and Life Sciences. Before working in Vienna, I completed my Masters degree in Civil and Environmental Engineering at the University of Edinburgh. thesis presentation Granular materials are a broad class of materials that are encountered everyday - salt, pills, breakfast cereal, sand, rice, soil, landslides are all granular materials. They are ubiquitous and occur in many different sizes and varieties. Silos are a common type of container for storing granular materials. You pour the granular material in from the top, store it for a while, and then dispense the material in controlled quantities from the bottom. My research focussed on quantifying how changes in gravity affected the material contained inside a silo, particularly whilst the silo was being emptied.",
          "content_length": 1012,
          "content_tokens": 192,
          "embedding": []
        },
        {
          "blog_title": "Introduction to my doctorate research - Silos",
          "blog_url": "https://www.johnmathews.is/blog/silos",
          "blog_date": "October 02, 2016",
          "content": "This is pertinent because engineers and scientists do not yet have a scientific understanding of how granular materials behave. Whilst gravity clearly affects a granular materials, we cannot say exactly how. This means we can't use analytical methods to quantify the physics that occur in a real system. Instead we use empirical methods (approximations, guesses, rules-of-thumb, and knowledge of what worked in previous similar situations) This isn't necessarily bad, but it is less efficient and less reliable than an analytical approach. I built a small model silo (30cm tall) and put it into quite a large centrifuge (3 metre diameter) By rotating the model silo around the centre of the centrifuge at a constant speed I could simulate a higher gravity. I added high-speed cameras, pressure sensors and weighing scales so that I could measure how the material was moving once I opened the silo outlet and the silo began to empty.",
          "content_length": 932,
          "content_tokens": 191,
          "embedding": []
        },
        {
          "blog_title": "Introduction to my doctorate research - Silos",
          "blog_url": "https://www.johnmathews.is/blog/silos",
          "blog_date": "October 02, 2016",
          "content": "Photos of the experimental model I built can be seen below. I also programmed a computer model (using the commercial PFC 3D software and working in the FISH scripting language) to simulate and investigate if the same behaviours could be observed numerically as physically. The class of computer model I used is known as DEM (Discrete Element Modelling) These models work by considering every grain of material individually, usually as a sphere. If one sphere overlaps with another (i.e. the distance between the two particle centres is less than the sum of their radiuses) then a force proportional to the overlap size repels the two spheres away from each other. This simple approach is repeated over every grain or particle in the model, and produces life like behaviour in many situations. It has many advantages over \"continuum\" based techniques that model groups of grains as if they were all just one big particle with unusual properties. DEM has one massive limitation, though.",
          "content_length": 984,
          "content_tokens": 193,
          "embedding": []
        },
        {
          "blog_title": "Introduction to my doctorate research - Silos",
          "blog_url": "https://www.johnmathews.is/blog/silos",
          "blog_date": "October 02, 2016",
          "content": "It requires huge amounts of computational resources - and this limits its use in industrial scenarios outside. Until computers become much, much more powerful, DEM will only be used for theoretical research and niche applications. x x x ( x ) \\sqrt(x) ( ​ x ) That's good to know if you're planning on storing stuff on the moon, but it's also a useful step towards explaining exactly why bulk granular materials behave the way they do. An overview of my research, my doctorate thesis and published papers can be downloaded below. PDFs containing 3D models and movies require flash to render, and Adobe Reader Desktop must be used in order to view them. PhD Thesis (2013) Modeling silo discharge in a centrifuge (Powder Technology) Experimental investigation of flow and segregation behaviour of bulk solids in silos under high gravity conditions (Particles 2013 conference proceedings) Centrifugal modelling of granular flows (Eurofuge conference proceedings) Overview of research (PhD defence, 2013)",
          "content_length": 999,
          "content_tokens": 208,
          "embedding": []
        }
      ]
    },
    {
      "title": "Encryption",
      "url": "https://www.johnmathews.is/blog/encryption",
      "date": "August 31, 2016",
      "content": "1 2 shared The modern era removed the requirement for a shared secret and instead used number theory as a basis for quantifying the strength of an encryption method. The strength of a modern cryptographic technique is quantifiable and provable by reference to number theory, rather than a users ability to transport or transfer a secret code. Modern cryptography is defined by Public Key Cryptographic systems. They use one key (code) for encryption and another for decryption. The encryption key can be made public without any risk of the message being decrypted, and is therefore known as the public key. The key used to decrypt data is the private key, and must not be revealed. If a message is encrypted with the public key it can only be decrypted with the private key. Jevons \"Can the reader say what two numbers multiplied together will produce the number 8,616,460,799? I think it unlikely that anyone but myself will ever know.\"* Eratosthenes 3 RSA Factoring Challenge Generally, the bigger the difference in difficulty between executing the function and reversing it, the better the cryptographic technique. The RSA algorithm below uses factorisation as the foundation of its security, but factorisation is not the hardest problem to solve relative to the size of the keys required. Algorithms have been developed to factor the products of large prime numbers, and are much more efficient than randomly guessing possible factors. The greater the size of the primes being factored, the more efficient these algorithms become, and therefore the difference in difficulty between executing the function (multiplying two large primes) and reversing it (factorisation) becomes smaller as the size of the cryptographic key length increases. This is a problem because as public key cryptography becomes more commonly used the resources available to factor products of primes increases, and consequently larger keys are required. Ultimately, encryption techniques based on the difficulty of factorisation will become redundant as the difficulty gap between creating and solving them shrinks. A better trap door function is required. Ron Rivest Adi Shamir Leonard Adleman n n n n n n n = 10 n = 10 n = 10 7 + 5 = 12 − 10 = 2 7 + 5 = 12 - 10 = 2 7 + 5 = 12 − 10 = 2 12 / 10 = 1 12 / 10 = 1 12/10 = 1 2 2 2 p p p q q q n = p q n = pq n = pq e ( p − 1 ) ( q − 1 ) ( p - 1)( q - 1) ( p − 1 ) ( q − 1 ) ( p − 1 ) ( q − 1 ) ( p - 1)( q - 1) ( p − 1 ) ( q − 1 ) 4 ( n , e ) (n, e) ( n , e ) n n n n n n p p p q q q d d d d d d e e e ( p − 1 ) ( q − 1 ) ( p - 1)( q - 1 ) ( p − 1 ) ( q − 1 ) d d d ( p − 1 ) ( q − 1 ) ( p - 1 ) ( q - 1 ) ( p − 1 ) ( q − 1 ) 1 1 1 ( p − 1 ) ( q − 1 ) ( p - 1 ) ( q - 1 ) ( p − 1 ) ( q − 1 ) n n n n n n UTF-8 72 , 69 , 76 , 76 , 79 72, 69, 76, 76, 79 72 , 69 , 76 , 76 , 79 n n n p p p q q q p = 7 p = 7 p = 7 q = 13 q = 13 q = 13 n = 91 n = 91 n = 91 5 e e ( p − 1 ) ( q − 1 ) ( p - 1 ) ( q - 1 ) ( p − 1 ) ( q − 1 ) e = 5 = 5 = 5 Therefore our public key is (91, 5). This can be made available to anyone without messages being decrypted because of the difficulty of factoring the product of (very large) prime numbers. d d d Therefore when the prime factors 7 and 13 are used, the public key is (91, 5) and the private key is (91, 29). These parameters fully define a functional RSA system. 72 72 72 e e e e = 5 e = 5 e = 5 n = 91 n = 91 n = 91 72 × 72 = 5184 , 5184 / 91 = 56 72 \\times 72 = 5184, 5184 / 91 = 56 72 × 72 = 5184 , 5184/91 = 56 88 88 88 5184 = 91 × 56 + 88 5184 = 91 \\times 56 + 88 5184 = 91 × 56 + 88 72 × 72 = 5184 = 88 72 \\times 72 = 5184 = 88 72 × 72 = 5184 = 88 88 × 72 = 6336 = 57 88 \\times 72 = 6336 = 57 88 × 72 = 6336 = 57 57 × 72 = 4104 = 9 57 \\times 72 = 4104 = 9 57 × 72 = 4104 = 9 9 × 72 = 648 = 11 9 \\times 72 = 648 = 11 9 × 72 = 648 = 11 11 11 11 Using the method for each character in the message \"HELLO\" results in the encoded message \"$11,62,20,20,53$\". d d d d = 29 d=29 d = 29 91 91 91 11 × 11 = 121 = 30 11 \\times 11 = 121 = 30 11 × 11 = 121 = 30 30 × 11 = 330 = 57 30 \\times 11 = 330 = 57 30 × 11 = 330 = 57 57 × 11 = 627 = 81 57 \\times 11 = 627 = 81 57 × 11 = 627 = 81 81 × 11 = 891 = 72 81 \\times 11 = 891 = 72 81 × 11 = 891 = 72 And we're back to our original encoding. here here here here ↩ A = 1 , B = 2 A=1, B=2 A = 1 , B = 2 ↩ sieving algorithm ↩ ↩ here here ↩",
      "length": 4331,
      "tokens": 1260,
      "chunks": [
        {
          "blog_title": "Encryption",
          "blog_url": "https://www.johnmathews.is/blog/encryption",
          "blog_date": "August 31, 2016",
          "content": "1 2 shared The modern era removed the requirement for a shared secret and instead used number theory as a basis for quantifying the strength of an encryption method. The strength of a modern cryptographic technique is quantifiable and provable by reference to number theory, rather than a users ability to transport or transfer a secret code. Modern cryptography is defined by Public Key Cryptographic systems. They use one key (code) for encryption and another for decryption. The encryption key can be made public without any risk of the message being decrypted, and is therefore known as the public key. The key used to decrypt data is the private key, and must not be revealed. If a message is encrypted with the public key it can only be decrypted with the private key.",
          "content_length": 774,
          "content_tokens": 152,
          "embedding": []
        },
        {
          "blog_title": "Encryption",
          "blog_url": "https://www.johnmathews.is/blog/encryption",
          "blog_date": "August 31, 2016",
          "content": "Jevons \"Can the reader say what two numbers multiplied together will produce the number 8,616,460,799? I think it unlikely that anyone but myself will ever know.\"* Eratosthenes 3 RSA Factoring Challenge Generally, the bigger the difference in difficulty between executing the function and reversing it, the better the cryptographic technique. The RSA algorithm below uses factorisation as the foundation of its security, but factorisation is not the hardest problem to solve relative to the size of the keys required. Algorithms have been developed to factor the products of large prime numbers, and are much more efficient than randomly guessing possible factors. The greater the size of the primes being factored, the more efficient these algorithms become, and therefore the difference in difficulty between executing the function (multiplying two large primes) and reversing it (factorisation) becomes smaller as the size of the cryptographic key length increases. This is a problem because as public key cryptography becomes more commonly used the resources available to factor products of primes increases, and consequently larger keys are required. Ultimately, encryption techniques based on the difficulty of factorisation will become redundant as the difficulty gap between creating and solving them shrinks. A better trap door function is required.",
          "content_length": 1357,
          "content_tokens": 251,
          "embedding": []
        },
        {
          "blog_title": "Encryption",
          "blog_url": "https://www.johnmathews.is/blog/encryption",
          "blog_date": "August 31, 2016",
          "content": "Ron Rivest Adi Shamir Leonard Adleman n n n n n n n = 10 n = 10 n = 10 7 + 5 = 12 − 10 = 2 7 + 5 = 12 - 10 = 2 7 + 5 = 12 − 10 = 2 12 / 10 = 1 12 / 10 = 1 12/10 = 1 2 2 2 p p p q q q n = p q n = pq n = pq e ( p − 1 ) ( q − 1 ) ( p - 1)( q - 1) ( p − 1 ) ( q − 1 ) ( p − 1 ) ( q − 1 ) ( p - 1)( q - 1) ( p − 1 ) ( q − 1 ) 4 ( n , e ) (n, e) ( n , e ) n n n n n n p p p q q q d d d d d d e e e ( p − 1 ) ( q − 1 ) ( p - 1)( q - 1 ) ( p − 1 ) ( q − 1 ) d d d ( p − 1 ) ( q − 1 ) ( p - 1 ) ( q - 1 ) ( p − 1 ) ( q − 1 ) 1 1 1 ( p − 1 ) ( q − 1 ) ( p - 1 ) ( q - 1 ) ( p − 1 ) ( q − 1 ) n n n n n n UTF-8 72 , 69 , 76 , 76 , 79 72, 69, 76, 76, 79 72 , 69 , 76 , 76 , 79 n n n p p p q q q p = 7 p = 7 p = 7 q = 13 q = 13 q = 13 n = 91 n = 91 n = 91 5 e e ( p − 1 ) ( q − 1 ) ( p - 1 ) ( q - 1 ) ( p − 1 ) ( q − 1 ) e = 5 = 5 = 5 Therefore our public key is (91, 5) This can be made available to anyone without messages being decrypted because of the difficulty of factoring the product of (very large) prime numbers. d d d Therefore when the prime factors 7 and 13 are used, the public key is (91, 5) and the private key is (91, 29) These parameters fully define a functional RSA system.",
          "content_length": 1180,
          "content_tokens": 473,
          "embedding": []
        },
        {
          "blog_title": "Encryption",
          "blog_url": "https://www.johnmathews.is/blog/encryption",
          "blog_date": "August 31, 2016",
          "content": "72 72 72 e e e e = 5 e = 5 e = 5 n = 91 n = 91 n = 91 72 × 72 = 5184 , 5184 / 91 = 56 72 \\times 72 = 5184, 5184 / 91 = 56 72 × 72 = 5184 , 5184/91 = 56 88 88 88 5184 = 91 × 56 + 88 5184 = 91 \\times 56 + 88 5184 = 91 × 56 + 88 72 × 72 = 5184 = 88 72 \\times 72 = 5184 = 88 72 × 72 = 5184 = 88 88 × 72 = 6336 = 57 88 \\times 72 = 6336 = 57 88 × 72 = 6336 = 57 57 × 72 = 4104 = 9 57 \\times 72 = 4104 = 9 57 × 72 = 4104 = 9 9 × 72 = 648 = 11 9 \\times 72 = 648 = 11 9 × 72 = 648 = 11 11 11 11 Using the method for each character in the message \"HELLO\" results in the encoded message \"$11,62,20,20,53$\"",
          "content_length": 594,
          "content_tokens": 226,
          "embedding": []
        },
        {
          "blog_title": "Encryption",
          "blog_url": "https://www.johnmathews.is/blog/encryption",
          "blog_date": "August 31, 2016",
          "content": "d d d d = 29 d=29 d = 29 91 91 91 11 × 11 = 121 = 30 11 \\times 11 = 121 = 30 11 × 11 = 121 = 30 30 × 11 = 330 = 57 30 \\times 11 = 330 = 57 30 × 11 = 330 = 57 57 × 11 = 627 = 81 57 \\times 11 = 627 = 81 57 × 11 = 627 = 81 81 × 11 = 891 = 72 81 \\times 11 = 891 = 72 81 × 11 = 891 = 72 And we're back to our original encoding. here here here here ↩ A = 1 , B = 2 A=1, B=2 A = 1 , B = 2 ↩ sieving algorithm ↩ ↩ here here ↩",
          "content_length": 417,
          "content_tokens": 158,
          "embedding": []
        }
      ]
    },
    {
      "title": "Digital currencies: the basics",
      "url": "https://www.johnmathews.is/blog/digital-currencies-the-basics",
      "date": "August 19, 2016",
      "content": "Digital currencies are often discussed in the context of finance, technology and economics. The Blockchain - the technology which applications like Bitcoin are built on - is significant because it removes the need for trust or an intermediary between unrelated parties transacting with each other. So far, the most influential and famous digital currency is Bitcoin. This post is intended to introduce the basic concepts of digital currencies and the problems a distributed ledger system needs to overcome. A digital currency is an internet based medium of exchange. Units of digital currency are not printed, are not physical, and represent nothing. A unit of currency is produced by running algorithms to solve complex mathematical problems. When a solution is found, a unit of currency (for example, 1 Bitcoin) is generated. Because people believe that in future, other people will believe it does, and because people are willing to trade real goods and services in exchange for it. This is the same as for dollars, sterling and euros (fiat currencies) which also don't represent anything physical. (Although these examples are supported by laws or regulation). In the past, creating a new currency without the support of government hasn't been practical because: A central bank was required to control the physical creation of new currency (otherwise people would create counterfeit currency, decreasing scarcity and moving its value towards zero) An intermediary (a bank) was required for all large or remote transactions, to make sure that the amount of money each party owns is correctly recorded and updated in a ledger (preventing double spending of funds) The technological breakthrough was preventing double spending without requiring an intermediary. This is made possible by using cryptographic techniques developed over the last few decades, and cheap, powerful computers which have only recently become available. With conventional currencies everyone's balance and transactions are recorded in one central ledger (a list showing how much money each account has) and each account holder only has access to their own balance and transactions. With digital currencies, a copy of the entire ledger (every transaction ever made by everyone) is held on each computer (or node), and anyone can see everyone's transactions. Conventionally, if two parties wish to make a remote transaction then they need a bank to be the intermediary. The bank mediates by updating the central ledger to record the change in each parties funds as a result of the transaction. This is how one party knows if the counter-party is able to pay, and how payment is confirmed. If there is only one copy of the ledger, maintained by the bank, then the bank must be involved in every transaction between its account holders. This need for an intermediary increases the complexity and cost of doing business. To send money, a message is broadcast to the network that the amount in your account should decrease and the amount in another account should increase. Each computer in the network (a node) which receives this message will check its authenticity, make the changes, and pass the message along to other nodes. For a transaction to be accepted and entered into the distributed ledger, its authenticity needs to be verified. Because the ledger is distributed, everyone can see everyone else's transactions. Therefore user authentication and transaction authorisation needs to be possible without compromising a user's ability to send secure payments in future. There is also the problem of double spending - because the currency is neither physical, printed or representative of anything, how do you prevent a user from spending their currency more than once, or simply creating as much new currency as they want? 1 this paper ↩",
      "length": 3815,
      "tokens": 698,
      "chunks": [
        {
          "blog_title": "Digital currencies: the basics",
          "blog_url": "https://www.johnmathews.is/blog/digital-currencies-the-basics",
          "blog_date": "August 19, 2016",
          "content": "Digital currencies are often discussed in the context of finance, technology and economics. The Blockchain - the technology which applications like Bitcoin are built on - is significant because it removes the need for trust or an intermediary between unrelated parties transacting with each other. So far, the most influential and famous digital currency is Bitcoin. This post is intended to introduce the basic concepts of digital currencies and the problems a distributed ledger system needs to overcome. A digital currency is an internet based medium of exchange. Units of digital currency are not printed, are not physical, and represent nothing. A unit of currency is produced by running algorithms to solve complex mathematical problems. When a solution is found, a unit of currency (for example, 1 Bitcoin) is generated. Because people believe that in future, other people will believe it does, and because people are willing to trade real goods and services in exchange for it.",
          "content_length": 985,
          "content_tokens": 177,
          "embedding": []
        },
        {
          "blog_title": "Digital currencies: the basics",
          "blog_url": "https://www.johnmathews.is/blog/digital-currencies-the-basics",
          "blog_date": "August 19, 2016",
          "content": "This is the same as for dollars, sterling and euros (fiat currencies) which also don't represent anything physical. (Although these examples are supported by laws or regulation) In the past, creating a new currency without the support of government hasn't been practical because: A central bank was required to control the physical creation of new currency (otherwise people would create counterfeit currency, decreasing scarcity and moving its value towards zero) An intermediary (a bank) was required for all large or remote transactions, to make sure that the amount of money each party owns is correctly recorded and updated in a ledger (preventing double spending of funds) The technological breakthrough was preventing double spending without requiring an intermediary. This is made possible by using cryptographic techniques developed over the last few decades, and cheap, powerful computers which have only recently become available.",
          "content_length": 941,
          "content_tokens": 167,
          "embedding": []
        },
        {
          "blog_title": "Digital currencies: the basics",
          "blog_url": "https://www.johnmathews.is/blog/digital-currencies-the-basics",
          "blog_date": "August 19, 2016",
          "content": "With conventional currencies everyone's balance and transactions are recorded in one central ledger (a list showing how much money each account has) and each account holder only has access to their own balance and transactions. With digital currencies, a copy of the entire ledger (every transaction ever made by everyone) is held on each computer (or node), and anyone can see everyone's transactions. Conventionally, if two parties wish to make a remote transaction then they need a bank to be the intermediary. The bank mediates by updating the central ledger to record the change in each parties funds as a result of the transaction. This is how one party knows if the counter-party is able to pay, and how payment is confirmed. If there is only one copy of the ledger, maintained by the bank, then the bank must be involved in every transaction between its account holders. This need for an intermediary increases the complexity and cost of doing business.",
          "content_length": 961,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Digital currencies: the basics",
          "blog_url": "https://www.johnmathews.is/blog/digital-currencies-the-basics",
          "blog_date": "August 19, 2016",
          "content": "To send money, a message is broadcast to the network that the amount in your account should decrease and the amount in another account should increase. Each computer in the network (a node) which receives this message will check its authenticity, make the changes, and pass the message along to other nodes. For a transaction to be accepted and entered into the distributed ledger, its authenticity needs to be verified. Because the ledger is distributed, everyone can see everyone else's transactions. Therefore user authentication and transaction authorisation needs to be possible without compromising a user's ability to send secure payments in future. There is also the problem of double spending - because the currency is neither physical, printed or representative of anything, how do you prevent a user from spending their currency more than once, or simply creating as much new currency as they want? 1 this paper ↩",
          "content_length": 924,
          "content_tokens": 169,
          "embedding": []
        }
      ]
    },
    {
      "title": "Spare time",
      "url": "https://www.johnmathews.is/blog/spare-time",
      "date": "August 13, 2016",
      "content": "This is a list of interests I want to consider pursuing. I wrote it when I began to study for my last set of exams and my mind filled with things I'd rather be doing instead. Some of these interests are just me reacting to having no spare time for a few months, but others are decent goals and projects. Temporarily losing my spare time made me value it more. I wrote this post so that I could compare what I thought was important when I was busy to when I wasn't. Writing the list allowed me to move on without forgetting. Here's a break down of each item: \"Run 10k in 50 minutes\" - This is easier than I imagined. When I wrote the list I could barely run 2k without stopping, but intended to go for a weekly run whilst studying. I've struggled to stay energetic and healthy during previous exam phases, so now I have a rule that I must do some mild exercise even if I think I can't spare the time. I find running really lowers my stress levels, and increasing my heart rate and working up a sweat lets me sleep better and concentrate for longer. After a few weeks of minimal running, I could run 5k easily. If I kept at it, 10k in 50 mins would be easy. But point 2... \"Be Insanity strong\" - As in, do the Insanity workout programme. Again. I thought about it and decided to do P90x instead. Week 1 is going great. \"Read the bible habitually\" - When I was 17 I found out about Jesus and became a Christian. In the months and years after that I'd regularly read my bible almost every day and pray a lot. I wanted to understand, so I set a goal of 5 chapters each day. this sermon It's now 10 years later, and whilst my convictions are strong, my knowledge of the bible is sadly pretty fuzzy. My thinking is clouded by the perspectives contained in the media I consume and the conversations I'm part of. I strongly suspect I would be acting and thinking differently if I read my bible more, but I don't know what those differences would be. Trouble is, it's often not obvious what the immediate benefits of reading the bible are, you have to work for it a bit. Praying for help is effective. The books in the bible were written to last through the ages and across all cultures, so it's not surprising that they're not as easy to read as something written for an English speaker in a hurry. I should stop being in a hurry, and stop prioritising only quantifiable goals. \"Think more\" - On a similar note to 3, but less supernatural. If I spent less time consuming content and a little more looking around me or walking, I reckon I'd be more self-aware and make better decisions. This would probably lead to a happier, more satisfying life. \"Pray more\" - I don't know why, but the creator of the universe wants me to talk and share my life with him. He cares about me. This makes no sense to me, at all. If I was God, I would not go out of my way to consider the views and concerns of a very flawed human. But when I pray, my prayers are very often answered. I should ask him about this. \"Amazon seller?\" - Amazon have this \"Fulfilled by Amazon\" service, which means you don't even need to hold the stock you want to sell. If I choose the right products, import them cheaply from China and reselling them on Amazon at a profit, I end up quids in for minimal effort and manageable risk. Sounds intriguing. blog \"Finish Coursera\" - The data science specialization is great! It's in R, and I want to focus on Python, but I'd still like to do it. I need to consider the opportunity cost of the time committed, though. Savage Continent Read for fiction... I'm unconvinced. What do you have at the end of it? What can you do with it? Maybe I've just been reading the wrong authors, but I'm going to leave this for now. Sure, you could gain an appreciation of a different time or place, but that appreciation comes via the fictional characters and events, its secondary. What about abstract constructs, perspectives, morals... things that history books are ill-suited for? Great fiction would be essential for exploring these. But for now, I'll prioritise point 3. \"Do a photography project\" - This I would love to do, but probably won't. It would be a luxury, and the opportunity cost would be too great right now. I'd like to shoot a series of black and white portraits, and turn them into large prints. I think good portrait photography is uniquely impactful and moving, choosing B&W removes distractions and leaves a subjects humanity more exposed. \"Have a list of business/product ideas\" - There's no excuse for this one, anyone can have several good ideas. It's turning them into reality that takes skill. Need to have the ideas first, though. \"Do a law MOOC\" - i.e Study particular areas of law, in my own time and at my own pace. I studied a tiny bit of law during the ACA, and realised employment law or contract law could be really useful. (Same for the tax system - another surprise). We only had a brief introduction though, so if I could find the time I'd like to know more. \"Do an InfoSec or Network Security MOOC\" - Its super interesting, but not likely to be a good use of time. Georges St-Pierre \"Get out of London\" - My contract ends in April 2017, next summer will be a crossroads. I hate the commute, I hate being constantly rushed. Living in other cities has been a lot more pleasant.",
      "length": 5295,
      "tokens": 1198,
      "chunks": [
        {
          "blog_title": "Spare time",
          "blog_url": "https://www.johnmathews.is/blog/spare-time",
          "blog_date": "August 13, 2016",
          "content": "This is a list of interests I want to consider pursuing. I wrote it when I began to study for my last set of exams and my mind filled with things I'd rather be doing instead. Some of these interests are just me reacting to having no spare time for a few months, but others are decent goals and projects. Temporarily losing my spare time made me value it more. I wrote this post so that I could compare what I thought was important when I was busy to when I wasn't. Writing the list allowed me to move on without forgetting. Here's a break down of each item: \"Run 10k in 50 minutes\" - This is easier than I imagined. When I wrote the list I could barely run 2k without stopping, but intended to go for a weekly run whilst studying. I've struggled to stay energetic and healthy during previous exam phases, so now I have a rule that I must do some mild exercise even if I think I can't spare the time.",
          "content_length": 899,
          "content_tokens": 200,
          "embedding": []
        },
        {
          "blog_title": "Spare time",
          "blog_url": "https://www.johnmathews.is/blog/spare-time",
          "blog_date": "August 13, 2016",
          "content": "I find running really lowers my stress levels, and increasing my heart rate and working up a sweat lets me sleep better and concentrate for longer. After a few weeks of minimal running, I could run 5k easily. If I kept at it, 10k in 50 mins would be easy. But point 2.. \"Be Insanity strong\" - As in, do the Insanity workout programme. Again. I thought about it and decided to do P90x instead. Week 1 is going great. \"Read the bible habitually\" - When I was 17 I found out about Jesus and became a Christian. In the months and years after that I'd regularly read my bible almost every day and pray a lot. I wanted to understand, so I set a goal of 5 chapters each day. this sermon It's now 10 years later, and whilst my convictions are strong, my knowledge of the bible is sadly pretty fuzzy.",
          "content_length": 791,
          "content_tokens": 185,
          "embedding": []
        },
        {
          "blog_title": "Spare time",
          "blog_url": "https://www.johnmathews.is/blog/spare-time",
          "blog_date": "August 13, 2016",
          "content": "My thinking is clouded by the perspectives contained in the media I consume and the conversations I'm part of. I strongly suspect I would be acting and thinking differently if I read my bible more, but I don't know what those differences would be. Trouble is, it's often not obvious what the immediate benefits of reading the bible are, you have to work for it a bit. Praying for help is effective. The books in the bible were written to last through the ages and across all cultures, so it's not surprising that they're not as easy to read as something written for an English speaker in a hurry. I should stop being in a hurry, and stop prioritising only quantifiable goals. \"Think more\" - On a similar note to 3, but less supernatural. If I spent less time consuming content and a little more looking around me or walking, I reckon I'd be more self-aware and make better decisions.",
          "content_length": 883,
          "content_tokens": 189,
          "embedding": []
        },
        {
          "blog_title": "Spare time",
          "blog_url": "https://www.johnmathews.is/blog/spare-time",
          "blog_date": "August 13, 2016",
          "content": "This would probably lead to a happier, more satisfying life. \"Pray more\" - I don't know why, but the creator of the universe wants me to talk and share my life with him. He cares about me. This makes no sense to me, at all. If I was God, I would not go out of my way to consider the views and concerns of a very flawed human. But when I pray, my prayers are very often answered. I should ask him about this. \"Amazon seller?\" - Amazon have this \"Fulfilled by Amazon\" service, which means you don't even need to hold the stock you want to sell. If I choose the right products, import them cheaply from China and reselling them on Amazon at a profit, I end up quids in for minimal effort and manageable risk. Sounds intriguing.",
          "content_length": 724,
          "content_tokens": 171,
          "embedding": []
        },
        {
          "blog_title": "Spare time",
          "blog_url": "https://www.johnmathews.is/blog/spare-time",
          "blog_date": "August 13, 2016",
          "content": "blog \"Finish Coursera\" - The data science specialization is great! It's in R, and I want to focus on Python, but I'd still like to do it. I need to consider the opportunity cost of the time committed, though. Savage Continent Read for fiction.. I'm unconvinced. What do you have at the end of it? What can you do with it? Maybe I've just been reading the wrong authors, but I'm going to leave this for now. Sure, you could gain an appreciation of a different time or place, but that appreciation comes via the fictional characters and events, its secondary. What about abstract constructs, perspectives, morals.. things that history books are ill-suited for? Great fiction would be essential for exploring these. But for now, I'll prioritise point 3. \"Do a photography project\" - This I would love to do, but probably won't.",
          "content_length": 824,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Spare time",
          "blog_url": "https://www.johnmathews.is/blog/spare-time",
          "blog_date": "August 13, 2016",
          "content": "It would be a luxury, and the opportunity cost would be too great right now. I'd like to shoot a series of black and white portraits, and turn them into large prints. I think good portrait photography is uniquely impactful and moving, choosing B&W removes distractions and leaves a subjects humanity more exposed. \"Have a list of business/product ideas\" - There's no excuse for this one, anyone can have several good ideas. It's turning them into reality that takes skill. Need to have the ideas first, though. \"Do a law MOOC\" - i.e Study particular areas of law, in my own time and at my own pace. I studied a tiny bit of law during the ACA, and realised employment law or contract law could be really useful. (Same for the tax system - another surprise) We only had a brief introduction though, so if I could find the time I'd like to know more. \"Do an InfoSec or Network Security MOOC\" - Its super interesting, but not likely to be a good use of time. Georges St-Pierre \"Get out of London\" - My contract ends in April 2017, next summer will be a crossroads. I hate the commute, I hate being constantly rushed. Living in other cities has been a lot more pleasant.",
          "content_length": 1164,
          "content_tokens": 266,
          "embedding": []
        }
      ]
    },
    {
      "title": "Übersicht widget: Time Until",
      "url": "https://www.johnmathews.is/blog/time-until",
      "date": "August 07, 2016",
      "content": "previous post Übersicht Time Since Seeing a few people download the widget was really satisfying, and I was soon wondering what else I could publish. As a pragmatic engineer, it seemed clear to me what the next widget should do: If my first widget calculated the time since an event, the next should calculate the time until an event. I set out to create the companion to \"Time Since\" and improve upon the underlying code. My first code design choice was to cut out the use of an Apple Script and calculated everything in one CoffeeScript file. It would be more efficient and easier to read. Unfortunately I soon began to realise why the original widget I'd based \"Time Since\" on had used AppleScript to calculate the time elapsed. Date-Times are fiddly to work with in many languages, and this is true in JavaScript also. My code began to look increasingly like spaghetti as I tried to achieve 6 key features: Calculate the number of months and days between two dates (complicated by the varying number of days in different months) Add the option to specify the level of detail in the output text (to the minute, to the hour, to the day, etc.) Remove any 0 amounts from the output (\"2 Months and 5 Hours\" not \"2 Months, 0 Days and 5 Hours\") Add the option to abbreviate times ('years' → 'y', 'hours' → 'h', 'and' → '&', etc.) Output a grammatically correct sentence (correct pluralisation and comma separated terms, with an \"and\" between the last two terms) Prepend and append users defined strings After a few frustrating hours, it was clear that it would be a lot easier to modify the existing AppleScript rather than reinvent the wheel in JavaScript. I decided to use it instead of using only JavaScript as I knew the AppleScript file could correctly consider the number of days in the months between the 2 dates (feature 1), and it contains a function to pluralise the correct parts of the string (feature 5). The remaining features were added by using a combination of if statements and arrays. The if statements simply ask if an amount is equal to zero. If not, then it's appended to an array of terms to include in the output. At the end of this code chunk it's possible to ask how many non-zero terms to include in the output. An array with length one less than the number of output terms is created and filled with commas with an 'and' in the final position. The two arrays are combined in the correct order by looping through the index of the longer array and appending each term to a final array. The final array is the output. Time Until Übersicht widgets gallery",
      "length": 2576,
      "tokens": 554,
      "chunks": [
        {
          "blog_title": "Übersicht widget: Time Until",
          "blog_url": "https://www.johnmathews.is/blog/time-until",
          "blog_date": "August 07, 2016",
          "content": "previous post Übersicht Time Since Seeing a few people download the widget was really satisfying, and I was soon wondering what else I could publish. As a pragmatic engineer, it seemed clear to me what the next widget should do: If my first widget calculated the time since an event, the next should calculate the time until an event. I set out to create the companion to \"Time Since\" and improve upon the underlying code. My first code design choice was to cut out the use of an Apple Script and calculated everything in one CoffeeScript file. It would be more efficient and easier to read. Unfortunately I soon began to realise why the original widget I'd based \"Time Since\" on had used AppleScript to calculate the time elapsed. Date-Times are fiddly to work with in many languages, and this is true in JavaScript also.",
          "content_length": 822,
          "content_tokens": 171,
          "embedding": []
        },
        {
          "blog_title": "Übersicht widget: Time Until",
          "blog_url": "https://www.johnmathews.is/blog/time-until",
          "blog_date": "August 07, 2016",
          "content": "My code began to look increasingly like spaghetti as I tried to achieve 6 key features: Calculate the number of months and days between two dates (complicated by the varying number of days in different months) Add the option to specify the level of detail in the output text (to the minute, to the hour, to the day, etc.) Remove any 0 amounts from the output (\"2 Months and 5 Hours\" not \"2 Months, 0 Days and 5 Hours\") Add the option to abbreviate times ('years' → 'y', 'hours' → 'h', 'and' → '&', etc.) Output a grammatically correct sentence (correct pluralisation and comma separated terms, with an \"and\" between the last two terms) Prepend and append users defined strings After a few frustrating hours, it was clear that it would be a lot easier to modify the existing AppleScript rather than reinvent the wheel in JavaScript.",
          "content_length": 831,
          "content_tokens": 187,
          "embedding": []
        },
        {
          "blog_title": "Übersicht widget: Time Until",
          "blog_url": "https://www.johnmathews.is/blog/time-until",
          "blog_date": "August 07, 2016",
          "content": "I decided to use it instead of using only JavaScript as I knew the AppleScript file could correctly consider the number of days in the months between the 2 dates (feature 1), and it contains a function to pluralise the correct parts of the string (feature 5) The remaining features were added by using a combination of if statements and arrays. The if statements simply ask if an amount is equal to zero. If not, then it's appended to an array of terms to include in the output. At the end of this code chunk it's possible to ask how many non-zero terms to include in the output. An array with length one less than the number of output terms is created and filled with commas with an 'and' in the final position. The two arrays are combined in the correct order by looping through the index of the longer array and appending each term to a final array. The final array is the output. Time Until Übersicht widgets gallery.",
          "content_length": 921,
          "content_tokens": 197,
          "embedding": []
        }
      ]
    },
    {
      "title": "How to wake up early",
      "url": "https://www.johnmathews.is/blog/how-to-wake-up-early",
      "date": "August 07, 2016",
      "content": "1 Many famous leaders and politicians are known to start their days early, and I would like to be able to do this too. After years of trying and failing, I have had a break-through. The secret of waking up early is this: Become a parent. After the first couple of months with a new-born: You will be well-practiced at quickly waking up at previously unthinkable times You will be used to operating on less sleep than you ever thought possible Your beautiful child will become a reliable alarm clock, waking you up at the crack of dawn with cute smiles and increasingly insistent demands that you get up, play and make breakfast. ↩",
      "length": 630,
      "tokens": 133,
      "chunks": [
        {
          "blog_title": "How to wake up early",
          "blog_url": "https://www.johnmathews.is/blog/how-to-wake-up-early",
          "blog_date": "August 07, 2016",
          "content": "1 Many famous leaders and politicians are known to start their days early, and I would like to be able to do this too. After years of trying and failing, I have had a break-through. The secret of waking up early is this: Become a parent. After the first couple of months with a new-born: You will be well-practiced at quickly waking up at previously unthinkable times You will be used to operating on less sleep than you ever thought possible Your beautiful child will become a reliable alarm clock, waking you up at the crack of dawn with cute smiles and increasingly insistent demands that you get up, play and make breakfast. ↩",
          "content_length": 630,
          "content_tokens": 133,
          "embedding": []
        }
      ]
    },
    {
      "title": "Jupyter (iPython) notebooks + Pandas",
      "url": "https://www.johnmathews.is/blog/Jupyter-ipython-notebooks-pandas",
      "date": "August 03, 2016",
      "content": "When working with more data than can fit in an Excel file, or when you want to be sure the data won't be edited, you usually need to interact with the data by writing scripts. One of the biggest time sinks (for me) when working with these tools (ACL, SQL, Python) is debugging, and working out exactly where in the chain of individual commands something unexpected happened. Even with only a modest page of code, I can quickly find myself rerunning the entire script multiple times and commenting-out and uncommenting multiple lines in order to understand what's really going on. If you have a time consuming task at the start of your script, such as a summarise and sort command, the extra time required can be even greater. This leads to interrupted flow and concentration. Pandas is a python package to manipulate large datasets, the Jupyter notebook is an application which allows the user to run a python script in chunks, and output the results of each chunk before continuing. You can re-run a previous chunk without returning to the beginning, and change the code as you go along. This is amazingly flexible and intuitive. Pandas from the ground up github",
      "length": 1163,
      "tokens": 240,
      "chunks": [
        {
          "blog_title": "Jupyter (iPython) notebooks + Pandas",
          "blog_url": "https://www.johnmathews.is/blog/Jupyter-ipython-notebooks-pandas",
          "blog_date": "August 03, 2016",
          "content": "When working with more data than can fit in an Excel file, or when you want to be sure the data won't be edited, you usually need to interact with the data by writing scripts. One of the biggest time sinks (for me) when working with these tools (ACL, SQL, Python) is debugging, and working out exactly where in the chain of individual commands something unexpected happened. Even with only a modest page of code, I can quickly find myself rerunning the entire script multiple times and commenting-out and uncommenting multiple lines in order to understand what's really going on. If you have a time consuming task at the start of your script, such as a summarise and sort command, the extra time required can be even greater. This leads to interrupted flow and concentration. Pandas is a python package to manipulate large datasets, the Jupyter notebook is an application which allows the user to run a python script in chunks, and output the results of each chunk before continuing. You can re-run a previous chunk without returning to the beginning, and change the code as you go along. This is amazingly flexible and intuitive. Pandas from the ground up github.",
          "content_length": 1163,
          "content_tokens": 241,
          "embedding": []
        }
      ]
    },
    {
      "title": "Coursera's \"Data Science Specialisation\"",
      "url": "https://www.johnmathews.is/blog/courseras-data-science-specialisation",
      "date": "August 01, 2016",
      "content": "Last year I decided to learn the tools required to work as a data scientist. I was confident I already had the mathematical and analysis skills I needed, but I wasn't familiar with the tools of the trade. Data Science Specialisation The main downside to me is that the courses exclusively use R (which is popular in academia) and I would rather be using Python (which is more popular in Industry). Each course lasts about 3 weeks and deals with a specific aspect of data science, such as statistical inference or machine learning. Key concepts and tools in each subject are explained and developed, and whilst it's not as thorough as a longer course would be, there is more than enough material packed into the lectures, quizzes, assignments and projects to apply to real applications. I've read that the second half of the specialisation is a lot more technical than the first, so I'm looking forward to setting aside some time, working through the assignments and acquiring some useful skills!",
      "length": 995,
      "tokens": 194,
      "chunks": [
        {
          "blog_title": "Coursera's \"Data Science Specialisation\"",
          "blog_url": "https://www.johnmathews.is/blog/courseras-data-science-specialisation",
          "blog_date": "August 01, 2016",
          "content": "Last year I decided to learn the tools required to work as a data scientist. I was confident I already had the mathematical and analysis skills I needed, but I wasn't familiar with the tools of the trade. Data Science Specialisation The main downside to me is that the courses exclusively use R (which is popular in academia) and I would rather be using Python (which is more popular in Industry). Each course lasts about 3 weeks and deals with a specific aspect of data science, such as statistical inference or machine learning. Key concepts and tools in each subject are explained and developed, and whilst it's not as thorough as a longer course would be, there is more than enough material packed into the lectures, quizzes, assignments and projects to apply to real applications. I've read that the second half of the specialisation is a lot more technical than the first, so I'm looking forward to setting aside some time, working through the assignments and acquiring some useful skills!",
          "content_length": 995,
          "content_tokens": 194,
          "embedding": []
        }
      ]
    }
  ]
}

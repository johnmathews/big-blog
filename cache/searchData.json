[
  {
    "id": "1-page-marketing-plan",
    "objectID": "1-page-marketing-plan",
    "title": "The 1-Page Marketing Plan",
    "tags": "marketing,book",
    "category": "Non-technical/Entrepreneurship",
    "content": "  ## Introduction  ### Marketing has three phases  - Before (prospect) - get people to know you and indicate interest - During (lead) - get the to like you and buy from you for the first time - After (customer) - get them to trust you, buy from you regularly, and refer - new customers  Marketing is _strategy_, all the other things are _tactics_  ### Jargon free definition of marketing  - **Advertising** - The circus is coming to town, you paint a sign saying 'Circus coming to town on Saturday' - **Promotion** - Put the sign on the back of an elephant and walk it into town - **Publicity** - Walk the elephant through the mayors flower beds and let a newspaper write about it - **Public relations** - Get the mayor to laugh about it - **Sales** - the town people go to the circus, you explain how much fun the entertainment is, they buy some tickets, you answer their questions, they spend lots of money on food, games, shows. - **Marketing** is the plan that made the whole thing happen "
  },
  {
    "id": "1-peter-1-1",
    "objectID": "1-peter-1-1",
    "title": "1 Peter 1 vs 1",
    "tags": "bible",
    "category": "Non-technical/Journal",
    "content": "  People usually say that the bible is a collection of books, but some of the books are actually letters. Two of the letters were written by Peter, who was one of Jesus' disciples. '1 Peter' is the first letter.  The other numbers are the chapters and verses. They're used to divide the text so that specific parts can be referred to easily. They're not part of the original text - chapters were introduced around the 13$^{th}$ century, and verses in the 16$^{th}$ century, apparently.  $^{1}$<mark>To those who are elect exiles of the Dispersion in Pontus, Galatia, Cappadocia, Asia, and Bithynia, according to the foreknowledge of God the Father, in the sanctification of the Spirit, for obedience to Jesus Christ and for sprinkling with his blood:</mark>  <mark>May grace and peace be multiplied to you.</mark>  This is the start of a letter to a specific group of people. It's intended to be encouraging and dense from the very beginning. It is intended that the letter is remembered and paid attention to.  The sentence structure is awkward when its translated into modern English because its a translation. Presumably in the original language you could create long statements with many clauses in them and people would be comfortable with that. I'm unaware of the letter writing customs of the day, so maybe Peter is using a very normal type of introduction, or maybe he is deliberately imitating the style of a specific type of letter, or person.  The first sentence implies that exiles of the Dispersion (what dispersion? I don't know.) are not exiles by accident. Even though I bet becoming exiled felt like an unplanned interruption to their life. The first sentence says that God chose them, and that there is a purpose. There is a chain of reasoning that involves God the Father, God the Son and God the Holy Spirit - the trinity. One God in three persons... I don't get it, I can't explain it, but I'm going to try and work with this understanding.  - According to the foreknowledge of God the Father → - in the sanctification of the Spirit → - for obedience to Jesus Christ and   for sprinkling with his blood  It's like 1 and 2 are requirements for 3, because 'for' means 'the reason why something was done'.  I should find out what 'sprinkling with his blood' means, instead of guessing. Clearly its a weird and gross idea...  It means... being marked by Jesus' blood. It seems clear enough that this is the blood that was spilt when he was sacrificially murdered, and it seems that the benefit or the reason why this would be desirable is already obvious to the readers. Having Jesus' blood on you is to associate yourself with the benefits of that sacrifice as well as to count the cost of the sacrifice.  It's probably a line of reasoning that would be intuitive to believers with a Jewish background if they've previously sacrificed animals in temples during various festivals. Is this letter written to a group of believers with a Jewish (rather than gentile) background?  Back to the chain of reasoning: the foreknowledge of the Father and the sanctification of the Spirit is necessary for being associated with Jesus sacrifice and for being obedient to Jesus. That's a big conclusion from only the first sentence.  <mark>May grace and peace be multiplied to you.</mark>  I like that exhortation so much I could get it as a tattoo. Grace and Peace, better than fine dining and a comfortable bed. Also, chewing over the implications of the previous sentence is enough to cause confusion and angst - so the exhortation is well timed. Chill - even though you've been exiled, you weren't planning on being a migrant, and God planned this for you, and this is part of your necessary sanctification in order to be associated with Jesus' sacrifice - you can be full of peace, and there is lots of grace (which is forgiveness, and patience, and maybe gentleness) available to you.  Next sentence... "
  },
  {
    "id": "1-peter-1-vs-10",
    "objectID": "1-peter-1-vs-10",
    "title": "1 Peter 1 vs 10",
    "tags": "bible",
    "category": "Non-technical/Journal",
    "content": "  <mark>Concerning this salvation, the prophets who prophesied about the grace that was to be yours searched and inquired carefully, inquiring what person or time the Spirit of Christ in them was indicating when he predicted the sufferings of Christ and the subsequent glories. It was revealed to them that they were serving not themselves but you, in the things that have now been announced to you through those who preached the good news to you by the Holy Spirit sent from heaven, things into which angels long to look.</mark>  The salvation that Peter is referring to is described [previously](1-peter-1-vs-3). He was encouraging us that even though our salvation is mysterious it is very valuable, and that the inexpressible joy that we feel is not unusual or a cause for concern. Don't be uncomfortable. Grace and peace.  To encourage us even more, Peter tells us that even the prophets (he implicitly assumes his readers are familiar with the prophets, so I guess they're definitely Jewish, as guessed in the first post in this series) searched for understanding about our salvation.  They wanted to know who the Christ would be and when he would arrive. I guess they initially thought they were doing this to satisfy their own curiosity because it had to be revealed to them that this was in fact a service to the saints that would come after them.  Interestingly, it says that it was the Spirit who predicted Christ's sufferings and the following glories. I would not have expected that the Spirit of God needed to do any predicting about Christ's sufferings or glories. Are you even able to predict something if you're omnipotent?  Back to the text, Peters says that things have been announced to us via those who preached the good news to us by the Hold Spirit, who was sent from heaven.  Preaching by the power or enabling of the Holy Spirit has revealed things to us that angels long[ref]Long, or longed? I would have expected it to be 'longed to know', but its not. Does chronology get messed up from our perspective if the other party is outside of time?[/ref] to know. We don't know everything, and we still have questions, but some of our questions are answered, some of them inexpressibly, and some of the things we find mysterious or uncomfortable are supposed to be so until our salvation is complete. Grace and peace. Hang in there, you're doing ok. "
  },
  {
    "id": "1-peter-1-vs-3",
    "objectID": "1-peter-1-vs-3",
    "title": "1 Peter 1 vs 3",
    "tags": "bible",
    "category": "Non-technical/Journal",
    "content": "  <mark>May grace and peace be multiplied to you.</mark>  **Part 1:** <mark>Blessed be the God and Father of our Lord Jesus Christ! According to his great mercy, he has caused us to be born again to a living hope through the resurrection of Jesus Christ from the dead, to an inheritance that is imperishable, undefiled, and unfading, kept in heaven for you, who by God's power are being guarded through faith for a salvation ready to be revealed in the last time.</mark>  **Part 2:** <mark>In this you rejoice, through now for a little while, if necessary, you have been grieved by various trials, so that the tested genuineness of your faith - more precious that gold that perishes though it is tested by fire - may be found to result in praise and glory and honor at the revelation of Jesus Christ.</mark>  **Part 3:** <mark> Though you have not seen him, you love him. Though you do not now see him, you believe in him and rejoice with joy that is inexpressible and filled with glory, obtaining the outcome of your faith, the salvation of your souls.</mark>  I thought that writing about 1 paragraph per post would be easy, maybe even too short, but this is so dense that I'm not sure. The last three highlighted paragraphs are all one paragraph originally[ref]Originally in my English bible. Does the original text even have paragraphs?[/ref] , I've just split them up to make it easier to write about.  # Part 1  After Peter's greeting ([previous post](1-peter-1-1)), he starts his letter by praising Father God - the Lord of Lords and King of Kings. Peter says that it is by God's mercy that we have been born again, and that we are able to enjoy a living hope. As soon as Peter says this he begins to explain how, and he uses a chain or reasoning again like he did in his greeting.  I'm going to try and paraphrase in order to make the text less dense and make its meaning more obvious:  1.  Because of God's mercy, we have a hope that is alive and so significant it     is as if we have been reborn. Our life is new, reset, fundamentally     different. 1.  This is a direct result of Jesus dying and resurrecting. 1.  The living hope seems to be hoping (or trusting) in the inheritance which is     promised but not yet received. The inheritance is described as:      1. Imperishable - cannot be destroyed.     1. Undefiled - cannot be made dirty, less pure, less valuable.     1. Unfading - doesn't get old or less good as time passes. It doesn't        diminish.     1. Kept in heaven for you - deliberately reserved in heaven for you, in particular.  1.  By God's power, you are being guarded until your salvation. 1.  This protection is received via your faith. Protection comes through your     faith. Not because of it, or from it, but through it. 1.  The purpose of the protection is to keep you safe until your salvation,     which will only be revealed to you in the last time. Your salvation is     mysterious, because it hasn't been revealed yet. This last point is     itself mysterious.  # Part 2  _The tested genuineness of your faith is more precious than gold._ Not just the genuineness, integrity, or sincerity of your faith, but the tested sincerity of your faith.  This tested sincerity is more precious than gold. Your faith is contrasted with gold that will eventually decompose - even really high quality gold that is ultra refined. But your tested and sincere faith is more resilient and more valuable than gold.  The process that creates a tested and genuine faith in Jesus is therefore to be appreciated, because of the end result. If you have a living hope of an inheritance through Jesus resurrection, then rejoicing would be a good response even if it is causing you grief and many trials.  The trials and grief will ultimately result in praise and glory and honor during the revelation (revealing?) of Jesus Christ. I'm not sure if this is glory and honor for Jesus, or for the person who has a tested and genuine faith. Maybe both?  # Part 3  I don't know if this passage is instructional or reassuring, or both. I guess it's both at the same time - you should love him, even though you've never seen him. And also, don't feel uneasy about having never seen him. It's unusual to love someone you've never seen, but in this situation it's normal. Don't worry. Grace and peace.  The same goes for inexpressible joy - you're hope in Jesus, his resurrection, and your coming resurrection makes you happy in ways that you didn't expect and can't really articulate or explain - this is ok! It is more than ok - it is evidence of the sincerity and truthiness of your faith and is expected. Believing in someone you've never seen, and loving someone you've never seen is going to result in you obtaining salvation. It's unusual, and different, but don't worry. Grace and peace. "
  },
  {
    "id": "103-attempts-to-make-it-work",
    "objectID": "103-attempts-to-make-it-work",
    "title": "103 attempts to make it work",
    "tags": "python,pandas,oop",
    "category": "Technical/Data",
    "content": "  Towards the end of the fourth day, or maybe fifth, I finally figured out how to make the code do what I wanted it to do and run without errors. I found the blind-spot.  There are some take-aways about naming conventions, and how to structure a code base. I also have some thoughts about pandas. I guess the general conclusion is that with more power comes more responsibility. Code can be written in many ways, but only a few of them will let developers work as efficiently as possible.  Programming is an art and the only way to get good at writing complex code is to practice.  Also, I'd like to find a code visualization tool that can show the flow of classes and methods as they are instantiated.  ![103-attempts](/static/images/103-airflow.png) "
  },
  {
    "id": "45-years-in-software",
    "objectID": "45-years-in-software",
    "title": "Lessons from 45 years in the software industry",
    "tags": "advice",
    "category": "Technical/Engineering",
    "content": "  An [article](https://web.archive.org/web/20210527083359/https://www.bti360.com/what-ive-learned-in-45-years-in-the-software-industry/) from a recently retired software engineer about lessons learned over 4 decades.  1. Beware the curse of knowledge 2. Focus on the fundamentals; Teamwork, Trust, Testing, Communication, Code Design 3. Simplicity 4. Seek first to understand 5. Beware lock-in - cost of change, swapping problems 6. Be honest and acknowledge when you don't fit the role "
  },
  {
    "id": "9-11-and-the-american-psyche",
    "objectID": "9-11-and-the-american-psyche",
    "title": "9/11 and the American psyche",
    "tags": "history,essay",
    "category": "snippet",
    "content": "  An [essay](https://www.ft.com/content/7e50735e-17a8-4417-9d91-5db0b8ca9eed) in the FT: 'Twenty years later, the political and psychological consequences of the attack have become more intelligible'  [archive](/documents/Siri Hustvedt 9_11 and the American psyche | Financial Times.pdf) "
  },
  {
    "id": "How-I-learnt-to-code",
    "objectID": "How-I-learnt-to-code",
    "title": "How I learnt to code",
    "tags": "learning,code",
    "category": "Non-technical/Learning",
    "content": "  4 years ago I started learning how to code, and it was difficult! It still is difficult, but I now have a collection of tools and perspectives that make it less daunting. Leveling up requires one more abstraction to wrap my head around, or one more API to understand. I can do it.  But I don't think it needed to be so difficult, so now I'm building [Code School Meta](https://codeschoolmeta.com) to make it easier to learn how to code.  Learning to code has been fun, ultimately successful, and life changing (hello job security!) but at the beginning it was sooo slow, and super tricky.  Imposter syndrome is real, and I definitely felt it. I hadn't taken any classes in computer science, and I felt like I knew almost nothing about anything.  The process began with Pandas, a (_the_) Python analytics library. Spreadsheets were slowing me down at work, and I was bored. I found this [great tutorial](https://youtu.be/5JnMutdy6Fw) by Brandon Rhodes. From there I found out about Jupyter Notebooks, and then I found about Github pages and how to make a blog using [pelican](https://blog.getpelican.com/).  That led to HTML and CSS (and also JavaScript, which I tried very hard to avoid for as long as possible). I felt like a monkey bashing a keyboard as I tried to make HTML elements do what I wanted.  Unusally, I think Git was next. Mainly because I found this [amazing tutorial](git) to help me learn. It made Git seem OK, and also helped HTML and CSS make more sense too. Bonus!  I suddenly realized that great learning materials are crucial if I was going to keep momentum and keep on enjoying the thrill of seeing the computer do something I hadn't made it do before.  So now I'm now working on [Code School: Meta](https://codeschoolmeta.com). It's an online community to make it easier to teach yourself how to code - less confusion about how to get started or what to learn next, more encouragement, and lots of high quality resources.  If you'd like to know more, please [check it out](https://codeschoolmeta.com) and sign up for updates. "
  },
  {
    "id": "Jupyter-ipython-notebooks-pandas",
    "objectID": "Jupyter-ipython-notebooks-pandas",
    "title": "Jupyter (iPython) notebooks + Pandas",
    "tags": "data,jupyter notebook,pandas,python",
    "category": "Technical/Developer Tools",
    "content": "  When working with more data than can fit in an Excel file, or when you want to be sure the data won't be edited, you usually need to interact with the data by writing scripts.  One of the biggest time sinks (for me) when working with these tools (ACL, SQL, Python) is debugging, and working out exactly where in the chain of individual commands something unexpected happened. Even with only a modest page of code, I can quickly find myself rerunning the entire script multiple times and commenting-out and uncommenting multiple lines in order to understand what's really going on. If you have a time consuming task at the start of your script, such as a summarise and sort command, the extra time required can be even greater. This leads to interrupted flow and concentration.  Pandas is a python package to manipulate large datasets, the Jupyter notebook is an application which allows the user to run a python script in chunks, and output the results of each chunk before continuing. You can re-run a previous chunk without returning to the beginning, and change the code as you go along. This is amazingly flexible and intuitive.  I recently worked through an exceptionally good Pandas tutorial recorded at PyCon 2015. '[Pandas from the ground up](https://youtu.be/5JnMutdy6Fw)' is well structured, clear, has good scope and the resources are available to download from [github](https://github.com/brandon-rhodes/pycon-pandas-tutorial). Brandon Rhodes gives you a good working foundation for using Pandas and the Jupyter notebook to manipulate datasets using Python. "
  },
  {
    "id": "a-list-of-unconnected-thoughts-and-aphorisms",
    "objectID": "a-list-of-unconnected-thoughts-and-aphorisms",
    "title": "A List Of Unconnected Thoughts And Aphorisms",
    "tags": "uncategorized",
    "category": "Non-technical/Journal",
    "content": "  1.  Do the people you care about love you back?  2.  It does not matter how slowly you go as long as you do not stop.  3.  Assume that nobody is going to help you, and nobody is going to stop you.  4.  Money is (just) fuel.  5.  Lets talk about the end. My current self, existing now, is to be seen in     the context of my end, and my beginning.  6.  When you want money, ask for advice. When you want advice, ask for money.  7.  You follow the rules of war for you, not your enemy. You fight by rules to     keep your     humanity.[ref][source](https://www.globalo.com/history-wwii-charlie-brown-franz-stigler-incident/)[/ref]  8.  If you want to be a top performer in any field you must become abnormal.     Normal is average, which by definition, is far below the top! 'We can always     be average and do what’s normal. I’m not in this to do what’s normal.'     --Kobe Bryant  9.  Becoming Abnormally Good[ref][source](https://capitalandgrowth.org/answers/Article/3217401/Become-Abnormal)[/ref] at something:      - No reasonable excuses - don't make (reasonable) excuses that let you off the hook. You need the negative emotions that leads to inspired decision making.     - Not Worrying About What You Can’t Control  10. We know it's best to be genuinely friendly no matter who you're trying to     get information out of, thanks in part to the work of Hanns Scharff and a     slew of studies on interrogation     techniques[ref][source](https://psmag.com/social-justice/nazi-interrogator-revealed-value-kindness-84747)[/ref]. "
  },
  {
    "id": "a-new-blog-design",
    "objectID": "a-new-blog-design",
    "title": "A New Blog Design",
    "tags": "uncategorized",
    "category": "Technical/Web",
    "content": "  The blog has a new design! Out with the old, and in with well-written HTML, an improved CSS framework, maintainable code, dark mode, and articles with multiple categories.  This website was my first ever project using HTML and CSS, and the codebase for the original blog was terrible. It was poorly written and hard to maintain. I remember when I was first building it and trying to figure out what a `<div>` or a `<span>` really was.  At times I felt like little more than a monkey randomly bashing keys, hitting save and refreshing the browser tab. I felt guilty for spending any non-essential time away from my wife and daughter. I wondered if any benefits would actually materialize that would outweigh the costs of not rushing home to take care of a new-born and relieve a tired and stressed mum.  It took awhile, but eventually this blog became the most effective force multiplier I've ever used.  As I've learnt more about web development, the JAM stack has become increasingly intuitive and familiar. A side effect was that as I became comfortable with 'good' dev work, working with this blog's old code base became increasingly uncomfortable. I wanted to update the blog so that it would be easy and fun to use again. I want to be able to play with it quickly and efficiently.  I wasn't aiming for a radical re-design, I like that the focus is on text and I'm not exploring any on-trend design choices. I think my original design choices have held up well. I want a design that will work for many years, with templates and code that is easy and intuitive to read, and design elements that are easier to work with.  I hope that I'll be writing here more regularly over the next few months. It's been a busy year and there is lots to write about! "
  },
  {
    "id": "adding-italic-text-to-iterm2",
    "objectID": "adding-italic-text-to-iterm2",
    "title": "Adding italic text to iTerm2",
    "tags": "terminals",
    "category": "Technical/Developer Tools",
    "content": "  This [article](https://weibeld.net/terminals-and-shells/italics.html) explains how to enable italic text in iTerm2 and Tmux.  It links to [this article](https://gist.github.com/sos4nt/3187620) which suggests overriding the existing terminfo entry so that `ssh` uses the correct (new) profile by default. Otherwise you'd need to pass the correct environment along with the `SSH` command.  # iTerm2  ## Enable support for italic text  ``` Preferences > Profiles > Text > Italic text allowed ```  ## Create TERMINFO entry with italics support  1\\. Create temporary file terminfo with following content:  ``` xterm-256color-italic|xterm with 256 colors and italic,     sitm=\\E[3m, ritm=\\E[23m,     use=xterm-256color, ```  2\\. Create a new entry in the TERMINFO database  ``` tic terminfo ```  3\\. Delete the temporary terminfo file  ## Bind iTerm2 to new TERMINFO entry  _Preferences > Profiles > Terminal > Report Terminal Type: > xterm-256color-italic_  ## Test it  Close and reopen iTerm2, then try:  ``` echo `tput sitm`italics`tput ritm` ```  If the output is printed in italicised, then iTerm2 is now capable of printing italic text.  Also the below command should now output `xterm-256color-italic`  ``` echo $TERM ```  # TMUX  ## Create a new TERMINFO entry  1\\. Create temporary file terminfo with following content:  ``` tmux|tmux terminal multiplexer,     ritm=\\E[23m, rmso=\\E[27m, sitm=\\E[3m, smso=\\E[7m, Ms@,     use=xterm, use=screen,  tmux-256color|tmux with 256 colors,     use=xterm-256color, use=tmux, ```  2\\. Create new entry in the TERMINFO database:  ``` tic -x terminfo ```  3\\. Delete the temporary terminfo file.  ## Bind tmux to new TERMINFO entry  Set the following in ~/.tmux.conf:  ``` set -g default-terminal 'tmux-256color' set -as terminal-overrides ',xterm*:sitm=\\E[3m' ```  ## Test it  Close and reopen tmux, then try:  ``` echo `tput sitm`italics`tput ritm` ```  If the output is printed in italicised, then tmux is now capable of printing italic text. Furthermore:  ``` echo $TERM ```  should now output tmux-256color "
  },
  {
    "id": "adding-json-output-to-cli-app",
    "objectID": "adding-json-output-to-cli-app",
    "title": "Adding JSON output to a CLI app",
    "tags": "cli",
    "category": "snippet",
    "content": "  An [article](https://blog.kellybrazil.com/2021/12/03/tips-on-adding-json-output-to-your-cli-app/) suggesting best practices for adding JSON output to CLI apps, and mentioning why JSON output is a good idea.<br></br><br></br>  - Do Make a Schema - Do Flatten the Structure - Do Output JSON Lines for Streaming Output - Do Use Predictable Key Names - Do Pretty Print with Two Spaces or Don’t Format at All - Don’t Use Special Characters in Key Names - Don’t Allow Duplicate Keys - Don’t Use Very Large Numbers "
  },
  {
    "id": "adding-keyboard-navigation",
    "objectID": "adding-keyboard-navigation",
    "title": "Adding Keyboard Navigation",
    "tags": "blog,jam,jquery",
    "category": "snippet",
    "content": "  _I added keyboard navigation to my blog and it works really well. Now I find myself trying to use the same shortcuts on other sites._ "
  },
  {
    "id": "adding-search",
    "objectID": "adding-search",
    "title": "Adding Search",
    "tags": "blog,search,tinysearch,web",
    "category": "Technical/Web",
    "content": "  I've added search to this blog. Results are generated as you type. Try it by typing `/` or `cmd-k`.  If you look on the Pelican [plugins](https://github.com/pelican-plugins) index you'll see that [Tipue search](https://github.com/pelican-plugins/tipue-search) is the only search tool with a ready-made Pelican plugin, but unfortunately the project seems to have died and the projects [website](https://tipue.com/) is now something else.  But searching a static site must be quite a common need and googling for alternatives gave me a few choices. [Lunr.js](https://lunrjs.com/) seems to be the most popular, but it also seemed fairly complicated and like it was probably more than I needed. I went with [Tiny Search](https://github.com/tinysearch/tinysearch) because it seemed to do what I needed and was easy to setup. There's even an example for Pelican blogs.  One hurdle to success was minimising the false positives. The default settings seem to prioritise keeping the size of the index small (tiny) over giving a good user experience. Maybe its because the amount of text on my site is significanly less, or more, than the typical use case. Either way, after checking the project's issues on Github I found an issue that matched my problem perfectly. The solution is to increase the tiny_magic variable at build time.  According to the Readme, this requires using a container and building the index using `docker run...`. Unfortunately the Dockerfile wouldn't complete without errors. Checking the issues again and adding to the discussion resulted in an alternative Dockerfile being suggested, which works. Woohoo! I could then build the search index with a massive tiny_magic value (2048).  Then something weird happened. I write in Vim and I use `fzf` to find and open files. I realised that `fzf` had stopped working. After some investigating, I realised it was only not working in the blog project, and that `fzf.vim` calls the `fzf` CLI tool, which in turn calls the `ripgrep` tool. The underlying issue was that `ripgrep` wasn't working, and after a few hours (sob) of debugging, I found out that one of the things that makes `rg` special is that it ignores stuff in your .gitignore file. Sneakily, and without me noticing, the Docker image for constructing the tinysearch files had created a .gitignore file with a single entry. The entry was \\*, which selects everything. So `rg` was ignoring everything, and giving no results. Which meant I couldn't find and open files.  I still don't know how (or which part of) the Dockerfile does this, so I've created a .gitignore-master file which contains the correct content, and after I generate a new search index I replace the new traitorous .gitignore with the contents of .gitignore-master. I'll come back to it later when/if I have a better understanding of Dockerfile syntax, or Rust.  Adding search to the site made the content feel a lot closer and more accessible. Once it was working I immediately wanted to use some keyboard shortcuts to open the search box and select results. Kind of like [tailwindcss.com](https://tailwindcss.com/) does it. It feels really fast and precise.  Googling for some jquery packages, and also some vanilla javaScript showed me enough to get things working. You can hit `/` or `ctrl-k` or `cmd-k` and bring up a search box that populates results as you type!  Only whole words are matched unfortunately, but its still a super useful feature. The search index includes article content as well as article titles and categories. I'd like to tweak a few of the keyboard shortcut behaviours, and add the contents of various pages (which aren't articles) to the search index.  ## Update  I've reimplemented search using `fuse.js`. You can read about it [here]({filename}../articles/fuse.md) "
  },
  {
    "id": "aeternity-ico",
    "objectID": "aeternity-ico",
    "title": "> The Æternity ICO: My experience\n",
    "tags": "fintech,finance,digital currencies,blockchains,dlt,æternity,ico",
    "category": "Technical/Cryptocurrencies",
    "content": "  On April 3rd, I happened to be Googling digital currencies and blockchain innovations when I came across the [Æternity website](http://www.Æternity.com) and skimmed their [white paper](https://blockchain.Æternity.com/%C3%A6ternity-blockchain-whitepaper.pdf). The project is ambitious, like many crypto projects, but seems well organised. The team is well known in the space. There is a clear plan to develop the project and create a blockchain technology that, if successful, could bring. A step change in the use of digital currencies for high volume low value transactions, and the viable implementation of smart contracts.  ## The ICO  To my surprise, I realised that phase 1 of the Initial Coin Offering (ICO) was about to begin, and if I wanted I could acquire the rights to Æons (the Æternity token). During phase 1, 1 ETH would purchase 1100 Æons. In early April 2017, 1 ETH was worth about £38.  I was willing to make a small and risky investment, but in order to do that I would need to work out how to convert my conventional Sterling into Bitcoin or Ether, in order to then purchase Æons. The Æternity website made it super easy to set up an Etherium wallet, and to use that wallet to invest in the Æternity project, but buying Ether immediately and putting it in my new wallet proved to be challenging.  Helpfully, the Æternity project had partnered with the Swiss firm 'Bitcoin Suisse AG' who would directly convert to Æons from fiat currencies, cutting out the need to purchase an intermediate digital currency. However once I'd completed the identity checks and signed, scanned and sent the multiple forms, I realised I'd need to pay a 'signing on' fee of about £70. To Bitcoin Suisse' credit though, they did manually approve my identification and contract within an hour.  At the time, I thought the project would still be a good investment even with this extra cost, but I determined to exhaust all other possibilities first. I'm familiar with cryptocurrency wallets and public/private keys due to some [previous research](encryption), so I was able to immediately begin trying to set up an account with an exchange.  ## Exchanges  What followed was a fairly chaotic few hours where I would sign-up to several exchanges and see how close I could get to purchasing either Bitcoin or Ether immediately, before realising I either had to wait 48 hours for security clearances, or provide additional details, or wait for manual verification of my scanned identity documents.  By the end of the evening I had a rough idea of which usernames, passwords and (small) sterling amounts had been submitted to each exchange.  After a couple of false starts, I used a combination of the [Coinbase](https://www.coinbase.com) desktop website and their iOS app to purchase ETH up to their weekly limit, and then used multiple cards to increase my holding of ETH. The Coinbase app would bug out when processing a debit card payment and verifying the card details with the bank. This had initially led me to try other exchanges, where I would hit other roadblocks and delays. CEX.IO, for example, doesn't allow you to make trades in the first 48 hours (IIRC) after registering, which is reasonable enough unless you're in a hurry.  ## Conclusion  Once I had a few Ether to my name, the rest of the process was simple. I was delighted to visit [Etherscan.io](https://etherscan.io/) and view the details of my Etherium - Æternity transactions almost immediately. This gave me a lot of confidence that I hadn't sent money into a void, and was a nice contrast to my (successful) experience buying bitcoin in early 2014.  Finally, the simple tool to check your Æ balance at the bottom of Eternity's [contribution page](https://wallet.Æternity.com) assured me that I'd made my investment successfully. To me, the Æternity project stands as an exciting endeavor seeking to solve some widespread and highly valuable technical challenges, I hope they're successful and wish them well. "
  },
  {
    "id": "aeternity",
    "objectID": "aeternity",
    "title": "Introduction to the Æternity blockchain project",
    "tags": "æternity,dlt,digital currencies,finance,blockchains",
    "category": "Technical/Cryptocurrencies",
    "content": "  These are my notes on the æternity blockchain project, I'm not affiliated with the æternity team.  Æternity is a new blockchain project that is pre-launch. The headline goal is to securely facilitate large volumes of smart-contracts which interface with external data sources. This is made possible via a decentralised oracle based on prediction markets. These terms are explained below. The æternity project has proposed several notable technical features:  - Smart Contracts in state-channels - Oracles and native prediction markets - Governance by prediction markets - Written in Erlang - Different types of node - Sharding  ## Smart Contracts in state-channels  - A smart contract is a way to execute a contract without an intermediary (middle-man) and without conflict. - The smart contract is a protocol which is stored and executed on a blockchain, executing transactions (outputs) based on specific inputs and programmable logic automatically. The logic often mirrors that contained in clauses of a written contract. - State channels are payment networks that exchange funds off-chain and periodically settle up accounts with the main blockchain. (The Bitcoin Lightning Network is creating a system for routing Bitcoin payments through state channels.) - State channels increase scalability by making groups of transactions independent of each other. This allows them to be processed in parallel. - æternity proposes executing smart-contracts in Turing-complete state channels (Turing complete means, colloquially, real-world and general purpose), which should allow greater volumes of transactions, and make the smart contracts more secure and easier to analyse.    This is because executing the smart-contracts off-chain makes them private and the code used to execute the smart contract won’t need to be broadcast to the primary blockchain. This should increase processing capacity by allowing contracts to execute in parallel.    Disadvantages to the state-channel approach include reduced transparency, as running smart contracts in state channels requires more trust in both the contract creator and the node running it.  ## Oracles and prediction markets  - The Oracle functionality allows smart-contracts to interact with data outside the æternity blockchain. This is possible by checking on-chain prediction market results and rewarding users who made the correct prediction. Users are rewarded through automated payments and the immediate recording of transactions in the blockchain. This creates incentives to participate in prediction markets, which have been shown to be effective. - On-chain, rather than off-chain allows greater efficiency and integration - The prediction market is expected to run using a native (on-chain) consensus procedure. The oracle mechanism is designed to use the same consensus infrastructure.  ## Governance by prediction markets  - Oracle functionality compliments prediction market functionality. - Prediction markets are proposed to implement governance of the æternity blockchain. This is a new approach. - The æternity protocol would be governed by user input. A prediction market will exist where changes to features and protocols would result in a higher token value. - The incentive to increase the value of a token (Æon) would allow the æternity community to decide efficiently which changes to implement. - Low level protocol changes to variables like block times and block capacity could be possible - The consensus developed by the prediction market will initially provide input to the development team’s decision-making. - Later, a fully autonomous prediction market for governance is expected (a DAO)  ## Written in Erlang  - [Erlang](<https://en.wikipedia.org/wiki/Erlang_(programming_language)>) is normally used for large-scale systems that manage the allocation of scarce network resources (telecoms, banking, instant messaging) - Could make it easier to run a lightning network and process many state-channels in parallel - As far as I know, ÆTernity is the first blockchain project to be written in Erlang  ## Different types of node  - The æternity network will contain nodes with different functions. Each type of node will contribute towards the efficient functioning of particular aspects of the network - Node types will include   - Liquidity - Lots of channels and lots of users. Open a channel to issue a contract, for a fee.   - Exchanges - Trustless exchanges of assets offered by market makers. Profitable to market makers because of transaction fees.   - Presumably features such as consensus algorithms and prediction markets will also require their own dedicated node types. Users of the node will incur transaction fees to participate, providing an incentive to run a node.  ## Sharding  - Allows a greater transaction volume, removing scalability problems that Bitcoin and Ethereum have experienced. - Sharding works by splitting the space of possible accounts into subspaces (for example based on the first digit of a numerical address) - Each shard gets a set of validators. Each validator validates 1 shard only - Contracts and transactions within the same shard work as normal - Contracts and transactions across shards require alternative techniques based on 'transaction receipts' "
  },
  {
    "id": "alfie-solomons",
    "objectID": "alfie-solomons",
    "title": "Alfie Solomons",
    "tags": "movie,youtube,peaky-blinders,humanity",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  <IframeEmbed src='https://youtube.com/embed/PYeSSge0XEA' />  Alfie Solomons - Where the light comes in. Scenes showing the character of Alfie Solomons from Peaky Blinders.  [movie](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/Alfie-Solomons-Peaky-Blinders-Where-the-Light-Comes-in.mp4) "
  },
  {
    "id": "alias-real",
    "objectID": "alias-real",
    "title": "alias to real",
    "tags": "macos,linux,cli,bash",
    "category": "snippet",
    "content": "  Make aliased files the real file  ```bash for f in $(find . -type l -maxdepth 1);     do cp --remove-destination $(readlink $f) $f; done; ``` "
  },
  {
    "id": "alpine-js",
    "objectID": "alpine-js",
    "title": "alpine.js",
    "tags": "javascript,front-end,ui",
    "category": "snippet",
    "content": "  An introductory [article](https://www.smashingmagazine.com/2020/03/introduction-alpinejs-javascript-framework/) with examples from Smashing Magazine that introduces and explains what alpine.js is and how it is different to jQuery and vue.js. "
  },
  {
    "id": "ambitious",
    "objectID": "ambitious",
    "title": "How to be an ambitious founder in Europe",
    "tags": "lis,startup,fintech,europe",
    "category": "Non-technical/Entrepreneurship",
    "content": "  Whilst at the [Lisbon Investment Summit](http://www.lis-summit.com/) I went to a session called 'What it means to be ambitious for founders in Europe' by [Oussama Ammar](https://twitter.com/daedalium?lang=en). I've written generally about the summit [here.](lis17)  Oussama spoke with passion and humour. It's clear that he cares about encouraging would-be founders and confronting some of the cultural hurdles that exist in Europe. These are my notes from the session:  1. If you are serious about building something that matters then you have a great and exciting future ahead. 2. You can never predict who will be successful and who will fail. There are a lot of dumb successful people and clever founders can fail. 3. It's really important to learn how to leverage your time effectively. You can lose anything else and get it back but you can never recover the time you've already spent. 4. The only way to succeed is to try hard. 5. It's hard to do something that matters. 6. In Europe you need to be more ambitious than average (measured against other countries) because the environment makes it harder to be an entrepreneur. (Attitudes to risk, comfort, security, expectations of failure.. are all unhelpful for founders.) 7. It's not impossible, just harder. So be more ambitious. 8. Everyone is replaceable, no-one is unique. 9. You can always lose money and replace it. There is so much money in the world. 10. Take a look at Crunchbase and see the failure rate for companies that raised $1m - $10m, it is the same rate for those that raised $10m+. 11. If you lose money on a project you will learn things from that experience and you can leverage that learning 12. … But you will never get back the time you spent. 13. Zombies are companies that make enough money to survive but not enough to provide joy to the people in the company - aim high and… 14. Starting a company is a big deal, like starting a marriage. Think hard about what you will be doing, what problem you are trying to solve, who you will be working with. 15. In Europe there is not enough money to go around and this makes pitching hard. Silicon Valley doesn't have this problem. 16. On average a startup in Europe will raise less than a startup in the USA. 17. Europe is irrationally concerned about risk. USA is less concerned with risk and this is very helpful. 18. So be pragmatic about risk. 19. Incorporate in London where the laws are good, even if you don't want to operate in the UK. It has a better designed system of corporate law. Estonia is also good.  ## Best European city for founders  London, Paris, Berlin..  - There isn't a best city because none are holistic - London has the money - Paris has engineering and product development (and no-one outside Paris knows the products exist) - Berlin has automation and execution, execution and scaling  …You need to draw on all 3 of these cities, which when taken together can surpass Silicon Valley.  ## Anecdotes  The founder of Slack lives in Vancouver with his wife and kids. He spends 1 day each week in California and everyone thinks Slack is Californian due to good marketing. Forget national pride, be pragmatic. Leverage the internet.  The founders of Airbnb would fly from New York to California for 1 day each week. They were originally in California where AirBnB started, but decided that if they could make it work in New York then AirBnB would be a success, so they moved to New York and flew back for meetings , etc. If you ask Europeans to come to a meeting in London (which is not as far as California is from New York) people start complaining and deciding they can't be bothered. "
  },
  {
    "id": "an-incomplete-list-of-skills-senior-engineers-need",
    "objectID": "an-incomplete-list-of-skills-senior-engineers-need",
    "title": "An incomplete list of skills senior engineers need",
    "tags": "advice,management",
    "category": "Technical/Engineering",
    "content": "  This is copied from [Camille Fournier](https://skamille.medium.com/)'s article on medium. I copied it rather than linked to it because who knows if and when Medium will change the URL or put the content behind a paywall.  Highlights are simply an impulsive 'I can think about this for the next few months.' After that I might change them.  # An incomplete list of skills senior engineers need, beyond coding  ## For varying levels of seniority, from senior, to staff, and beyond.  1.  How to <mark>run a meeting</mark>, and no, being the person who talks the most in the meeting is not the same thing as running it 2.  How to <mark>write a design doc</mark>, take feedback, and drive it to resolution, in a reasonable period of time 3.  How to mentor an early-career teammate, a mid-career engineer, a new manager who needs technical advice 4.  How to indulge a senior manager who wants to talk about technical stuff that they don’t really understand, without rolling your eyes or making them feel stupid 5.  How to explain a technical concept behind closed doors to a senior person too embarrassed to openly admit that they don’t understand it 6.  How to influence another team to use your solution instead of writing their own 7.  How to get another engineer to do something for you by <mark>asking for help in a way that makes them feel appreciated</mark> 8.  How to <mark>lead a project even though you don’t manage any of the people working on the project</mark> 9.  How to get other engineers to listen to your ideas without making them feel threatened 10. How to listen to other engineers’ ideas without feeling threatened 11. How to give up your baby, that project that you built into something great, so you can do something else 12. How to teach another engineer to care about that thing you really care about (operations, correctness, testing, code quality, performance, simplicity, etc) 13. How to communicate project status to stakeholders 14. How to convince management that they need to invest in a non-trivial technical project 15. How to <mark>build software while delivering incremental value</mark> in the process 16. How to craft a project proposal, socialize it, and get buy-in to execute it 17. How to <mark>repeat yourself enough that people start to listen</mark> 18. How to pick your battles 19. How to help someone get promoted 20. How to get information about what’s really happening (how to gossip, how to network) 21. How to <mark>find interesting work on your own</mark>, instead of waiting for someone to bring it to you 22. How to tell someone they’re wrong without making them feel ashamed 23. How to take negative feedback gracefully "
  },
  {
    "id": "ansible",
    "objectID": "ansible",
    "title": "Ansible",
    "tags": "ansible,servers,ssh,automation",
    "category": "Technical/Developer Tools",
    "content": "  # Background  I've been spending a lot of time lately working on nodes for various blockchain projects (Polkadot, Cardano, Tron, Binance Chain, Ethereum, ...). The rosetta api spec is super interesting, but like most things in crypto the documentation is sometimes wrong or incomplete and there are bugs and undocumented features.  Each of the nodes runs on a separate server, and we typically have one node for mainnet and another for testnet. I'm working across mutiple servers, doing difficult stuff, and I want it to be as easy as possible.  I need to reduce friction and cognitive load.  Accessing the servers is easy - I use Tmux with the [continuum](https://github.com/tmux-plugins/tmux-continuum) and [resurrect](https://github.com/tmux-plugins/tmux-resurrect) plugins and maintain different sessions for each type of server. This makes accessing multiple servers during the same work day really simple and effortless. But working on the servers is still awkward.  On my dev machine I have `zsh` with syntax highlighting, command completion, and various tools, like [z](https://github.com/agkozak/zsh-z) to make navigation supper easy. I also have a lot of aliases defined. E.g. `..` → `cd ..`. Working on a remote server should be as convenient and familiar as working on my local machine, so I want to find a way to configure a server the same way as my laptop, and I want to do it automatically so that it can be done many times, with no additional effort.  # Ansible  Ansible seems to be popular because:  1. It's free 2. It's got all the features and capabilities you're going to need 3. It's agentless - you don't need to install anything on the machine you want    to control - you can use Ansible with anything that you can ssh into.  I used the following resources to get started:  - This [useful video](https://www.youtube.com/watch?v=w9eCU4bGgjQ) gave me some   orientation and helped me figure out what I was aiming for and how to get   started. Before watching it, I didn't know 'which way was up'.  - This [blog   post](http://matthieure.me/2018/12/31/ansible_inventory_plugin.html) showed   me how to create an inventory using the `gcp_compute` plugin.  - I spent a lot of time being unnecessarily confused about service accounts.   I guess until you have 1 success at understanding something you don't know   if you've misunderstood by a little or a lot.  - Once you have an inventory of servers that you want to connect to, you   still need to specify (and prepare for) how you will connect to them. I'd   hoped that the `gcp_compute` plugin would do some heavy lifting for me in   this step, but it seems not. It _can_ do lots of useful stuff like   creating instances and specifying disk space and networks, but it won't   really help you ssh into an instance. No matter though...  - This [blog post](https://alex.dzyoba.com/blog/gcp-ansible-service-account/)   turned out to be just what I needed. I found it at the beginning of my   search when I was trying to create an inventory, and discarded it as almost   useful. Turns out that `OS Login` is the best way to ssh into a GCE   instance and once you've got your inventory taken care of, this blog post   really helps.  When I was installing python modules, I had some errors about pyenv shims being incorrect. The scripts were looking for versions that weren't present. Running `pyenv reshash` fixed it. Kind of magically, but annoying.  Setting up a service account and giving it the correct permissions took more time and was more confusing than anything to do with Ansible.  I found this [blog post](https://www.arthurkoziel.com/setting-up-vim-for-yaml/) about setting up vim for `yml` files.  The preferred way to install ansible on Mac is using `pip`.  When you use `OS Login` the username you have when you ssh into the compute instance will change. This [SO question](https://superuser.com/questions/1379434/google-compute-engine-ssh-different-username-after-switching-to-os-login) explains why.  # Commands  - `gcloud auth list` - `ansible-config view|list|dump` - `ansible-inventory -i inventory.compute.gcp.yml --graph` - `ansible -i inventory.compute.gcp.yml all -m ping` "
  },
  {
    "id": "api-design",
    "objectID": "api-design",
    "title": "API Design Principles",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  Some super brief notes I made about API design:  ## Background  - It's more of an art than a science - RESTful (REpresentational State Transfer) API design is an architectural style. - Alternative API architectures:   - SOAP (Simple Object Access Protocol) is a heavier style.   - `GraphQL` - doesnt overfetch. Graph query language made by Facebook. - APIs are everywhere (not just web APIs). They're an [abstraction]({filename}/articles/principles-of-oop.md#2-abstraction) that hides an implementation. `Django` model managers are an API (and also part of Django's ORM), JavaScript is an API, etc.  ## RESTful APIs  - Web APIs (all REST APIs?) expose a databases to clients - A rest api is a URL route (endpoint) that returns JSON or XML. - POST, GET, PUT, PATCH, DELETE, corresponds to Create, Read, Update/Replace, Update/Modify, Delete (HTTP methods correspond to CRUD methods) - HTTP METHODS:   - PUT (create or update) is idempotent, POST is not idempotent (keep on creating, updating)   - PATCH - partial update   - GET, HEAD, OPTIONS and TRACE methods are idempotent cos they are only designed for retrieving data.   - DELETE   - HEAD - almost identical to GET, but without any body. Good for checking what a request would return, i.e. Before downloading a large amount of data,   - OPTIONS - returns data describing what other methods and operations the server supports at the given URL. More loosely defined than other verbs.  ## Qualitative Advice  - Use HTTP verbs to make requests more meaningful - Use sensible resource names. Naming things is hard, so think about this a bit   before starting.   - Use identifiers in your URLs, not the query string.     - **Good**: `/users/12345`     - **Poor**: `/api?type=user&id=23` - Use the hierarchical structure of the URL to imply the structure of the API. - Design (names and structure of things) for the user/client, not for the database.   - Resource names should be nouns not verbs   - Use plurals consistently, not collection verbiage. Good: customers/123 Bad: customer_list/123   - Use case-insensitivity.   - Use camel case or snake case consistency   - Short is better than long, but be clear   - Spend time on design before writing code - Use HTTP response codes to indicate status - Prefer JSON over XML. (Hotline does HTML..) - XML requires schemas for validation and namespaces. Don’t support this complexity at the beginning (or ever) unless required. If it is required, make the XML as similar to JSON as possible. - Put links in the HTTP link header, or use a JSON representation of this. - Use the HTTP location header to contain a link on resource creation, or for GET with pagination, use first, last, next, prev. - Connectedness - return links in the response which link to useful resources. At minimum, a link to show how the data was received, or posted. - Idempotence - clients making the same repeated requests create the same result on the server side. I.e. making repeated requests has the same result as making a similar request, server side. On the client side, a response code may change, of course. "
  },
  {
    "id": "apple-s-icloud-vpn-",
    "objectID": "apple-s-icloud-vpn-",
    "title": "Apple's iCloud+ \"VPN\"",
    "tags": "apple,onion,vpn,icloud",
    "category": "snippet",
    "content": "  [article](https://www.metzdowd.com/pipermail/cryptography/2021-June/037144.html)  'An Apple onion router. The routing uses two hops; Apple provides the first, and independent third parties (not yet specified) provide the second.'  'In one move, Apple has taken onion routing from a specialized tool for hackers to something that will be in daily use.' "
  },
  {
    "id": "arrow-syntax-in-bash",
    "objectID": "arrow-syntax-in-bash",
    "title": "Arrow syntax in bash",
    "tags": "bash,syntax",
    "category": "snippet",
    "content": "  `bar << foo` bar will stop reading input when it reached 'foo'.  `bar <<< 'foo'` foo is all the input. bar wont run interactively.  `bar < <(foo:list)` process subscription. Kind of like piping in the output of multiple commands.  [Stack Overflow](https://askubuntu.com/questions/678915/whats-the-difference-between-and-in-bash) "
  },
  {
    "id": "athletes-and-mental-health",
    "objectID": "athletes-and-mental-health",
    "title": "Athletes, Careers, and Mental Health",
    "tags": "sport,competition,comparmentalization,psychology",
    "category": "snippet",
    "content": "  Being very good at one particular thing can make it easy to be bad at normal things:  - [Getting over gold](https://davidepstein.com/getting-over-gold-athletes-and-mental-health-2/) - [Insecure Overachiever](https://www.ft.com/content/ba0c9234-a2d7-11e7-9e4f-7f5e6a7c98a2), - [Searching the FT](https://www.ft.com/search?q=insecure+overachievers) brings up several similar articles. "
  },
  {
    "id": "autumn-bin-and-path",
    "objectID": "autumn-bin-and-path",
    "title": "Autumn, BIN and $PATH",
    "tags": "unix",
    "category": "Technical/Developer Tools",
    "content": "  Two small things have been learnt recently: the importance of PATH and the contents of various BIN folders.  Autumn 2016 has not gone as planned. Whilst studying for a couple of exams plans were put on hold and hobbies were ceased. Now that life is returning to normal, I have opportunity to post again.  ## PATH  <html>&#36;</html>PATH is a variable (string) which contains a series of folder locations separated by ':'. Each of these folders contains programmes. When you type the name of a programme into terminal without specifying its location, the OS looks sequentially in each of the folder locations listed in <html>&#36;</html>PATH to see if the programme is there, and then executes it.  ## BIN  Bin as in Binary, not Bin as in Trash.  The bin folders contain binary files, which are programmes ready to be run.  If I run 'echo <html>&#36;</html>PATH' from the Terminal, I see 9 folders called bin, and its only by convention that they contain binaries. They are just normal folders, which the OS is set to look in when asked to run an application.      /Users/John/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/     3.5/bin:/Users/John/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/     Library/TeX/texbin "
  },
  {
    "id": "axiom",
    "objectID": "axiom",
    "title": "Axiom",
    "tags": "math",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  A basic statement that is assumed to be true. E.g: 'A straight line can be drawn between any two points'  <IframeEmbed src='https://www.youtube.com/embed/HeQX2HjkcNo' />  [archive](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/Math-Has-a-Fatal-Flaw_1080p.mp4) "
  },
  {
    "id": "bakkerij",
    "objectID": "bakkerij",
    "title": "Bakke-Rij",
    "tags": "coworking,netherlands,haarlem",
    "category": "Non-technical/Entrepreneurship",
    "content": "  I recently began working in a new coworking space, sharing an office unit with another entrepreneur. What makes this coworking space unique is it's conversion from an industrial bakery to a coworking space. Where the machinery once stood, converted shipping containers with glass walls have become offices for startups and freelancers.  The skylights, glass walls and bright colors create a light and airy atmosphere, and the space seems popular with designers and founders working in creative industries. It's an energetic space with a creative feel to it.  ![Bakke-Rij](/static/images/bakkerij1.jpg)  ![Bakke-Rij](/static/images/bakkerij2.jpg) "
  },
  {
    "id": "barkley-finisher-15-john-kelly",
    "objectID": "barkley-finisher-15-john-kelly",
    "title": "John Kelly finishing the 2017 Barkley Marathons.",
    "tags": "movie,running,barkley,youtube",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  The exhausted moments after running for almost 60 hours through impassable terrain:  <IframeEmbed src='https://www.youtube.com/embed/St3ZXLVhric' />  [movie](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/barkley-15.mp4) "
  },
  {
    "id": "bash-strict-mode",
    "objectID": "bash-strict-mode",
    "title": "Bash Strict Mode",
    "tags": "bash,linux",
    "category": "snippet",
    "content": "  How to write robust bash scripts:  [Bash Strict Mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) "
  },
  {
    "id": "bat",
    "objectID": "bat",
    "title": "Bat",
    "tags": "cli",
    "category": "Technical/Developer Tools",
    "content": "  [Bat](https://github.com/sharkdp/bat#adding-new-themes) is like cat, but has syntax highlighting and git integration. It integrates with all the tools, there are examples on the GitHub readme.  ## Commands:  - List languages for syntax highlighting: `bat --list-languages` - Show configuration file location: `bat --config-file` - Show configuration directory: `bat --config-dir` - List themes: `bat --list-themes` - Generate the configuration file: `bat --generate-config-file`  ## `~/.zshenv`:  ```zsh export BAT_CONFIG_PATH='$HOME/.bat.conf' ```  ## Configuration settings:  Specify the theme:  ``` --theme='Dracula' ```  Map file types to syntax:  ``` --map-syntax '.ignore:Git Ignore' --map-syntax '.py:Python' --map-syntax '.json:JSON' --map-syntax '.zsh*:Bourne Again Shell (bash)' --map-syntax '.js:JavaScript' ``` "
  },
  {
    "id": "beach-photographs",
    "objectID": "beach-photographs",
    "title": "Beach Photos",
    "tags": "uncategorized",
    "category": "Non-technical/Photographs",
    "content": "  ![tracks](/static/images/beach-photos/tracks.jpeg)]  ![tide pool](/static/images/beach-photos/tide-pool.jpeg)]  ![flat beach](/static/images/beach-photos/flat-beach.jpeg)]  ![wooden posts](/static/images/beach-photos/wooden-posts.jpeg)]  ![wind](/static/images/beach-photos/wind.jpeg)]  ![dune](/static/images/beach-photos/dune.jpeg)] "
  },
  {
    "id": "becoming-a-better-python-developer",
    "objectID": "becoming-a-better-python-developer",
    "title": "> Python: Becoming A Better Python Developer\n",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  I've been subscribed to Aaron Maxwell's 'Powerful Python' newsletter for over a year and I really like it. His emails are opinionated and candid, and singularly focussed. He seems passionate about what he does and I like that.  Ultimately, the emails are designed to drive sign-ups for his courses which I suspect would be very good, but there is a lot of value in the free emails. Thanks Aaron. I realised that the emails are sequential and each subscriber gets the same sequence of messages regardless of when they signed up. There is the 'first' message, and then the 'second', and they kind of progress and flow.  This means that there are more benefits to paying attention than for usual email subscriptions. Even though the emails arrive when I'm at a supermarket, or making dinner for my kids, it's good to try and read it properly later.  After being subscribed for several months, I unsubscribed and resubscribed. Now that I know how reliable and high quality this advice is I'm going to prioritise working through the examples and doing some of what I missed the first time. I've gone back to the beginning to reinforce the parts I know and to try again with what eluded me the first time.  Three kinds of practice projects to become a better developer:  1. A web app - use `Django` if you don't know which framework to user. Done    this. 2. A command line tool - use the `argparse` module, because it's in the standard    library. Haven't done this yet, I guess now is a good time to start. It    seems like the simplest and quickest of the three kinds of project, and I    can see how useful it could be - it lets you use the app in many different    contexts, outside the python eco-system and anywhere command line tools can    be used (everywhere). 3. A machine learning model - I've already studied this, from theory (`numpy`)    to frameworks (`tensorflow`). I'm happy to see it's included. "
  },
  {
    "id": "believe-half-",
    "objectID": "believe-half-",
    "title": "Believe half of what you see and now't of what you hear.",
    "tags": "quote",
    "category": "snippet",
    "content": "  [source](https://equalexperts.blogin.co/posts/5-minutes-with-andy-norman-data-business-analyst-ee-ukn-138307) "
  },
  {
    "id": "between-clients",
    "objectID": "between-clients",
    "title": "Between Clients",
    "tags": "freelance",
    "category": "Non-technical/Social",
    "content": "  At the end of the summer I had time between engagements to work on some side projects and grapple with some new (to me) libraries and technologies.  ### During August and September 2019, I:  1. Practiced creating websites using the [Django](https://www.djangoproject.com) web-framework  2. Investigated and demo'ed [django-plotly-dash](https://pypi.org/project/django-plotly-dash/) - a library that allows exposing [Plotly Dash](https://dash.plot.ly) apps to django projects  3. Built a personal finance dashboard using [Plotly Dash](https://dash.plot.ly) and began turning it into a web app using [Django](https://www.djangoproject.com) and [django-plotly-dash](https://pypi.org/project/django-plotly-dash/).  4. Interviewed for a role at [CoinMetrics.io](https://coinmetrics.io) and created [this investigation](https://blog.johnmathews.is/btc-fork-analysis.html) as a technical exercise.  5. Created a company '[Atlas Consulting Internatonal](https://atlasdata.nl)' to facilitate life as a freelance data scientist and consultant.  6. Spent a lot of time working at the cafe in IKEA because my co-working space wouldn't let me stay late or work on public holidays  7. Introduced myself to this [new coworking space](http://haarlemoffice.nl) and suggested we could work together to create the best tech-focussed startup hub and coworking space in the Netherlands.  8. Bought our first car. It required a lot more time and research than I expected.  9. Created [Texni Data Consultancy](http://www.texnidata.com) with Dan Caputo to provide data strategy consultancy services.  10. Built the website for [Texni Data](http://www.texnidata.com) using django and deployed it to Heroku with a custom domain name.  11. Deployed a django app to [Google Cloud Platform](https://cloud.google.com) using [App Engine](https://cloud.google.com/appengine/).  12. Created a [business website](https://johnmathews.is) to represent my work as a freelance data scientist and made my [blog](https://blog.johnmathews.is) a subdomain of this site.  13. Moved my blog off of github pages and onto [firebase](https://firebase.google.com). Thanks Github for several years of simple trouble free hosting.  14. Experimented with using storage buckets on Google Cloud Platform to host static sites and serve them over SSL. My conclusion is that serving static sites using storage buckets is great - it's simple, quick and cheap (free). But adding SSL proved too difficult. I spent too many hours trying to create a loadbalancer that would work for both the root domain [johnmathews.is](https://johnmathews.is) and also a subdomain [blog.johnmathews.is](https://blog.johnmathews.is). In the end I found out about firebase. Firebase is also quick and cheap (free) and simple enough to pick-up quickly.  15. Created a photo book using [PhotoBox](https://www.photobox.co.uk) that turned out great. It covers the last 3.5 years and is mostly full of snapshots of our kids and selfies with Ritsya.  16. Chose a primary school for my daughter to go to next year. "
  },
  {
    "id": "bifurcation-theory",
    "objectID": "bifurcation-theory",
    "title": "Bifurcation Theory",
    "tags": "math,chaos",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Rabbits, fluid convection, the Mandelbrot set and lots of others things too. Also known as bifurcation theory.  The video shows how the Feigenbaum Constant is defined. It's a fundamental constant I hadn't come across before - 4.6692..  <IframeEmbed src='https://youtube.com/embed/ovJcsL7vyrk' />  [archive](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/This-equation-will-change-how-you-see-the-world-the-logistic-map_1080p.mp4) "
  },
  {
    "id": "binance-node-api",
    "objectID": "binance-node-api",
    "title": "> Binance-Chain: Running a node\n",
    "tags": "uncategorized",
    "category": "Technical / Cryptocurrencies",
    "content": "  I've been setting up a binance-chain node. Unlike Polkadot or Cardano, I'm not going to run it from a container until it's working reliably.  The Binance [docs](https://docs.binance.org/guides/node/install.html) show a couple of ways to install a node. I used the `install.sh` script and went with default values as much as possible.  # Installation  My first attempts to sync a full node used the `install.sh` script, but the node wouldn't sync completely, it would get stuck. I setup a new VM and did a manual install ('Option Two') and so far the node has been syncing without any issues. You need to download the genesis file separately in this case. Also, be sure to download the `node-binary` repo using `git lfs` and not just `git`. It will look like it worked but `bnbchaind` wont have completely downloaded unless you use `lfs`  It took me a while to realise that the documentation assumes that you have an environment variable called `BNCHOME`. You can either create it using  ```bash export BNCHOME=/path/to/.bnbchaind/ ```  (like you would for any environment variable) or replace the environment variable in the start node command with the file path:  ```bash nohup bnbchaind start --home BNCHOME & ```  Note: I'm not sure if the `bnbchaind` needs the environment variable to be set or not. It doesn't give errors if it isn't set, but I seem to be having more success when `BNCHOME` is defined.  # Syncing the node  - There are [three ways](https://docs.binance.org/guides/node/synctypes.html) to sync a node. - Fast-sync isn't the fastest way to sync your node, hot-sync is. - Using `install.sh` _should_ put the correct default values in the `$BNCHOME/config/config.toml` file, but I needed to adjust `ping_interval` and `pong_timeout` to the recommended values.  # Surprises  The documentation assumes you have familiarity with running tasks in the background of a terminal session, and that you're familiar with `nohup`. I wasn't - I'd even forgotten what the `&` symbol does[ref]It starts a process in the background. You can move it to the foreground with `fg` or see a list of running jobs using `jobs`. You can move a running job to the background (like a vim session) using `ctrl-z`[/ref] so I did some research and wrote some [notes](nohup-and-background-processes) "
  },
  {
    "id": "bitcoin-lightning",
    "objectID": "bitcoin-lightning",
    "title": "Bitcoin Lightning",
    "tags": "bitcoin,lightning,crypto",
    "category": "Technical/Cryptocurrencies",
    "content": "  One of the largest obstacles (second only to privacy in my opinion) to widespread adoption of Bitcoin is its limited volume. Bitcoin cannot faciliate payments fast enough such that it could compete with Visa or Mastercard.  The most interesting solution to this problem is the [Lightning protocol](https://lightning.network/) - a separate protocol that sits ontop of the Bitcoin protocol (a so-called 'Layer 2' solution). Lightning uses hashed time locked contracts (HTLCs) to trustlessly and privately move transactions off-chain. This allows payments to be faster, cheaper and more frequent. It also has interesting implications for enhancing privacy.  There are a lot of resources about what the Lightning network is, why it's neccesary and how it works. There are also several good guides available about how to set up and maintain a node. I used a Raspberry Pi with an external hdd. It took a few attempts, mostly because it's my first time working with an unix operating system and I tried to move a swap file to a disk that wasnt formmated as ext4...  Anyway, I've opened and closed some channels, connected to peers, and made some transactions. I even bought some stickers using Lightning!  You can find my node using these details:  ```zsh Alias: 'johnmathews.is' Public Key: '025469b50de125b4cd97457c0da67365519f0cd0f441c2ced0978fb6ae7802ae76' IP address: 85.145.183.145 Port: 9735 ```  Some useful resources:  - [Lightning network explorer](https://explorer.acinq.co/n/025469b50de125b4cd97457c0da67365519f0cd0f441c2ced0978fb6ae7802ae76) - [Lightning node information](https://1ml.com/node/025469b50de125b4cd97457c0da67365519f0cd0f441c2ced0978fb6ae7802ae76) - [Interesting things to do](https://incoherency.co.uk/blog/stories/spelunking-ln.html) "
  },
  {
    "id": "bitcoin-vs-gold",
    "objectID": "bitcoin-vs-gold",
    "title": "Bitcoin compared to gold",
    "tags": "bitcoin,gold,safe haven",
    "category": "Technical/Cryptocurrencies",
    "content": "  A safe haven asset is something to buy during economic uncertainty. Historically, the safest asset you can buy has been gold. This is not because of anything inherently special about gold, but because that is what people believe to be the best long term method of storing value.  People believe gold is special because they assume that in future other people will believe it's special.  ### Criteria for a safe haven asset  A safe-haven asset must fulfil the following criteria:  1. Price isn't controlled by any single party, including a state or bank. The market is spread out beyond the reach of any one organisation. This is important because an asset which is issued, controlled or backed by an organisation has its value tied to the health of that organisation. 2. Supply isn't controlled by any single party, including a state, bank or anyone else - it exists naturally and the rate at which it's produced or traded is beyond the control of any one organisation. 3. Supply is limited. The effort required to create the asset naturally limits the supply. 4. The asset doesn't wear out or expire. 5. It's prohibitively expensive to fake. 6. Almost everyone considers it to be precious and valuable. 7. It can be stored and transported simply. It's not delicate or volatile.  For these reasons, and because of historical consensus, people have been happy to use gold as a store of value in times of economic uncertainty or for long durations. Other assets also meets these requirements to lesser extents.  ### Bitcoin compared to gold  Consider why gold is so good as a safe haven asset and long term value store. For all the reasons above, bitcoin is better, except one: At present, not many people consider it to be precious and valuable, so the market is small. This will change as confidence and awareness increases, and the eco-system of services and applications matures.  The fundamentals are already established:  1. A decentralised network ensures that Bitcoin can't be regulated or manipulated by any single government or organisation. The Bitcoin network can't be turned off. 2. The present and future rate of supply is publicly available and unchangeable. This increases market efficiency and creates more rational pricing than a market where the rate of supply is unverifiable. 3. Supply is naturally (mathematically) limited using proof of work algorithms. 4. Bitcoin doesn't corrode or wear out. 5. Bitcoin is impossible to fake. 6. Bitcoin can be stored and transported more easily than gold. - If you can remember 24 words then you can access your bitcoin for free from any internet connection.  ### Read more  This [article](http://www.runtogold.com/the-great-bitcoin-bull-market-of-2017/), published a week after I wrote this post, looks at different factors to consider when evaluating Bitcoin's value. It goes into a lot of detail, relative to what I've seen in other articles. "
  },
  {
    "id": "bitnation",
    "objectID": "bitnation",
    "title": "Bitnation",
    "tags": "bitnation,blockchain,disintermediation,identity,consulting,finance",
    "category": "Technical/Cryptocurrencies",
    "content": "  ### I'm Consulting  Next week I begin working with [Bitnation](http://bitnation.co) as their finance officer. I'm excited about this because I get to work on a really ambitious project using new technology to do something innovative and valuable.  ### Bitnation  Bitnation's purpose is to offer the same services as governments do, in a way that delivers more benefit to users.  In the West this may not immediately sound like a big deal. Our governments are fairly organised and the services are usually 'good enough'. Most significantly, we are not used to thinking about ID services (passports, visa, drivers licences) or registration services (land registry, marriage certificates) as a service that we are customers of - like our internet service provider, or our electricity supplier.  In many parts of the world dysfunctional or unjust governments represent a huge obstacle to improving everyday life, the progress and achievement that many people can hope to realise is limited because of this.  If there was a viable alternative to a passport from a jurisdiction renowned for forgery, or a credit rating that acknowledged your land holdings despited your governments inability to maintain a credible database, then you could begin to travel, trade and enjoy the benefits that citizens of many western states take for granted.  I'm excited that I get to use my skills in an innovative tech company that is aiming to do something really positive.  Services include secure ID systems, asset registry and dispute resolution. Identification (in particular) is an area full of problems, and blockchain tech could offer some really significant improvements. Bitnation wants to create a platform where voluntary nations can be created and administered, and where people can choose what jurisdictional system they are part of. If this is widely implemented it will be unprecedented.  Jurisdictions would offer their own services according to their own principles, and because they are easy to create and membership is voluntarily, jurisdictions would compete to attract citizens. This should lead to improvements for the users of each service, and is intended to provide an alternative to the slow, expensive and opaque processing methods commonly associated with services from geographically defined nationstates. "
  },
  {
    "id": "blockchain-introduction",
    "objectID": "blockchain-introduction",
    "title": "> Blockchains from the ground up: Part 1\n",
    "tags": "blockchains,digital currencies,distributed ledger technology,public key cryptography",
    "category": "Technical/Cryptocurrencies",
    "content": "  # How to maintain a reliable list across a small network without a central authority  This is part 1 of an introduction to the key features of a generalised blockchain. I haven't included references to Bitcoin or any particular digital currencies or blockchain implementations. This is because a digital currency is just one application of blockchain technology.  ## Create a financial document that cannot be forged or disputed  Let's imagine there is a village somewhere where people still trade by bartering. John has some apples whilst Lizzie has some oranges. John would like an orange, and offers Lizzie an apple in exchange. She accepts, and writes John a receipt.  ```objdump date: '1234' From: Lizzie To: John What: 1 Orange Price: 1 Apple ```  So far, so good. The receipt is evidence of the transaction. The next day John wants an orange but doesn't have anything to exchange. He offers to write Lizzie a note saying he owes Lizzie 1 orange (an [IOU](https://en.wikipedia.org/wiki/IOU)). They think about this and agree that John should sign the note so that Lizzie can prove that John owes her 1 orange.  ```objdump date: '1234' From: John To: Lizzie What: 1 Orange Signed: John's signature, Lizzie's signature ```  This IOU is a nice gesture, but it's simple to forge. Lizzie has the only copy of the IOU and once Lizzie has seen Johns signature, she could easily copy it and create more IOU's. She could also change this IOU from 1 orange to 11 oranges (for example) and John couldn't prove what the original amount was. If Lizzie and John disagreed over what was owed it would be impossible to know who was telling the truth. It's one person's word against the other.  Lizzie realises this and suggests an improvement - they will find a witness and make 3 copies of the IOU. Each copy will be signed by Lizzie, John and the Witness. Lets call this witness 'Walter'.  ```objdump date: '1234' From: John To: Lizzie What: 1 Orange Witness: Walter Signed: 'John's signature', 'Lizzie's signature', 'Walter's signature' ```  This is a much stronger document and is more difficult to forge. If Lizzie changes the 'What:' to '11 Oranges', both John and Walter will have copies of the original with her signature on it. It will be 2 pieces of evidence against Lizzie's 1. Lizzie will be laughed out of court. Hahaha.  3 Party transactions work pretty well, and this is how most transactions are recorded today. But there is a weakness: If Lizzie can bribe Walter then the transaction can be falsified! John would rely on Walter to verify his version of the transaction but would be let down by Walters lack of integrity. Lizzie and Walter could change 1 orange to 11 oranges and if Lizzie offered Walter some of the extra oranges this would give them both an incentive to forge the documentation. If Walter liked oranges enough, he might not care that his career as a witness will be ruined.  This is a problem for modern financial systems and a great deal of time, money and regulation is devoted to trying to ensure that third parties are trustworthy. E.G. If I buy a car and my bank is in cahoots with the car dealership, I could be defrauded. Reducing this risk to an acceptably low level makes financial services slower and more expensive than they would otherwise need to be.  The solution is [public-key infrastructure](https://en.wikipedia.org/wiki/Public-key_cryptography) (which is introduced in my [previous post](encryption)). In this system, each individual generates their own public-private key pair. They keep their private key private and make their public key freely available. A detailed description of public-key cryptography is out of scope for this post, but briefly:  A public key is derived from a private key, and this pair together have a set of unique mathematical properties. Either key can be used to encrypt a message but only the other key can be used to decrypt it. You cannot use the same key to encrypt and decrypt a message. If the private key is used to encrypt then anybody can decrypt (because the public key is publicly available) and whilst this is clearly a terrible way to keep a secret it's a great way to verify who encrypted the message, because only one person has the private key. Because of this, using a private key to encrypt a message is effectively creating a digital signature which cannot be forged. (If the public key is used to encrypt a message then only the private key can be used to decrypt it, and this approach is used to transfer secret data securely).  Back to the fruit. If Lizzie wants to accept John's IOU she can use public-key cryptography and no-one needs to worry about Walter. There are 3 steps to the transaction.  1] Create the IOU stating that John owes Lizzie 1 orange.  ```objdump date: '1234 From: John To: Lizzie What: 1 Orange' ```  2] John creates a public private key pair and encrypts the IOU using his private key. He adds an unencrypted 'From' line.  ```objdump From: John date: '1234 To: Lizzie, What: 1 Orange <- Signed and encrypted by John using his private key' ```  3] John makes his public key freely available to anyone who wants it.  This will work because anybody (not just Lizzie) can check that John signed the IOU. The transaction can be verified by looking at the 'From' part of that transaction, noticing that this transaction is supposedly from John and then using John's public key to decrypt the encoded 'signature' line.  The signature can only be decrypted using John's public key if his private key was used to encrypt it. Because John is the only person with his private key, that proves the transaction is valid, and Lizzie isn't dishonestly creating a debt for John to pay.  Clearly if John discloses his private key (or its stolen) then he will make the system insecure, but this is a problem with John and his security protocols, not with public-key cryptography.  ## Create and maintain an accurate list of transactions  So far we've seen how 1 IOU (for an orange) can be securely created, signed and verified. This process can extended to be used by more people to exchange more fruit. For example.  The original note:  ```objdump From: John date: '1234, To: Lizzie, What: 1 Orange <- Signed and encrypted by John using his private key' ```  Then some additional transactions:  ```objdump From: Lizzie // Date: 1235, To: John, What: 2 Apples <- Signed and encrypted by Lizzie using her private key From: John // Date: 1236, To: Chris, What: 1 Banana <- Signed and encrypted by John using his private key From: Chris // Date: 1237, To: Lizzie, What: 2 Bananas <- Signed and encrypted by Chris using his private key ```  After these 4 transactions, between John, Chris and Lizzie:  - John owes 1 orange to Lizzie and 1 banana to Chris - Lizzie owes 2 apples to John - Chris owes 2 bananas to Lizzie.  This is confusing, (and ridiculous). It is not possible to know who is the most in debt or who is the most wealthy. Lizzie owes 2 apples, but is owed 2 bananas and 1 apple. Does that mean her fruit business is losing money or making money? We cannot say. To be able to know we need to use the same unit of value for all the fruits. Lets say that an orange is worth 2 apples, and a banana is also worth 2 apples (therefore 1 banana = 1 orange.), also lets invent a currency called 'coins' and say 1 apple is worth 1 coin. The 4 transactions can now be rewritten as:  ```objdump From: John // Date: 1234, To: Lizzie, What: 2 coins <- Signed and encrypted by John using his private key From: Lizzie // Date: 1235, To: John, What: 2 coins <- Signed and encrypted by Lizzie using her private key From: John // Date: 1236, To: Chris, What: 2 coins <- Signed and encrypted by John using his private key From: Chris // Date: 1237, To: Lizzie, What: 4 coins <- Signed and encrypted by Chris using his private key ```  By going through the list of transactions we can see that:  - John owes Lizzie and Chris 2 coins each, and is owed 2 coins from Lizzie. His net amount is -2 - Lizzie owes John 2 coins but is owed 4 coins from Chris. Her net amount is +2 - Chris owes Lizzie 4 coins but is owed 2 coins from John. His net amount is -2  So far Lizzie is the only person who appears to have any business skills.  What if Lizzie wanted to use the 4 coins that she is owed by Chris to buy something from John? Could she use this system to transfer Chris' promise to pay her 4 coins so that Chris would pay John instead? The fact that everyone can be sure that the record of the transactions is accurate and authentic allows a debt to be used as payment. Lizzie's transaction would look like this:  ```objdump From: Lizzie // Date: 1235, To: John, What: ba781... <- Signed and encrypted by Lizzie using her private key ```  The 'What' section contains a [hash](http://www.movable-type.co.uk/scripts/sha256.html) of the original transaction (with Chris) that she wants to transfer to John. A hash is the signature for a file or some text and in this case it is the signature for Lizzie's transaction with Chris. The signature is unique to each transaction and identifies which transaction is being used as payment. Because both transactions are signed using Lizzie's private key, it is simple to verify that Lizzie has the right to use this previous transaction where she is owed (or paid) some coins as payment to another person.  This shows how public-private key infrastructure can be used to securely record transactions and enable trade between a group of people, - under certain conditions. Blockchains can be used to transfer units of value like in this example, but we could just as easily put selfies or certificates of ownership (for houses, financial instruments, diamonds, etc) inside the 'What' part of the transaction. If we make two other changes - removing the 'To' part of the transaction, and including a hash of the transaction as part of the text which is signed using a private key. If we do this, then a record would be:  ```objdump From: Chris // Date: 2345, What: 'A photo of me' <- Signed and encrypted by Chris using his private key ```  This would create a reliable record of what Chris claims he looks like. He can confidently send anyone this record and if they have his public key then they can verify that it is Chris himself who signed it and is asserting that the photo is him. If somebody changed the photo then the data in the transaction would change and the transaction will have a new hash value. The new hash value will not match the hash value contained within the signature, and the text in the signature cannot be changed because it can only be encrypted using Chris' private key, which only Chris has. Therefore it will be simple to show that someone other than Chris is trying to change the photo.  Another use for public-key cryptography arises if Chris were an employee in a bank, and the 'What' contained documents about a customer the bank is providing financial services for. In this scenario, Chris (representing the bank) is effectively confirming the customer's true identity and documenting the evidence that's been collected to show that the bank knows who their customer really is. If the transaction included a new section called 'Customer ID' (for example) then a database of all customers whose identity checks have been successfully completed can be made. This can be shared with other departments (or banks) easily and immutably. This is the concept behind KYC on a blockchain.  Back to our fruit traders: At the moment a participant is allowed to carry a net negative balance. For this system to work in reality, the creation of 'coins' will need to be controlled in order to maintain their value. In the example above, people can freely create 'coins' and can also carry negative amounts of 'coins'. This would result in the value of a 'coin' plummeting. Therefore their creation (and conversion from fruit) must be controlled in a predictable manner.  Our examples so far only include 3 people. If there are a lot of people in the network it wouldn't be feasible to insist that everyone is present or online each time a new transaction is added to the list (the chain) of transactions. However if we allow transactions to be added whilst some people are offline we create an opportunity for fraud. The reasons why, and the solution to this and other problems will be described in [part 2](blockchain-networks). "
  },
  {
    "id": "blockchain-networks",
    "objectID": "blockchain-networks",
    "title": "> Blockchains from the ground up: Part 2\n",
    "tags": "blockchains,digital currencies,distributed ledger technology,distributed consensus,sybil,",
    "category": "Technical/Cryptocurrencies",
    "content": "  ## Maintain an accurate list of transactions across a large group of users, without a central authority  This is part 2 of an introduction to the key features of a generalised blockchain. [Part 1](blockchain-introduction) introduced key features of immutable record creation between 2 parties using public key cryptography. Part 2 explores how a network of users can maintain the same (true) list of transactions and protect each other against fraud.  ## Broadcasting transactions to the network  In [Part 1](blockchain-introduction) we saw Lizzie, John and Chris exchanging coins. Lizzie also paid John with coins that were owed to her by Chris. These transactions were authenticated using PKI which:  - Ensured transaction integrity  - Prevented participants claiming that they didn't make a past transaction - Prevents anyone creating a transaction on someone else's behalf without their consent.  As the number of people in the network grows, the transfer of coins from one user to another becomes harder to track. If every users ledger is not identical then the opportunity arises to use coins that have already been spent to pay someone who doesn't know they've already been used.  This is double spending, and is possible because the ledger that is shared amongst all members of the group only has _weak consistency_ - it is not necessarily correct all the time in all locations.  ### Weak Consistency  Weak consistency could be solved by requiring that everyone votes to accept a transaction before it is accepted into the ledger (Unanimous consensus), or to save time we could reduce the requirements so that only 50% of all users validate a transaction before it is accepted into the ledger (Quorum consensus). Either of these solutions is possible for a small local group with a list of all users.  However Unanimous or Quorum Consensus doesn't solve the weak consistency problem if:  1. The group is large 2. The group is small but spread across different locations or timezones 3. It is not possible to know how many members there are and therefore what proportion of users are participating. 4. The _real_ identity of a user is unknown  In these cases a peer-to-peer network is required where transactions between users require approval by other users before being confirmed. This has not been trivial to solve, as some users would be incentivised to be dishonest, and some may make mistakes. This is the distributed consensus problem, which on [wikipedia](<https://en.wikipedia.org/wiki/Consensus_(computer_science)>) is defined as:  > The consensus problem requires agreement among a number of agents for a single data value. Some of the processes (agents) may fail or be unreliable in other ways, so consensus protocols must be fault tolerant or resilient. The processes must somehow put forth their candidate values, communicate with one another, and agree on a single consensus value.  ## Distributed Consensus  When the number and identity of participants is known, distributed consensus is possible. Two types of protocol which allows all users in a distributed system to agree on a transaction are the [Paxos](<https://en.wikipedia.org/wiki/Paxos_(computer_science)>) family of protocols and the [Two-phase commit](http://courses.cs.vt.edu/~cs5204/fall00/distributedDBMS/duckett/tpcp.html) protocol. Both of these would require that at least 50% of all users reach agreement in order to add a new transaction.  However in a public peer-to-peer network the total number of active users is not known - its fast and cheap to create new user profiles, and existing user profiles may become dormant. This makes it impossible to know how many users 50% would be. Additionally, because its possible to cheaply create new user profiles (just generate a new public-private key pair), a single actor could generate and control many user accounts in order to have many votes and force incorrect transactions onto the ledger. An attack where one user subverts a network by creating many profiles is known as a [Sybil attack](https://en.wikipedia.org/wiki/Sybil_attack).  ### Proof of Work  The solution to the Sybil attack is to increase the cost of verifying a transaction such that the cost exceeds the reward. This is achieved through proof-of-work (PoW) algorithms, which are computationally expensive for a sender claiming to have verified a transaction, and computationally simple for the receiver to verify that the sender has validated the transaction.  One possible Proof of Work approach is to require that the hash of a verification message begins with a certain set of characters. The chosen set of characters is called a _nonce_ and the only way to create a verification message with an acceptable hash is to try many slightly different messages. For example, a nonce may be 3 zeros. It's arbitrary, but the longer the nonce is the more difficult it becomes to find a hash that fits the requirements.  This is because a hash is a random list of characters, and altering even a single part of the data being hashed will result in a completely different hash value. Therefore there is no way to predict a hash value. The only way to generate a hash with the required none is to repeatedly alter the data being hashed (even by just one character) until a hash with the required features is randomly achieved. This is computationally expensive to achieve, but computationally simple to verify.  Using the method, a user who seeks to verify a transaction and broadcast the result must (once they've verified the transactions) repeatedly try different messages until they randomly find a message that meets the nonce requirements. It is simple for a user to check if a transaction verification message meets the nonce requirements, because it is simple to inspect a hash and compare it to the nonce.  The effect of this requirement is a process that makes it expensive to claim that a transaction has been verified and cheap to check that verification claim. This removes the threat of a Sybil attack, but does not remove the distributed consensus problems created by not knowing:  1. The true identity of users in the network 2. How many users exist  This problem cannot be completely solved, and the practical solution is to relax the requirements such that the probability of accepting a fraudulent transaction is lower than some user defined threshold. This is acceptable because a user would require a higher degree of confirmation for a high-value transaction than they would for a low-value transaction, and would therefore be willing to incur more time and cost to verify a high value transaction and reduce the probability of accepting an incorrect transaction below a threshold.  If a user wishes to make fast or low-value transactions, or trusts the party they're transacting with, then they may accept a transaction without any other users on the network verifying that the sender has the required funds available.  However when the senders trustworthiness is not assured, verification is required. The more risky or valuable the transaction, the more users the receiver of the funds will ask to verify that the sender has access to the required funds. The higher the number of users, the higher the probability that a dishonest transaction will be identified before being accepted.  An appropriate level of verification will depend on the amount being transferred and how well the receiver of the funds knows the sender.  ## Transaction fees  Asking peers on the network to verify transactions introduces a new problem. Verifying a transaction requires time and effort, and incurs a cost. This cost requires that network participants be rewarded for correctly verifying transactions between other participants.  An attacker would only attack if the cost is less than the reward. Therefore the number and cost of verifications required should be just enough to make the cost of an attack more than the value of the transaction.  This introduces the problem that it costs more to verify a transaction than the value of the transaction itself. It is also create the recursive problem where the users who verified the first transaction would need to verify that the payment they received was then also valid. Furthermore, a high proportion of the original transaction value is spent as a transaction fee (for verification) which is not efficient.  These problems are avoided by combining multiple transactions and verifying them at the same time, broadcasting the successful verification of multiple transactions simultaneously by grouping the transactions together into a block of transactions.  By confirming multiple transactions at once (and proving it using proof-of-work), transaction fees can be aggregated (allowing each individual fee to be much lower). Each block includes a list of verified transactions, a reference to the previous block, and a block ID.  ## Incentivised social responsibility  The transaction verification process outlined above is remarkable because it creates a demand for new participants to the network by creating a financial incentive to verify transactions. This makes the network more secure as increasing the number of participants makes a sybil attack more difficult.  ## Summary  1. Users generate new transactions and broadcast them on a peer-to-peer network for verification  2. An idle user listens for new transactions and collects them until the sum of all transactions' verification fees is greater than the cost the user will incur to verify them and meet the proof-of-work requirements  3. The idle user adds an extra transaction to their list of transactions that transfers the sum of the transaction fees to their own address.  4. The idle user generates the block of newly verified transactions, referencing the previously verified block so that transactions can be chronologically ordered and completing the proof-of-work challenge. This new block is then broadcast to the network.  5. Other users are listening for new block announcements. These users verify that the block is valid according to the proof-of-work requirements and the order of the blocks.  6. Users with unverified transactions look inside the verified block to see if their pending transactions have been accepted.  ## Competing to validate blocks of transactions  Each user can choose which transactions they verify, and how many to verify before beginning the proof-of-work requirement and hopefully collecting the transaction fees. This lack of order around transaction verification is fine because the only way to increase the probability of being the first to claim the transaction fees associated with a collection of transactions (a block) is to spend more CPU power searching for the required partial hash collision.  If two users complete a block at approximately the same time then the blockchain will look different in different parts of the network, as each completed block begins to propagate and other users accept the new block and add it to their ledger. This is ok if a rule is enforced that requires a user to always accept the longest chain of blocks.  This works because if multiple blocks are created at the same time, the time it takes to create subsequent blocks will vary due to the random behaviour of the proof-of-work algorithm. Therefore chains of different length will always exist and one version of the block chain will be longer than the others, providing a clear candidate for which branch of the blockchain to use. If there are transactions in the discarded branch which are not present in the new (longest) blockchain then they are added back into the pool of transactions awaiting verification.  ## A block of transactions in never absolutely immutable  The above procedure for verifying transactions and adding new blocks onto the chain means that even if a user inspects a new block and sees that their transaction has been verified, its possible that in the future a longer chain will be discovered (which must be accepted) which doesn't include their transaction.  Therefore any block could potentially be removed, which means a transaction is never completely verified. However the probability of a block being removed decreases as the number of blocks after it increases. This means verification can be thought of in terms of the number of blocks that have been added to the chain _after_ the block containing the transaction.  If you are willing to accept a high level of risk, or you trust the party you are transacting with you could opt for a small number of blocks to be added after the block containing your transaction. This has the benefit of increasing the speed of the transaction verification. If the transaction is risky or high-value, you might require a larger number of blocks to be added to the chain before accepting the transaction. This will increase the time required to verify the transaction, but reduce the probability that a longer chain will undo the block containing the transaction in question. "
  },
  {
    "id": "blog-post",
    "objectID": "blog-post",
    "title": "Pen-testing web apps",
    "tags": "penetration-testing,hacking,web-apps,credentials",
    "category": "snippet",
    "content": "  A [blog post](https://edbrsk.dev/content/real-cases/how-I-compromised-300-stores-and-a-spanish-consultancy) about how someone compromised a group of web apps.  It lists a series of technologies and techniques that the author uses as they progress their investigation.  These would make a useful list of things to know in order to build safe web-apps and not repeat the mistakes of the unfortunate target company. "
  },
  {
    "id": "broot",
    "objectID": "broot",
    "title": "Broot",
    "tags": "broot,macos,cli",
    "category": "snippet",
    "content": "  [Broot](https://dystroy.org/broot/) is a tool that shows the contents of a directory on one screen, even its got lots of files or sub-directories. "
  },
  {
    "id": "browser-security",
    "objectID": "browser-security",
    "title": "Browser Security",
    "tags": "xss,cors,http",
    "category": "snippet",
    "content": "  [Blog post](https://blog.vnaik.com/posts/web-attacks.html) about browser/Web-app security, including:  - CSRF - CORS - HTTP Security Headers "
  },
  {
    "id": "building-a-story-brand",
    "objectID": "building-a-story-brand",
    "title": "Building A Story Brand",
    "tags": "reading,marketing,communication,book",
    "category": "Non-technical/Learning",
    "content": "  'Building a story brand' by Donald Miller is one of the most helpful marketing books I've found. It explains why things should be done, as well as how to do them.  As an engineer I love solutions to problems that start from first principles, and this feels like that. It's strategy as well as tactics.  These are my notes on an outstanding book.  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # Premise  1. People want to <mark>survive and thrive</mark>. They are the main character    in the movie of their own life and they have problems. Life is busy and hard    and complicated and they don't want to waste energy figuring out if you can    help them. 2. Good marketing shows that the product has an <mark>obvious benefit</mark> for    the customer. How does your product improve someones ability to 'survive and    thrive'? 3. Cut through noisy and challenging world by having a super <mark>quick and    easy to understand message</mark>. Don't be clever, be clear. Don't make the    customer spend calories trying to figure out how they will benefit from your    product. 4. Stories are intuitive and leverage many psychological features. They organise    information in an intuitive way and are a great way to combat noise and gain    attention. <mark>People are compelled to pay attention until all the 'story gaps'    have been closed</mark>.  Could a caveman look at your website and answer these questions:  1. What do you **offer**? 2. How will it **improve** my life? 3. What are the **next steps**?  ### Story Gaps  - A gap between a character and what they want. Will they find their way to success, overcome their challenges, etc. - Cadence and momentum are defined by the creation and fulfillment of story gaps. - If you fail to define something that the customer wants, you fail to open a story gap. - This makes the story uninteresting because there isn't a question that requires an answer.  Story gaps work because we want things to resolve. It's like singing Twinkle Twinkle Little Star but stopping before the 'are' on the last line. You need to hear the last note of the melody for the tune to feel complete.  Pare down the customers desire to a single focus. Make your brand known for single specific desire and helping people get it.  Don't clutter the story by diluting the hero's desire with other desires. You can eventually develop subplots.  ### Apple  When Apple released the Lisa computer in 1983, Jobs bought a 9 page ad in the New York times listing the computers features. When Jobs returned to Apple after being fired, (and after partly founding Pixar, which tells stories) Apple became a customer centric company, and their marketing was about the customers. 9 pages became 2 words - 'Think Different'. A message about their customers, and their customers need to survive and thrive.  Apple isn't the hero in the 'Think Different' brand, the customer is. It's the same with Nike - the athletes are the heros, and you can become a (hero) athlete with Nike's help. Apple plays a role more like Q in James Bond, giving the hero what they need to win.  # Stories  A **Hero** → has a **Problem** → and meets a **Guide** → who gives them a **Plan** → and calls them to **Action** → that ends in **Success** → and helps them avoid **Failure**.  ![story stages](/static/images/building-a-story-brand/7storystages.png)  # Hero  The customer, not you. You are the guide. The customer is the main character in their life and is battling internal and external adversity it order to survive and thrive. Heroes have weaknesses, the guide is usually the strongest character.  A story <mark>starts with a character who wants to overcome _external_ challenges</mark> that pose _internal_ and _philosophical_ problems.  Your first task is to create a story gap that implicitly asks 'Will the hero get what they need?'  You need to define the character's ambition at the beginning, so that the audience knows what's at stake and what kind of a story it is. This messaging implicitly tells them how they could benefit and why they should spend attention.  # Problem  Customers are more motivated to solve internal problems than external.  If you <mark>identify a customer's problem then you show that you understand</mark> them. This is a great hook because they will then relate to your narrative.  <mark>The more we talk about the problems our customers are experiencing, the more interest they will have in our brand.</mark>  Every story needs a villain, which is the personified problem. The germs are personified, envy is personified, etc. The diminished social status is personified by someone with more status being villainized.  The **villain**  - should be **relatable** - readers should recognize that the villain should be disdained. - should be a **root source** - frustration is what the villain makes us feel. High taxes are the cause, and are therefore the villain. - should be **singular** - just one villain, keep it simple to cut through the noise. - should be **real** - don't be a fear monger. Fight a real problem on behalf of your customers.  There are three types of **problem**  1. **External** - A barrier to stability that must be removed - My business isn't growing fast enough, profits are too small. 2. **Internal** - I have self-doubt. Do I have what it takes to succeed? 3. **Philosophical** - I deserve to be successful, my hard work should be rewarded. Failure would be unjust.  <mark> The **villain** initiates an **external** problem that causes the **hero** to encounter an **internal** problem that is **philosophically wrong** or unjust. </mark>  The purpose of the external problem is to manifest the internal problem. Customers should recognise and relate to both types of problem.  Put your product in the context of a type of survival they they want. Otherwise there isn't a story gap. Translate the **external problem** into several survival categories:  1. **Resources** - Conserving or accumulating money or time 1. **Social** - Gaining status or a social network 1. **Generosity** - Most people are not as Darwinian as we've been led to believe, they want to be empathetic and caring 1. **Purpose** - Give customers an opportunity to be generous and participate in something greater than themselves - 'the chief desire of man is not pleasure, but meaning'.  <mark>The only reason that customers buy is because the external problem that your product would solve is causing an **internal frustration**</mark>.  If you <mark>identify and articulate that frustration</mark>, and then <mark>clearly, confidently and repeatedly offer to solve it along with the original external problem</mark> then you bond with your customer. You'll have positioned yourself more deeply into their internal narrative and substantially differentiated your brand.  **Philosophical problems** are important because people want to be involved in something larger than themselves. It adds depth and meaning. Representing (and solving) a philosophical problem gives customers a way of expressing themselves that they wouldn't otherwise have.  If you can **resolve all three problems in the same transaction**, then customers will experiences a wave of relief and pleasure, and love your brand.  When Anakin Skywalker blows up the Deathstar by aiming the perfect shot, he defeats the external problem (the enemy army), his internal problem (self doubt) and the philosophical problem (injustice).  <mark> **Your CTA is the action that must be taken to close the final story gap** </mark>  Checklist:  1. Is there a **single villain** that your brand stands against? 2. What **external problem** is that villain causing? 3. The internal problem is probably found by considering how the external problem makes your customer feel? 4. What is unjust or wrong about the suffering caused by that villain?  <mark> Our hero is being challenged - will they be able to solve their problem? The only way to find out is to engage with the brand. </mark>  # Guide  Customers aren't looking for another hero, they are the hero in their life. They are the main character which the movie of their life revolves around. They're looking for a guide because they need help.  A persons life is made up of many acts - 'doorways of no return'. Each life is unique but we all have commonalities. We are all on transformational journeys with common elements.  Story chapters are book-ended by events. These events are always instigated by external actors or events beyond their control.  Heroes need a guide who is **trustworthy** and earns **respect**. If they didn't need a guide their wouldn't be narrative, or a problem. Everyone is looking for a guide to help them solve their problems.  <mark>_We wake up each morning self-identifying as a hero. We are troubled by internal, external and philosophical issues. We know that we can't solve our issues on our own._</mark>  This insight has consequences and raises questions, it means our story isn't about us but about others. We can aspire to be someone else's guide, but not their hero. It shows why the search for meaning is innate, but can only be resolved by becoming a servant or guide.  _Stop losing sleep over the success of your company and start losing sleep over the success of your customers._  In stories, heroes are not the strongest characters, they have self-doubt and are often ill-equipped. They are often reluctant, and are thrown into the story by external events. They are 'chosen by destiny.'  In contrast, the guide has already 'been there and done that.' They have already conquered the hero's internal and philosophical challenges in their own backstory.  The guide is the one with authority which the authority instinctively recognises and accepts. The guide has much more authority than the hero but the main character is still the hero.  _Those who realize that the epic story of life is not about them end up winning in the end. This is paradoxical. Those who think they are a hero and win usually end up being remembered as a villain._  ### Characteristics of a guide  Empathy and Authority are a precise one-two punch.  #### 1. Empathy → Understanding → Trust  When we empathise with customers we show that we understand them, and understanding produces trust.  People want to be _seen, heard and understood_. This is the essence of empathy.  Key phrases in your marketing copy could be:  _we understand how it feels to ..._   _no-one should have to experience ..._   _like you, we are frustrated by ..._  Expressing empathy isn't difficult. Once you've identified your customers internal problem, let them know that you understand and would like to help them find a resolution.  Brains like to conserve calories, energy, effort, time, so when a customer realises they have a lot in common with a brand, they fill in any gaps with trust. A customer will 'batch' their thoughts, which means they are thinking in chunks rather than in details. Commonality, whether in music taste or values, is a powerful marketing tool.  #### 2. Authority  <mark> No one likes a know-it-all and no one wants to be preached at... But people _do_ want you to establish **competence**. </mark>  When looking for a guide, a hero trusts someone who has _demonstrable competence_. The guide should have some serious experience helping other heroes win their day, but doesn't need to be perfect.  There are **four ways to add authority (competence) to your marketing** without being arrogant:  1. Testimonials 2. Logos 3. Statistics 4. Awards  Meeting a brand is like meeting a person,  1. Can you help them live a **better life**? 2. Can they **associate their identity** with your brand? 3. Can I **respect** this brand? 4. Can I **trust** this brand?  # Recap  1. We started the narrative by identifying something that the hero wants. 2. Then we created intrigue and tension by defining the hero's problem. The audience wants to know if we can help them overcome the problem! 3. Then we introduced ourselves as the guide and established authority, empathy and trust.  What next? Making a purchase always involves a small risk of wasting money. This risky element makes a purchase somewhat similar to starting a relationship. There is a potential downside, the customer might end up feeling foolish and regret their decision.  Imagine a customer trying to cross a river to get to their purchase. They can hear the sound of a waterfall downstream. If they try to cross it by making a purchase then there is a chance that something bad could happen. Put stones in the river so they know how to safely walk across, step by step.  The stones are the plan.  # Plan  In a movie, the guide gives the hero a plan. The plan tightens the focus of the movie and creates a 'path of hope' for the hero that might, possibly, lead to the resolution of the hero's problems. It creates a story gap and implicitly creates questions that the audience want to be answered.  <mark> A good plan **removes risk** and **explains what to do**. </mark> If we don't guide customers, they experience a little bit of confusion and use that confusion as an excuse to not purchase.  Even though the setup or purchase or after-purchase steps are obvious to us, they are not obvious to customers. Give them a plan and they will feel more confident about purchasing.  Heroes trust a guide who has a plan. People are looking for a philosophy then can embody, or a series of steps they can take to solve their problems.  Customers want to know where you can take them. Unless you can take them somewhere they want to go, why would they listen? The marketing goal is that every potential customer knows where we want to take them. Define a desire for your customer, and your marketing story will have a powerful hook.  _There are two kinds of plan. Both work by earning trust and offering the customer a clear path to stability._  - Agreement Plan - Process Plan  ### Process Plan  The minimal (3 - 6) steps required to buy _or_ get benefit from the product after purchase, or a mixture of both. E.g.  1. Make an appointment. 2. Allow us to create a customized plan. 3. Let's execute the plan together.  A process plan removes confusion from the customers journey. When they see the plan they think 'oh that's not difficult, I can do that' and then they purchase.  A post-purchase process plan would alleviate confusion about how the customer would _use_ the product.  ### Agreement Plan  Agreement plans are about <mark>alleviating fears</mark>. It's a list of agreements you make with the customer that are designed to alleviate their fears of doing business with you.  An agreement plan can also work to <mark>highlight shared values</mark>.  _Give the agreement plan a good name and it can increase the perceived value of your product. 'the easy-installation plan', 'your best nights sleep ever', etc._  Agreement plans can work in the background, they don't have to be on the landing page, though they could be.  Make an agreement plan by creating a list of all the things a customer could be fearful about when doing business with you (haggling for price, interacting with a pushy salesman, buying a defective product) and then create an promise that would nullify that fear.  # A Call To Action  So far, we've defined a **desire**, identified their **challenges**, **empathized** with them, established our **competency** and given them a **plan**.  **Heroes only take action when challenged by an external force.** They don't take action by themselves, they _must_ be challenged. This is just how humans are.  We are the external force that guides our customers to success.  Heroes need to be challenged by external forces. Calls to action should be clear, and should be repeated over and over. Above the fold, in the center of the page. Also in the navbar. And also repeatedly as they scroll down the page.  Customers are bombarded with adverts and calls-to-action all day every day. They are ignoring things and filtering out noise all the time. So don't be shy or subtle. Be very clear. Make it very simple. If you have confidence in your product, make confident calls to action.  ### Direct Calls  - Buy Now - Schedule an Appointment - Order Now - Call Today - Register Today  Repeat the same (singular, simple) call to action again and again down the page.  ### Transitional Calls  - Download our free PDF guide to growing your business - Free information - advice, guides, whitepapers, reports - Giving something away for free - Testimonials - Samples - Free-trials  <mark>A good transitional CTA does three things:</mark>  1. Changes the customers perception of you - it establishes your expertise and authority. 2. Creates reciprocity, you offer them something of value before you ask for their money. 3. Positions you as a guide for the next steps.  Use both types of CTA (direct and transitional) in your messaging. Then customers will understand (simply and without burning calories) what you want them to do in order to solve their problems.  # What is at stake?  Stories live and die by a single question; 'What is at stake?' <mark>If nothing is about to be gained or lost then nobody cares.</mark> If there is nothing at stake in the story then there is no story, it's just not interesting.  If there is no benefit to buying the product, then why buy it?  <mark>You have to show the customer the cost of _not buying_ the product.</mark>  # Avoid Failure  The story remains interesting as long as the hero is teetering on the edge between success and failure. **A hero in a story only ever has 2 motivations - to escape pain or experience something good. Life is like that too, our desire to avoid pain motivates us to make a change.**  There needs to be meaningful and consequential stakes in the story, otherwise it isn't interesting. Each scene needs to move the hero either closer to or further from their tragic external threat.  <mark>A brand needs to answer the 'what if I don't buy' question</mark> otherwise the customer can't answer the 'so what?' question - the stakes need to be clearly, simply, concisely communicated. Probably stake, not stakes.  You can do it humorously or lightly. Don't make a big negative scary thing out of it - failure is salt to add flavor, not a main marketing ingredient. Compare the fear to the peace and stability that could be achieved. If you show the pain 'before' and contrast it to peace and stability 'after' then you've opened and closed a story loop.  Blog titles, email subjects, headlines, can all contain elements of potential failure to convey a sense of urgency. Bring up the negative stakes a bit.  People fear losing &#36;100 more than they desire gaining &#36;100 - loss and pain is more motivating than reward and peace.  ### Recipe  1. **Let the reader know they are vulnerable to a threat. 'X% of Y get W'** 2. **Let the reader know that since they _are_ vulnerable, they should take action    to reduce their vulnerability. 'Make sure this doesnt happen and protect    yourself'** 3. **Give the customer a clear, concise simple plan to reduce their    vulnerability. 'We offer the thing you need'** 4. **Challenge people to take the next step right now. The CTA. 'Call us today to    arrange an appointment'**  Agitate a bit of fear, and then return the reader to peace and prosperity, all within 1 or 2 paragraphs.  <mark>_What are you helping your customers avoid?_</mark>  It's only a little salt to add flavor. If it's too little, customers won't know why your product is important. If it's too strong it'll be off-putting.  # End with Success  <mark>Humans are looking for resolution to their external, internal and philosophical problems. They can achieve this though status, self-realization, self-acceptance, and transcendence (among other things).</mark>  If you product or service can help people achieve this then it should be a central part of your brand promise.  People want to change their lives and be taken into a new reality. Tell them how their lives are going to improve - peace, status, confidence, abilities, preparedness.  People want a vision of a happy ending. Compare these two statements: _'We're going to put a man on the moon'_ or _'We would like a highly competitive and successful space program'_  Use this table to show how your customer's lives will change. It will give lots of good copy for your marketing:  |                            | Before your brand | After your brand | | -------------------------- | ----------------- | ---------------- | | What do they have?         |                   |                  | | What are they feeling?     |                   |                  | | What's an average day like |                   |                  | | What is their status?      |                   |                  |  Talk about the end vision really clearly. And use images of happy, successful, powerful people enjoying the benefits of your product. Say the benefits loudly, confidently, clearly, simply, repeatedly.  Talk about your end-vision for their lives once they've benefited from your service.  Show the customer a vision of how great their life will be if they do business with you.  <mark>Ultimately, the end of the story should be a list of resolutions to your customers problems. How do they feel and how have philosophical/justice questions been resolved?</mark>  Stories usually end in one of three ways:  1. The hero **gains status** or power    - Offer access - get a free coffee.    - Offer a premium - skip the line.    - Create scarcity - write 'limited' on it.    - Identity association - wear a Rolex and be associated with what Rolex stands for. 2. The hero **becomes whole** by being unified with someone    - The hero needed something they couldn't get themselves, and external provision has saved them.    - Reduced anxiety, or more security.    - Reduces effort, or more convenience.    - More time, reaches an aspirational lifestyle. 3. The hero has some internal realisation (coming of age) that gives them    **confidence to overcome** their circumstances or internal shortcomings and become 'whole' and wise.    They can achieve inner peace and know they reached their potential.    - Inspiration - chariots of fire - you can also run really fast    - Acceptance - fashion brands doing positive body image    - Transcendence - greater purpose and meaning - fair-trade coffee  # People want your brand to participate in their transformation  A hero needs someone else to step into their life, tell them they are different and special and better. That someone is a guide, that's you.  Offering an aspirational identity to our customers adds a lot of value to our products and services. Realise that your customers want to transform and improve themselves.  **People are looking for a guide**. Everybody wants to change either into someone better or someone more self-accepting. You are helping them become wiser, fitter, more equipped, accepted or peaceful.  **What does the customer want to become?**  - what is their aspirational identity? - what kind of person do they want to be? - How do they want their friends to talk about them?  Being a guide is a position of the heart, not just a marketing tactic. Lose sleep over your customers problems instead of your business. Commit to solving their internal, external and philosophical problems, and give them a vision to aspire to.  Customers needs to be told very clearly how much other customers have changed and how far journey has taken them. Usually, the hero is deeply flawed right up until the final climactic scene.  Not all elements of a story should be used evenly.  # Implementation  ## Websites  - Above the fold, use the one-liner. It's one sentence saying what's in it for the customer. What   problem do you solve, what aspirational identity do you offer. It will also   give customers words they can use to tell others about your business. - Big obvious calls to action, in multiple places. Don't be timid. - Customers read in a Z shape. - People don't read websites, they scan them. Repeat the important things   so that they are understood by quick readers. Use very few words.   - The fewer words you use, the more likely they will be read.   - Perhaps 10 sentences on the entire landing page   - Increase the amount of text towards the bottom. The top needs to be short,     fast, positive and obvious.   - Use a 'read more' button to expand longer text, then customers have the     option if they want. - Place a transitional call to action next to the main call to action. 'Download   a guide' next to 'buy now'. Put the transitional CTA in less bright colors. - Repeatedly ask people to buy, twice above the fold and then in subsequent   sections. If you don't tell people what to do then they won't do it. - Include images of success - people enjoying the benefits - resolved problems,   aspirations achieved, closed story loops. A sense of health, well-being and   satisfaction. - The flow of the landing page should follow the StoryBrand framework, albeit   not exactly.  ## Corporations  Not applicable, but if you're a manager and you give your team a narrative they can fit themselves into I guess they're going to have more purpose, confidence and meaning.  # Marketing Road-map  ### Five steps, expanded below:  1. Create a _one-liner_. Say how can you make their lives better in an engaging    way. 2. Create a _lead generator_ and get qualified email addresses. A guide, a free 30    minute consultation, a voucher, etc. 3. An automated _email campaign_ - a weekly email, 3 with nurturing advice and    then 1 with a CTA. All automated. 4. Collect and tell stories of _transformation_. Almost all stories are about the    transformation of the hero. Tell this story and people will understand what    you are offering. 5. Create a system that generates _referrals_. If word of mouth is so powerful,    incentivize it.  ## 1. One-liner  The one-liner is a statement. It could be more than 1 sentence, but its supposed to be super short. It's the equivalent of a logline for a movie. Keep editing it until you find a version that works.  Memorize it, put it on your website, and include it in every piece of marketing collateral you create.  - You could tell this to anybody and they would understand what you do. - Helps people realize they need your services. - Provoke imagination and intrigue. - It should include:   - A character ('A busy mom', 'A retiree')   - A problem - don't miss an opportunity to talk about a customers     challenges. Define the problem as vitally important, it opens a story     gap and customers will want you to close it.   - A plan - hint at it. You can't explain it all in a one-liner.   - Success - paint an image of life after a customer has bought your services.  ### Example answers to the question 'What do you do?':  'We provide busy moms with a short, meaningful workout they can use to stay healthy and have renewed energy' vs 'I run a gym'.  'We help retired couples who want to escape the cold avoid the hassle of a second mortgage while still enjoying the warm beautiful weather of Florida during the winter' vs 'I got involved in real estate a few years ago and when we had out second kid we moved to Florida and then....'  ## 2. Create a lead generator  - A guide to download. - A free webinar or online course. - Software demo or free trials. - Free samples. - Live events.  No need to reinvent the wheel, what are others doing?  You can give away quite a lot of value that is easy to consume in an email or PDF - people will consume it quickly and will probably be happy to pay for a chance to learn in a more thorough and detailed context.  Downloadable guides etc should be about 3 pages in length.  Be generous, explain the 'why' and give away as much of the 'how' as possible.  ## 3. An automated email campaign  Even if customers don't click the links in the email, they keep seeing your brand and they become familiar with it. When they need your services you will be the go-to brand in their mind. The relationship and association is already built.  Nurturing emails and Call-To-Action emails - 3:1 - put real value in the nurturing emails.  Don't be passive in the CTA emails - you want them to buy, so tell them, repeatedly, and make it easy.  1. Talk about a problem 2. Describe a product you offer that solves the problem 3. Describe what life can look once the customer has bought your product and    solved their problem 4. Call the customer to an action that leads directly to a sale.  Similar to a nurturing email, a direct action email also describes a problem and a solution, but in the direct email the solution is a product you sell and there is a strong call to action. A lot of the content can be taken from the StoryBrand script.  ## 4. Collect and tell stories of transformation  A great testimonial gives customers the gift of going second, and lowering the riskiness of purchasing.  A good testimonial will:  - showcase the value you create - the results - the experience - what transformation has occurred?  Few things are more important to a good story than a hero that experiences an external and internal and philosophical transformation. This is because everyone desires to be transformed in someway.  People love businesses that help them transform in some way.  Questions to get a good testimonial:  1. What was the problem you were having before you discovered our product? 2. What did the frustration feel like as you experienced that problem? 3. What was different about out product? 4. Take us to the moment when you realized our product was actually working to    solve your problem? 5. Tell us what life looks like now that your problem is solved or being solved?  ## 5. Create a system to incentivise referrals  1. Identify your existing ideal customers 2. Give them a reason to talk about you - create a video or a PDF that a    customer can send to their friends to help them introduce your brand and    explain the value you deliver. 3. Offer a reward - a discount, more access, extra samples, etc "
  },
  {
    "id": "building-my-own-site-analytics",
    "objectID": "building-my-own-site-analytics",
    "title": "Building my own web analytics",
    "tags": "cloud-functions,data",
    "category": "Technical/Web,",
    "content": "  I've built a simple client-side website analytics tool for this site, you can see it at [/analytics]({filename}/pages/website-analytics.md). It has the following metrics:  - Page views per day, - Unique IP addresses per day - Views per page per day.  This article eventually made it to the front page of [Hacker News](https://news.ycombinator.com/item?id=27686873), which resulted in a lot of extra traffic and an opportunity to see how the tool performed under a much heavier load. I wrote about the affects of this and subsequent design changes [here](loadtesting-analytics).  I compare the different results from CloudFlare Analytics, CloudFlare Web Analytics and my own tool in this follow-up [article](analytics-comparison).  ## Motivation  ### Google Analytics  Google Analytics felt like overkill. It has so many data-points that the useful metrics are obscured. I also like this site to load quickly and GA makes it slower.  ### CloudFlare Analytics  I've also tried CloudFlare Analytics. It's a lot simpler than GA and better suits my use case, but I don't think its accurate.  ## Design Considerations  The analytics should be easy to access and easy to understand.[ref]In Google Analytics it can be fun clicking around on all the things and seeing lots of options, but its not really useful once the novelty has worn off.[/ref]  I know from my work visualizing data and building dashboards that the metrics presented will alter the users perception of the underlying reality.  The way that someone thinks about their impact on a business, the value they've produced, or the dynamics of the underlying system (a product's quality, site performance, growth, etc) is influenced by the design decisions I make, such as which metrics are available, how easy they are to access, or which metrics are above the fold.  If I present a particular metric as if its important, it will be difficult for someone who uses the dashboard to resist this implied message. They'll eventually consider the metric as a Key Indicator of some kind.  For these reasons I wanted to see only the most important metrics about my website, and I wanted to see them in a simple way without distraction.  The only metrics I'm interested in are:  1.  How many people are reading my site 1.  What are they reading 1.  How much are they reading.  I'd like to be able to infer whether I have a few people who read a lot, or a lot of people who read a little. (Or, as is the case, a few people who read a little.)  ## Method  ### Motivation  The main reason for making my own analytics tool it because its a fun challenge with an obvious and useful result. Building it required connecting a few technologies - Serverless Computing (Cloud Functions on GCP), NoSQL databases (DataStore), JavaScript, HTTP headers.  ### Assumptions  I'm assuming that unique IP addresses is a good enough proxy for unique readers, even though I'm not considering crawlers, bots, or RSS subscribers[ref]I think this might be quite wrong, but I don't know why.[/ref] .  ### Technique  The analytics 'engine' works by consuming a request that is sent by the client each time a page is loaded. The request is parsed by a Cloud Function on GCP which extracts the page URL and the IP address. This is then recorded in a DataStore database along with the current date and time.  Viewing the analytics is as simple (and as complicated) as making a request to the database, parsing the data and visualizing it conveniently. For example, group the data by days and count the distinct IP Addresses to figure out how many people are visiting each day. This is achieved by making a request to another Cloud Function that returns a response with a JSON payload.  It's not a perfect solution, there are edge cases I'm not considering. I expect it to be mostly right and good enough for my purposes. It didn't take much effort and it was a fun mini project. The hardest part was figuring out `chart.js`, the slowest part was iterating on the Cloud Functions.  ### Mocking Cloud Functions  I haven't figured out how to easily test cloud functions locally - it would require setting up a NoSQL database and mocking Flask requests and responses. Instead of doing that, I watched Peaky Blinders for a couple of minutes whilst each new version of the Cloud Function was deploying.  ### Improvements  Eventually I'll want to group the metrics by week or month I expect. It'll be a good way of learning and playing with cloud technologies and JavaScript.  Unless someone decides to spam the site, I expect the costs to be less than €1/month. This site is hosted using CloudFlare, so I suppose I could setup some page rules to prevent malicious traffic[ref]The page is now rate limited to 5 requests per minute per IP address.[/ref] .  ## Tasks for later  - [x] Make `/analytics.html` load faster - latency is caused by the Cloud Function initialising. Short of paying actual money for always-on resources I can't see a way to reduce this. However it's only an issue if you are the first person to view the page in the last ~10 minutes - this [blog post](https://mikhail.io/serverless/coldstarts/gcp/) explains whj. - [x] Add loading spinners - I used the same snippets as in my [Machine Vision demo](portfolio-traffic-lights). - [ ] Group data by weeks or months as well as day. - [ ] Identify bots and search engines - the analytics requires JavaScript to be running so I think some types of non-human activity is already filtered. How can I do this? - [ ] Aggregate the data (once per day) in a Cloud Function instead of repeatedly in the browser. - [ ] Understand why the DataStore API is called multiple times for a single fetch.  ## Questions  1.  I'd be interested to know if there is a way to track RSS subscribers. I know     that the usual method is to inspect server logs, but this site is hosted on     GitHub pages so I don't think this is possible. 1.  To what extent does requiring JavaScript in order to log a page view filter out bots and crawlers? 1.  I've used the `chart.js` library because its reasonably fast and lightweight. My     preferred library would be `Plotly` if it could be responsive and fast even     if there are >10 charts to render.      Has `plotly.js` improved recently to the point where it wouldn't cause a browser to lag if multiple plots are being rendered?  Finally, it occurs to me that I could make an analytics widget for my desktop using [Übersicht](https://tracesof.net/uebersicht/). It could show page views for the current day perhaps. I've made a couple of widgets before [[1](http://tracesof.net/uebersicht-widgets/#time_since), [2](http://tracesof.net/uebersicht-widgets/#time_until)] which were written in CoffeeScript, but the newer widgets are written in React, so I guess this is an opportunity to learn[ref]Done! My desktop now looks like this:  ![Dekstop widgets](/static/images/widgets.png)[/ref] .  Writing the 'Time Since' (my daughters birth) and 'Time Until' (my next accounting exam[ref]I failed the exam because I'd been working on [Ry's Git Tutorial](git) instead.[/ref] ) widgets were my first ever taste of CSS, HTML and JavaScript. The first ever article on this blog was about the 'Time Since' widget. CoffeeScript, and Ubersicht were just about simple enough for me to learn by trial and error, copying someone else's code and changing it bit by bit until I had what I want.  [**Site Analytics**]({filename}/pages/website-analytics.md) "
  },
  {
    "id": "buying-btc",
    "objectID": "buying-btc",
    "title": "How to buy Bitcoin",
    "tags": "bitcoin",
    "category": "Technical/Cryptocurrencies",
    "content": "  Recently a few friends have asked me how they can buy Bitcoin. I'm not a financial advisor, but here are a few things that come to mind:  1.  Don't invest what you can't afford to lose.  2.  If the price falls 50%, you need to be able to wait whilst the price     recovers.  3.  Write down the following:      - How much can you afford to invest? Consider how much cash you will need over the next year, how long it would take to recover any losses, etc.     - How long do you want to invest for?     - How much profit do you want to make? Don't have an open-ended goal.  4.  You will need to get good at identifying and ignoring the following, even from your friends:      - Hype     - Fake news     - Fear, Uncertainty, Doubt (FUD)      Don't trust without verifying.  5.  The previous point is really important, and also difficult.      By putting something you care about in a risky situation (it is risky) you     will experience anxiety and excitement. You need to control your psychology     and identity when other people are trying to manipulate you. This is useful     in all areas of life.      Investing is     good mental exercise because money has an intensely psychological quality     about it, and crypto currencies are the most intense trading experience     there is right now.  6.  Almost no one has a clue what's happening. Conventional economists and     traders certainly don't. This is crypto-economics and the rules haven't been     worked out yet. We've never had this tech before, and the internet has made     everything - communication and innovation - much quicker. This is a powerful     combination of factors and we haven't seen them play out before.  7.  Take some time to read about the fundamentals and understand the tech as     much as you can. Think about why people would behave in certain ways and     what makes bitcoin useful, or not. Get started on this today, it will take     some time.      - YouTube has a tonne of videos, and these two sites are good and detailed:       - [lopp.net](http://lopp.net/bitcoin.html)       - [namamotoinstitute.org](http://nakamotoinstitute.org/)     - Twitter has a lot of current and new information, but also a lot of bots and scammers spreading hype and FUD (see point 4).  8.  If you're going to lose sleep over your investment, invest less.  9.  Don't buy at an all time high. Do your research, wait for the price to     correct. _Prices fall._ The     [chart](https://uk.tradingview.com/x/TrL9SA7o/) at the top of the page     shows the 20 day and 55 day moving average compared to the daily price. My     opinion is that by early January the price will have returned to between     the 20 day and 55 day average before beginning to rise again.  10. [Coinbase](http://www.coinbase.com) is a user friendly and reputable     exchange, there are other good exchanges too.  11. Don't make financial decisions when you're feeling rushed. Check your psychology.  12. If you've bought some Bitcoin or other cryptocurrencies, don't store them     on an exchange. Transfer them to a wallet that you control. If you don't     own your private key, you don't own the asset. If you don't know what     that means, google it (Point 8). "
  },
  {
    "id": "cardano-generating-addresses",
    "objectID": "cardano-generating-addresses",
    "title": "> Cardano: Generating Addresses\n",
    "tags": "uncategorized",
    "category": "Technical / Cryptocurrencies",
    "content": "  If many different customers are to deposit or send ADA (The unit of currency on the Cardano blockchain) to a Cardano node, it will be necessary to determine which customer is responsible for each transaction so that the correct customer account can be updated.  As with many things involving blockchains, this initially seemed like a simple requirement but involved several hours of work.  Cardano wallets are generated using a parameter called ADDRESS_POOL_GAP. The default value is 20, and is the number of unused addresses that the node will generate and return to a client using the REST API. If one of the addresses is used, the node will automatically generate another so that there are always 20 unused addresses.  This is probably very convenient for personal use. If I want someone to send me some funds, I can make a simple api call using cURL and get a fresh address. But if you are running a service, weather its e-commerce or a financial service, its not really good enough. Some advice on the forums says to generate a wallet with a very large ADDRESS_POOL_GAP value such as 10,000 and just generate a new wallet when you run out of fresh addresses, but it still feels like a compromise.  But lets explain our situation in more detail first. If a customer wants to send us some ADA, we want to give them a fresh address that's never been used before and that only they have. Then we know that any funds that arrive to that address are from a particular customer. However we don't know if the customer will actually use the address and transfer any funds. The address might remain unused or it might not. Nevertheless, that address is now reserved for them, and no one else can use it.  In this way, we might need to generate and maintain a list of thousands of addresses that are never used. Using ADDRESS_POOL_GAP for this seems like a bad solution.  Fortunately, [Cardano-Addresses](https://github.com/input-output-hk/cardano-addresses) has the answer, albeit in a fairly convoluted and obscured form. If you have the mnemonic that was used to generate a wallet originally, you can generate 2^31 unique addresses like so:  Clone the repo and build the docker image:  ```bash git clone https://github.com/input-output-hk/cardano-wallet docker build -t cardano-address . ```  Get the mnemonic and generate a file containing a list of space separated words on one row.  Run the following:  ```bash export increment=0 ((increment=increment+1)) && cat mnumonic.txt | docker run --rm -i cardano-address key from-recovery-phrase Shelley | docker run --rm -i cardano-address key child 1852H/1815H/0H/0/$increment | docker run --rm -i cardano-address key public --with-chain-code  | docker run --rm -i cardano-address address payment --network-tag testnet > payment.addr && cat payment.addr ;echo ``` "
  },
  {
    "id": "cardano-node-api",
    "objectID": "cardano-node-api",
    "title": "Cardano: Running a full node\n",
    "tags": "uncategorized",
    "category": "Technical/Cryptocurrencies",
    "content": "  I recently deployed a Cardano node on Google Cloud Platform and used its API to create and watch addresses, and make transactions.  Helpfully, Cardano make it quite simple to get up and running if you are familiar with Docker-Compose, and know where to look, and what questions to ask.  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # Docker Compose  The [Cardano Wallet](https://github.com/input-output-hk/cardano-wallet) repo[ref][https://github.com/input-output-hk/cardano-wallet](https://github.com/input-output-hk/cardano-wallet)[/ref] contains almost all you need to get started. The command to run is:  `NETWORK=testnet docker-compose up -d`  This does a couple of things for you:  1. Creates a Cardano node and begins syncing with the network 2. Creates a Cardano Wallet instance 3. Creates all the required data volumes 4. Maps the ports required to make API calls.  Running `docker ps` should show that two containers are running, `cardano-node` and `cardano-wallet`.  # Cardano wallet  In order to run `cardano-wallet` commands (not using the API, but directly on the node) you'll need to `docker exec` into the container like this:  ```bash sudo docker exec -it cardano-wallet_cardano-wallet_1 sh ```  Then you can run commands like:  ```bash cardano-wallet network information ```  # Cardano-CLI  Similarly, if you want to use the `cardano-cli` programme, exec into the `cardano-wallet` container:  ```bash sudo docker exec -it cardano-wallet_cardano-node_1 sh ```  ```bash cardano-cli —version ```  # REST API  Perhaps you wont need to do this though because once the containers are up and running and online, you can use the REST API to monitor the node, make transactions, and watch addresses.[ref][https://input-output-hk.github.io/cardano-wallet/api/edge/#operation/postwallet](https://input-output-hk.github.io/cardano-wallet/api/edge/#operation/postWallet)[/ref]  For example, a good test to see if the node is ok is to run  ```sh curl http://localhost:8090/v2/network/information ```  Addresses on Cardano need to be BIP39 compliant, and before you can use the REST API to create the address you will need to have already generated the keys and the mnemonic. This can be done using various other tools ([web page](https://iancoleman.io/bip39/), [python](https://github.com/trezor/python-mnemonic)) and the results put into a JSON file according to the API spec.  # Surprising things  Cardano requires that addresses are created sequentially and instead of allowing the user to generate them _ad-hoc_, the node by default will manage the creation of addresses of each wallet.[ref][https://input-output-hk.github.io/adrestia/docs/common-use-cases/how-to-create-addresses/](https://input-output-hk.github.io/adrestia/docs/common-use-cases/how-to-create-addresses/)[/ref]  The value of `ADDRESS_POOL_GAP` sets the number of unused addresses in each wallet. By default this is 20. When an address is used, the node will automatically generate a new unused address for the wallet, so that there is always a pool of 20 unused addresses. "
  },
  {
    "id": "cat-and-a-new-line",
    "objectID": "cat-and-a-new-line",
    "title": "`cat` and a new line\n",
    "tags": "cat,linux,bash,shell",
    "category": "snippet",
    "content": "  If you're `cat`-ing a file and the bash prompt doesn't start on a new line (cos the file you displayed using cat doesn't end with a new line char) the following will fix it:  `cat <filename> ; echo` "
  },
  {
    "id": "chartered",
    "objectID": "chartered",
    "title": "I'm a chartered accountant",
    "tags": "icaew,aca,accounting",
    "category": "Non-technical/Learning",
    "content": "  Earlier this year I qualified as a chartered accountant. Qualification requires passing 15 exams and gaining 3150 hours of work experience.  To celebrate passing your exams and verify your success, the ICAEW print the names of everyone who passed in an advert in the Financial Times. This happened for me on the 26 January.  ![exam pass list in the financial times](/static/images/exam_pass_list.jpg) "
  },
  {
    "id": "chezmoi-2",
    "objectID": "chezmoi-2",
    "title": "Chezmoi: Part 2\n",
    "tags": "automation,dotfiles",
    "category": "Technical/Developer Tools",
    "content": "  [Chezmoi](https://www.chezmoi.io) is a dotfiles management tool. I wrote about it [previously](chezmoi) when I almost deleted my dotfiles and was looking for a better way to manage them.  7 months later and I'm happy I chose Chezmoi. I'm managing dotfiles across 3 machines and 2 OS's currently. I have a basic workflow and it seems like a good time to see if there are further benefits to be found. This is a review of my workflow and some notes on how to use the tool more effectively.  I've aliased `chezmoi` to `cm` in this article and on all my machines.  Including files or subdirectories from other projects is really interesting and something I didn't realise was possible. It goes a long way to bridging the gap between simple dotfiles management and something more powerful like Ansible.  Next steps (in another 7 months?) would be to use [templates](https://www.chezmoi.io/docs/how-to/#use-templates) and make use of the secrets management capabilities.  ## Setup  1.  When you `cm init` you create a new git repo in `~/.local/share/chezmoi`.     This is where the _source state_ lives. It's a repo, so you can do all the     usual vcs things you'd expect, but cm won't do it for you (by default).  1.  `cm edit-config` opens the configuration file for editing.  ## Include dotfiles from other projects  1.  Use `.chezmoiexternal.toml` to tell cm to import dotfiles from a different     repo. See below for an example  1.  You can't include subdirectories from other projects like `oh-my-zsh`     because you can't use git submodules (cm uses its own format for the source     state).  1.  The section heading (the part with square brackets) is the destination path     of the object being imported.  1.  `type` is 'archive' for collections of files (projects) and 'file' for     individual files. If the url is a tarball then cm will unpack it.  1.  The default value for `refreshPeriod` is never. Cm caches downloaded archives locally to     avoid downloading them every time `apply` is called. To force a refresh, call     `cm --refresh-externals apply` or `cm -R apply`.  1.  When using `Oh My Zsh`, make sure you disable auto-updates by setting     `DISABLE_AUTO_UPDATE='true'` in `~/.zshrc`. Auto updates will cause the     `~/.oh-my-zsh` directory to drift out of sync with cm's source state.     Refresh the downloads (by setting `refreshPeriod`) to update Oh My Zsh and     its plugins.  ## Adding files and directories  1.  You add a file to cm with `cm add &lt;file&gt;`. This copies the file     into the source state but changes the name. If the file you want to track is     `~/.zshrc` then cm will create a file in the source state called     `dot_zshrc`.  1.  You can `cm add <dir>` just like you can `cm add &lt;file&gt;`. If you copy a     directory into the source state, the name of the source state copy will be     prepended with `dot_`, too. The names of the files and dirs inside the     directory are not changed.  ## Which files are tracked, not tracked or ignored  1.  `cm managed` shows a list of manged files  1.  `cm unmanaged` shows a list of unmanaged files. You can add entire     directories with `cm add`.  1.  `.chezmoiignore` contains a list of files that _won't_ be copied from the     source directory to the destination when you run `cm apply`. This is the     opposite of my intuition [[documentation](https://www.chezmoi.io/docs/reference/#chezmoiignore)].  1.  Because `cm apply` can change so much stuff, try `cm apply --dry-run --verbose` first.  1.  `.chezmoiignore` is a template, so you can ignore different files on     different machines.  ## Editing tracked files  `cm diff` will show you what changes would be applied if your ran `cm apply` from the perspective of the source state (Green ⇒ added to source state).  `cm apply` will overwrite local changes (after prompting for confirmation) with the copy from the source state.  You can resolve differences if things get messy with `cm merge $FILE`.  There are 4 ways of editing files:  1.  `chezmoi edit $FILE` - opens \\$FILE in the editor. `cm edit` will open the     source state directory. You can also use `cm edit --apply $FILE` to apply     the changes as soon as you close the file.  1.  `cm cd` and then edit the files directly. Then `cm apply` to apply the     changes. `cm diff` will show you what changes would be made by running `cm apply`, from the perspective of the source state. (Green means added to the     source state, red is removed. This is the opposite of my intuition).  1.  Edit the file in the home directory and then re-add it using `cm add $FILE`     or `cm re-add` (re-add doesn't work with templates). I've created an alias     to re-add all files that have been changed `cm aa`.  1.  Edit the file in the home directiry and then merge the changes into the     source state with `cm merge $FILE`.  ## Examples  ### Importing an entire project:  To import `Oh My Zsh`, the `zsh-syntax-highlighting` plugin, and `powerlevel10k` by putting the following in `~/.local/share/chezmoi/.chezmoiexternal.toml`:  ```toml ['.oh-my-zsh']     type = 'archive'     url = 'https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz'     exact = true     stripComponents = 1     refreshPeriod = '168h' ['.oh-my-zsh/custom/plugins/zsh-syntax-highlighting']     type = 'archive'     url = 'https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz'     exact = true     stripComponents = 1     refreshPeriod = '168h' ['.oh-my-zsh/custom/themes/powerlevel10k']     type = 'archive'     url = 'https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz'     exact = true     stripComponents = 1 ```  ### Importing a single file from another project  To import `plug.vim` from `github.com/junegunn/vim-plug` into `~/.vim/autoload/plug.vim` add this to `~/.local/share/chezmoi/.chezmoiexternals.toml`  ```toml ['.vim/autoload/plug.vim']     type = 'file'     url = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'     refreshPeriod = '168h' ```  ## Source  Most of this was taken directly from the [documentation](https://www.chezmoi.io/docs/how-to/). "
  },
  {
    "id": "chezmoi-commands",
    "objectID": "chezmoi-commands",
    "title": "Chezmoi commands",
    "tags": "dotfiles,tools,productivity,developer",
    "category": "snippet",
    "content": "  Chezmoi is a dotfiles manager.  - `chezmoi diff` - see the difference between the current state of your local dotfiles compared against the checked-in versions. - `cm aa` - to update chezmoi with all your local changes.  ```zsh alias -g aa='status | cut -c 4- | xargs -I % -p sh -c 'chezmoi add ~/%'' ``` "
  },
  {
    "id": "chezmoi-shortcuts",
    "objectID": "chezmoi-shortcuts",
    "title": "ChezMoi shortcuts",
    "tags": "dotfiles,alias",
    "category": "snippet",
    "content": "  Chezmoi is a great tool for managing dotfiles. This is a shortcut to update the source state based on local changes.  `chezmoi status | cut -c 4- | xargs -I % -p sh -c 'chezmoi add ~/%'`  [Github](https://github.com/twpayne/chezmoi) "
  },
  {
    "id": "chezmoi",
    "objectID": "chezmoi",
    "title": "Chezmoi",
    "tags": "automation,dotfiles",
    "category": "Technical/Developer Tools",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  Update: 7 months later, I've written some more detailed notes [here](more-chezmoi).  # Background  Chezmoi seems to be dotfiles management for power users. Until a few days ago, when I realised I'd massively broken a lot of things, I'd been putting my dotfiles in a version controlled directory and using a shell script to generate symlinks in my home directory.  This had worked really well for several years. It's a great system for maintaining dotfiles on a single machine. But it's not robust or flexible enough for managing multiple machines or multiple operating systems.  Also, it's not just files that sit in _$home_ anymore, I need to track configuration files that live in other places too[ref]For example, every file in `$HOME/.vim/ftplugin/` should be version controlled.[/ref].  I needed something more robust and flexible than generating symlinks from a bash script.  # Razor  I think I read somewhere that when purchasing a new appliance you should buy the cheapest you think you can get away with, and if that doesn't work then get the best you can afford. Moving from a custom bash script to Chezmoi is an example of this. My custom bash script was the most basic approach, and it broke badly. Chezmoi seems like the most heavy duty tool for dotfiles management I could find.  For example, I think I'm able to encrypt my files using 1Password or similar. I can use Jinja templates to create scripts for different scenarios. I don't even know what that means at the moment. I've only scratched the surface but I'm happily managing dotfiles across different machines and updating/modifying them safely. Chezmoi (aliased to cm) is free and OSS so I'm confident it'll be 'my' tool for the next few decades. I'm happy to invest a couple of hours to learn a few new habits and iron out a few wrinkles[ref]Happily, it seems like the amount of time required to learn or become familiar with a new tool is decreasing. I guess this is to be expected as experience increases but nonetheless it's gratifying to realise.<br></br>Dotfiles management was a fairly new and interesting concept when I first began symlinking into my home directory. It still feels amazing to bootstrap a fresh machine and have it feel like home in just a few minutes, but the technicalities of it are now familiar.[/ref].  # One Question  I don't understand why `chezmoi cd` creates a new shell in order to jump into the Chezmoi directory. Why not simply `cd` into the Chezmoi directory? What's the advantage/necessity of a new shell?  You have to remember to `exit` after you've done whatever you went there to do, but my habit is to `cd` or `z ..`. I guess it's nice to exit and then immediately go back to where ever you were before, but there are other ways of doing that - you could write the current directory to an environment variable. It seems unnecessarily complex.  # Command Reference  Update - the notes in my [follow-up](more-chezmoi) are likely much more useful.  1.  Show which files have changed → **cm status**  1.  List of managed files → **cm managed**  1.  List of unmanaged files → **cm unmanaged**  1.  Start tracking a file → **cm add &gt;path&#47;to&#47;file&lt;**  1.  Update a file, add the file again → **cm add ..**  1.  Edit tracked version of file → **cm edit &lt;file&gt;** - don't think I'm going to     use this, I'd rather edit the source file, test it, and then update using     **cm add ..**  1.  Differences between local version tracked versions → **cm diff &lt;file&gt;** -     this tells me which files I need to **cm add** again. This feels clunky and I     suspect there is a better workflow. Parsing git style diff files is     horrible.  1.  Clobber local version with the tracked version → **cm apply**  1.  Dry run and see diff between local version and tracked version → **cm -nv apply**  1.  Pull the latest changes from your repo and apply them → **cm update**  1.  Remove a file →      - Create **.chezmoiremove** in the source directory     - **chezmoi apply --remove --dry-run --verbose**  1.  Type **cm** instead of **chezmoi** → **alias cm='chezmoi'**  # Links  - [Github](https://github.com/twpayne/chezmoi) - [Project Site](https://www.chezmoi.io/) "
  },
  {
    "id": "choose-boring-technology",
    "objectID": "choose-boring-technology",
    "title": "Choose Boring Technology",
    "tags": "advice,management",
    "category": "Technical/Engineering",
    "content": "  I'm surprised I haven't posted this before because the 'choose boring tech' article by Dan McKinley made a big impression when I first read it, about 3 years ago.  1.  [original article](https://mcfunley.com/choose-boring-technology) 2.  [humorous slide show version](http://boringtechnology.club/)  Key takeaways, based on my memory of reading it a couple years ago:  - Boring tech is that which is mature enough and that you know well enough that   you are familiar with its shortcomings, and that will let you build   something quickly - You get 3 innovation tokens for each project or stack. Choosing some new and   exciting bit of tech requires spending 1 of those tokens. - A nice alternative title for this is 'How to be old, for young people', which   is really incisive. - In addition to the advice in the article, I read somewhere else that the   probability of something continuing to exist in future, and be actively maintained and   supported, is approximately the amount of time that it has already   existed, and been supported and maintained. I'm not even sure that makes   sense, but it bears considering. Source?  This should be on my imaginary list of 'things I should read every couple of years'. Actually, a few lists might be really useful. A list of python articles, a list of advice articles, etc. It would be similar to the books page, which is just a list of book articles. "
  },
  {
    "id": "climbing-higher",
    "objectID": "climbing-higher",
    "title": "The trouble with climbing higher is that eventually you lose sight of the ground.",
    "tags": "advice,thoughts,meta",
    "category": "snippet",
    "content": "  . "
  },
  {
    "id": "cloning-git-repos-using-lfs",
    "objectID": "cloning-git-repos-using-lfs",
    "title": "Git LFS",
    "tags": "git,git-lfs",
    "category": "snippet",
    "content": "  Cloning large repos, or repos with large files in them, doesn't work with `git clone ...` you need to use `git lfs clone ...`  So why is `git lfs clone` deprecated? What's the replacement? "
  },
  {
    "id": "cloud-functions-minimum-instances",
    "objectID": "cloud-functions-minimum-instances",
    "title": "Cloud Functions Minimum Instances",
    "tags": "google-cloud-platform,serverless",
    "category": "snippet",
    "content": "  Google Cloud Platform have introduced a 'minimum instances' features in the Cloud Functions product.  If you have a function using 128MB of memory (the smallest option), it will cost a minimum €0.061 per day (€1.86 per month) to run 1 minimum instance. "
  },
  {
    "id": "conditionally-setting-your-git-config",
    "objectID": "conditionally-setting-your-git-config",
    "title": "Conditionally setting your git config",
    "tags": "vcs,git",
    "category": "snippet",
    "content": "  [Blog post](https://utf9k.net/blog/conditional-gitconfig/) showing how you can set git variables depending on where you are in a directory tree.  It hinges on [conditional includes](https://git-scm.com/docs/git-config#_conditional_includes). "
  },
  {
    "id": "conways-law",
    "objectID": "conways-law",
    "title": "Conway's Law",
    "tags": "organisations",
    "category": "snippet",
    "content": "  Organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations - Melvin Conway  In reverse:  If the architecture of the system and the architecture of the organization are at odds, the architecture of the organization wins - Ruth Malan "
  },
  {
    "id": "corporate",
    "objectID": "corporate",
    "title": "Corporate London",
    "tags": "career,corporate,london",
    "category": "Non-technical/Journal",
    "content": "  # 2014 - 2017  Having made arrangements to leave London, it seems like a reasonable time to reflect on my time here.  London is a tough city to live in — it's big enough that a sub 1-hour commute is considered good, and it's super expensive. My stay in London has been defined by my quest to complete my graduate scheme and qualify as an accountant.  When I first arrived I had no idea what London or working in a corporate would be like. I was coming from academia, and my motivation for moving to finance could be summed up in two points:  1. Understand more about the 2008 financial crisis 2. Get paid more for using mostly the same skills (math) as in engineering  I don’t think there’s anything wrong with these motivations, but I should have been making a long term career plan instead.  When I started my job I was surprised at the 6 weeks of induction and hot-desking. Life as an auditor felt nomadic, as everyone would spend large amounts of time at client's offices, and no-one has their own desk in our office. The only thing you really own is your knowledge and your network of relationships.  In 2014, I arrived with a high opinion of my employer and the view that I would be staying for several years. Having escaped the financial insecurity of short-term research grants, I’d moved back to my home country to contribute to the system that educated me. I was happy to have a regular job with a decent, predictable salary.  A phrase that kept coming to mind back then was “accountant factory”. Our training materials were scripted and everything was a standardised process. We were being processed. Graduates in, corporate accountants out.  The company is huge and so are the efficiencies and barriers to competition that come with this. When I arrived I was impressed there were free biscuits, and it felt presumptuous to put a meeting in someones diary. Now I ignore any communications addressed to a mailing list.  ## Accountant  The toughest experiences were related to the accountancy qualification. Naïvely I had believed that the qualification wouldn’t be a big deal and I didn’t give any thought to it when I applied — I just wanted to find out how banks worked. If there were some exams to be done then it would be fine, I’d already achieved a PhD and I would handle it.  That turned out to be a mistake. A huge mistake. The alarm bells should have rung louder when I realised most of my graduate colleagues had only applied so that they could get the qualification (and were already intending to leave asap afterwards). Doing the pre-course work before college wasn't trivial. College - I was being sent to a classroom again. We were being taken out of the office, away from clients, and put in a classroom to prepare for these exams…  Starting a job that required becoming a chartered accountant, without considering the effort and time involved to qualify was dumb. It’s an oversight I find hard to believe.  The disappointment and sadness at having to study again was profound. The teaching and assessment style was several steps behind what I’d become used to. Compared to the depth, autonomy and research-focus of a doctorate, writing cookie-cutter essays in time-pressured exams felt stupid. The exams were hard and I failed several of them, probably because of my low morale whilst revising. Retaking them required more weekends and annual leave being spent away from my family, camped-out in libraries and offices.  This required much patience and generosity from Ritsya, who having not seen me for long periods during my doctorate expected us to have a more normal lifestyle when we came to London. I found it miserable to pause my social life and other interests whilst studying, and then I would try to rush back to them when I had the time, knowing that soon I’d have to pause them again.  If I hadn’t already studied in Vienna, this process of working and studying in London would have been exciting and felt valuable or special. I’d passed enough exams though to know that they’re never as important as they’re made out to be, and whatever it was that was missing from my life wasn’t going to be found in another qualification.  On the upside though, the ACA is the most practical qualification I’ve gained and has taught me many useful aspects of business and finance. I’m glad to finally see business not as some mysterious system but something attainable and understandable.  ## Neighbourhood  Living in London has also required a lot of time on trains — my door to desk commute is about an hour each way, and I’ve never lived somewhere in London that hasn’t felt transient. We’ve needed to live near a station and didn’t want to commute more than an hour and that’s put us in neighbourhoods with other young professionals who also don’t have long term plans (or financial ability) to stay in the city. We’re all looking to move on and move up as fast as possible. I want to leave London partly because there are so many people with the same attitudes and priorities as my own…  ## Corporate Culture  Back in the office I spent the first few months figuring out how people were organised, how teams operated and how decisions were made. I think it took me about a year to feel like I understood how things really worked, and 1.5 years to feel like I could do all aspects of my job with certainty. There is a difference between how things are spoken about, and how things actually happen.  My experience has been that performance is all that matters and behaviour is defined by self-interest. I don’t think this is different from previous environments I've worked in — academia isn't any different[^1] and the construction industry certainly isn’t. I wonder if the only way people can endure it is if they’ve not experienced anything else, or think it normal, or necessary. I find myself wishing we could be kinder to each other, and that we could create structures that incentivise mutual support.  Corporate finance usually appears clean and well presented. Its people appear dependable and capable. The culture is sanitised and there's a lot of pressure to conform - you can see it in the clothes and accessories we wear and the jokes we tell each other in the canteen.  I came to see my office as a glass and steel cathedral. I read about the Middle East, and migrants arriving in Europe, and tower blocks burning, and felt really disconnected.  Despite the high regard with which we hold ourselves, we don’t ask each other how we can help. Maybe we are too busy, or feel powerless to help. Apparently we do not know how to help, despite our wealth, talents, education and connections.  I remember watching a man leave the office one day and thought that if he gave his whole career and left his firm after decades of service, there would be nothing left to identify him after a few weeks. The work will always get done. Market forces will dictate how the business adapts and grows. The City rolls on.  [^1]:     Publications trump almost all other metrics, and the incentives to     publish quantity over quality are such that risky or slow research is     inexcusable. The metrics used to standardise success and allocate resources     can be subverted just as well in academia as in any other industry. What     management measures, the team prioritises. "
  },
  {
    "id": "counter-intuitive-facts",
    "objectID": "counter-intuitive-facts",
    "title": "Counter intuitive facts",
    "tags": "math,science",
    "category": "Technical/Other",
    "content": "  Thanks to [Alexander Kruel](https://substack.com/profile/2149674-alexander-kruel) for this list:  1. It is possible to compute over encrypted data without access to the secret    key [(source)](https://en.wikipedia.org/wiki/Homomorphic_encryption).  1. It is possible to prove that you know a value x, without conveying any    information apart from the fact that you know the value x    [(source)](https://en.wikipedia.org/wiki/Zero-knowledge_proof).  1. It is possible to play poker by telephone in a trusted way which prevents    cheating    [(source)](http://math.stonybrook.edu/~scott/blair/How_play_poker.html).  1. If customers take on average 10 minutes to serve and they arrive randomly at    a rate of 5.8 per hour then the waiting time for one teller is five hours    while the waiting time for two tellers is 3 minutes    [(source)](https://www.johndcook.com/blog/2008/10/21/what-happens-when-you-add-a-new-teller/).  1. There exists a set of three dice, A, B, and C, with the property that A rolls    higher than B more than half the time, and B rolls higher than C more than    half the time, but it is not true that A rolls higher than C more than half    the time [(source)](https://en.wikipedia.org/wiki/Nontransitive_dice).  1. Causation does not imply correlation    [(source)](https://arxiv.org/abs/1505.03118).  1. The Earth makes 366.25 rotations around its axis per year. (Related. 0%    selected the right answer on this SAT question: Circle A has 1/3 the radius    of circle B, and circle A rolls one trip around circle B. How many times will    circle A revolve in total? [(source)](youtube.com/watch?v=kN3AOMrnEUs))  1. There is a surface that has only one side    [(source)](https://en.wikipedia.org/wiki/Mobius_strip).  1. It is possible to travel downwind faster than the wind.    [(source)](youtube.com/watch?v=jyQwgBAaBag) (for a mechanical demonstration    see: Under the ruler faster than the ruler    [(source)](youtube.com/watch?v=k-trDF8Yldc)).  1. It is possible to read out the results of events that 'didn't happen' and    whose 'probability of happening' can be driven arbitrarily low.    [(source)](https://fqxi.org/community/forum/topic/3345).  1. Knowing just slightly more about the value of your car than a potential buyer    can make it impossible to sell it.    https://en.wikipedia.org/wiki/The_Market_for_Lemons  1. Closing roads can improve everyone’s commute time.    https://mindyourdecisions.com/blog/2009/01/06/why-the-secret-to-speedier-highways-might-be-closing-some-roads-the-braess-paradox/#.U4Ksl_ldUud  1. If you pay the value you think something is worth, you are going to end up    with a negative net profit. http://en.wikipedia.org/wiki/Winner%27s_curse  1. Adding 3 feet to a tightly tied rope around the earth would allow you to    raise it uniformly by almost 6 inches.    http://puzzles.nigelcoldwell.co.uk/fortyone.htm  1. Two 12 Inch Pizzas have less Pizza than one 18 inch pizza.  1. If you let a 100g strawberry that is 99% water by mass dehydrate such that    the water now accounts for 98% of the total mass then its new mass is 50g.    https://en.wikipedia.org/wiki/Potato_paradox  1. At any given moment on the earth's surface, there exist 2 antipodal points    (on exactly opposite sides of the earth) with the same temperature and    barometric pressure: youtube.com/watch?v=cchIr1OXc8E  1. A one-in-billion event will happen 8 times a month.    https://gwern.net/Littlewood  1. Given a solid ball in 3‑dimensional space, there exists a decomposition of    the ball into a finite number of disjoint subsets, which can then be put back    together in a different way to yield two identical copies of the original    ball: https://en.wikipedia.org/wiki/Banach%E2%80%93Tarski_paradox  1. A system cannot change while you are watching it:    https://en.m.wikipedia.org/wiki/Quantum_Zeno_effect  1. In two dimensions, there are infinitely many regular polygons. In three    dimensions, there are five Platonic solids. In four dimensions, there are six    platonic polychora. In all higher dimensions than four, there are only ever    three regular polytopes. (Maths 1001, Richard Elwes)  1. There are as many whole positive numbers as all fractions (including the    whole negative and whole positive numbers).  1. There is a shape with a finite volume but an infinite surface area (Gabriel’s    Horn). https://en.wikipedia.org/wiki/Gabriel%27s_Horn  1. There are infinite sets that can be exhaustively searched over in finite    time:    http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/  1. There are constant width curves other than a circle.    https://en.wikipedia.org/wiki/Curve_of_constant_width  1. Any positive rational number x can be written as a finite sum of distinct    numbers of the form 1/n. (Calculus, 4th edition by Michael Spivak)  1. Let alpha = 0.110001000000000000000001000..., where the 1's occur in the n!    place, for each n. Then alpha is transcendental. (Calculus, 4th edition by    Michael Spivak)  1. There are sequences of numbers which grow unimaginably enormous and continue    for an unimaginably long number of terms...but which always eventually get    back down to zero. https://en.m.wikipedia.org/wiki/Goodstein%27s_theorem  1. The vast majority of real numbers can't be described. But it is impossible to    give a single example.    https://blog.ram.rachum.com/post/54747783932/indescribable-numbers-the-theorem-that-made-me  1. There exists a curve which fills an entire square:    https://en.wikipedia.org/wiki/Space-filling_curve  1. There is a continuous and nowhere differentiable function:    https://en.wikipedia.org/wiki/Weierstrass_function  1. At any given time there live at least two people in California with the same    number of hairs on their heads.    https://medium.com/cantors-paradise/the-pigeonhole-principle-e4c637940619  1. '...if you flip fair coins to generate n-dimensional vectors (heads => 1,    tails => -1) then the probability they're linearly independent is at least    1-(1/2 + o(n))^n. I.e., they're very very likely independent!'    twitter.com/michael_nielsen/status/1398408973657677825  1. An initial datapoint can be valuable, and the second worthless, but the third    valuable again (due to discreteness of choice)    twitter.com/ben_golub/status/1402780581029683203  1. If every truth is knowable, then every truth is known.    https://en.wikipedia.org/wiki/Fitch%27s_paradox_of_knowability  ## Other classical and miscellaneous items:  1. Simple, yet counterintuitive mathematics | Why numbers don't always mean what    you think youtu.be/xHjQhliXUB0  1. Truly brilliant examples from mathematics about why repeated confirmations    don’t constitute proofs: The Most Misleading Patterns in Mathematics    youtu.be/kp1C0E8Za7k  1. The Spring Paradox (watch the whole awesome video)    youtube.com/watch?v=Cg73j3QYRJc  1. Rope, escape, topology, knots, creativity, geometry, mathematics,    impossibility, access to higher dimensions of space-time.    https://www.reddit.com/r/knots/comments/mhimtn/topology_demonstrations/  1. The Lifespan Dilemma http://lesswrong.com/lw/17h/the_lifespan_dilemma/  1. Bottema's theorem: Draw squares on AB and BC on two sides of the triangle    ABC. Let R and S be the points on the squares opposite vertex B. Then the    midpoint M of RS is independent of B.    https://en.wikipedia.org/wiki/Bottema%27s_theorem  1. Monty Hall problem [source](https://en.wikipedia.org/wiki/Monty_Hall_problem)  1. Unexpected hanging paradox    [source](https://en.wikipedia.org/wiki/Unexpected_hanging_paradox)  1. Zeno's paradoxes [source](https://en.wikipedia.org/wiki/Zeno%27s_paradoxes)  1. Boy or Girl paradox    [source](https://en.wikipedia.org/wiki/Boy_or_Girl_paradox)  1. Cheryl's Birthday [source](https://en.wikipedia.org/wiki/Cheryl%27s_Birthday)  1. The Birthday Paradox [source](http://en.wikipedia.org/wiki/Birthday_problem)  1. Ross–Littlewood paradox    [source](https://en.wikipedia.org/wiki/Ross%E2%80%93Littlewood_paradox)  1. German tank problem    [source](https://en.wikipedia.org/wiki/German_tank_problem)  1. Two envelopes problem    [source](https://en.wikipedia.org/wiki/Two_envelopes_problem)  1. Sleeping Beauty problem https://en.wikipedia.org/wiki/Sleeping_Beauty_problem  1. Stein's paradox twitter.com/johncarlosbaez/status/1298274201682325509  1. The ant on a rubber rope problem    https://en.wikipedia.org/wiki/Ant_on_a_rubber_rope  1. Infinite offset paradox https://en.wikipedia.org/wiki/Block-stacking_problem  1. 100 Prisoners Problem https://en.wikipedia.org/wiki/100_prisoners_problem  1. Gödel's incompleteness theorems    https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems  1. Hairy ball theorem https://en.m.wikipedia.org/wiki/Hairy_ball_theorem  1. Wheeler's delayed-choice experiment    https://en.wikipedia.org/wiki/Wheeler%27s_delayed-choice_experiment  1. A Peculiar Connection Between the Axiom of Choice and Predicting the Future    https://web.archive.org/web/20100923004908/http://persweb.wabash.edu/facstaff/hardinc/pub/peculiar.pdf  1. Quantum Eraser Lottery Challenge youtube.com/watch?v=2Uzytrooz44  1. Counterfactual mugging https://wiki.lesswrong.com/wiki/Counterfactual_mugging  1. Vexing Expectations https://authors.library.caltech.edu/7496/1/NOVmind04.pdf  1. The Absent-Minded Driver http://lesswrong.com/lw/182/the_absentminded_driver/  1. The Hardest Logic Puzzle Ever    https://en.wikipedia.org/wiki/The_Hardest_Logic_Puzzle_Ever  1. Seven Puzzles You Think You Must Not Have Heard Correctly    https://math.dartmouth.edu/~pw/solutions.pdf  1. Simpson's Paradox https://en.wikipedia.org/wiki/Simpson%27s_paradox  1. Berkson's paradox https://en.wikipedia.org/wiki/Berkson%27s_paradox  1. Counterintuitive examples in probability    https://math.stackexchange.com/questions/2140493/counterintuitive-examples-in-probability  1. What are some counter-intuitive results in mathematics that involve only    finite objects?    https://math.stackexchange.com/questions/2040811/what-are-some-counter-intuitive-results-in-mathematics-that-involve-only-finite "
  },
  {
    "id": "courseras-data-science-specialisation",
    "objectID": "courseras-data-science-specialisation",
    "title": "Coursera's \"Data Science Specialisation\"",
    "tags": "coursera,data science,r",
    "category": "Technical/Data",
    "content": "  Last year I decided to learn the tools required to work as a data scientist. I was confident I already had the mathematical and analysis skills I needed, but I wasn't familiar with the tools of the trade.  Some googling brought me to Coursera, and the [Data Science Specialisation](https://www.coursera.org/specializations/jhu-data-science) run by Johns Hopkins University.  It consists of 9 courses, and so far I've completed five. If you do the courses in order then prior knowledge isn't required, and I think the courses strike a good balance of brevity and depth.  The main downside to me is that the courses exclusively use R (which is popular in academia) and I would rather be using Python (which is more popular in Industry).  Each course lasts about 3 weeks and deals with a specific aspect of data science, such as statistical inference or machine learning. Key concepts and tools in each subject are explained and developed, and whilst it's not as thorough as a longer course would be, there is more than enough material packed into the lectures, quizzes, assignments and projects to apply to real applications.  I've read that the second half of the specialisation is a lot more technical than the first, so I'm looking forward to setting aside some time, working through the assignments and acquiring some useful skills! "
  },
  {
    "id": "coworking",
    "objectID": "coworking",
    "title": "Coworking in Dublin",
    "tags": "freelance,coworking,dublin,element78,regus,officesuites,cocreate,studio9,glandore,tcube",
    "category": "Non-technical/Social",
    "content": "  Last week I arrived in Dublin and had two days to find a coworking space. I ran around Dublin visiting as many as possible.  I'm looking to rent a hotdesk, which means I don't have any storage space at the office and I don't have a particular desk.  Below are my impressions of eight businesses offering either hot desks or dedicated desks, ranked in order of preference. It's subjective. The going rate in Dublin seems to be €200 — €300 per month for a hot desk. Hours range from 9am - 7pm Monday - Friday, to 24/7.  ### First place: [Dogpatch Labs](http://dogpatchlabs.com/)  Dogpatch offer a coworking space and access to a community of tech startups. They run regular networking and mentoring events and occupy 3 floors of a warehouse next to an old dock. The offices have a range of interiors styles. The middle level is fairly standard but pleasant open plan offices, the top floor is a flexible working space with event areas. The lower level is a series of vaults that each contain meeting rooms of various sizes. There's a lot going on and there's a good buzz in the air.  The range of interior spaces is a big plus for me and I'm looking forward to being able to switch up my working environment through the day. There's a couple of kitchen areas, and a table football and table-tennis table on the top level. Access is 6am - midnight, and a hot desk is €200 per month. A dedicated desk is €400.  Dogpatch occupy less than a quarter of the warehouse building, the remainder of the space is used as a shopping mall and a museum. In my opinion Dogpatch is by far the best value and if you're working in tech it'll probably be your go-to solution.  ### Second place: [Studio9](http://studio9.ie/?page_id=223)  These guys are great. The space is a lot smaller that Dogpatch, comprising only ~12 desks. It's a basement, but don't let that put you off — its open plan and has large windows at either end. The space is well designed and uses a lot of light colours and textures, including wood on the walls and floors. There are also plenty of pot plants. These combine to give a bright and airy atmosphere that feels very natural and bright.  There are alcoves down one side of the main room which serve as meeting rooms, and a garden and basic kitchen at the back. The owners want the space to foster a community, and I expect that this is achieved. There are no dedicated offices and no teams using multiple desks, everyone is an independent worker.  The desks are large, and each has its own little wall to provide some privacy. €200 per month ongoing, or €250 for just one month. They offer a trial day for free.  ### Third place: [OfficeSuites](http://www.officesuites.ie/locations/20-harcourt-street/)  The building looks well run and appears clean and fresh with adequate resources. The building is an old Georgian tenement with high ceilings, cornicing and lots of natural light. The furnishings and decor lean towards corporate rather than something more interesting, but this works well to add a professional feel to the homely architecture. Access is 24/7.  There's only two rooms for hotdesking, and most of the building is given to private offices. There's a garden with bike storage, meeting rooms and a quiet room for calls. Lockers are extra. They also offer a free day as a trial.  €249 p/m for desk access 9am-7pm Monday - Friday  ### Fourth place: [Element78](https://www.element78.co/)  Friendly and well resourced, but very corporate. The architecture is corporate glass and steel. They're situated on the ground floor in a posh business district with large financials for neighbours. It's too corporate for me, but if you wanted an impressive place to meet clients and a nice address, this could be it. There were about 15 hot-desks for rent, plus plenty of dedicated desks. Clients seemed to include mostly young tech companies and tech freelancers.  I'm hoping to find somewhere with more of a community, more inspiring architecture, and more character. I was offered a free day as a trial.  €200 for the first month then €350 p/m  ### Fifth place: [Glandore](https://glandore.co/flexible-workspace.aspx#Hot-Desk)  Glandore offer a relatively luxurious package with a corporate feel. They have a few buildings in Dublin and only the flagship has hotdesking space. There's a super looking restaurant and a large club room to relax in, but these are features that I don't need, and the rates aren't competitive if all you need is a desk and somewhere to take calls. It's set up for teams and for impressing clients, and independent tech workers are probably better off elsewhere.  €295 p/m  ### Sixth place: [Regus](https://www.regus.ie/office-space/ireland/dublin/dublin-4-ballsbridge)  Regus offer a polished on boarding experience and the friendly staff were quick to respond and generally helpful, but the office space was bland, grey and generic. The rooms I visited didn't have external windows and it reminded me of the rooms banks often put auditors in. If grey walls and tube lights are your thing then this is for you. 24/7 access, and meeting rooms equipped with A/V.  €299.70 p/m.  ### Seventh place: [CoCreate](http://www.cocreate.ie/)  I visited the southern branch and thought the building was a bit shabby and needed a new layer of paint. I recognised the desks as some of the cheapest available from IKEA. The rooms were small and needed cleaning, and there was weird art on the wall.  The thought of paying €200 a month to sit at a small wobbly desk put me off. The place was also almost deserted. Maybe their other branch is better, but this is not for me.  €220 p/m.  ### Last place: [tCube](http://tcubedublin.com/tcube/index.html)  Last and least, tCube seems to be putting in zero effort. When I visited I saw two rooms that needed painting, disorganised furniture and abandoned bits of computers lying around. The kitchen isn't high spec and the meeting room isn't big enough. I was also given a speech about how great the wifi was - a prerequisite that was taken for granted everywhere else. At €300 p/m for a dedicated desk its easy to find better value elsewhere. "
  },
  {
    "id": "create-custom-functions-in-vim",
    "objectID": "create-custom-functions-in-vim",
    "title": "Vimscript functions",
    "tags": "vim",
    "category": "snippet",
    "content": "  Create a custom command and function to create a new file in vim.  ```vim command! -nargs=1 Ms call s:NewFile(<q-args>)`  function! s:NewFile(fp)   echom a:fp   execute 'e ' . '~/foo/bar/' . a:fp . '.ext' endfunction ```  Useful help:  - `:h %:h` → filename modifiers - `:h expand()` → expand wildcards, including filename modifiers  [question on SO](https://stackoverflow.com/questions/54354220/trying-to-create-a-vimscript-function-that-creates-a-new-file) "
  },
  {
    "id": "creating-slowly",
    "objectID": "creating-slowly",
    "title": "Creating Slowly",
    "tags": "meta,thinking,advice",
    "category": "snippet",
    "content": "  As a hacker, or creator, or whatever the best label is, I always want to create something (usually code) and have it finished.  But a strange creativity and productivity boost comes from dabbling, dipping in and out.  I think that if the technical challenges aren't too hard, then the main criteria for success is creativity.  Creativity needs time away from the project, and sleep, to bubble up and let ideas grow.  Ultimately, the most successful path is usually the most interesting, because success has more consequences than failure. 'Interesting' requires elements of novelty and surprise, and without creativity these elements can't flourish. 3/n  Dabbling results in more creativity than 6+ hours of strenuous work, and is more likely to give you satisfying results. "
  },
  {
    "id": "creating-users-with-sudo-permissions",
    "objectID": "creating-users-with-sudo-permissions",
    "title": "creating users with sudo permissions",
    "tags": "sudo,linux,user,admin",
    "category": "snippet",
    "content": "  ```bash adduser -m <username> usermod -aG sudo <username> ```  CentOS:  ```bash adduser -m <username> passwd <username> usermod -aG wheel <username> ```  (wheel is a usergroup with sudo permissions) "
  },
  {
    "id": "daddy-daughter-to-do-list",
    "objectID": "daddy-daughter-to-do-list",
    "title": "Daddy-Daughter To-Do List",
    "tags": "daughter,family",
    "category": "Non-technical/Journal",
    "content": "  Things we want to do together:  - [ ] Make some furniture - [ ] Run to the beach - [ ] Parkour - [ ] Go on bike rides - [ ] Go to work together (when she is older) - [ ] Go on long train journeys together (Paris and Salzburg) - [ ] Go to restaurants and have long conversations - [ ] Take interesting people to lunch and ask them questions "
  },
  {
    "id": "dan-lebrero-book-notes",
    "objectID": "dan-lebrero-book-notes",
    "title": "Dan Lebrero book notes",
    "tags": "reading,books",
    "category": "snippet",
    "content": "  A personal [blog](https://danlebrero.com/) with some notes on books that look interesting. I'd like to try reading these over the summer.  - [Zen and the art of motorcycle maintenance](https://danlebrero.com/2021/08/04/zen-and-art-of-motorcycle-maintenance-summary/#content) - [The subtle art of not giving a fuck](https://danlebrero.com/2021/09/08/the-subtle-art-of-not-giving-a-fuck-summary/#content) - [Thinking in systems](https://danlebrero.com/2021/07/21/thinking-in-systems-summary/#content) "
  },
  {
    "id": "data-science-teams",
    "objectID": "data-science-teams",
    "title": "Data Science Teams",
    "tags": "management",
    "category": "Technical/Engineering",
    "content": "  I was recently asked what I thought made for an effective data science team. Happily, I think my opinions on this topic are becoming more relevant, nuanced, and commercially valuable.  Two specific criteria I've recently thought of are:  1. A nuanced understanding of software architecture patterns - what they are,    why they're relevant, what are strengths and weaknesses of popular solutions to    common problems.  2. The avoidance, or deliberate unlearning of programming practices that are    learnt in academic (and to a lesser extent hobbyist) contexts. "
  },
  {
    "id": "daughter",
    "objectID": "daughter",
    "title": "Daughter",
    "tags": "family",
    "category": "snippet",
    "content": "  Yesterday my daughter asked me to write a page in her Freundebuch. "
  },
  {
    "id": "debugging-more-categories-pelican-plugin",
    "objectID": "debugging-more-categories-pelican-plugin",
    "title": "Debugging the more_categories plugin for Pelican",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  I've realised that one of the plugins I use to make this blog is not working correctly. I use the `more_categories` plugin to:  1. add subcategories 2. assign multiple categories to articles.  Subcategories aren't working and Pelican thinks each article just has categories than contain forward slashes.  In his 'Powerful Python' emails, Aaron Maxwell recommends looking at the source code for popular python libraries to see how really good Python is written, and how talented developers write code and solve problems.  This is a good opportunity to look at the code that powers the plugin and see if if I can:  1. Understand the source code 2. Locate the source of the problem 3. Fix the problem  I don't know if Pelican is amazingly good quality or not, I get the feeling it could do with more developer resources, but I've got a real reason and motivation to look at the underlying code so I'm going to give it a shot.  The documentation is sparse which doesn't help, I get the impression that whoever wrote it feels like Pelican is simple and it's obvious what's going on [ref]I guess it's the 'curse of knowledge'[/ref]. It's not obvious to me.  ## Pelican Plugins  Every plugin has to have a `register()` function, here it is for the `more-categories` plugin:  ```python def register():     signals.article_generator_context.connect(get_categories)     signals.article_generator_finalized.connect(create_categories) ```  I understand the idea of signals from Django, and generators are discussed a bit in the [documentation](https://docs.getpelican.com/en/latest/internals.html#how-to-implement-a-new-generator). So what else is happening...  As I write down my understanding of the plugin, I'm aware that my understanding is definitely incomplete and probably wrong. I hope that as I progress I will see the mistakes in what I've already written.  `get_categories()` is called first, and it takes two arguments, `generator` and `metadata`. The entire function is 3 lines so here it is:  ```python def get_categories(generator, metadata):     categories = text_type(metadata.get('category')).split(',')     metadata['categories'] = [Category(name, generator.settings) for name in categories]     metadata['category'] = metadata['categories'][0] ```  It looks like it gets the category from the metadata for each article. Presumably by the time this function is called the articles have already been parsed and a `metadata` object has already been created and populated with metadata about the articles, including categories.  The first row of `get_categories()` splits up the categories if multiple categories are listed. `metadata` must be a dictionary, and there must be a metadata dict for each article, otherwise you couldn't just get get the value assoiciated with the dictionary key and then split the string on commas.  This means that this function is called once for each article.  I don't know what `text_type` does yet. Maybe it ensures that the output is always a string. It's imported from `six` which I remember seeing being a dependecy of some other packages.  .. Having checked the [documentation](https://six.readthedocs.io/#six.text_type) for `six` it looks like I was right - it represents unicode textual data in both `python2` and `python3`. Pelican was originally written in Python2 I guess.  Next step is to write a new key-value pair to the metadata dictionary for each article. This plugin adds functionality to python by enabling `categories` and not just a `category` for each article. It seems clear that adding a `categories` key to the metadata dict is an obvious way to do this. The value for the `categories` key is a `list` where each item is an instance of the `Category` class. This class is instantiated using two arguments, `name` which is the string from the previous row, and `generator.settings` which is currently not understood.  .. printing the contents of `generator.settings` shows that its a dictionary of all the settings. Easily assumed and good to confirm.  I'll dig into the `Category` class in a moment, but first lets quickly cover the last row of the function. The `category` attribute of the articles metadata is simply updated with the first item in the categories list (`categories` must be a list because it can be indexed.)  ## class Category():  This class is the only class defined by the plugin (which is only 96 lines of code). It has 6 methods, 5 of them are decorated, and it has no constants.  The decorators are `property` [3], `_name.setter` [1] and `URLWrapper.name.setter` [1]. `URLWrapper` is imported from `pelican.urlwrappers` and I don't know what that does beyond 'wrapping URLs'.  ### @property  Decorators are functions that takes methods or functions as inputs. Using `property` along with `setter` decorators lets a class have a property assigned to it whilst ensuring that arbitrary conditions or logic is upheld. If the `@property` decorator is over a method called `foo`, then there would need to be a decorator called `foo.setter` on a method somewhere in the class.  That doesn't seem entirely right though, because in our `Category` class, we have a `@property` decorator over a `_name` method, and also a `@_name.setter` decorator over another method called `_name`. But the other methods with `@property` decorators (`slug` and `ancestors`) do not have any associated setter decorators or methods.  The setter for `_name` seems to create parent categories if the string contains slashes:  ```python @_name.setter def _name(self, val):     if '/' in val:         parentname, val = val.rsplit('/', 1)         self.parent = self.__class__(parentname, self.settings)     else:         self.parent = None     self.shortname = val.strip() ```  Here, `self.parent` becomes an instance of the category class, that is instantiated using `parentname` and `self.settings`. This is recursive to however many levels of subcategories are specified.  The `ancestors` and `as_dict` methods seem more confusing. `ancestors` isn't called or mentioned within the class definition, but is called from the `create_categories` function which is called after the `get_categories` function returns. I don't understand why it needs an `@property` decorator though.  The class inherits from `URLWrapper` so that is probably the next best place to look... Indeed, looking at the definition of `URLWrapper` shows that the `as_dict` method is overriding the definition in the base class. "
  },
  {
    "id": "delete-from-vim-insert-mode",
    "objectID": "delete-from-vim-insert-mode",
    "title": "Delete stuff in Vim without leaving insert mode",
    "tags": "vim",
    "category": "snippet",
    "content": "  - `<C-h>` - same as backspace - `<C-w>` - delete previous word - `<C-u>` - delete everything before cursor (on same row) - `<C-d>` or `<C-t>` - (un)indent a row - `<C-e>` - delete next word (create a mapping in vimrc) "
  },
  {
    "id": "design-patterns",
    "objectID": "design-patterns",
    "title": "Design Patterns",
    "tags": "abstractions,meta,software-engineering",
    "category": "Technical/Engineering",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Design patterns are generalized abstractions that solve common problems and help engineers create complex code reliably and quickly. I first heard about design patterns from Aaron Maxwell in his [Powerful Python](https://powerfulpython.com/) newsletter, and made some [notes](python-notes) in an earlier article.  Then the YouTube algorithm put the following video on my front page, and down the rabbit hole I went.  Take a look at the Borg design pattern.  <IframeEmbed src='https://youtube.com/embed/bsyjSW46TDg' />  These are some additional resources:  1.  [Java Design Patterns](https://java-design-patterns.com/) 1.  [SourceMaking](https://sourcemaking.com/design_patterns) 1.  [python-3-patterns-idioms-test](https://python-3-patterns-idioms-test.readthedocs.io/en/latest/PatternConcept.html) 1.  [fair repo](https://github.com/faif/python-patterns) (and my [fork](https://github.com/johnmathews/python-patterns/blob/master/patterns/creational/borg.py))  Some pdf resources, including the GoF book:  1.  [All the GoF patterns](/documents/design-patterns/All the GoF Patterns.pdf) 1.  [GoF_Design_Patterns_Reference](/documents/design-patterns/GoF_Design_Patterns_Reference0100.pdf) 1.  [c logica GoF catalogue](/documents/design-patterns/c-logica-gof-catalogue.pdf) 1.  [Design-Patterns](/documents/design-patterns/DesignPatterns.pdf) 1.  [securing GoF design patterns](/documents/design-patterns/securing GoF design petterns.pdf) 1.  [Wikipedia](https://en.wikipedia.org/wiki/Design_Patterns) page about GoF book. "
  },
  {
    "id": "different-types-of-problem",
    "objectID": "different-types-of-problem",
    "title": "3 Different Types Of Programming Problems",
    "tags": "uncategorized",
    "category": "Technical/Web",
    "content": "  ## Three categories of problem  Last year when I was creating [moneybar](https://moneybar/nl) and [pippip](https://pippip.email) there were a few problems that took much more effort to solve than all the others.  I think I could group problems into 3 buckets, based on how much time they take to solve. `Type 1` takes less than 15 minutes to solve, `type 2` takes between 15 and 45 minutes to solve, and `type 3` takes more than 45 minutes (usualy _much_ more).  ### Type 3:  When I start learning a hard thing (like web development), almost everything is in the third bucket and it's exhausting. You need to set aside big chunks of time, you need to be focussed and undistracted, calm and wide awake, and you need to be prepared for a long arduous journey.  Probably your criteria for success should be 'am I dead?' because then if you're asking the question you're guaranteed to be successful and keeping morale high is necessary for success.  ### Type 2:  Hopefully you can make good progress understanding the basics and internalizing the relevant abstractions, and your problems quickly[ref]on which timescale? Life is long, does it really matter if it takes 1 week or 1 month to learn something meaningful? Momentum, and having fun, is important though.[/ref] become `type 2` problems. They each take from 15 to 45 minutes to solve.  Maybe this is because you know enough to break some big general problem into smaller problems (you are developing domain expertise) and your intuitions for how to solve the problem are becoming better so your first or second attempts are likely to be correct, rather than your fifth or sixth.  Knowing how to google a problem so that you get the answer you need is also a really important skill, which requires intuiting how an English speaking expert would ask the question. This isn't trivial but I don't hear people discussing this often.  When most of my coding problems are `type 2`, it feels like I'm learning most efficiently and when I'm most productive[ref]from a personal growth point of view. I suppose from an employers point of view they want all problems solved fast, `type 1` problems.[/ref].  ### Type 1:  After a while, the problems that need to be solved become `type 1` problems. They take less than 15 minutes to solve, because:  1. All the big problems have been solved and now you've only got smaller problems left, and 2. Your intuitions are good and your expertise has increased and you know where to look for    answers.[ref]Open the right file, google the right query (and follow the link to    stack overflow), make some changes, run your static type checker and linter,    run your tests, and push. Done and on to the next item.[/ref]  ## Exceptional problems:  But there seems to be a consistent exception to this model.[ref]which is totally fine. It's just a mental model, and the map is not the territory[/ref] Let's be silly and call them `type W` problems. These are the problems that eat up far too many hours, and are tiring to solve, even when you are (in most other respects) an expert.  For me, these tend to relate to blob storage solutions for web apps deployed into production. I can think of several factors why this is so, and I'll describe the specifics before generalising.  When a web app runs in production, the data is not stored on the web server because the things that make a web-server cheap and efficient are not the things that make a database or a file storage bucket cheap and efficient.  Therefore they are stored somewhere else and you need some plumbing to join everything together. There are some abstractions involved to make this work easily and securely. However when developing locally, you are doing everything on your laptop. You have a web-server, relational database and file system all in the same place.  This is a big, fundamental, architectural difference between your development environment and your production environment. As a general rule, these are supposed to be as similar as possible.  These differences make it much easier to make something that works locally but doesn't work in production, and it's very hard to test if a thing will work in production without deploying it to your staging environment, which you are likely less familiar with than your local development setup.  Deploying to staging and debugging on staging is slower and harder than doing the same thing locally. Logging (and filtering) will likely be more important.  ## Solving exceptional problems  So how do you solve these problems quickly and efficiently? What is it about this problem that makes it so hard? Let's examine what makes the problem difficult to solve:  1.  Iteration cycles are slow - I can't test locally, I have to deploy to     staging and this takes time.  2.  The problem occurs in a 'high friction' environment - its difficult to dig     around and figure out what's really going on when its hidden below 3     different layers of abstraction, on a remote machine that I have limited     access to via a web browser. I want to be able to dig and investigate     quickly and easily using the same tools I use for writing and testing code     locally. I've taken great efforts to set up my local development     environment so that I can do this, and its stressful to switch to a     different and more limited set of tools.  3.  The problem is the result of several things interacting at once, and I can't     just test things one at a time. These things are probably very similar to     the abstractions.      Thinking clearly, learning, buidling, solving problems, all rely on being     able to separate or untangle a seemingly complex situation into its     component parts so that you can figure out what causes what. If you can't     isolate individual concerns or components, you have a black box that is     keeping you ignorant.      In web development, customized logging is usually a good way to being     isolating and exploring particular components.  Having said all that, I think the best way to solve a problem is to prevent it from occurring in the first place, but I'm not good enough to figure out how to do that, yet. "
  },
  {
    "id": "different-views-for-different-users",
    "objectID": "different-views-for-different-users",
    "title": "Different Views For Different Users",
    "tags": "uncategorized",
    "category": "Technical/Web",
    "content": "  This blog serves a variety of purposes. It's partly a journal of how I'm teaching myself to be a developer and a data scientist, and it's also a personal blog, with articles about my interests and experiences.  It's unlikely that anyone is interested in every type of article, and I'd like to make it easy for people to only read the content they're interested in. Therefore I thought I would separate the articles into two broad groups, `technical` and `non-technical`.  If you visit this blog for the first time by clicking a link to a technical article, the site will then only show you the technical articles on the blog. It's the same for non-technical articles. If you want, you can change these settings by clicking the paw icon[ref]It's a paw because cat's have paws and cat is like category. I might change this to something more intuitive in future, like making the icon an `N` if the user is only seeing non-technical posts, `T` for technical, and `A` for all posts.[/ref] in the navbar on the blog index page.  I did this mainly because I could. I like playing around with the blog. The JAM stack feels accessible and its fun working with tailwind and with jQuery.  I think that playing (being curious, lighthearted, and unhurried and not being concerned with failure) is really important. Especially for adults who don't usually do it much. Most of my successes or big opportunities have been the result of a process that started with playing around.  Here is the list of requirements I used when adding the feature:  **Requirements**:  - [x] If user lands on a page and DOESNT have local setting - create local setting based on type of article being read - [x] If user lands lands on a page and DOES have local setting which is contradicted - reset local setting to “all” - [x] If user lands on index and DOES have local settings, only show articles that match the setting  **Steps**:  - [x] Index page: check if local storage option exists, print to console the result - [x] Index page: make button group - [x] Index page: make correct button active on page load by using localstorage - [x] Index page: update active button on page click  * [x] Index page: filter/unfilter articles when button clicked * [x] Index page: if local storage does exist, respect it * [x] Index page: add 3 stage switch to hamburger menu * [x] Index page: make hamburger menu behave intuitively on small screens * [x] Index page: if local storage does not exist, pop up a modal asking for a choice * [x] Article page: check if local storage option exists, print to console the result * [x] Article page: if local storage doesn't exist, create it according to article type * [x] Article page: if local storage does exist and is contradicted, update article type to all "
  },
  {
    "id": "digital-currencies-the-basics",
    "objectID": "digital-currencies-the-basics",
    "title": "> Digital currencies: the basics\n",
    "tags": "bitcoin,cryptocurrencies,cryptography,digital currencies,finance,fintech",
    "category": "Technical/Cryptocurrencies",
    "content": "  Digital currencies are often discussed in the context of finance, technology and economics. The Blockchain - the technology which applications like Bitcoin are built on - is significant because it removes the need for trust or an intermediary between unrelated parties transacting with each other. So far, the most influential and famous digital currency is Bitcoin.  This post is intended to introduce the basic concepts of digital currencies and the problems a distributed ledger system needs to overcome.  ## What is a digital currency?  A digital currency is an internet based medium of exchange. Units of digital currency are not printed, are not physical, and represent nothing. A unit of currency is produced by running algorithms to solve complex mathematical problems. When a solution is found, a unit of currency (for example, 1 Bitcoin) is generated.  ## If the currency represents nothing, why is it valuable?  Because people believe that in future, other people will believe it does, and because people are willing to trade real goods and services in exchange for it.  This is the same as for dollars, sterling and euros (fiat currencies) which also don't represent anything physical. (Although these examples are  supported by laws or regulation).  In the past, creating a new currency without the support of government hasn't been practical because:  1.  A central bank was required to control the physical creation of new currency (otherwise people would create counterfeit currency, decreasing scarcity and moving its value towards zero) 2.  An intermediary (a bank) was required for all large or remote transactions, to make sure that the amount of money each party owns is correctly recorded and updated in a ledger (preventing double spending of funds)  The technological breakthrough was preventing double spending without requiring an intermediary. This is made possible by using cryptographic techniques developed over the last few decades, and cheap, powerful computers which have only recently become available.  ## Central and distributed ledgers  With conventional currencies everyone's balance and transactions are recorded in one central ledger (a list showing how much money each account has) and each account holder only has access to their own balance and transactions. With digital currencies, a copy of the entire ledger (every transaction ever made by everyone) is held on each computer (or node), and anyone can see everyone's transactions.  Conventionally, if two parties wish to make a remote transaction then they need a bank to be the intermediary. The bank mediates by updating the central ledger to record the change in each parties funds as a result of the transaction. This is how one party knows if the counter-party is able to pay, and how payment is confirmed. If there is only one copy of the ledger, maintained by the bank, then the bank must be involved in every transaction between its account holders. This need for an intermediary increases the complexity and cost of doing business.  ## Sending money  To send money, a message is broadcast to the network that the amount in your account should decrease and the amount in another account should increase. Each computer in the network (a node) which receives this message will check its authenticity, make the changes, and pass the message along to other nodes.  ## What problems does blockchain solve?  For a transaction to be accepted and entered into the distributed ledger, its authenticity needs to be verified. Because the ledger is distributed, everyone can see everyone else's transactions. Therefore user authentication and transaction authorisation needs to be possible without compromising a user's ability to send secure payments in future.  There is also the problem of double spending - because the currency is neither physical, printed or representative of anything, how do you prevent a user from spending their currency more than once, or simply creating as much new currency as they want?  Another problem is the addition of new transactions to the ledger from many unrelated users. If each party has their own copy of the ledger, updating (or changing) it as they want, how would the ledgers completeness and accuracy be assured? How would you update your ledger to take account of transactions between third parties, and how would you know the order in which they occurred?[^1] The blockchain is remarkable because it is the first technology to solve all of these problems. Future posts will consider each of these problems are overcome.  [^1]:     This is the Byzantine Generals problem, which is nicely described in the introduction of     [this paper](http://research.microsoft.com/en-us/um/people/lamport/pubs/byz.pdf) "
  },
  {
    "id": "direnv",
    "objectID": "direnv",
    "title": "Managing environment variables with Direnv",
    "tags": "cli,environment-variables,project-management,direnv,pyenv,virtual-environments",
    "category": "Technical/Developer Tools",
    "content": "  ## Background  `Direnv` is a utility to load and unload environment variables automatically as you navigate in and out of directories. It can also hook into pyenv to load and unload virtual environments.  Global config for direnv exists in `~/.config/direnv`. This is where you put the additional pyenv commands.  You need to create a `.envrc` file in the project root which you want to trigger the virtualenv activation. E.g.:  It works by checking for the existence of a `.envrc` or `.env` file in the current or parent directories. If the file exists and is authorized then it's loaded into a **bash** subshell, and all exported variables are then captured by direnv and made available to the current shell.  It can also hook into pyenv to load and unload virtual environments.  Direnv is fast enough to be unnoticeable on each prompt, because its compiled into a single static executable. It is language agnostic.  ## Config  Global config for direnv exists in `~/.config/direnv`. This is where you put the additional pyenv commands.  The project's [wiki](https://github.com/direnv/direnv/wiki/Python#pyenv-virtualenv) contains instructions for setting up direnv with pyenv, pyenv-virtualenv and other python tools, and tools for other languages  You need to create a `.envrc` file in the project root which you want to trigger the virtualenv activation. E.g.:  ```bash pyversion=3.10.0 pvenv=blog  use python ${pyversion} layout virtualenv ${pyversion} ${pvenv} layout activate ${pvenv} ```  ## References  A [useful gist](https://gist.github.com/ZhangChen199102/da3133fc05e3b03afab405fdc3152fb3) "
  },
  {
    "id": "disk-full-and-usage-commands",
    "objectID": "disk-full-and-usage-commands",
    "title": "Disk Full and Disk Usage Commands",
    "tags": "linux,du,df,shell,cli",
    "category": "snippet",
    "content": "  `df -h`  Show disk space  `du -hs .`  See how big the current dir is "
  },
  {
    "id": "django-cbv-method-flowchart",
    "objectID": "django-cbv-method-flowchart",
    "title": "Django CBV method flowchart",
    "tags": "django,back-end,web-dev",
    "category": "Technical/Web",
    "content": "  The [documentation](https://docs.djangoproject.com/en/3.2/ref/class-based-views/generic-display/) calls it the method flowchart:  1. setup() 1. dispatch() 1. http_method_not_allowed() 1. get_template_names() 1. get_slug_field() 1. get_queryset() 1. get_object() 1. get_context_object_name() 1. get_context_data() 1. get() 1. render_to_response()  A question on [SO](https://stackoverflow.com/questions/17768444/django-class-based-views-function-execution-order).  ## setup(request, \\*args, \\*\\*kwargs)  - Performs key view initialization prior to dispatch(). - If overriding this method, you must call super().  ## dispatch(request, \\*args, \\*\\*kwargs)  - The view part of the view – the method that accepts a request argument plus arguments, and returns an HTTP response.  - The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a GET will be delegated to get(), a POST to post(), and so on.  - By default, a HEAD request will be delegated to get(). If you need to handle HEAD requests in a different way than GET, you can override the head() method. See Supporting other HTTP methods for an example.  ## get_object(queryset=None)  Returns the single object that this view will display. If queryset is provided, that queryset will be used as the source of objects; otherwise, get_queryset() will be used. get_object() looks for a pk_url_kwarg argument in the arguments to the view; if this argument is found, this method performs a primary-key based lookup using that value. If this argument is not found, it looks for a slug_url_kwarg argument, and performs a slug lookup using the slug_field.  ## render_to_response(context, \\*\\*response_kwargs)¶  - Returns a self.response_class instance.  - If any keyword arguments are provided, they will be passed to the constructor of the response class.  - Calls get_template_names() to obtain the list of template names that will be searched looking for an existent template.  ## response_class¶  - The response class to be returned by render_to_response method. Default is TemplateResponse. The template and context of TemplateResponse instances can be altered later (e.g. in template response middleware).  - If you need custom template loading or custom context object instantiation, create a TemplateResponse subclass and assign it to response_class. "
  },
  {
    "id": "django-for-startup-founders",
    "objectID": "django-for-startup-founders",
    "title": "Django for Startup Founders",
    "tags": "django,saas,startups,python",
    "category": "snippet",
    "content": "  Better read this [article](https://alexkrupp.typepad.com/sensemaking/2021/06/django-for-startup-founders-a-better-software-architecture-for-saas-startups-and-consumer-apps.html)  [archive](https://web.archive.org/web/20210624093453/https://alexkrupp.typepad.com/sensemaking/2021/06/django-for-startup-founders-a-better-software-architecture-for-saas-startups-and-consumer-apps.html) "
  },
  {
    "id": "do-nothing-scripts",
    "objectID": "do-nothing-scripts",
    "title": "Do-nothing scripts",
    "tags": "programming",
    "category": "snippet",
    "content": "  Interesting [article](https://blog.danslimmon.com/2019/07/15/do-nothing-scripting-the-key-to-gradual-automation/) about writing down a list of manual steps for tasks that can't be automated. A do-nothing script can take some of the toil out of a manual slog.  Even though the script doesn't do anything other than display text on a screen (the instructions to complete the task) it's still helpful, because:  - All the steps and information required are collected together. - It lowers the activation energy required to do something fiddly. - Each step is part of a function, and the function can be updated with   automation code if automation becomes possible. - It's more difficult to lose your place in the process, or get the order of   steps wrong.  It doesn't reduce manual effort. It does reduce toil. "
  },
  {
    "id": "docker-commands",
    "objectID": "docker-commands",
    "title": "Docker Commands",
    "tags": "docker",
    "category": "snippet",
    "content": "  ```bash docker run -d ... docker logs -f <ID> docker run -it ... docker run -itd docker container attach <ID> <C-p><C-q> -> detach from container interactively ```  [stack overflow](https://stackoverflow.com/questions/34029680/docker-detached-mode) "
  },
  {
    "id": "domain-name-registrars",
    "objectID": "domain-name-registrars",
    "title": "Domain Name Registrars",
    "tags": "web",
    "category": "snippet",
    "content": "  - [https://namecheap.com](https://namecheap.com) (cheap) - [https://instantdomainsearch.com](https://instantdomainsearch.com) (variants) - [https://iwantmyname.com](https://iwantmyname.com) (tld comparison) "
  },
  {
    "id": "du-command",
    "objectID": "du-command",
    "title": "`du` is a tool for showing disk usage.\n",
    "tags": "cli,unix,macos",
    "category": "snippet",
    "content": "  There is a similar tool, with a list of other similar tools [here](https://dev.yorhel.nl/ncdu`) "
  },
  {
    "id": "edward-hopper-s-paintings",
    "objectID": "edward-hopper-s-paintings",
    "title": "Edward Hoppers Paintings",
    "tags": "art,painting,photography",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  some text  <IframeEmbed src='https://youtube.com/embed/pzp62IMj650' />  [archive](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/edward-hopper_1080p.mp4) "
  },
  {
    "id": "elon-musk-s-engineering-philosophy",
    "objectID": "elon-musk-s-engineering-philosophy",
    "title": "Elon Musk's Engineering Philosophy",
    "tags": "uncategorized",
    "category": "Technical/Engineering",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Whilst giving Tim Dodd a tour of a SpaceX facility, Musk described an interesting five-step engineering process:  1.  **Make the requirements less dumb**. The requirements are definitely dumb; it     does not matter who gave them to you. He notes that it’s particularly     dangerous if an intelligent person gives you the requirements, as you may     not question the requirements enough. “Everyone’s wrong. No matter who you     are, everyone is wrong some of the time.” He further notes that “all designs     are wrong, it’s just a matter of how wrong.”  1.  **Try very hard to delete the part or process**. If parts are not being added     back into the design at least 10% of the time, not enough parts are being     deleted. Musk noted that the bias tends to be very strongly toward “let’s     add this part or process step in case we need it.” Additionally, each     required part and process must come from a name, not a department, as a     department cannot be asked why a requirement exists, but a person can.  1.  **Simplify and optimize the design**. This is step three as the most common     error of a smart engineer is to optimize something that should not exist.  1.  **Accelerate cycle time**. Musk states “you’re moving too slowly, go faster! But     don’t go faster until you've worked on the other three things first.”  1.  **Automate**. An important part of this is to remove in-process testing after     the problems have been diagnosed; if a product is reaching the end of a     production line with a high acceptance rate, there is no need for in-process     testing.  <IframeEmbed src='https://youtube.com/embed/t705r8ICkRw' />  [archive](https://storage.googleapis.com/assets.johnmathews.is/movies/Starbase-Factory-Tour-with-Elon-Musk-Part-1.mp4) "
  },
  {
    "id": "emacs-dreaming",
    "objectID": "emacs-dreaming",
    "title": "Dreaming of Emacs",
    "tags": "emacs,dream",
    "category": "snippet",
    "content": "  _Two nights ago, I dreamt I was experimenting with Emacs.._ "
  },
  {
    "id": "email-forwarding",
    "objectID": "email-forwarding",
    "title": "Forward Email",
    "tags": "email",
    "category": "snippet",
    "content": "  I know about [ImprovMX](https://improvmx.com/), which used to be great because you could do a lot for free, but now you only get 1 domain for free.  [ForwardEmail](https://forwardemail.net) are 3 times cheaper than ImprovMX, and I have 2 domains forwarding email. It's not particularly private, but I can send and recieve from a domain, for free. "
  },
  {
    "id": "encryption",
    "objectID": "encryption",
    "title": "Encryption",
    "tags": "encryption,rsa,dlt,blockchains,bitcoin,digital currencies,public key cryptography",
    "category": "Technical/Cryptocurrencies",
    "content": "  Blockchains use Elliptical Curve Cryptography (ECC) to authenticate users and authorise transactions. These notes introduce the field of cryptography and explains how modern cryptographic methods work. I wrote them to teach myself about encryption [^1]  To begin with the absolute basics, encryption generally works by taking a message and representing it as a series of numbers [^2] which are then turned into a series of random looking numbers. Decryption works by turning the random looking numbers back into the original message.  ## Background  The history of Cryptography can be split into classical and modern eras. Modern cryptography began in 1977 with the introduction of the RSA and Diffie-Hellman algorithms.  Until then, Cryptography required using a single key (the secret code) to encrypt and decrypt the message. This was transferred from sender to receiver secretly, but not cryptographically. In classical cryptography, the code is a *shared* secret.  The modern era removed the requirement for a shared secret and instead used number theory as a basis for quantifying the strength of an encryption method. The strength of a modern cryptographic technique is quantifiable and provable by reference to number theory, rather than a users ability to transport or transfer a secret code.  Modern cryptography is defined by Public Key Cryptographic systems. They use one key (code) for encryption and another for decryption. The encryption key can be made public without any risk of the message being decrypted, and is therefore known as the public key. The key used to decrypt data is the private key, and must not be revealed. If a message is encrypted with the public key it can only be decrypted with the private key.  Public Key Cryptographic (PKC) systems use algorithms that are easy to process in one direction but difficult to reverse, which are known as mathematical trap-door functions. A simple example of a trap-door function is the product of two prime numbers. If two random prime numbers are chosen, it is trivial to find their product. However if only the product of the two numbers is known, it is relatively difficult to find either of the factors used to create the number (this is factorisation). This was first noticed in 1874, when [Jevons](https://en.wikipedia.org/wiki/William_Stanley_Jevons#Jevons.27_number) remarked:  > 'Can the reader say what two numbers multiplied together will produce the number 8,616,460,799? I think it unlikely that anyone but myself will ever know.'\\*  This simple problem shows that finding the product of two (secret) prime numbers is computationally simple, but factorising the result is not. This type of problem is a key feature of modern cryptography. Factoring prime numbers is a super famous mathematical problem, it was studied by [Eratosthenes](https://en.wikipedia.org/wiki/Eratosthenes) [^3] in the 3rd century BC and more recently the [RSA Factoring Challenge](https://en.wikipedia.org/wiki/RSA_Factoring_Challenge) has intended to track state-of-the-art factorisation techniques by issues cash prizes for the factorisation of products of large primes.  Generally, the bigger the difference in difficulty between executing the function and reversing it, the better the cryptographic technique.  The RSA algorithm below uses factorisation as the foundation of its security, but factorisation is not the hardest problem to solve relative to the size of the keys required. Algorithms have been developed to factor the products of large prime numbers, and are much more efficient than randomly guessing possible factors. The greater the size of the primes being factored, the more efficient these algorithms become, and therefore the difference in difficulty between executing the function (multiplying two large primes) and reversing it (factorisation) becomes smaller as the size of the cryptographic key length increases. This is a problem because as public key cryptography becomes more commonly used the resources available to factor products of primes increases, and consequently larger keys are required.  Ultimately, encryption techniques based on the difficulty of factorisation will become redundant as the difficulty gap between creating and solving them shrinks. A better trap door function is required.  ## Overview of the RSA algorithm  Named after its founders ([Ron Rivest](https://en.wikipedia.org/wiki/Ron_Rivest 'Ron Rivest'), [Adi Shamir](https://en.wikipedia.org/wiki/Adi_Shamir 'Adi Shamir'), and [Leonard Adleman](https://en.wikipedia.org/wiki/Leonard_Adleman 'Leonard ')), RSA was one of the first public-key encryption algorithms and is still widely used.  RSA (as well as other cryptographic techniques) makes use of a number line which loops back to zero after reaching a maximum value, rather than increasing indefinitely. This means that once a maximum number $n$ has been defined, if a number greater than $n$ is created the result simply loops around to 0 and begins counting from 0 again. i.e. if $n = 10$, then $7 + 5 = 12 - 10 = 2$. The result of a calculation on a looping number line may easily be found by doing long division and using the remainder as the final answer, i.e. $12 / 10 = 1$ with $2$ remaining.  ## Generation of a pair of RSA keys:  ### 1. Generate the RSA module  - Select two large random prime numbers, $p$ and $q$. They need to be random because anyone who knows or guesses them will be able to decrypt the encryption. - Calculate $n = pq$  ### 2. Find derived number (e)  - *e* must be greater than 1 and less than $( p - 1)( q - 1)$. - There must be no common factor for e and $( p - 1)( q - 1)$ except for 1. [^4]  ### 3. Form the public key  - The pair of numbers $(n, e)$ form the public key and can be made public. - Even though $n$ is public, it is so difficult to factor the product of 2 large prime numbers that an attacker would not be able to find its component primes in the time available. The strength of RSA rests entirely on the difficulty of factoring $n$ into its two component prime numbers.  ### 4. Generate the private key (d)  - The private key is generated from using $p$, $q$ and e as inputs to the Extended Euclidean Algorithm. For a given set of values, there is a unique answer $d$. - $d$ is the inverse of $e$ modulo $( p - 1)( q - 1 )$. This means that $d$ is the number less than $( p - 1 ) ( q - 1 )$ such that when it is multiplied by e, it is equal to $1$ modulo $( p - 1 ) ( q - 1 )$.  ## RSA example:  RSA does not directly operate on strings as bits, it operates on numbers modulo (less than) $n$. and it is necessary to represent plain text as a series of numbers less than $n$. The dominant encoding on the internet is [UTF-8](https://en.wikipedia.org/wiki/UTF-8), which represents each upper case Latin letter as a number between 65 and 90. Using this encoding, a message 'HELLO' would become '$72, 69, 76, 76, 79$'.  The maximum number $n$ needs to be the product of the two prime numbers $p$ and $q$. For this example choose $p = 7$ and $q = 13$, so $n  = 91$ [^5]  The public key component *e* can be any number we choose,  as long as there is no number other than 1 which is a common factor of *e* and $( p - 1 ) ( q - 1 )$. In our example, this requires that there be no common factor between 72 and e other than 1, so let _e_ $= 5$.  Therefore our public key is (91, 5). This can be made available to anyone without messages being decrypted because of the difficulty of factoring the product of (very large) prime numbers.  Using the fact that we know 5 and 11 are the prime factors of 55 and e is 5, we can use the Extended Euclidean Algorithm  to compute our private key $d$, which is 29.  Therefore when the prime factors 7 and 13 are used, the public key is (91, 5) and the private key is (91, 29). These parameters fully define a functional RSA system.  ### Encoding  To encode a letter H in a message ('H' is $72$ in UTF-8), we need to multiply it by itself $e$ times ($e = 5$), remembering to wrap around each time we pass our maximum value of $n = 91$.  $72 \\times 72 = 5184, 5184 / 91 = 56$ with $88$ remaining, (i.e. $5184 = 91 \\times 56 + 88$). Therefore: $72 \\times 72 = 5184 = 88$ $88 \\times 72 = 6336 = 57$ $57 \\times 72 = 4104 = 9$ $9 \\times 72 = 648 = 11$  Therefore the encrypted value of 'H' is '$11$'  Using the method for each character in the message 'HELLO' results in the encoded message '\\$11,62,20,20,53\\$'.  To decrypt the message, we take each number and multiply it by itself $d$ times, ($d=29$) wrapping around each time we pass $91$.  $11 \\times 11 = 121 = 30$ $30 \\times 11 = 330 = 57$ ... $57 \\times 11 = 627 = 81$ $81 \\times 11 = 891 = 72$  And we're back to our original encoding.  ## Files  The spreadsheet I used to calculate the encrypted and decrypted values can be downloaded [here](/documents/RSA-Example.xlsx).  A simple python script to encrypt and decrypt a message is [here](/documents/AES_Example.py). It uses the AES encryption method.  ## Footnotes  [^1]: I used the explanations [here](http://www.tutorialspoint.com/cryptography/public_key_encryption.htm) and [here](https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/) a lot. [^2]: A simple example is $A=1, B=2$ etc [^3]: Eratosthenes invented his famous [sieving algorithm](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) which finds all the primes up to a given limit. [^4]: If this is the case then e and ( p - 1) ( q - 1 ) are called 'coprime' [^5]: Whilst the Extended Euclidean Algorithm is apparently simple to compute, its description is not. Therefore I've used the same numbers in the following example as in the tutorials [here](http://www.tutorialspoint.com/cryptography/public_key_encryption.htm) and [here](http://arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/). "
  },
  {
    "id": "ethereum-parity-multisig-wallet",
    "objectID": "ethereum-parity-multisig-wallet",
    "title": "Create a Multi-Signature Ethereum wallet using Parity",
    "tags": "ethereum,parity,blockchains,fintech,multi-sig,wallet",
    "category": "Technical/Cryptocurrencies",
    "content": "  I recently set up a multi-sig Ethereum wallet and I couldn't find clear instructions. Here they are, I hope these instructions are useful for someone looking to get started.  You'll need a way to interact with the Ethereum blockchain in order to deploy a wallet. There are several apps that you can use. I've used Parity because I found it simple and quick.  ## Ethereum Wallets  Wallets are a type of contract and there are two types of wallet, the Multi-Sig wallet and the Watch wallet. An Ethereum account is required to communicate with a contract so if you want a multi-sig wallet with 3 signatories (for example) then you will need to have set up at least 1 of those 3 Ethereum accounts before creating the wallet.  ## Parity  From their website:  > Integrated directly into your Web browser, Parity is the fastest and most secure way of interacting with the Ethereum network.  You can do a bunch of stuff with Parity including mining Ether, manage accounts, interact with different dapps, send/receive from different accounts, and set up contracts. On the accounts tab, you can quickly set up Multi-Signature wallets. If you use the Chrome plugin you will also get handy notifications when transactions are confirmed or contracts deployed.  ## Download and open Parity  For MacOS you can download and install Parity by visiting the Parity site and downloading the [installer](https://parity.io/parity.html), or from the terminal using curl or Homebrew.  ### Simple option  ```shell    $ bash <(curl https://get.parity.io -kL) ```  ### Homebrew  Detailed instructions are [here](https://github.com/paritytech/homebrew-paritytech).  ```shell    brew tap paritytech/paritytech    brew install parity --stable ```  If you used the installer, then you open Parity opening the app and then using the logo in the menubar.  If you used Brew, then start Parity with the following command  > parity  and then go to the following address in your browser:  > http://127.0.0.1:8180/  You should now see something similar to this:  ![Parity home screen view](/static/images/parity-home.jpeg)  ## Add or create accounts  ![Parity toolbar](/static/images/Parity-toolbar-accounts.jpeg)  ![Parity toolbar](/static/images/parity-account-creation.jpeg)  Select the Accounts tab from the top of the page and then select '**+ Account**'. Either create new accounts or import them using your preferred method. You don't need to import all the accounts that will be part of the multi-sig wallet, but you will need to import or create the account that will own the wallet you are about to create. This account will need to have a large enough Ether balance to pay the transaction costs to deploy the multi-sig wallet onto the Blockchain. The costs are tiny, but they are greater than zero.  ## Create the multi-sig wallet  ![Parity toolbar](/static/images/Parity-toolbar-wallet.jpeg)  ![Wallet management](/static/images/parity-wallet-details.jpeg)  1. Once you've either created or imported the account which will deploy the wallet, select '**+ Wallet**' from the accounts tab and choose '**Multi-Sig wallet**'. Click next.  2. Enter a **name** for the wallet, if you want you can add a local **description**.  3. The '**From account**' will be the contract owner and this account will     1. Be one of the signatories.    2. Need to have enough Ether to pay for the execution of the contract on the blockchain.  4. Click the '+' button under '**Other wallet owners**' to add the address of the other signatory accounts. You'll need to add one line for each signatory and these accounts will also own the wallet once it is deployed.  5. In the '**required owners**' section, specify how many accounts will need to approve a transaction that is above the daily transaction limit.  6. Use the '**wallet day limit**' to set how much Ether can be spent by each account per day _without_ needing another account to approve the transaction. Set an amount of 0 if you want all transactions to require approval, or turn the option off using the slider to the right (which just specifies a huge number).  7. Click 'next' and you'll be shown a pop-up window to approve the creation of the wallet. You will need to enter the password of the account which is creating the wallet, and once you click 'Confirm request' the funds in the creators accounts will be used to deploy the contract on chain and create the multi-sig wallet.  ![Wallet management](/static/images/parity-conf-box.jpeg)  ## Adding an existing multi-sig wallet  Once your wallet is created and deployed, you'll need to add it to other parity clients so that the other signatories can make or confirm transactions, and view the wallets balance. This is done by adding a watch wallet.  Process: Accounts tab > + Wallet > Watch wallet > enter the address of the multi-sig wallet.  The other signatories will now be able to view the wallet's balance, get notifications about pending confirmations, and be able to make and monitor transactions.  ## Managing a multi-sig wallet  8. Anyone can put funds into the wallet, just like a normal account. Just send Ether to the wallet's address.  ![select multisig wallet](/static/images/parity-select-multisig.jpeg)  ![select multisig wallet](/static/images/new-parity-wallet.jpeg)  9. At the top of the page you click '**Edit**' to change the local name and description of the wallet.  10. '**Settings**' allows you add or remove owners (signatories) of the wallet and change the required number of approvals and the wallet day limit. If you change these settings then the changes will need to be executed on the blockchain and the account requesting the change will therefore need to pay the required funds. Depending on the settings being changed, other accounts will need to approve the changes before they are implemented.  11. '**Forget**' will remove the multi-sig wallet from your accounts tab.  ## Moving funds out of a multi-sig wallet  13. Click on '**Transfer**' in the wallet management window (pictured above) to begin withdrawing funds from the wallet.  14. Select the token you want to transfer - Ethereum is the only default option. 15. '**Sender address**' - specify which account wants to withdraw the funds from the multi-sig wallet. 16. '**Recipient address**' - specify which account will receive the funds. 17. '**Amount to transfer**' - specify how much you want to transfer. If the amount is greater than the remaining daily limit you will get a warning bar telling you the transaction will require confirmation from other wallet owners. 18. If you want to specify the maximum transaction fee (a payment with a lower fee will be confirmed more slowly than usual) tick the '**advanced sending options**' box. 19. Clicking 'send' will bring you to the confirmation stage where you can enter the password for the account which is requesting the transfer. 20. If approval from other wallet owners is required and they are also using Parity, then they can see that their approval is required in two ways:     - The signer tab will show there is a pending request.  ![Wallet management](/static/images/parity-signer-alert.jpeg) - The wallet management window (accessed from the accounts tab) has a 'pending transactions' section where any confirmation requests will be shown.  ![Wallet management](/static/images/parity-wallet-management.jpeg) "
  },
  {
    "id": "faith-in-jesus",
    "objectID": "faith-in-jesus",
    "title": "Why Talk About Jesus?",
    "tags": "uncategorized",
    "category": "Non-technical/Other",
    "content": "  ## Start with happiness  It seems to me that I am much happier as a Christian than I would be if I weren't. By 'being a Christian' I mean following Jesus - trying my best to act, think and speak like he want's me to because I'm grateful that he did what I believe he did. I believe he died for my sins and is now alive, having been miraculously resurrected by his father[ref]And many other things also.[/ref] (who is now my father too).  It's not just an intellectual exercise. I believe that Jesus is alive because I seem to have experienced his companionship and intervention in my day-to-day life. This is unusual, mind boggling, and makes things significantly more complicated than if I thought he were dead. Nonetheless it seems to be true.  It's not like I see supernatural intervention every day or anything, but there have been various times - too many to discard - when my prayers have been answered in practical ways (I'll leave out the intangible for now) that have surprised me and given me a lot of respect for the risen Jesus doing what its said he'd do in the bible.  ## Obvious answers  There was this time I was in Yemen trying to get back to my room across town, at night and during a storm. I was lost and couldn't read Arabic to understand which bus to get. So I prayed, and two buses later I got off at the right stop.  Another example, I was getting a haircut in Liverpool Street Station in London, and as I was sitting in the chair someone took my work bag. When I came to pay, I realised my laptop and wallet had gone.  Trying to find a stolen bag in central London feels ridiculous. Even so, I spent a few hours wondering around the alleys and parks looking for it, and I resigned myself to some awkward conversations and using most of my next salary to replace the stolen computer.  To my surprise, my parents-in-law prayed about it and were really confident it would come back to me, which seemed super unlikely. A few days later I received a call from an office worker in the Gherkin building - my bag was under his desk and he wanted to know if I'd like to collect it. I guess I'll try not to make the same mistake twice.  The other example I tend to remember happened not long after I'd first moved to Vienna. I was feeling lonely and isolated and I was wondering how on earth I was going to find some sort of normal that was healthy and sustainable. Try as I might, I wasn't enjoying things at all and was feeling stressed and overwhelmed. I remember walking up this steep hill in the 18th district towards my office, and repeatedly praying this really simple prayer 'God, please help, please help, please help..'. It was that simple because I couldn't think of anything more useful to say.  Nothing dramatic happened that day, or even that week as far as I can remember. But when I look back, it was a turning point when things started getting better instead of worse.  I suppose you can call this last example an intangible answer to prayer. Maybe it is, but I think anyone whose grappled with overwhelming loneliness or panic would say that the emotions become all too tangible at times. Being in a different emotional state seemed to make a tangible difference to just about every area of life. Eating, productivity at work, relationships with friends and colleagues, etc.  This is only the beginning of why I think Jesus is alive and why I think Christianity is a real and living faith. It's not primarily a tradition, a worldview or a set of rules and ideals.  Christianity is a relationship with Jesus. He did lots of amazing things that have let me have a very practical relationship with him. It's an almost unbelievable premise from which to live a life. It has so many implications. And it holds up to scrutiny and my experiences bear it out.  ## Why write this?  Despite Jesus' incredible works and their implications, modern Christianity seems to be in a really confused and ineffective state. Ideas and thoughts about Christianity-the-faith have become mixed up with cultural christianity, or christian politics and traditions. These are each different things, and unless we distinguish between them with the words we use, we are going to find it hard to think and communicate clearly.  I suspect that we are in a negative cycle of imprecise thinking leading to imprecise articulation, which leads to further imprecise thinking.  Unless we can talk and think about one thing at a time, atomically[ref]from first principals[/ref] if necessary, we take on the additional risks of reaching the wrong conclusions personally, or arguing with others due to misunderstandings rather than actual disagreement.  We should try to create a more precise vocabulary to navigate our Christian lives, so that we can think clearly about the experiences and questions we have.  Imprecise thinking is frustrating, and conversations are less effective when there's an increased risk of disagreement or misunderstanding what someone else means. This makes it harder to talk about our faith, which makes talking less common, and this creates room for misunderstanding or apathy, or missed opportunities, or sadness. "
  },
  {
    "id": "file-descriptors",
    "objectID": "file-descriptors",
    "title": "File Descriptors and /dev/null",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  ## /dev/null  In Linux everything is a file, including virtual devices like keyboards. Processes (programmes) can request access to or from these devices.  The only difference between these virtual device 'files' and real files, is that for a virtual device the OS generates the data that goes into the file, instead of reading the data from storage.  `/dev/null` is a virtual device that looks like a file and is used to write output into a black hole that is discarded, lost forever and never seen. It isn't written to the terminal.  ## File Descriptors  File descriptors are integer values assigned to a file.  - **stdin** has a file descriptor of 0 - **stdout** has a file descriptor of 1 - **stderr** has a file descriptor of 2  Two outputs are generated whenever a CLI is run `stdout` and `stderr`. By default, both these data streams are associated with the terminal. You can use file descriptors to redirect them.  If a command exits successfully, the exit status is 0.  If it exits unsuccessfully, the exit status will be something else.  If you don't specify which file descriptor you want to use, bash will use `stdout` by default.  The following redirects `stdout` away from the terminal and into `/dev/null`.  ```bash $ echo “Hello World” > log.txt ```  This will redirect `stderr` into a file:  ```bash $ asdfadsa 2> error.txt ```  If you run a command that generates lots of error messages along with 'good' messages, you can redirect all the error messages (`stderr`) into `/dev/null` so that you can only see the useful `stdout` messages. e.g.:  ```bash $ grep -r hello /sys/ 2> /dev/null ```  If you want to run a command and only see the errors, (`stderr`) then you can filter out all the `stdout` by redirecting the `stdout` messages to `/dev/null`:  ```bash $ ping google.com 1> /dev/null ```  ## Redirect all output into /dev/null if you want a command to run quietly,  Redirect all the output. The command below redirects `stdout` to `/dev/null` (the default file descriptor is 1 if it isn't specified) and then redirects file descriptor 2 into file descriptor 1.  ```bash $ grep -r hello /sys/ > /dev/null 2>&1 ```  ## Read input from a file instead of the terminal  ```bash 0<infile ```  ## Direct stderr to append to a particular file  ```bash 2>>logfile ```  ## Combining file descriptors  `2>&1` means send `stderr` wherever `stdout` is going. This means that you've combined `stdout` and `stderr` into one data stream and you can't separate them anymore. It also means you can pipe `stderr` the same as you can `stdout`.  # Input  You can redirect `stdin` similarly. If you run `</dev/null` then if the program attempt to read from `stdin` then it will get end-of-file.  The merge (or redirect) syntax (for example `<&2`) won't work, because you can only redirect in the same direction. "
  },
  {
    "id": "financial-doom-and-gloom",
    "objectID": "financial-doom-and-gloom",
    "title": "Financial Doom And Gloom",
    "tags": "uncategorized",
    "category": "Non-technical/Social",
    "content": "  Financial crises seem to happen fairly regularly so they shouldn't be unexpected. But no-one seems particularly concerned about our current financial system, at the moment our attention is controlled by other threats.  I'm concerned that a lot of money has been injected into the money supply but we haven't seen any inflation. And I am concerned that the price of stocks is no longer related to the value created by the company but instead by macro economics.  It's a terrible time to be a value investor. This should be an alarming statement. Value investing should _always_ be a decent way to make money unless markets are broken. If the price of something doesn't represent its value then a correction is inevitable.  Interest rates are really low at the moment so if you have spare money and you want to make it work for you then where do you put it? Not into a bank account, because interest rates are low[ref]Why are interest rates low? Because confidence in the economy is low, so central bankers have to lower interest rates to make it 1. Cheaper for a business to borrow money to invest in their business and therefore easier for a business investments to be profitable, and 2. So that its more attractive for investors to use their capital to invest in a business (which grows the economy) relative to depositing spare cash in a bank account (which is safer but a less efficient way to deploy capital). Interest rates affect the relative risk-reward ratios of different investment strategies[/ref], and not into government debt, because the yield is so low. It has to be stocks if you want the value of your investments to increase meaningfully.  But everyone is doing this which drives the price up, and because their price is increasing they increase even further.  I think that the main reason for concern is super low interest rates and massive increases in the money supply, but there are a couple of other factors that are also contributing.  It's easier than ever for retail investors to participate in the stock market, and this seems like a good idea. Democratization. However if retail investors have influence to effect prices, and they themselves can be manipulated or influenced regarding what or when they buy or sell, then that is likely a new kind of threat to financial stability. We've never seen social media combined with quick, cheap investment services for amateurs before.  Index funds are also more popular than ever[ref][index funds are the new kings of wall street](https://web.archive.org/web/20210119144242/https://www.wsj.com/articles/index-funds-are-the-new-kings-of-wall-street-11568799004)[/ref] - the efficacy of index investing relative to traditional funds that use stock pickers is very high over medium or long time horizons because index funds are much cheaper. But if index funds become too large then they end up influencing the market in predictable and rigid ways.  Index funds cannot choose what they buy or how much they buy - they just track the index. If a company's stock crosses certain thresholds, their stock has to be bought or sold. It seems like its possible to create feedback loops where funds have to buy more of a rising stock, which increases its scarcity and price, which then requires index funds to purchase more of the same stock.  The amount of euros in existence in 2019 was 90% more than in 2010.[ref][statista](https://www.statista.com/statistics/254220/value-of-euro-coins-in-circulation-since-2002/)[/ref] But inflation between 2010 and 2020 is 13%.[ref][in2013dollars.com](https://www.in2013dollars.com/europe/inflation/2010)[/ref] Why is that?  If the price of something doesn't represent its value, then a correction is inevitable. "
  },
  {
    "id": "find",
    "objectID": "find",
    "title": "Find",
    "tags": "fd,cli",
    "category": "snippet",
    "content": "  `fd` is a replacement for `find` with more intuitive defaults.  - Case-insensitive. - Ignores hidden directories and files. - Ignores patterns in `.gitignore`.  ## Commands  - `fd PATTERN` - not `find -iname '*PATTERN*'` - `fd --help`  [repo](https://github.com/sharkdp/fd) "
  },
  {
    "id": "first-five-minutes-on-a-server",
    "objectID": "first-five-minutes-on-a-server",
    "title": "First five minutes on a server",
    "tags": "security,linux",
    "category": "snippet",
    "content": "  An [article](https://sollove.com/2013/03/03/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers/) about linux security.  This is kind of similar to [this](snippets/linux-performance-analysis-checklist) post. "
  },
  {
    "id": "flee",
    "objectID": "flee",
    "title": "Flee",
    "tags": "poetry",
    "category": "Non-technical/Journal",
    "content": "  Summer children <br></br> squeal and shriek, <br></br> Watch wars. <br></br> Excitement mounts. <br></br>  How exotic. <br></br> Unexpectedly, <br></br> Death arrives. <br></br>  Grow-up<br></br> Grow old<br></br> Face death <br></br> Evade evil.<br></br>  Don't tire. <br></br> World is fragile.<br></br> Towers burn,<br></br> Bridges bludgeon,<br></br> Markets stab. <br></br>  Got to get out. "
  },
  {
    "id": "founder-salaries",
    "objectID": "founder-salaries",
    "title": "Founder Salaries",
    "tags": "startups,entrepreneur",
    "category": "snippet",
    "content": "  A data driven [article](https://sifted.eu/articles/startup-founders-salary/) comparing equity and salaries broken down by geography, investment stage and number of founders. "
  },
  {
    "id": "founders-journal-2",
    "objectID": "founders-journal-2",
    "title": "Founders Journal 2",
    "tags": "startups,web,productivity,founders",
    "category": "Non-technical/Entrepreneurship",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  <IframeEmbed src='https://www.youtube.com/embed/QE-63hpm5-A' />  A super awkward summary of the last 2 weeks. It's not got polish, but it's real.  Since the last video:  - Newness and novelty is wearing off fast. It’s time to build. And that’s good.  - Bigger items are    - Submitted an innovation proposal for an R&D subsidy. It would extend runway by several months    - Created a basic marketing site. Its v1, but it’s there to be iterated on now    - Completed a basic javaScript course    - React looks good    - Made my blog work again    - Updated my personal web site with reviews, and funky colors. Did it so that its done and I can forget about it  - Last week I went down multiple rabbit holes reading about various web technologies    - This is tiring    - Probably a poor use of time    - But that’s only clear in hindsight      - Cube.js - amazing!      - AWS - big and confusing      - React - looks fine to me      - D3      - AWS Cognito      - AWS AppSync      - Create React App      - etc. yawn.  - This week:    - No more rabbit holes    - Build something basic, not full featured and scalable    - Back to Django, and d3 for the first version of the dashboard view.    - I want more momentum  - Lifestyle    - Good - I'm creating habits that are going to help me be healthy and productive      - Reading each day      - Running more and more  - What have you learnt?    - Boring technologies are preferable to new and untested - react is more boring than vue    - how the graphQL api spec compares to REST apis    - Frameworks - Django is (still) the most sensible option for me. Not express, not flask.    - I’m seeing myself as wearing 3 hats      - Executive (strategy)      - Developer (writing the code)      - Manager - make the developer productive, and achieve the executive's goals    - I'm coaching myself and I find sport comparisons useful.    - I’m thinking of this as a sport in a lot of ways    - I'm borrowing a lot of advice from runners      - Consistency      - Gratitude      - Focus      - Hardwork      - Environment      - Rest      - Keeping it simple (I probably have the most beautiful CLI in the country, which is stupid)  - Next week    - Build! Momentum!    - Django, basic d3.    - Should have done this last week.. "
  },
  {
    "id": "founders-journal-3",
    "objectID": "founders-journal-3",
    "title": "Founders Journal 3",
    "tags": "startups,web,django",
    "category": "Non-technical/Entrepreneurship",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  <IframeEmbed src='https://www.youtube.com/embed/MbfNIS0z3cY' />  - Built the backend! - Decided to stick with what I knew, and build using Django. - Decisions look obvious in retrospect  - User authentication is functional - Document upload, storage, retrieval is functional - Data gets passed to the front - Still need to write tests  - I've learnt a lot of Django in the last 2 weeks, and it feels good to have gained some proficiency there. - I've got momentum, that’s great. - I've put in a lot of intense focussed days - I need to pace myself better, it’s tiring. - What’s next: - Front end   - Basic site design   - Some static pages   - Dashboard viz - d3, I guess. "
  },
  {
    "id": "founders-one",
    "objectID": "founders-one",
    "title": "Founders Journal 1",
    "tags": "startup,finance,fintech,accounting",
    "category": "Non-technical/Entrepreneurship",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Last summer, I made dashboard using python to visualise my personal finances. I could see my expenses agregated by category and I could see how much I was saving each month. I set some targets and tracked my spending against them. It ran locally, and making it worked required using the CLI. A few friends asked how they could use the tool, and I began to think about how I could turn it into a web-app.  Fast forward a few months and I've saved enough to work on this full-time. There's going to be a lot to learn because I'm not a web-developer, yet. I'm starting my journey by learning javaScript. Which feels very basic compared to my ambitions.  <IframeEmbed src='https://www.youtube.com/embed/79Uh3quC4PA' /> "
  },
  {
    "id": "foxes-and-hedgehogs",
    "objectID": "foxes-and-hedgehogs",
    "title": "Foxes and Hedgehogs",
    "tags": "meta,classification,thinking",
    "category": "snippet",
    "content": "  [wikipedia](https://en.wikipedia.org/wiki/The_Hedgehog_and_the_Fox)  Hedgehogs know one big thing, Foxes know many things.  A classification system or mental model for writers and thinkers. "
  },
  {
    "id": "frantic-distraction",
    "objectID": "frantic-distraction",
    "title": "Frantic Distraction",
    "tags": "meta,thinking",
    "category": "Snippet",
    "content": "  _Frantic distraction via productive procrastination is exhausting, and useful._ "
  },
  {
    "id": "gcp-storage-bucket-ttl-and-cors-settings",
    "objectID": "gcp-storage-bucket-ttl-and-cors-settings",
    "title": "Google Cloud Storage - TTL and CORS settings",
    "tags": "google-cloud-platform,storage,cloud,caching",
    "category": "snippet",
    "content": "  [Documentation](https://cloud.google.com/storage/docs/configuring-cors) explaining how to set CORS and TTL for a storage bucket.  Create a JSON file with something like this:  ```json [   {     'origin': ['...'],     'method': ['GET', 'PUT'],     'responseHeader': ['Content-Type'],     'maxAgeSeconds': 300   } ] ```  ```bash gsutil cors set cors.json gs://johnmathews.is ```  ```sh gsutil cors get gs://johnmathews.is | jq ``` "
  },
  {
    "id": "gell-mann-amnesia-effect",
    "objectID": "gell-mann-amnesia-effect",
    "title": "Gell-Mann amnesia effect",
    "tags": "culture,media,psychology",
    "category": "Non-technical/Social",
    "content": "  The phenomenon of experts believing news articles on topics outside of their fields of expertise, even after acknowledging that articles written in the same publication that are within the experts' fields of expertise are error-ridden and full of misunderstanding:  \\*\\*\\*  [The] Media carries with it a credibility that is totally undeserved. You have all experienced this, in what I call the Murray Gell-Mann Amnesia effect. (I refer to it by this name because I once discussed it with Murray Gell-Mann, and by dropping a famous name I imply greater importance to myself, and to the effect, than it would otherwise have.)  Briefly stated, the Gell-Mann Amnesia effect is as follows. You open the newspaper to an article on some subject you know well. In Murray's case, physics. In mine, show business. You read the article and see the journalist has absolutely no understanding of either the facts or the issues. Often, the article is so wrong it actually presents the story backward—reversing cause and effect. I call these the 'wet streets cause rain' stories. Paper's full of them.  In any case, you read with exasperation or amusement the multiple errors in a story, and then turn the page to national or international affairs, and read as if the rest of the newspaper was somehow more accurate about Palestine than the baloney you just read. You turn the page, and forget what you know.  That is the Gell-Mann Amnesia effect. I'd point out it does not operate in other arenas of life. In ordinary life, if somebody consistently exaggerates or lies to you, you soon discount everything they say. In court, there is the legal doctrine of falsus in uno, falsus in omnibus, which means untruthful in one part, untruthful in all. But when it comes to the media, we believe against evidence that it is probably worth our time to read other parts of the paper. When, in fact, it almost certainly isn't. The only possible explanation for our behavior is amnesia.  [wikipedia](https://en.wikipedia.org/wiki/Michael_Crichton#Why_Speculate?) "
  },
  {
    "id": "georges-st-pierre-training-meta",
    "objectID": "georges-st-pierre-training-meta",
    "title": "Georges St-Pierre Training Meta",
    "tags": "sport,meta,training",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  <IframeEmbed src='https://youtube.com/embed/3lsGr4s9rGI' />  Contains too much conjecture at the start, but becomes more substantial.  At high levels of competition the difference between 'good' and 'great' is partly determined by how much pain you are willing to experience.  There are great benefits from training in a secondary discipline.  - Anderson Silva is a ballet dancer. - Conor McGregor does 'movement training'. - Israel Adesanya dances competitively. - Georges St-Pierre practices gymnastics.  [archive](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/georges-saint-pierre-better-than-everyone---metaTraining.mp4) "
  },
  {
    "id": "git-lfs-2",
    "objectID": "git-lfs-2",
    "title": "Git LFS",
    "tags": "git,lfs,github-pages",
    "category": "snippet",
    "content": "  Key commands  - `git lfs install` (also uninstall) - `git lfs track '**/*.mp4'` - `git lfs ls-files` - `git lfs status`  `track` just updates the `.gitattributes` file.  Commit the .gitattributes file with the tracking configuration before committing the large files.  `status` or `ls-files` should show the large files in question before you push the commit that starts tracking the large files. "
  },
  {
    "id": "github-actions-blog",
    "objectID": "github-actions-blog",
    "title": "Github Actions",
    "tags": "github,blog",
    "category": "snippet",
    "content": "  _I should see if I can use GitHub actions to generate html from markdown and run some shell and python scripts._ "
  },
  {
    "id": "global-aliases",
    "objectID": "global-aliases",
    "title": "Global Aliases",
    "tags": "alias,linux",
    "category": "snippet",
    "content": "  If you want to alias a bunch of arguments for a command, use global aliases:  ```bash alias -g foo='some complicated options' ```  `grep some complicated options`  becomes: `grep foo`  [https://www.thorsten-hans.com/5-types-of-zsh-aliases/](https://www.thorsten-hans.com/5-types-of-zsh-aliases/) "
  },
  {
    "id": "globbing",
    "objectID": "globbing",
    "title": "Globbing",
    "tags": "linux",
    "category": "snippet",
    "content": "  - `????` → 4 chars - `*` → any number of chars - `[:upper:]` ⇔ `[A-Z]` same for `[:lower:]` and `[:digit:]` - `[:alpha:]` ⇔ `[a-zA-Z]` - `[:alnum:]` ⇔ `[a-zA-Z0-9]`  - `ls -l [a-d]` → part of a range - ^ and &#36; works like in regex - `la a*.{doc,docx}` → OR - `ls a*.(doc|docx)` → OR "
  },
  {
    "id": "google-pub-sub",
    "objectID": "google-pub-sub",
    "title": "Google Pub/Sub",
    "tags": "google-cloud-platform,message-systems",
    "category": "snippet",
    "content": "  Google Pub/Sub has client libraries in all the usual languages. You can also construct the API calls yourself. This is a link to the [API](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/publish) documentation.  If I were to use a JavaScript beacon to push a message to a topic, my web analytics engine (a collection of cloud functions) could subscribe to the topic.  This would have the advantage that if the site were flooded with traffic and the maximum number of function instances wasn't enough to handle all the events, then none of the page views (or other events) would be lost because Pub/Sub guarantees delivery and would keep trying to deliver the message for up to 7 days.  Using the beacon to trigger the cloud functions directly wouldn't work at scale, because once the maximum number of instances are being triggered as frequently as the function takes to run, the endpoint would become unresponsive. There is no caching layer.  However, the site isn't being flooded with traffic, and I have better things to do than fix stuff that isn't broken. "
  },
  {
    "id": "grep-particular-files-only",
    "objectID": "grep-particular-files-only",
    "title": "Grep only inside particular files",
    "tags": "grep,linux",
    "category": "snippet",
    "content": "  ```bash grep -inr --include package.json \\     'shortcut': {' . -A 3 ```  - It's the `--include` flag that does the important part. - `-i` → case insensitive - `-n` → print line number - `-r` → recursive from starting page - `.` → start in current directory - `-A 3` → print the 3 lines below the found line "
  },
  {
    "id": "handwritten-letters-at-scale",
    "objectID": "handwritten-letters-at-scale",
    "title": "Handwritten letters at scale",
    "tags": "automation,hardware,marketing,raspberry-pi",
    "category": "snippet",
    "content": "  A [twitter thread](https://twitter.com/aarondfrancis/status/1438888219471491074) showing how a business started creating handwritten notes to customers using a plotter, and how they scaled up and further automated the process.  It would be cool to create something like this for western Europe. [Handwrytten.com](https://handwrytten.com) seems to be the main commercial implementation of this idea in NA. [Competitors](https://www.g2.com/products/handwrytten/competitors/alternatives).  I still think it would be fun to make a simple photo printing service. Share a photo in a WhatsApp message and its printed and delivered. "
  },
  {
    "id": "heuristics-for-effective-software-development",
    "objectID": "heuristics-for-effective-software-development",
    "title": "Heuristics for effective software development",
    "tags": "engineering,teams,organisations",
    "category": "snippet",
    "content": "  'Without psychological safety, respect, and trust, none of the following is possible'  'The best ways to work are collaborative. Negotiation is not collaboration. Isolated individuals making heroic efforts are never as effective as collaborative groups. We get the best results when customers, business people, and developers literally work together.'  [Blog post](https://holub.com/heuristics-for-effective-software-development-a-continuously-evolving-list/) "
  },
  {
    "id": "historical-truths",
    "objectID": "historical-truths",
    "title": "Can an explanation of an historical event ever be completely true?",
    "tags": "history",
    "category": "Non-technical/Journal",
    "content": "  We use historical events as examples to learn from, but is it possible to acquire a true understanding of a historical event?  The answer is important because we use that understanding to learn by example, and identify patterns of cause and effect. Is it possible for a normal person to do this, or does it require training, lots of time, or special skills? Is it impossible for everyone?  I started thinking about this when I had the following thought:  _When we think we understand why something historical happened, all we've probably done is accept a story that seems plausible._  ## Limitations and Reliability  An account of an event must necessarily be a simplification - not all details can be recorded or learned. This is ok because most details are not pertinent and have no meaningful consequences.  But how do we choose which details are included, and how do we verify that the details were chosen correctly?  How can we be sure that a lesson or conclusion based on historical events is reliable?  ## Hypothetical model  The truthfulness of a historical story could be thought of as a value on a scale ranging from completely false to perfectly true. I think that there are mechanisms that push popular or resilient narratives towards the middle of this scale and away from either extreme.  As a version of a story approaches the dishonest end it will contain an increasing number of errors or omit an increasing number of pertinent facts. This has the effect of:  1.  Increasing the likelihood and frequency of someone hearing the story and rebutting its assertions. 2.  Making it harder to align the assertions and implications with existing understandings of reality.  At the opposite end of the scale, a story is unlikely to be comprehensively honest because:  1. Adding truth requires adding complexity. It is easier to create or capture a    simple story than a complicated story. 2. As a story's detail and depth increases so do the resources required to    communicate it. Each narrative is competing for attention and a complex story    requires more resources to broadcast and listen to than a simple story. Those    with the resources to do so will want the story to benefit them in some way.  This creates incentives to omit inconvenient truths and distractions.  ## Implications  I think that there is unfortunately no substitute for the hard work of coordinating disparate information, because the truthiness of a conclusion is generally proportional to the inconvenience of the effort spent forming it.  We are predisposed to choose convenience over inconvenience and this enables:  1.  History to be written by the 'winning side', who have more resources than the 'losing side'. 1.  Complex events to be simplified into expedient and bite-sized narratives.  As time passes, the practical benefit of holding a view that differs from a popular narrative decreases. This reduces any incentive to challenge a popular view.  This creates a feedback loop that makes it increasingly difficult for a younger generation to discover information about historical events that challenge a popular narrative.  ## An heuristic  How much evidence did I collect myself, that wasn't brought to my attention by an algorithm or by someone else?  ## Awkward questions  - Was WW2 a battle of the good against the bad, or the bad against the really bad, or something else? - Why did the Allies win WW2? - Was the influence of government on social freedoms in America 100 years ago dissimilar to China today? - Racial and ethnic discrimination was normal 100 years ago - it appears to have been so universally accepted that I'm led to question the presuppositions of modern attitudes about human nature and morality.  [  ![cartoon by tom gauld](/static/images/tom-gauld-cartoon.jpg)/images/tom-gauld-cartoon.jpg) "
  },
  {
    "id": "honest-troubleshooting-code-of-conduct",
    "objectID": "honest-troubleshooting-code-of-conduct",
    "title": "The Honest Troubleshooting Code of Conduct",
    "tags": "uncategorized",
    "category": "snippet",
    "content": "  [blog post](http://rachelbythebay.com/w/2021/05/01/code/) "
  },
  {
    "id": "how-doctors-die",
    "objectID": "how-doctors-die",
    "title": "How doctors die",
    "tags": "humanity,death",
    "category": "snippet",
    "content": "  An [article](https://archive.cancerworld.net/featured/how-doctors-die/) about why doctors want less treatment for terminal illnesses than their patients.  [archive](https://web.archive.org/web/20210909082612/https://archive.cancerworld.net/featured/how-doctors-die/) "
  },
  {
    "id": "how-to-get-rich-without-getting-lucky",
    "objectID": "how-to-get-rich-without-getting-lucky",
    "title": "How to get rich without getting lucky",
    "tags": "naval-ravikant,mental-models,business",
    "category": "Non-technical/Entrepreneurship, Technical/Other",
    "content": "  My notes and additions from a twitter [thread](https://twitter.com/naval/status/1002103360646823936) created by [@naval](https://twitter.com/naval/status/1002103360646823936) on 31 May 2018.  ### Background  1.  Seek wealth, not money or status.  1.  Wealth is having assets that earn while you sleep.  1.  You must own a piece of a business - you wont get rich by renting out     your time.  1.  You will get rich by giving society what it wants but doesn't know how     to get. At scale.  1.  Money is how we transfer time and wealth.  1.  Status is your place in the social hierarchy.  1.  Understand that ethical wealth creation is possible. If you secretly despise     wealth, it will elude you.  1.  Ignore people playing status games.  ### Actions  1.  **Learn to sell. Learn to build. If you can do both, you will be unstoppable.**  1.  **Arm yourself with specific knowledge, accountability, and leverage.**  1.  Pick an industry where you can play long term games with long term people.  1.  Maximise positive feedback loops. Design and defend against negative     feedback loops.  1.  All the returns in life, whether in wealth, relationships, or knowledge,     come from positive feedback loops, or compounding.  1.  The internet has massively broadened the possible space of careers. Most     people haven't figured this out yet. Write down some examples.  1.  Play games where you iterate on past successes and experiences     to create more success and more experience. This is compounding. 1.  Pick business partners with high intelligence, energy, and, above all,     integrity.  1.  Knowledge is not the same as intelligence.  1.  Its hard to estimate higher levels of expertise relative to your own.  1.  Don't partner with cynics and pessimists. Their beliefs are self-fulfilling.  ### Specific Knowledge  1.  Building specific knowledge will feel like play to you but will look like     work to others.  1.  Specific knowledge is often highly technical or creative. It cannot be     outsourced or automated.  1.  Specific knowledge is found by pursuing your genuine curiosity and passion     rather than whatever is hot right now.  1.  Specific knowledge is knowledge that you cannot be trained for. If society     can train you, it can train someone else and replace you.  1.  When specific knowledge is taught, it’s through apprenticeships, not     schools.  ### Accountability  1.  Embrace accountability, and take business risks under your own name. Society     will reward you with responsibility, equity, and leverage.  1.  The most accountable people have singular, public, and risky brands: Oprah,     Trump, Kanye, Elon.  ### Leverage - capital, people, no marginal costs  1.  Capital means money. To raise money, apply your specific knowledge, with     accountability, and show resulting good judgment.  1.  Leverage is the ability to increase the effects of something. 'Give me a     lever long enough, and a place to stand, and I will move the earth.' -     Archimedes  1.  Fortunes require leverage. Business leverage comes from capital, people, and     products with no marginal cost of replication (code and media).  1.  Labor means people working for you. It's the oldest and most fought-over     form of leverage. Labor leverage will impress your parents, but don’t waste     your life chasing it.  1.  Capital and labor are permissioned leverage. Everyone is chasing capital,     but someone has to give it to you. Everyone is trying to lead, but someone     has to follow you.  1.  Code and media are permissionless leverage. They're the leverage behind the     newly rich. You can create software and media that works for you while you     sleep.  1.  An army of robots is freely available - it's just packed in data centers for     heat and space efficiency. Use it.  1.  If you can't code, write books and blogs, record videos and podcasts.  1.  Leverage is a force multiplier for your judgement. If you have good     judgement, reap additional benefits by leveraging it more. This is related     to comments by Geoffrey Hinton about the benefits of developing your intuitions     [interview](notes-from-an-interview-with-geoffrey-hinton).  ### Learning and practice  1.  Apply specific knowledge with leverage, and progress is inevitable.  1.  You should be too busy to 'do coffee', while still keeping an uncluttered     calendar.  1.  Set and enforce an aspirational personal hourly rate. If fixing a problem     will save less than your hourly rate, ignore it. If outsourcing a task will     cost less than your hourly rate, outsource it.  1.  Who you work with and what you work on are more important than how hard you     work.  1.  Work as hard as you can.  1.  Thinking your own thoughts is tiring. Asking good questions is hard.  1.  Doing is faster than watching.  1.  Developing good judgement requires experience, if you have a chance to gain     real experience then take it. Learning can amplify the benefits of     experience.  1.  Real experience is more useful than a prestigious course or degree.  1.  Be patient and persistent, shape your circumstances. It doesn't mean you've     made a mistake if you can't do something real right now.  1.  There is no skill called business. Avoid business magazines and business     classes. Think about why and extend this to other media.  1.  Passive, peace-meal knowledge acquisition by itself does not lead to     specific knowledge or expertise. Subscribing to newsletters or social media     accounts offers quickly diminishing returns, at best.  1.  Read long-form media which you actively looked for. Information that comes     to you for free has competing interests which put you second.  1.  If you read only 1 book on a subject then you'll likely be a clone. If you     read 2 books you'll grapple with confusion. Read 3 and you'll begin to form     your own substantial opinions and intuitions.  1.  Become the best in the world at what you do. Keep redefining what you do     until this is true.  1.  There are no get rich quick schemes. That's just someone else getting rich     off you.  1.  Study microeconomics, game theory, psychology, persuasion, ethics,     mathematics, and computers. Real experience with skin in the game will teach     you more than a book or a professor.  1.  There are lots of ways to grow beyond being a beginner, but no one can do     the heavy-lifting for you. A course or product that offers to teach you     specific knowledge will give diminishing returns. The more of a beginner you     are, the better the course will appear.  1.  Reading is faster than listening.  ### Remember why  1.  When you're finally wealthy, you'll realize that it wasn't what you were     seeking in the first place. But that's for another day.  1.  Check in with your 70 year old self, and your 10 years older self. What do     they think of you now? Are they sympathetic? Proud? Do they say go faster, or     slow down? Be kind to yourself.  1.  There is a big difference between saying 'I am intimidated' and 'I am     feeling intimidated'. You can do it.  ## My top 2:  1.  Embrace accountability, and take business risks under your own name. Society     will reward you with responsibility, equity, and leverage.  1.  Capital means money. To raise money, apply your specific knowledge, with     accountability, and show resulting good judgment. "
  },
  {
    "id": "how-to-google",
    "objectID": "how-to-google",
    "title": "Advanced googling",
    "tags": "search",
    "category": "Technical/Developer Tools",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  <IframeEmbed src='https://youtube.com/embed/cEBkvm0-rg0' />  ## Meta  - `related:<url>` - find sites similar to `<url>`, can be a blog post not just a domain. - `cache:<url>` - see what google thinks your site looks like. Has google cached the latest version?  ## Filters  - `site:<url> <search terms>` - `filetype:<ft> <search terms>` - `-<excluded-terms>`  ## Dates  - `after:<year>` - `before:<year>`  - range: `2019..2021` or `$10..$50`  ## Logical Operators  - one term or another term `<term 1>|<term 2>` - `(<term A>|<term B>)<term c>`  ## Wildcard  - `*` is a wildcard `site:*.tailwind.com <terms>` - search only subdomains "
  },
  {
    "id": "how-to-monetize-a-saas",
    "objectID": "how-to-monetize-a-saas",
    "title": "How to monetize a SaaS",
    "tags": "saas,side-project,business",
    "category": "snippet",
    "content": "  A [blog post](https://jeremyaboyd.com/post/tricks-to-monetize-your-side-project) about monetizing SaaS products.  - Split test - Pricing - Email cadence "
  },
  {
    "id": "how-to-size-bets",
    "objectID": "how-to-size-bets",
    "title": "How to size bets",
    "tags": "statistics,investing,gambling,math",
    "category": "Technical/Other",
    "content": "  An interactive [article](https://explore.paulbutler.org/bet/) that discusses the optimal strategy for the following scenario:  'I have a coin that lands heads 60% of the time and tails 40% of the time. You have $25 and can bet on either side of the coin — every time you’re right you double your bet, and every time you are wrong you lose it.'  Theres a widget on the page that lets you select an amount, what side to bet on, and a chart showing your balance after each coin toss.  My first attempt at this game was probably my best. My intuition is that its always optimal to bet on heads because each coin toss is independent, and 60% is more than 40%.  However the question of how much to bet on each coin toss is more complicated because you lose if your balance dips below 0. If you bet 50% of your balance and lose on 2 consecutive coin tosses, then you're out. The probability of this is $0.4^2 = 0.16$. 0.16 is quite low, but whilst playing the game you will toss the coin 50 - 100 times, so there are many opportunities.  If you toss the coin 50 times, there are 49 opportunities to lose twice consecutively. I don't know the math for this probability, so I'll go learn it, but intuitively I think that 50% of the pot is too high. I went with 33% and won (reaching \\$250) in about 50 throws.  I'd like to know how to optimise this, so I'll read the article.  Also:  - [Insurance and the Kelly Criterion](https://blog.paulhankin.net/kellycriterion/) - [HN Comments](https://news.ycombinator.com/item?id=30265797) "
  },
  {
    "id": "how-to-stay-in-touch-with-people",
    "objectID": "how-to-stay-in-touch-with-people",
    "title": "A tool to automatically contact people",
    "tags": "uncategorized",
    "category": "Non-technical/Social",
    "content": "  An [article](https://jakobgreenfeld.com/stay-in-touch) about a system that lets you choose how often you want to stay in touch with people, and sends you a daily email with people to speak to and any notes.  The article uses airtable (a no code product). I would rather self host so that if the tool becomes useful to me, I don't put it's survival in someone else's hands. I wouldn't need to avoid writing code, and the most familiar tech stack would be a Django app.  The trick would be hosting the app, and the database server super cheaply.  Below is a quote from the blog post:  ```text Here’s what I do.  I typically spend a few minutes researching what they’ve been up to recently.  I check their social profiles, personal websites, and read or watch any content they published that I missed.  Then I share a few thoughts or questions.  Most importantly, I always send the kind of messages I’d like to receive. They’re short, genuine, and (ideally) helpful. I never try to sell anything and there’s no agenda other than to keep in touch.  Sometimes I just share a related article or book I think they might find interesting and sometimes I offer specific help or advice with a problem they’re facing right now.  Of course, not everyone publishes content or updates regularly. In that case, I usually just ask what they’ve been up to lately.  You’d be surprised how many people are really happy to get these kinds of messages and they often spark all kinds of deeper conversations. ``` "
  },
  {
    "id": "how-to-wake-up-early",
    "objectID": "how-to-wake-up-early",
    "title": "How to wake up early",
    "tags": "productivity,sleep",
    "category": "Non-technical/Journal",
    "content": "  For years I've wished that I could wake up early and use the quiet pre-breakfast hours for distraction-free productivity. And for years I have spectacularly failed at this. I love the quiet, distraction-free hours at the end of the day too, as well as waking up slowly.[^1]  Many famous leaders and politicians are known to start their days early, and I would like to be able to do this too. After years of trying and failing, I have had a break-through.  The secret of waking up early is this:  Become a parent.  After the first couple of months with a new-born:  - You will be well-practiced at quickly waking up at previously   unthinkable times - You will be used to operating on less sleep than you ever thought   possible - Your beautiful child will become a reliable alarm clock, waking you   up at the crack of dawn with cute smiles and increasingly insistent   demands that you get up, play and make breakfast.  [^1]: If you have the freedom to begin sleeping and working when you want, I still believe this is a great option. I bashed out a PhD in 3.5 years during which I usually woke up late and began to work around lunch time! - Glorious autonomy! "
  },
  {
    "id": "how-to-write-a-book",
    "objectID": "how-to-write-a-book",
    "title": "How to write a book",
    "tags": "tynan,writing",
    "category": "Non-technical/Other",
    "content": "  I keep getting ideas for books, and I keep remembering these posts for making the process seem very accessible:  [Tynan - bookwriting](https://tynan.com/bookwriting/)  [Tynan - write](https://tynan.com/write/) "
  },
  {
    "id": "how-to-write-an-about-page",
    "objectID": "how-to-write-an-about-page",
    "title": "How to write an About Page",
    "tags": "writing",
    "category": "snippet",
    "content": "  An often recommended [blog post](https://www.kaleighmoore.com/blog/2020/5/14/how-to-write-a-stellar-about-page) by Kaleigh Moore about writing a good about page. "
  },
  {
    "id": "html-templates",
    "objectID": "html-templates",
    "title": "HTML Templates",
    "tags": "html,jam",
    "category": "snippet",
    "content": "  - [wickedtemplates.com](wickedtemplates.com) - [cruip.com](cruip.com) - [https://versoly.com/templates](https://versoly.com/templates) "
  },
  {
    "id": "i-leaked-credentials-onto-a-public-github-repo",
    "objectID": "i-leaked-credentials-onto-a-public-github-repo",
    "title": "I Leaked Credentials Onto A Public GitHub Repo",
    "tags": "hack,github,service-account,keys,security",
    "category": "Technical/Engineering",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # Don't post secrets to public GitHub repositories.  I made this mistake a while ago, and in the interests of openness and learning from others, I'd like to describe what happened. Maybe it'll help others avoid the mistake, and maybe I'll learn something from any conversation this article generates.  # Background  Using Google Cloud Platform (GCP), I've been doing some work across multiple compute instances. Thankfully, the work wasn't business critical or on production systems. My account was isolated away from the rest of the business.  As the number of servers I was working with increased, I realised I needed to begin using some tools to automate server setup. This lead me to begin using Ansible, and once I'd cobbled together a working playbook I pushed my Ansible project to my GitHub account... And accidentally leaked the key for an account I'd been using.  # The hack  Within a couple of minutes of pushing the repository to GitHub I:  - Made the repository private. - Stopped tracking the keys in git and removed them from the cache `git rm -r --cached <dir>`. - Received an email from Google saying they'd found leaked credentials.  OK, close call. The secret was leaked for less than 5 minutes. On my obscure personal GitHub.  I thought there was nothing to worry about.. But then I noticed some activity in the console.  Compute instances were being created, I could see the list growing rapidly. Over the next few minutes 195 compute instances and disks were being created, each with a unique name in zones across the world. The format of the name was `node-<type>-<number>`. Where type was either application, backup, jenkins, gke, prod, staging, worker, www, build, redis, or runner. Maybe some others too. The number seemed to be 5 random digits.  Some of the instances were ephemeral. They all had delete protection enabled. I checked the details of a few of them and noticed some scripts that included references to Monero.  So I guess a Monero mining bot was being set up.  The logs showed that GKE and networking resources had also been requested, but the account which the stolen credentials belonged to didn't have the necessary permissions. Our project also maxed out its quota of compute instances in multiple regions and zones.  # Remediation  I deleted the account that had been leaked, and began quantifying the damage. I wanted to know exactly what permissions the key had, which resources could be created, and could the leaked account be used to create other accounts? No, it can't.  After looking around and becoming confident that it was _only_ 195 compute instances with disks and delete protection that had been created, in regions and zones across the globe, I began to remove them. No other resources had been provisioned.  It took me 10 minutes and some googling to create the following workflow:  1. Get all the compute instances and dump them into a file. I expected to run a    script that iterated through the file line by line, setting variables based    on the content of the current line: `gcloud compute instances list --format 'csv[no-heading](name, zone)' > names.txt`  2. In Vim, find the rows that contain the instances that I don't want to    delete, and remove these from the file. There are a handful of compute    instances I want to keep, and 195 that I want to remove. `:v/node-` shows    any rows that _don't_ include 'node-&rdquo;  3. Loop through the file and for each row, which contains the instance name and its zone,    - Remove delete protection    - Delete the instance  ```sh while IFS=, read -r name zone   do gcloud compute instances update $name --zone $zone --no-deletion-protection \\   && gcloud compute instances delete $name --zone $zone --quiet done < names.txt ```  The `--quiet` flag is necessary because otherwise gcloud will ask me to confirm that I want to delete the instance otherwise.  # Questions  I'm surprised by the speed with which the attacker found the leaked credentials. The repo did not belong to the clients account but my own, and I assume that my account is obscure enough to not be on any interesting lists. If my account is being scanned every few minutes, presumably all accounts are being scanned regularly.  How many resources are required to do that? I guess if one of these attacks works you can use the stolen compute to scan more repositories for more leaked credentials. It's easy to imagine scenarios where large corporations that are already running complicated cloud infrastructure deployments wouldn't notice a few (200?) unauthorized compute instances running.  # Study  - [Service accounts](https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t) on Google Cloud Platform. - [Ansible](https://www.youtube.com/watch?v=goclfp6a2IQ&t=1962s) videos. - [SSH](https://www.youtube.com/watch?v=hQWRp-FdTpc) crash course. - [Vagrant](https://youtu.be/vBrezgoX) crash course. - [IFS=](https://stackoverflow.com/questions/26479562/what-does-ifs-do-in-this-bash-loop-cat-file-while-ifs-read-r-line-do/26480210) syntax explanation.  # Comments  There was some useful [discussion](https://lobste.rs/s/5vwctk/i_leaked_credentials_onto_public_github) about this article on Lobste.rs. "
  },
  {
    "id": "i-would-like-to-take-some-time-to-explore-what-it-means-to-be-alive",
    "objectID": "i-would-like-to-take-some-time-to-explore-what-it-means-to-be-alive",
    "title": "I would like to take some time to explore what it means to be alive",
    "tags": "life",
    "category": "snippet",
    "content": "  . "
  },
  {
    "id": "interview-with-linus-torvalds",
    "objectID": "interview-with-linus-torvalds",
    "title": "Linus Torvalds",
    "tags": "linux,interview,linus",
    "category": "snippet",
    "content": "  From an [Interview](https://tag1consulting.com/blog/interview-linus-torvalds-linux-and-git:):  I don't want to claim that programming is an art, because it really is mostly just about 'good engineering'. I'm a big believer in Thomas Edison's 'one percent inspiration and ninety-nine percent perspiration' mantra. It's almost all about the little details and the everyday grunt-work.  But there is that occasional 'inspiration' part, that 'good taste' thing that is about more than just solving some problem - solving it cleanly and nicely and yes, even beautifully. "
  },
  {
    "id": "investment",
    "objectID": "investment",
    "title": "Understanding VC Investment",
    "tags": "lis,fintech,startup,founder",
    "category": "Non-technical/Entrepreneurship",
    "content": "  I attended the [Lisbon Investment Summit](http://www.lis-summit.com/) in June and wrote about my experiences [here](lis17). One of the best sessions was with [Boris Golden](https://twitter.com/Boris_Golden) called 'Understand Investment'. These are my notes:  1. VC's are seeking to identify high-potential startups, and then support and fund them. 2. They are looking for something that is innovative and unproven. 3. A startup is not a company but an organisation searching for a business model, 4. Whilst executing and discovering a scalable way to grow. 5. Startups need money for ambitious but credible growth plans. 6. A typical stake for a VC could be roughly 20%. 7. VC's want an exit price of at least 100m, otherwise their business models don't work out. 8. $10m can seem a lot for a founder with a 30% stake, but it's not enough to attract VCs, so aim higher.  ## How to pitch  - Identify specific people with real needs - Size of market - Why now? - What is your clear competitive advantage - why can no-one else do this?  ### Market  - Find a large and attractive market…  ### Management  - Build a smart, skilled and cohesive team - With a strong ability to deliver quickly and to learn quickly - That is ready to go big whatever it takes - With a unique vision and project-fit  ### Model  - Valuable and differentiated products - Efficient go-to-market and growth channels - Profitable monetisation strategy - Scalability and defensibility  ### Momentum  - Show traction and that you've cracked the important problem - Show ambitous and credible growth plans - With a capital-efficient growth model - And a clear strategy to scale and win "
  },
  {
    "id": "james-book-summaries",
    "objectID": "james-book-summaries",
    "title": "James' Book Summaries",
    "tags": "reading,education",
    "category": "snippet",
    "content": "  [Book summaries](https://jamesclear.com/book-summaries) at [Jamesclear.com](https://jamesclear.com) "
  },
  {
    "id": "japanese-philosophies-for-spending-money",
    "objectID": "japanese-philosophies-for-spending-money",
    "title": "Japanese philosophies for spending money",
    "tags": "money,finance,japan",
    "category": "snippet",
    "content": "  ## Chisoku  Being content with what you already have. You don't need more stuff, or new stuff, just because it exists. You're being _marketed at_, or _marked_.  Do you need it or do you want it? Need is finite, want is infinite.  ## Wabi Sabi  Beauty in imperfection. As things begin to wear, they develop some character that can make them nicer than something that is fresh. It's the opposite of _new shiny thing syndrome_.  ## Mitate  An object has more than one purpose. Repurposing, inventing, adapting, etc is interesting and a mini achievement that can be celebrated.  [Source](https://hulry.com/japanese-philosophies-money/). "
  },
  {
    "id": "json-tools",
    "objectID": "json-tools",
    "title": "JSON tools",
    "tags": "json",
    "category": "snippet",
    "content": "  `jj` - A [stream editor](https://github.com/tidwall/jj)   `jq` - A json processor   `python -m json.tool`  I like `jq` for pretty printing JSON output, `jj` for making JSON pretty or condensed.  This was really useful when optimizing the search index for this blog. "
  },
  {
    "id": "larger-code-bases",
    "objectID": "larger-code-bases",
    "title": "> Data Science vs Web Development: Larger Code Bases\n",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  ## Code Structure  One of the most immediate and basic differences between working as a data scientist or as a web developer is the number of files the codebase is spread across and the amount of code within each file.  Web applications tend to be very modular - there are a lot of different things going on in a modern web app and generally they all need to be able to be modified or updated independently of each other. This requirement encourages modular code base architecture with the code broken down into testable units.  When working on a data science project you often have a well defined and quite narrow pipe line. Each stage of a pipeline has well defined inputs and outputs.  This seems to have the consequence of making data science projects tend towards a handful of files each with a substantial amount of unique (not boilerplate) code. In web development there seems to be more boilerplate, many more files spread across a tree of directories, and the average number of lines of code per file is significantly lower.  ## IDE features  These differences mean that code organization tools and IDE features play very different roles within each industry. In web development you really need to be able to jump between different files (or buffers) quickly, and search for text across multiple files. Writing idiomatically becomes more important, and writing code within discreet testable units becomes essential so that things don't break without being noticed.  In data science, linting feels more optional, and searching for text within methods or functions outside the current module is rarer.  I didn’t appreciate this until I paused my work as a Data Scientist and began building non-trivial web apps. "
  },
  {
    "id": "learning-april-2021",
    "objectID": "learning-april-2021",
    "title": "Learning - April 2021",
    "tags": "learning,youtube,ansible,ssh,vagrant,google-cloud-platform,service-accounts,iam",
    "category": "Technical/Developer Tools",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # [Google Cloud Platform Service Accounts](https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t)  It seems like I'm looking for some general overview of how roles are managed, viewed, compared, and inherited.  How can you tell if a users (or a service accounts) roles are adequate, or too much or too little for a particular task? And what's the difference between a user having some roles, and a user using a service account that has those roles.  It would also be nice to have some kind of adversarial test, that would identify how/if users or service accounts can create identities with more flexible permissions that their own.  These short videos are good, but they're not a complete solution. I'm not sure where to look next.  <IframeEmbed src='https://www.youtube-nocookie.com/embed/xXk1YlkKW_k' />  # [Ansible](https://www.youtube.com/playlist?list=PL2_OBreMn7FplshFCWYlaN2uS8et9RjNG)  Based on Jeff Geerlings book. There are 15 episodes. Jeff seems like a great guy. I'm going to try listen to one of these each day.  <IframeEmbed src='https://www.youtube-nocookie.com/embed/goclfp6a2IQ' />  # [SSH](https://www.youtube.com/watch?v=hQWRp-FdTpc&list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&index=4)  <IframeEmbed src='https://www.youtube-nocookie.com/embed/hQWRp-FdTpc' />  [This](https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys) is also a very useful article. I made notes from it in another [post]({filename}../articles/ssh.md).  # [Vagrant](https://www.youtube.com/watch?v=vBrezgo&list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&index=2X)  <IframeEmbed src='https://www.youtube-nocookie.com/embed/vBreXjkizgo' />  - Good for local development. (Especially when on aeroplanes?) - Not as good for cloud providers as Terraform. - No more snowflake servers. "
  },
  {
    "id": "learning-to-django",
    "objectID": "learning-to-django",
    "title": "Notes on learning Django",
    "tags": "uncategorized",
    "category": "Technical / Web",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ## In the beginning  I came to web development via business analytics. I was working as an accountant and Excel wasn't good enough anymore, so I looked around for a way to get started and came across [Jupyter Notebooks]({filename}jupyter-ipython-notebooks-pandas.md).  Notebooks are said to be a kind of 'gateway drug' to programming, and I think that's true. They're the easiest and fastest way to start programming that I've come across.  When you're working in a notebook, its easy to get data, wrangle it, and show some results. But as soon as you can create a chart or some summary table you inevitably wonder how you can show this to people more easily, and publishing the results to a website feels like the best most general and versatile solution.  Unfortunately it's also the hardest, and so begins a long series of compromises and incremental progress. Learn to use a dashboarding API, and learn to create static sites. But the end-goal, the ultimate solution, is a data driven web app, with authentication, saved user preferences, scalable performance, and automatically updated data sources.  ## A personal finances dashboard  When I moved to the Netherlands, I wanted to use a personal finances dashboard to check weekly expenses. There wasn't a web-app that would do this (though there are a couple of apps that are trying) so I built my own dashboard. Then a few friends asked if they could use it too. They couldn't because it was just a dashboard and not a web app, but I thought this was a good reason to jump into web development.  It was a much bigger task than I anticipated. (And that's OK.)  It took several attempts and was super frustrating, I would dabble for a few weeks, do a few tutorials, and then get completely lost when I tried to do something by myself. I'd get disorientated working across many different files and trying to visualise which part of the Model-View-Controller model, or the request-response cycle I was currently working on.  I came to realise that the mental load seems so large at the beginning because 'web-development' is really a whole stack of technologies and abstractions combined (or stacked) together. Many of these have to be used together at the same time before you can see _any evidence of success at all_.  ## Learning Django  I think the hardest things about Django are not actually Django. You'll need to comfortable with classes and inheritance. You'll also need to be comfortable with working across multiple files, and have some tools for searching across all you open buffers, or all the files in the project, at the same time. You'll also need to be comfortable with version control (Git) and using the command line. Get familiar with stack traces too.  If you're familiar enough with all these things, so that using them doesn't feel new, but ideally feels familiar and comfortable, then I think you'll make quite quick progress with Django.  Django uses the Model-View-Controller model. Models are how django maps Python objects to items in your database (oh yeah, you need to be familiar with SQL too...), Views are where requests are processed (also Middleware) and turned into Responses, which are then combined with templates (unless your building an API). You might notice I haven't mentioned what a Controller is - get used to information feeling incomplete whilst you're learning the ropes. It'll become clear soon enough.  ## The best moments  The 'curse of knowledge' states that once you've learnt something you can't imagine or remember what it's like to not know it. Before that happens completely, I want to record some of the 'ahah!' moments of 'learning Django'.  For context, I stopped working as a freelance data scientist in April and after a few weeks wondering if django and PostgreSQL and python was the way to go (yes it is. use boring technology), I began working full-time on what would become [MoneyBar.nl](https://moneybar.nl). I called it 'myeuros' in the beginning.  The learning curve felt steep. I wanted to do things 'right' the first time because I wasn't building a toy, and although I felt that hindsight would show this to be a mistake in terms of efficiency, I did it anyway because I have a hunch that following my compulsions sometimes makes life harder in the short term and better in the long term.  The best moments are usually preceded by the most frustrating.  ### Adding a unique identifier to an existing authentication model  I used pydanny's `cookiecutter-django` template. Honestly, by the time I'd gone through the quickstart process and googled the nouns in all the questions (what is `Sentry`, what is `Celery` and what is a `task que`, what is `whitenoise`, etc.) I was already tired. Play with it a few times and come back to it.  Anyway, I wanted to start with authentication, because the project template has that part kind of up and rnuning for you out of the box. `cookiecutter-django` uses the `Django Allauth` package, which is awesome, and reliable, and fully featured... and extremely abstracted. Good luck looking at the module code and understanding it if youre not an expert.  I wanted to give each user a unique ID - a `UUID` when they signed up. This would be used in query strings instead of usernames or incremental keys. This was so hard the first time! And it turns out its not a trivial task, not if you already have a few users in your (test) database. Sure you can reset the database and start again, but experimenting like this is fairly complex. Understanding how the python model classes (the ORM) maps to the relations in the PostgreSQL databse was complex, and if I got confused, should I try to fix it by changing python Models, or editing migrations, or working on the database directly? Getting started is one of the hardest things.  After I'd figured out authentication, I started creating models for other simpler data (transactions and bank accounts I expect). This was much simpler and faster. I remember driving home one evening thinking that if I could get this far then success was inevitable.  ### Testing code  Before long, testing each part of the app by hand when I added or changed a feature was no longer trivial. I needed to find some way of automatically creating users and checking that they could log in and access views.  I began working with `pytest`, and really found it hard to wrap my head around the idea accessing different parts of the app not by requests and responses but by accessing class methods directly.  I think its normal and good to code at the limit of your knowledge, where you know just enough to make a thing 'work'. But this approach falters when you want to then test what you wrote. Or at least, the measure of 'just enough' really changes when you require tests to be written. You don't just need to make it work, you need to understand why it works, so that you can write tests to assert that certain conditions pass and others fail.  This feels really satisfying when it works, because you have proof that you really have grasped a bigger picture. There are far fewer (relevant) black boxes when you write tests. But it also makes learning slower, at least in the short term. It means you might have two get comfortable with a handful of abstractions, when you've already solved the problem you started with. This is frustrating, and it takes discipline to slow down, take a deeper look at the solution, and not just race on to the next feature. "
  },
  {
    "id": "lessons-from-creating-a-production-database",
    "objectID": "lessons-from-creating-a-production-database",
    "title": "Lessons from creating a production database",
    "tags": "facebook,management",
    "category": "snippet",
    "content": "  wip  - Have a simple, crisp mission statement that expresses your raison d’etre. - Socialize estimates of task difficulty repeatedly; - Do whatever it takes to make sure that manager churn does not result in   unfair career outcomes for ICs  [source](https://maheshba.bitbucket.io/blog/2021/10/19/42Things.html) "
  },
  {
    "id": "life",
    "objectID": "life",
    "title": "Life",
    "tags": "aphorism",
    "category": "snippet",
    "content": "  If youth is wasted on the young, then life is wasted on the living. "
  },
  {
    "id": "lightning-network-point-of-sale",
    "objectID": "lightning-network-point-of-sale",
    "title": "Lightning network point-of-sale",
    "tags": "lightning,bitcoin,crypto",
    "category": "snippet",
    "content": "  A project to demonstrate an offline, fast, point-of-sale device to allow merchants and customers to make fast cheap transactions on the lightning network.  - [Github repo](https://github.com/arcbtc/LNURLPoS) - [lnurl super protocal](https://github.com/fiatjaf/awesome-lnurl)  Also [lnbits](https://lnbits.com/)  <blockquote className='twitter-tweet'><p lang='en' dir='ltr'>Introducing <a href='https://twitter.com/hashtag/LNURLPoS?src=hash&amp;ref_src=twsrc%5Etfw'>#LNURLPoS</a>!<br></br>Completely OFFLINE &lt;$10 <a href='https://twitter.com/hashtag/bitcoin?src=hash&amp;ref_src=twsrc%5Etfw'>#bitcoin</a> LN Point-of-Sale.<br></br>Video tut coming soon, workshops at <a href='https://twitter.com/hashtag/hccp21?src=hash&amp;ref_src=twsrc%5Etfw'>#hccp21</a> and <a href='https://twitter.com/AdoptingBTC?ref_src=twsrc%5Etfw'>@AdoptingBTC</a> <br></br>Check out the repo! <a href='https://t.co/JFCKocDfFO'>https://t.co/JFCKocDfFO</a><br></br>(watch the <a href='https://twitter.com/lnbits?ref_src=twsrc%5Etfw'>@lnbits</a> wallet in the background when the transaction is made 🤩) <a href='https://t.co/fVbMkP1kJT'>pic.twitter.com/fVbMkP1kJT</a></p>&mdash; Ben Arc 🏴󠁧󠁢󠁷󠁬󠁳󠁿✊⚡️ (@arcbtc) <a href='https://twitter.com/arcbtc/status/1442511015669809152?ref_src=twsrc%5Etfw'>September 27, 2021</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script> "
  },
  {
    "id": "lightning",
    "objectID": "lightning",
    "title": "The Bitcoin Lightning Network",
    "tags": "bitcoin",
    "category": "Technical/Cryptocurrencies",
    "content": "  The lightning network is a protocol that operates on top of the Bitcoin network. It allows instant transactions between participants and is the leading solution to current scalability problems.  This post is based on the excellent seminar by Joseph Poon and Thaddeus Dryja 'Scaling Bitcoin to Billions of Transactions Per Day' which was given at the San Francisco bitcoin developers conference in early 2015. You can see the seminar [here](https://youtu.be/8zVzw912wPo).  ## The Problem  Bitcoin doesn't scale well enough to facilitate the rate of transactions necessary for it to become a medium of exchange in everyday life. This is because  1. Transactions aren't instant - the average block time is 10 minutes 2. Transaction fees are variable and too high (particularly when blocks are almost full) to enable low value transactions (micro-payments)  Currently, Bitcoin has a 1MB block size limit. This allows about 2750 transactions per block [(link)](https://blockchain.info/charts/n-transactions-per-block) or 4.6 transactions per second. This isn't fast enough for a global payment system.  ## Solutions  ### Bigger blocks  In 2017 there was a lot of contentious debate about how to solve Bitcoins scaling problems. One of the most frequently suggested solutions is to increase the block size, so that more transactions can fit into each block.  If you had 7 billion people making 2 transactions per day, you would need 24GB blocks, generating data at a rate of 3.5TB/day. This would make running a full bitcoin node impractical for many people which would result in centralisation, fewer miners and lower security.  (Note: you would expect corporations and large miners to support efforts to increase block sizes, because the associated infrastructure cost increases create a higher barrier for entry to newcomers. This would decrease the competition for new blocks and protect their revenue from miners fees.)  ### More efficient databases  SQL is a much more efficient database model than a blockchain. Its scalable and fast, and is what is used today to power visa, master card, central banks. But it isn't trustless. With a SQL database model you have a trusted 3rd party maintaining the database which everyone else needs to query to discover or verify a balance. This is equivalent to giving the 3rd party your money and trusting they do the right thing.  ### Side chains  A blockchain with other blockchains running parallel to it. Maybe like a a rope made of many different chords. Side chains are not primarily a scaling solution. If you want to send a payment to an address that is on a different side chain you would create 2 transactions. Not any-to-any.  ### Payment channels  Many payments between two predetermined parties. Useful when two parties pay each other multiple times, not necessarily good for paying many different accounts relatively few times each. Its not any-to-any.  ---  What we want is payments from **anyone to anyone**  ### Lightning Network  - Payment channels between many parties in a multi-hop hub and spoke model - Minimally trusted intermediaries - they can't take your coins, but they could conceivably delay setllement - Requires the malleability fix that occurred in 2017  Previous soft forks:  1. Pay to script hash, 2. bip34 (coinbase transactions)  ## What are payment channels  - Uses multisig - Allows two people to send transactions to each other quickly without hitting the blockchain everytime  ### A 2 party unidirectional payment channel  Alice and Bob create a multisig address that they each control  Alice wants to send 1 BTC to the multisig address  Before she does this, she gets Bobs refund signature, this means that at worst, Alice loses her coin for 30 days.  Bob creates a 30 day nLock time refund signature, signs it, and sends it to Alice.  Alice can either sign it immediately and keep it, or wait to sign it herself (keeping it half-signed).  Once Alice has the refund signature she knows its safe to send her BTC to the multisig address she and Bob just created. "
  },
  {
    "id": "linux-etsy-dir",
    "objectID": "linux-etsy-dir",
    "title": "Linux Filesystem Hierarchy Standard",
    "tags": " linux,filesystem",
    "category": "snippet",
    "content": "  `/etc` (etsy) → 'etcetera' or 'editable text config' → a place to put config files.  Originally, the root directory had `/boot` for booting, `/dev` for devices... One dir for each type of thing. But this put config in many places. so `etc/` became convention  - [Filesystem Hierarchy Standard](https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard) - [fhs-2.3](https://www.pathname.com/fhs/pub/fhs-2.3.html) "
  },
  {
    "id": "linux-performance-analysis-in-60-seconds",
    "objectID": "linux-performance-analysis-in-60-seconds",
    "title": "Linux performance analysis in 60 seconds",
    "tags": "linux,security",
    "category": "snippet",
    "content": "  A [blog post](https://www.brendangregg.com/Articles/Netflix_Linux_Perf_Analysis_60s.pdf) with a checklist of steps to take and questions to ask when investigating a performance issue on a Linux server. "
  },
  {
    "id": "lis17",
    "objectID": "lis17",
    "title": "The Lisbon Investment Summit",
    "tags": "fintech,startup,europe,lis",
    "category": "Non-technical/Entrepreneurship",
    "content": "  I attended the [Lisbon Investment Summit](http://www.lis-summit.com/) on June 6 and 7 as part of the [Oula.la](http://www.oula.la) InsurTech startup team with [John Sullivan](https://twitter.com/jd_sullivan?lang=en-gb). It was the first startup conference I'd been to and I arrived hoping to have some useful conversations and understand more about the Fintech and startup spaces in Europe. As usual I wanted to focus on tech, finance and blockchains.  ## Who was there  As well as some outstanding sessions there was a high ratio of investors to startups. This made talking to VCs, bankers and M&A lawyers really easy. I was happy to meet a London-based and Fintech-focussed VC when I sat down to have lunch, and thanks to interrupting a session to ask blockchain related questions on Day 1, a banker struck up a conversation with me over breakfast the next day. I met a lot of people across many relevant roles, and once I've worked through my notes and my new collection of business cards I hope to have some great follow-up meetings.  ## Useful Sessions  The most useful sessions for me were:  - ['What it means to be ambitious for founders in Europe'](ambitious) by [Oussama Ammar](https://twitter.com/daedalium?lang=en) from [TheFamily](https://www.thefamily.co)  - ['Understanding Investment'](investment) by [Boris Golden](https://twitter.com/Boris_Golden) from [Partech Ventures](https://www.partechventures.com)  - 'Building successful businesses on blockchain technologies' a panel discussion moderated by [Kevin Loaec](https://twitter.com/kloaec?lang=en), founder of the [Chainsmiths](http://chainsmiths.com/) blockchain consultancy, and including [Mir Serena Liponi](https://twitter.com/mir_btc) from [Blockchain Lab](http://www.blockchainlab.it/)  The blockchain session was valuable because it's unusual to meet people who have been working in the blockchain space for several years. I'm always wary of being distracted by the hype and noise around developments in the blockchain space so I appreciated hearing some informed and level-headed opinions.  ## Political Support  The opening session included a speech from the Mayor of Lisbon and the next day opened with a speech from the Secretary of Industry. Both speeches conveyed an open and progressive attitude to international cooperation aimed at promoting and supporting founders and startups in Portugal. The warm words were supported by practical measures including tax incentives and a state-backed scheme to match amounts contributed by private investors. It was really refreshing to hear a politician extol the virtues of multinational cooperation and bringing different cultures into Portugal. I wish Britain could do this too.  On the topic of Brexit, which inevitably arose due to London's present role as a centre of finance and innovation, it seems Europe is still expecting the UK to come to its senses, and cannot understand why it's destroying its goodwill and reputation so thoroughly.  ## Overall  The two days in Lisbon were full of useful and energetic conversations and it was a great experience pitching [Oula.la](http://www.oula.la) multiple times and talking about what we're trying to do and how blockchains are a part of that. The opportunities to meet founders and investors are invaluable for making informed decisions. Lisbon is a beautiful city which I found easy to get around and always felt safe in. It's also refreshingly [affordable!](london)  ![Panoramic street](/static/images/lis4.JPG)  ![Google talks](/static/images/lis3.JPG)  ![Statue](/static/images/lis1.JPG) "
  },
  {
    "id": "load-testing-web-analytics-tool",
    "objectID": "load-testing-web-analytics-tool",
    "title": "Load-testing my Web Analytics Tool",
    "tags": "google-cloud-platform,cloud-functions,api",
    "category": "Technical/Web",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # Background  I posted a previous [article](analytics) (about building an analytics tool) onto the Hacker News forum. It was quickly buried and didn't get any attention.  To my surprise, I received an email from a Hacker News administrator (Daniel) explaining that it was a good quality post and would be boosted to the front page at a random time within the next couple of days.  Sure enough, in the early hours of the next morning, the post was boosted. I woke up to various notifications that people had started following me on twitter, which never happens. After delegating the kid's breakfast duties, I logged into GCP to see what affect the extra traffic had on my experimental tool.  # The Hacker News affect  Traffic had increased by about 30x and my hastily built tool was looking very sub-optimal. Two problems stood out - the aggregated analytics data was taking anywhere from 20 - 30 seconds to load (up from around a passable-ish 5 under normal conditions), and I was running up a bill of around €10/day.  ## Bad news  The reason for both of these problems was a shockingly inefficient and lazy approach to serving the analytics.  Each time the analytics page was loaded, a cloud function would fetch _all_ the data in the DataStore database, munch all that data and return a freshly derived blob of JSON. Never mind that almost the exact same computation had occurred hundreds of times already.  As the amount of data in the DataStore increases, so does the time required to serve the analytics page. In the second chart below (dashboard for the `get-analytics` cloud function), it looks like the execution time increases at a rate of O(log n).  ## Good news  The good news though was that the `page-view-logger` function was handling the extra traffic smoothly. You can see in the dashboard image below (click on it) that almost every request was completed in less than 200ms, which I think is fine for a background process. I could also see the active instances scaling up and down well within its preset limits, as expected.  ## API traffic for the tool  [  ![API traffic](/static/images/analytics-tool/api-traffic.png)/images/analytics-tool/api-traffic.png)  ## Dashboard for the `get-analytics` cloud function  [  ![dashboard for get-analytics function](/static/images/analytics-tool/get-analytics-dashboard.png)/images/analytics-tool/get-analytics-dashboard.png)  ## Dashboard for the `page-view-logger` function  [  ![dashboard for page-view-logger function](/static/images/analytics-tool/page-view-logger-dashboard.png)/images/analytics-tool/page-view-logger-dashboard.png)  # The Solution  I began to ponder the importance of all the things I didn't know about databases, and what DataStore might be good and bad at doing. Scrolling through the documentation I could see google boasting of super quick writes, but not super quick reads. I'd already seen how many API calls were being made to the Cloud DataStore API and knew I'd probably have to redesign part of the tool.  ## Idea 1: Use global objects  I attempted a few easy wins, mostly using the idea that if an instance of a function was invoked multiple times before being powered-down then global objects would still be available in memory.  If I put the data collected from the DataStore into a global object then I could check for its existence in subsequent function calls. This would save a lot of API calls and likely remove the largest bottleneck, saving my readers 10+ seconds of watching a loading spinner.  For whatever reason, this didn't work. Even if it had, the tool could still be vastly improved by taking a different approach that would be even faster and also reduce costs. I'd like to have this tool running indefinitely so reducing daily costs to an absolute minimum is important.  ## Idea 2: Store the results themselves in the database  It was obviously inefficient to repeat the same calculations multiple times. A good long-term solution would require aggregating the data periodically and then fetching and serving these aggregated data to the client.  I tried putting the JSON into the DataStore using a different key, but ran into errors about the data for each entity being too large. Even if I split the aggregated data into multiple component parts it would still be too large, and would grow over time. I guess DataStore isn't meant to be used like this.  I probably could have pursued this idea a bit further, but I didn't want to change the structure of the JSON blob served to client. If I did change it then I'd need to rewrite the client side JavaScript as well.  Client side work is faster than back-end, but writing JavaScript is fiddly compared to Python in my opinion. There's always multiple ways of doing a thing, and several versions of an API, so googling a solution isn't as simple as for Python.  ## Idea 3: Forget DataStore, use buckets  Final idea - store the results as a JSON blob in a Storage bucket and point the client at the bucket instead of the Cloud Function.  Turns out this is a super fast and efficient solution. [/analytics.html]({filename}/pages/website-analytics.md) now loads in less than half a second, and the only variable costs are egress on the bucket, which will be much smaller than the comparable costs of running a Cloud Function.  The computation expense of calculating the analytical results is fixed and decoupled from the number of page views using the following method:  1.  Every few minutes Cloud Scheduler targets a Pub/Sub topic. 1.  The topic triggers a Cloud Function. 1.  The Cloud Function then:     1. Queries the DataStore and collects the data.     1. Calculates the analytics results.     1. Generates a JSON blob containing the results.     1. Pushes the JSON to a storage bucket which is available to a client.  ## Further improvement  The aggregated results for days other than the current day are still needlessly recalculated - once midnight rolls around the results are clearly not going to keep on changing.  Instead of having one JSON blob containing data for all the last 30 days, I could have a blob for each day (or perhaps each week). This would reduce the amount of data extracted from the DataStore. This would reduce costs and computational expense. "
  },
  {
    "id": "logging-best-practices-notes",
    "objectID": "logging-best-practices-notes",
    "title": "Logging Best Practices",
    "tags": "programming,back-end",
    "category": "Technical/Engineering",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  A great [aricle](https://tuhrig.de/my-logging-best-practices/) by someone called Thomas about how to build useful logs. I find the inclusion of examples to be very useful, and the background information in the introduction is a nice addition.  # Past tense only  - Most stuff should be past tense.  - Say what happened, not what is about to happen. This makes it much more explicit and easier to read. The reader   doesn't need to infer anything.  # Separate messages and parameter values  - Think about how you might search for parameter values - if they are   interspersed between normal English sentences it becomes harder to search for.  - Also consider readability if the parameters are very long or harder to read   literally.  # Warnings are for things that worked  - The thing was done, but not perfectly.  # Errors are for things that did not work  - The thing wasn't done.  # Info is for business  - The info log looks like a book and reads like a story.  - It tells you what happened, but not necessarily how it happened.  - `User x signed up` - `User x bought an item` - `User x navigated to settings`  # Debug is for technology  - It tells you how stuff happened.  - `Saved user credentials` - `Started cron job` "
  },
  {
    "id": "london",
    "objectID": "london",
    "title": "London Rent vs. London Salaries",
    "tags": "london,rent",
    "category": "Non-technical/Journal",
    "content": "  Living in London is expensive, everyone in the UK knows this. Everyone knows that this is mostly due to the price of property, which we all enjoy talking about.  I've lived here for 3 years now, and when my wife and I were both working we lived comfortably. Two incomes under one roof is just fine. Not as fine as in many other cities, but reasonable. Just over a year ago my first child was born, and now that my wife's maternity pay has ended we are a single income household. This is not fine.  Even though I earn almost £50k/year, and any salary increase will be taxed at 40%, I cannot cover essential day-to-day costs. I'm in the 40% tax bracket, and my basic monthly outgoings exceed my monthly take home pay by £400. If my employer wanted to pay me enough to cover essential costs, it would cost them approximately double the shortfall due to tax. None of this makes sense.  Salaries and living expenses have become really disconnected.  For most people the most obvious way to increase wealth is to buy property. Mortgage repayments are cheaper than rent, and the value of the property increases over time. Double win. But there is a big hurdle to overcome before this is possible - saving money for a deposit on a house is often impossible without external help (i.e. the 'Bank of Mum and Dad'), because so much of the money earnt must be spent on rent first.  It's a trap. Repayments on a mortgage are cheaper than paying rent, but you cannot save enough for a deposit because;  1. so much of your salary goes to paying rent[^1], and 2. the average cost of a _flat_ in London is 500k[^2], which means a 5% deposit is £25k — which is a higher deposit than you would need anywhere else in the UK, despite being the place you are least able to accumulate it.  What if my partner went back to work and we put our baby in childcare? Childcare is not cheap, and working would need to bring in more than the cost of childcare. This requires a higher than average salary from a graduate job, (which is the life stage when people might reasonably start having children), so unless both parents are unusually high earners that option isnt viable either.  Living in London is only financially possible if you are either single or household income is more than £60k/year.  [^1]: You'd be lucky to find a 1 bedroom flat for less than £1000/month [^2]: According to [Rightmove](http://www.rightmove.co.uk/house-prices/London.html), an estate agent with some useful price statistics. "
  },
  {
    "id": "lsblk-command",
    "objectID": "lsblk-command",
    "title": "lsblk",
    "tags": "unix,cli",
    "category": "snippet",
    "content": "  `lsblk` is a command to get info about connected devices.  Used when attaching drives. "
  },
  {
    "id": "macos-keyboard-shortcuts",
    "objectID": "macos-keyboard-shortcuts",
    "title": "MacOS Keyboard Shortcuts",
    "tags": "macos,keyboard",
    "category": "snippet",
    "content": "  A [blog post](https://www.jamieonkeys.dev/posts/keyboard-shortcuts/) explaining some useful keyboard shortcuts.  A [blog post](https://jinyuz.dev/posts/tips-and-tricks/Changing-caps-lock-key-to-Escape-when-pressed-alone-and-Control-when-pressed-with-another) explaining how to make caps lock be `escape` when pressed alone, and `ctrl` when pressed with another key. "
  },
  {
    "id": "make-files",
    "objectID": "make-files",
    "title": "Make files",
    "tags": "automation,build-system",
    "category": "snippet",
    "content": "  This [article](http://nuclear.mutantstargoat.com/articles/make) is a fairly practical introduction to the GNU `make` tool.  It's not the article I was looking for though, so I might swap it out if I find a better one. "
  },
  {
    "id": "man-swallowed-by-whale",
    "objectID": "man-swallowed-by-whale",
    "title": "Man swallowed by whale",
    "tags": "whale",
    "category": "snippet",
    "content": "  A lobster diver was swallowed by a humpback whale. Then it spit him out. Humpback whales don't have teeth, and have reduced forward vision when they open their mouths to feed.  [article](https://eu.capecodtimes.com/story/news/2021/06/11/humpback-whale-catches-michael-packard-lobster-driver-mouth-proviencetown-cape-cod/7653838002/)   [archive](https://web.archive.org/web/20210612050639/https://www.capecodtimes.com/story/news/2021/06/11/humpback-whale-catches-michael-packard-lobster-driver-mouth-proviencetown-cape-cod/7653838002/) "
  },
  {
    "id": "marketing-101",
    "objectID": "marketing-101",
    "title": "Learning to market",
    "tags": "marketing,growth",
    "category": "Non-technical/Entrepreneurship",
    "content": "  Since April I've been able to work full time as a solo founder. I've challenged myself to build something useful enough that customers would want to pay for it and in the process of seeking that goal I've become a much better and more rounded developer.  I've been working solo for about 7 months now, and in that time I've begun using test driven development, I've built non-trivial data driven web apps using Django, and I've learnt how to deploy and monitor those apps in production and make them performant.  I've made two main apps; [moneybar.nl](https://moneybar.nl) and [pippip.email](https://pippip.email), and I've learnt so much.  I'm realising though, that I still have much to learn in other spheres. Being a great developer is deeply meaningful to me. It's literally a bucket list item for me and I intend to be writing code as long as I live. But there is no point creating products if no one knows they exist.  This is where marketing and positioning comes in. Right now it feels like I know nothing about how to get users, or validate an idea, or position a product. These are all super necessary and super unknown.  On a more meta level, I'm confronted with the lost benefits of working with co-founders, or of having friends doing similar things. I want to work faster and make progress more efficiently. I need to be part of a community.  Working in isolation does have its advantages, though. I'm self-taught and self-directed, figuring out the contours of uncharted territory and creating my own personal map. In my mind, I have a deep and almost personal relationship with the coding abstractions and tools I've learnt to work with. Classes and functions, strings and floats, literally have (to me) their own textures, colors and weights when I think or dream about them.  It feels like I can pick up these abstractions as if they were physical objects and turn them around to examine them. Place them next to each other and compare the differences. Run thought experiements. In my experience, this kind of relationship and affection simply doesn't happen when taking a class or following someone elses schedule. It's satisying to feel ownership of a skill like this, and it's one of the primary reasons I consider coding to be similar to a craft.  Having said all that, now that I realise I need to validate my product, position it, and figure out marketing, I've stopped writing code, put down my tools, and I'm going to learn marketing. I've bought some books. Maybe I'll post some reviews here later.  In no particular order here is what I plan to read:  - The 1-Page marketing plan, by Allan Dib Obviously Awesome, by April Dunford - Lean Analytics, Hooked, How to build habit-forming products, by Nir Eyal The - Mom Test, by Rob Fitzpatrick - This is marketing, by Seth Godin - Product-led growth, by Wes Bush  I don't know if I've covered 90% of the distance required or 50%. It's exhausting but I'm here for the journey not the destination. "
  },
  {
    "id": "math-explainers",
    "objectID": "math-explainers",
    "title": "Math explainers",
    "tags": "math",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  I'm really enjoying math explainers lately, on YouTube there's [3blue1brown](https://www.youtube.com/c/3blue1brown) and [Veritsasium](https://www.youtube.com/c/veritasium), and for text I've enjoyed a couple of [Matt Ferraro's](https://mattferraro.dev/https://mattferraro.dev/) blog posts.  <IframeEmbed src='https://youtube.com/embed/cUzklzVXJwo' />  Check out [What is the inverse of a vector?](https://mattferraro.dev/posts/geometric-algebra) and [Poisson's Equation is the Most Powerful Tool not yet in your Toolbox](https://mattferraro.dev/posts/poissons-equation).  This is a great explanation of the geometric reasoning for the solution to quadratics and cubics, which then goes on to introduce imaginary numbers. "
  },
  {
    "id": "mental-models-i-used-to-use",
    "objectID": "mental-models-i-used-to-use",
    "title": "Mental Models I Used To Use",
    "tags": "uncategorized",
    "category": "Non-technical/Learning",
    "content": "  The rules[ref]or policies[/ref] and mental models that helped me succeed in one season or phase of life may not be the best for the next phase.  Here is a list of a few mental models I remember being concious of in previous years. Probably I've already forgotten some.  1.  _Always ask 'why...'_. Be obsessive about this. It's going to make things     harder for a while before things get easier. You'll find difficult answers     that you otherwise wouldn't. If you're only concerned with the present then     its true that ignorance is bliss, but otherwise it's a liability.  2.  _'What if...'_ is another good question to ask a lot.  3.  _Adapt_ to the situation, don't make it adapt to you if you have any     choice. Be kind of like water, going around things and through the gaps.     Look for the edges and the gaps, the parts that aren't well known.  4.  _Let people talk_ as much as they want to. Shut up and listen. If they     mean you harm or don't respect you then it'll become more obvious the more     they keep talking. If they mean you well or they're saying something     useful, you will benefit more from letting them talk more.  5.  _Inversion_ - it can be hard to know if you should do something, but how     would you feel if you didn't do it, or if it didn't happen?  6.  _Regrets are inevitable_, everyone has them. Same as making mistakes. Let     your regrets be for things that you did do, and not what you didn't do.  7.  If you are willing to try something, fail at it, and still be glad that you     tried, then you should almost definitely do it. Commit to it and enjoy the     experience! Don't be scared, or at least, be scared _and_ optimistic and     happy[ref]Courage isn't the absence of fear. It's being scared and doing     the right thing anyway.[/ref].  8.  There is beauty and luxury in being in such a bad spot that you are backed     into a corner with seemingly no way out. Things become black and white,     instead of shades of gray, and that will make priorities and options much     clearer. You are likely to work very efficiently and effectively in this     scenario, and you will learn important things about yourself.      Now that I'm older and I have responsibilities, I can't ever let things     become so bad that a situation becomes black and white. I have to     navigate a world of grays. If they do become black and white, I'll     already have a long list of failings.      When I was younger, things were more fragile. My resources were smaller and     things could quickly flip from good to bad. Enjoy the few benefits that a     situation like that gives, because (hopefully) once its gone its gone for     good.  9.  The best way to solve a problem is to prevent it from occurring in the first     place. Succeeding at this will bring its own challenges.  10. Take responsibility for things you are not responsible for, kind of. Do it     deliberately and for your own benefit, but don't forget that you are only     pretending that it's your responsibility.      If you do this, you will force yourself to understand a situation more     deeply and from other peoples perspectives. This will let you learn faster     and help you in future. Keep this at arms length though - it's make-believe     and you need to be able to switch it on and off. It's a toy for you to play     with. This seems to be what 'extreme responsibility' is.  I think its important to have mental models that you're comfortable with, because it lets you make decisions quickly and consistently. But understand that [the map is not the territory](https://fs.blog/2015/11/map-and-territory/), and these are just tools in a toolbox. "
  },
  {
    "id": "microservices_events_docker",
    "objectID": "microservices_events_docker",
    "title": "Microservices, Docker, Azure",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  This is a great presentation about microservices and event driven architectures.  <IframeEmbed src='https://www.youtube.com/embed/sSm2dRarhPo' />  And this is a comprehensive overview of Azure  <IframeEmbed src='https://www.youtube.com/embed/NKEFWyqJ5XA' /> "
  },
  {
    "id": "miller-cli",
    "objectID": "miller-cli",
    "title": "Miller CLI",
    "tags": "cli,tools",
    "category": "snippet",
    "content": "  [Miller](https://github.com/johnkerl/miller) is like awk, sed, cut, join, and sort for data formats such as CSV, TSV, tabular JSON and positionally-indexed.  Try this if you're operating on JSON of CSV data, and you want to use column names instead of column numbers. "
  },
  {
    "id": "modifying-vim-colorschemes-correctly",
    "objectID": "modifying-vim-colorschemes-correctly",
    "title": "Nested Auto Commands for Overriding Colorschemes",
    "tags": "vim",
    "category": "snippet",
    "content": "  A [snippet](https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f) detailing how to use nested auto commands to apply custom modifications when a colorscheme is loaded. Perhaps this will stop me `:e`-ing so frequently. "
  },
  {
    "id": "mom-test",
    "objectID": "mom-test",
    "title": "The Mom Test",
    "tags": "book",
    "category": "Non-technical/Entrepreneurship",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ## Summary  1. Ask good questions. 2. Avoid bad data. 3. Keep it casual. 4. Push for commitment and advancement. 5. Frame the meeting well. 6. Focus on the right, tight, customer segment. 7. Prep well, take good notes, review your notes.  ## Update 2  Doing Mom-test and customer development remotely:  <IframeEmbed src='https://youtube.com/embed/bcWqxq2fJgY' />  ## Update 1  This [comment](https://news.ycombinator.com/item?id=28669410) on Hacker News mentions a similar book 'The Right It' by Alberto Savoia. He mentions 8 ways to test an idea:  1.  The Pretend-to-Own – Before investing in buying whatever you need for your it, rent or borrow it first. 1.  The Pinocchio – Build a non-functional, “lifeless”, version of the product. 1.  The Fake Door – Create a fake “entry” for a product that doesn't yet exist in any form 1.  The Minimum Viable Product (or Stripped Tease) – Create a functional version of it, but stripped down to its most basic functionality. 1.  The Mechanical Turk – Replace complex and expensive computers or machines with human beings. 1.  The Provincial – Before launching world-wide, run a test on a very small sample. 1.  The Re-label – Put a different label on an existing product that looks like the product you want to create.  Rob Fitzpatrick responds to this comment with more thoughts and links to this [comment](https://news.ycombinator.com/item?id=28669204).  ## Chapter 1 - Opinions are worthless  **Anything involving the future is an overly optimistic lie.** You want objective facts about what happened in the past.  1. Find out if people care about your idea by never mentioning it. 2. Forcing yourself not to mention your idea will force you to ask better    questions 3. Make sure your questions pass the mom test:    - Talk about their lives, not your idea.    - Ask about specific objective events in the past, not hypothetical scenarios.    - Spend most of your time listening, not talking.  ## Chapter 2 - Avoid bad data  - You aren't allowed to tell them what their problem is. - They aren't allowed to tell you what to build.  Bad data includes:  1. Compliments 2. Fluff 3. Hypotheticals 4. Ideas  ## Chapter 3 - Ask the important questions  You should be terrified of at least one of the questions you ask in each conversation.  1. Search out the scary questions you've been unintentionally avoiding. What's the worst thing a prospect could say? What's the scariest question you could ask? 2. A good way to find scary questions is to imagine that your company has failed and then to ask why. 3. If you get an unexpected answer to one of your questions and it doesn't have any effect on what you're going to do, then was it really worth asking it? 4. General advice for hard things includes asking hard questions. Imagine you were delegating the task, what would you tell the person to do? That's you. 5. You can ask about money. 6. Love bad news - if you find out that your idea is fundamentally flawed you've just saved a tonne of time and energy and money. Move on. It's getting you closer to the truth. 7. Bad news isn't the result of an opinion. No one knows if your idea will work, only the market knows. 8. Opinions don't count. 9. A lukewarm response to your idea can be a great conversation, because you realise that your idea isn't a great idea. Lukewarm means they don't care enough to buy the first (worst) version before it's ready. 10. Look before you zoom. Don't focus on details too soon, you need to understand the big picture first. 11. You have **product risk** and **customer risk**: 11. **Product risk** - can I build it and grow it? 12. **Customer risk** - is there a big enough group of people who are going to buy it? 12. Pre-plan a list of the 3 most important questions (including a scary one) before every meeting or conversation. Be ready with these. They should change from week to week. As you get good quality answers to existing questions you can bring in new questions.  ## Chapter 4 - Keep it casual  ** Problem -> Solution -> Sales **  1. Normally you would have 3 meetings with a client when you make a big sale. This lets you do each stage really well without blurring the data:    1. Identify your prospect's problem    2. Explain your solution    3. Sell the solution 2. Identifying a problem doesn't have to be a meeting, keep it casual and you will get more honest feedback much faster. It works better as a chat when people are relaxed and saying what they really think. 3. It take 5 minutes (max) to identify if a problem exists and is important.  **Give as little info as possible about your idea whilst still nudging the conversation along**  ## Chapter 5 - The currencies of conversation  **In early stage sales, the main goal is learning. Money is a side-effect.**  Will they spend **money**, **time**, or **reputation** on your solution?  1. If someone is willing to risk reputation, or spend time or money on your idea, then you can believe that they're interested. 2. Hearing a compliment means they're trying to get rid of you. 3. If it's a bad meeting or you're not sure what they really think, push for a commitment of some kind. Ask them to spend time, reputation or money and you'll see what they really think. 4. If they aren't excited (not just interested, but in pain and excited for your solution) then you need to find that out ASAP. It's still a good meeting if you can discover this. 5. Are you offering pain relief medication? 6. A lead isn't a real lead until you've given them a concrete chance to reject you. 7. Ask learning questions by using the Mom Test, then confirm by selling it. 8. You need **crazy customers**:    1. They have a painful and expensive problem    2. They know they have a painful and expensive problem    3. They have the money to pay you to solve it    4. They already have their own bad solution to this terrible problem, and       yours is clearly better 9. A crazy customer doesn't say 'yeah that's great, I'm really interested, let me know when its ready'. They say 'AHHH THIS IS THE WORST PART OF MY LIFE AND I WILL PAY YOU RIGHT NOW TO FIX IT!' 10. A crazy customer will front you the money when all you have is a barely functional prototype made of duct-tape 11. A crazy customer is the person reading you blog, searching for workarounds, when you haven't spent loads of marketing and lead generation 12. Keep a crazy customer close - they'll stick with you when times are tough.  ## Chapter 6 - Finding good conversations  **Vision -> Framing -> Weakness -> Pedestal -> Ask**  Keep having conversations until you stop hearing new stuff.  1. **If it's a topic you both care about, find an excuse. You'll both enjoy the chat. You don't need to mention your idea if it breaks the premise.** 2. Warm introductions are the ideal way to start a new conversation. 6 degrees of freedom in the world, so find someone who knows someone who knows them. 3. Cold calls - LinkedIn, maybe. 4. Serendipity - be prepared, be bold. 5. Have a good excuse - hustle. 6. Landing pages - so that googling the problems brings them to you. 7. Organise an event - bring the businesses together for an event. You'll be considered an expert because you're facilitating it. 8. Become a subject matter expert 9. Speaking and teaching engagements - you get to have strong opinions, and you'll be respected.  ## Chapter 7 - Choosing you customers  1. Startups don't starve, they drown. In options, choices, ideas. You get overwhelmed. 2. Choose a good customer segment, focus on it, and don't get distracted. 3. In the beginning:    1. Google - PhD students.    2. PayPal - eBay.    3. Evernote - Moms with recipes. 4. It will look obvious with hindsight, probably not so obvious before you've figured it out. 5. If you can't get a consistent answer to a question, maybe you're speaking to different segments. 6. If you aren't finding **consistent problems and goals** then you don't have a specific enough customer segment. 7. Within the group, which type of person would want it the most? 8. Would everyone within the group want to buy/use it? Or only some? 9. Why does the subset want it? 10. Does everyone in the group have the same motivation? 11. What other motivations are there? 12. Who else (outside the group) has these motivations? 7. Go for **Who-Where** pairs of segments. 'Finance professionals who run marathons'.. 8. You want customers who are reachable, profitable, and personally rewarding.  **Good segments are usually 'who-where' pairs. If you don't know where to find your customers, keep slicing until you do. Make sure the segment is reachable, profitable, and personally rewarding**  ## Chapter 8 - Getting the most from the conversations by prepping and reviewing  1. Prepare well 2. Have your **three big questions** ready, including the scary ones. 3. Know who you are speaking to. 4. Know what commitment and next-steps you want to push for. 5. Spend up to an hour writing down: 1. **Your best guesses about what you think they'll say.** 2. **What they care about.** 3. **What they want.**     - If you have a focussed segment, you'll only need to do this occasionally.    - If you come across a question which can be answered using the internet, use the internet.  2. Take good notes 4. Ask if you can record the audio. 6. Record emotions as well as words. Verbatim alone isn't always accurate 6 months later. 5. Use shorthand for follow up. 5. Observe and record emotions - happy, angry, meh, etc. 6. Pains and obstacles are a lot more important if someone is embarrassed or angry when they're talking about them. 7. Dig into the big emotions, find out what's causing them, or why its a big deal. 3. Review your notes 8. Meta - which questions went well or not? 9. What were the answers to the scary questions? 10. How can you do better next time? 11. What were the clear signals? What signals did you miss? "
  },
  {
    "id": "moral-tyranny",
    "objectID": "moral-tyranny",
    "title": "Moral tyranny",
    "tags": "oppression,consent",
    "category": "snippet",
    "content": "  Of all tyrannies, a tyranny sincerely exercised for the good of its victims may be the most oppressive. It would be better to live under robber barons than under omnipotent moral busybodies.  The robber baron's cruelty may sometimes sleep, his cupidity may at some point be satiated; but those who torment us for our own good will torment us without end for they do so with the approval of their own conscience. They may be more likely to go to Heaven yet at the same time likelier to make a Hell of earth.  This very kindness stings with intolerable insult. To be 'cured' against one's will and cured of states which we may not regard as disease is to be put on a level of those who have not yet reached the age of reason or those who never will; to be classed with infants, imbeciles, and domestic animals.  \\- C. S. Lewis "
  },
  {
    "id": "more-vim-notes",
    "objectID": "more-vim-notes",
    "title": "More VIM Notes",
    "tags": "tips,vim",
    "category": "Technical/Developer Tools",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ### Quickfix list  - A quickfix list is a set of positions in one or more files - A quckfix list is global. Not local to a particular buffer. - A quickfix list is _not_ the quickfix window. The window can show the list. The list is a datastructure. - A changelist is local to its buffer.  ### Registers  - `0` contains the content of the last yank - `1`-`9` contains the content you've deleted or changed  - `_` blackhole register - send something here and it wont change any other register. - `-` contains any deleted or changed content smaller than 1 row. - `%` contains the name of the current file.  ### Expression register  1. In insert mode, `<C-r>=`. 2. Type any valid vimscript. 3. The output is inserted into the buffer.  ### Substitutions  - `:&&` → repeat the last substitution command with its flags - `:~` → repeat the lat substitution with the same replacement, but with the last used search pattern  ### Command line  - `q:` - opens the command line window. Good for yanking and viewing previous commands - `:<C-f>` - open command history list - `:UltiSnipsEdit` - opens the ultiSnips file for the current buffers filetype. See which snippets are defined.  ### Delete stuff without leaving insert mode:  - `<C-h>` - same as backspace - `<C-w>` - delete previous word - `<C-u>` - delete everything before cursor (on same row) - `<C-d>` or `<C-t>` - (un)indent a row - `<C-e>` - delete next word  ### Text objects  - `gf` - edit the file at the file path under the cursor (useful for netrw?) - `gx` - open the file at the file path under the cursor (useful for netrw?) - `[m`, `]m` - move to the start or end of a method - `@:` - repeat the last command - `>>` will indent a line. `.` will repeat the operation, so `>>..` would indent   a line 3 times.    You can use this along with a count, which will do the indention for `n` number   of lines (with the current line being the top line). `3>>..` will indent 3   lines 3 blocks to the right.  ### Screen Movement  - `<C-y>` - up one line, and moves the cursor if it would go off the screen - `<C-e>` - down one line, and moves the cursor if it would go off screen - `<C-f>` - down one page, with cursor at top of screen - `<C-b>` - up one page, with cursor at bottom of screen  ### Sources  1. _[The Valuable Dev](https://thevaluable.dev/vim-advanced/)_ has a lot of great tips. 2. _[Vim for Python](https://www.vimfromscratch.com/articles/vim-for-python/)_ has some great notes on linting and code completion plugins that I've either copied or was more or less doing already. "
  },
  {
    "id": "move",
    "objectID": "move",
    "title": "Move",
    "tags": "lifestyle",
    "category": "Non-technical/Journal",
    "content": "  # Ambition  Since I was 15, one of my ambitions has been to be an entrepreneur. I used to joke with my dad about buying him a nice boat one day.  Life so far has been predominantly about education, and that stage is over now. I’m walking away from what I've come to see as a lifestyle and career that has too many contradictions, it doesn't make sense to live like this. Ultimately I want to develop multiple sources of passive income. I want to create.  ## Summer 2017  The last few months have been intense, with some weeks leaving me feeling ambitious and energetic, and others feeling anxious and overwhelmed. I need to get better at defining a goal, taking the quickest path there, and ignoring interesting distractions.  Ritsya is brave enough and imaginative enough to force me to think big and consider how to live a better life. My biggest fear is that I screw it up, shooting myself in the foot and Ritsya and my daughter also. We were headed safely to an unremarkable existence and it would be terrible to swap that for something worse. That won't happen.  I know that I make better decisions and produce my best work under pressure, I thrive when I'm perceived as an underdog. I need to accept this without using it as a reason to be foolish. Whilst I don’t have a clear plan, or direction, or goal, (I have many of them) I’ve got skills and I want to see what I can make. I’ll never do my best work, using my most productive combination of skills and experiences, if I’m a cog in someone else's machine.  It’s safer being an employee than self-employed. I guess the price of removing self-employment risks is the difference between the value you generate for your employer and what you’re paid. I think those risks are overpriced, and most people are more capable than they realise. Sometimes you have to walk into a situation to find out how to make the most of it. And sometimes you have to leave a place in order to gain perspective.  ## Autumn 2016  Last year my boss gave me some advice that was supposed to be encouraging. I’d requested to reduce my involvement with some stuff that was unrelated to my job so that I could contribute more to my team and still maintain some semblance of a work/life balance.  My boss was pretty clear that reducing my involvement in the extra stuff would not be possible. During our conversation he advised me not to worry about how much I contributed to the team because “the work will get done anyway”. This was meant to be encouraging, but instead removed any conviction that the work I did was important. "
  },
  {
    "id": "moxie-on-web3",
    "objectID": "moxie-on-web3",
    "title": "Moxie on web3",
    "tags": "web3,crypto,nft",
    "category": "snippet",
    "content": "  An excellent [article](https://moxie.org/2022/01/07/web3-first-impressions.html) about the state of web3 and NFTs. "
  },
  {
    "id": "multi-tenant-django-webapps",
    "objectID": "multi-tenant-django-webapps",
    "title": "Multi-tenant Django webapps",
    "tags": "python,django,webapp",
    "category": "snippet",
    "content": "  An [article](https://www.viget.com/articles/multi-tenancy-in-django/) explaining how a web-dev shop built a multi-tenant web application using Django and python.  Also:  - a [book](https://books.agiliq.com/projects/django-multi-tenant/en/latest/) - a [repo](https://github.com/citusdata/django-multitenant) "
  },
  {
    "id": "my-dead-dads-journal",
    "objectID": "my-dead-dads-journal",
    "title": "My dead dad's journal",
    "tags": "humanity",
    "category": "snippet",
    "content": "  _Your relationships will come to define your life more than anything else._  A [blog post](https://news.ycombinator.com/item?id=28290408) about someone who read their dad's journal after he died. Its about regret, grief, and struggles against internal contradictions. Its about the tangible consequences of intangible relationships.  The comments are also significant. "
  },
  {
    "id": "my-life-expectancy",
    "objectID": "my-life-expectancy",
    "title": "My Life Expectancy",
    "tags": "regression,statistics,life-expectancy,death",
    "category": "Non-technical/Journal",
    "content": "  # Key points:  1. Weight doesn't matter. 2. Be in 'excellent' health. 3. Workout 3 or 4 times a week. 4. Drink liquor (or red wine) 3 or 4 times a week (after each workout). 5. Try to be happy, optimistic and relaxed. What are you working so hard for    anyway? You need something to do, someone to love, something to hope for.  # Longevity Calculations  I was playing with the life expectancy calculator at [blueprintincome](https://www.blueprintincome.com/tools/life-expectancy-calculator-how-long-will-i-live/)[ref]There is also a more detailed calculator at [projectbiglife](https://www.projectbiglife.ca/life-expectancy-calculator), its calibrated for Canadian citizens.[/ref] and was surprised to find that their regression technique gives me a 50% chance of living to 95! I'd expected a result closer to 80.  After printing out a [90 year calendar](/documents/90-year-life-calendar.jpg), my next thought was to play with the calculator to find the maximum age I could have a 50% chance of reaching.  Doing the factors below would apparently give me:  - 75% chance of living to 92 - 50% change of living to 101 - 25% chance of living to 107  ## Don't workout every day  There is no additional benefit from working out more than 4 times a week. Once you're fit and working out 4 times a week it doesn't matter if you do more exercise.  Being in 'excellent' health is better than being in 'very good' health though, so make the workouts count. I guess if it didn't make a difference then it wouldn't be excellent in the first place.  ## Drink more alcohol  I was surprised that having 3-4 drinks each week increases your life expectancy. I thought that it was best to not drink any alcohol at all.  I should be drinking red wine or liquor 3 or 4 times each week. Liquor increases longevity in men, but reduces longevity for women. Red wine increases longevity in women, but has no effect in men[ref][alcohol consumption in later life and reaching longevity: the netherlands cohort study ](https://academic.oup.com/ageing/article/49/3/395/5730334)[/ref]. I guess I should drink some rum after each workout.  ## Weight doesn't make a different  According to their regression, my expected longevity is unchanged within a weight range of 78kg - 90kg. I guess it's much more important that I'm in 'excellent' health, working out 4 times a week and having some wine, rum, or whiskey after each workout.  # But it's just statistics  The calculator only asks for quantifiable or physical attributes. It doesn't consider emotional, relational or spiritual factors. "
  },
  {
    "id": "naming-things-is-hard",
    "objectID": "naming-things-is-hard",
    "title": "Naming things is hard",
    "tags": "entrepreneurship,saas",
    "category": "snippet",
    "content": "  1. [Seth's blog](https://seths.blog/2005/10/the_new_rules_o/) - Background and context 1. [small business website](https://www.thebalancesmb.com/put-your-business-name-to-the-test-2294885)    - Process    - Testing "
  },
  {
    "id": "neighbours",
    "objectID": "neighbours",
    "title": "Neighbours",
    "tags": "politics,equality",
    "category": "Non-technical/Journal",
    "content": "  A useful model I've come across states that it takes three generations for a society to deny something previously considered true. The first generation studies or experiences something which leads to a particular value or belief. The second generation inherits the belief and assumes it to be true, but doesn't arrive at the belief through their own critical thought. The third generation then questions the assumption, realises that most holders of the belief do not have a good basis for their belief, and disregards it.  The belief that people have a responsibility to look after each other and treat each other with a minimum level of respect seems to be following this route.  That humans inherently deserve a degree of respect and dignity simply because they are human is self-evident. In times of comfort and excess it could be ignored, but in times of calamity and in the aftermath of disasters it becomes undeniable and obvious. This is partly because disasters reveal our instinct for justice and our frailty in the face of misfortune.  Life is experienced through the lens of the mind, and its perception is mostly governed by fundamental circumstances or desires. The trappings of a prosperous society allows this reality to be covered by a veneer of soft arguments, or rejected in favor of a viewpoint that says we have superseded these supposedly basic origins.  Good leaders should know better. They should study history and be self-aware. In the past they have forgotten this reality and have been forced to relearn it at great cost. Are we about to forget, again, and let our children live with those consequences?  My grandfathers generation saw the damage that sectarian systems bring, and were forced to answer questions around how much respect people deserve only because they are people. As the consequences of different views and systems became evident, my fathers generation assumed the answers to be self-evident, because the consequences of the previous 'forgetting' were still clear.  Who is clearly articulating this now? This year?  When we discuss taxation, social mobility, migration, military intervention, why do we not start with the assumed self-evident truth that people are inherently valuable and important? Humans are more than metrics, and cannot be entirely evaluated using only quantitative methods.  Horton, the title character in 'Horton Hears a Who' by Dr. Zeus, understood this. He went to great lengths to protect the tiny and weak people in who-ville. We teach this truth to our children, but do not demonstrate it as adults. Jesus also understood it. He said that we should love our neighbours, and explained that our neighbours are people we come across who need our help.  I wonder if forgetting that humans are inherently worthy of respect is a prerequisite for declining;  - standards of governance - social mobility - peace - economic growth  Which makes me think it is a self defeating deception. When we choose to disregard a group of humans because it is inconvenient to help them, we are elevating our needs above theirs. This seems to create chains of events where everybody suffers. "
  },
  {
    "id": "newish-command-line-tools",
    "objectID": "newish-command-line-tools",
    "title": "Newish Command-Line Tools",
    "tags": "linux,cli",
    "category": "snippet",
    "content": "  A [blog post](https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/) with some new command line tools. "
  },
  {
    "id": "nmap",
    "objectID": "nmap",
    "title": "nmap",
    "tags": "networking,cli",
    "category": "snippet",
    "content": "  `sudo nmap -sP 192.168.1.1/24 | grep 'Nmap'`  Thanks to Jeff Geerling (again) I found this nifty command to see what devices are connected on a local network.  Found in this [article](https://www.jeffgeerling.com/blog/2017/setting-pi-hole-whole-home-adtracker-blocking) about setting up a pi-hole. "
  },
  {
    "id": "nohup-and-background-processes",
    "objectID": "nohup-and-background-processes",
    "title": "nohup and Background Processes",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  # Stop stuff stopping  If you run a command in a terminal session and the terminal session is disconnected, then the processes running in it will also be terminated.  I discovered this when I was trying to download a ~500GB database overnight. I logged in the next morning expecting to see a completed download, but found I only had half the file.  # Use `nohup` to ignore `HUP` signals  One solution to this seems to be to use `nohup`, a command that ignores the `HUP` signal. It stops your programme from stopping if the terminal session its running in is stopped.  By convention, the `HUP` signal is the method used by a terminal to warn dependent processes that it is about to logout.  You probably want to run `nohup` in the background. You might want to prevent it from creating `nohup.out`.  # Close or redirect fd0 - fd2  On Linux, `nohup` automatically closes `stdin`. If you're using MacOS or BSD this doesn't automatically happen, so you might want to redirect it yourself. This is because if a background process tries to read anything from `stdin` then it will pause itself whilst it waits for you to bring it to the foreground and type some input. This is probably a waste of time.  If `nohup` detects that you have redirected `stdout` and `stderr` then it won't create `nohup.out`.  As with all commands, if you put `&` at the end of the command, it will run in the background. You can bring it to the foreground by running `fg`, or see a list of jobs by running `jobs`.  If you redirect input to /dev/null (`</dev/null`) you will stop the program from receiving keyboard (stdin) input, but you won't prevent it from accessing the terminal directly. Also you haven't removed the program from the shell's process group.  # Stopping signals using `disown`  If you want to remove a program from the shell's process group, then immediately after you've run the command to start your programme, run `disown` with no arguments. This will make the background process no longer associated with the shell job and it wont have any signals forwarded to it by the shell.  A `disown`ed process gets nothing (no signals) sent to it by the shell. But without a `nohup` it will still be sent a `HUP` signal sent via other means, such as a manual `kill` command.  A `nohup`ed process will ignore any and all `HUP` signal, no matter how they are sent.  [Source](https://stackoverflow.com/questions/10408816/how-do-i-use-the-nohup-command-without-getting-nohup-out)  # Related  ## `w` is a combination of `who`, `uptime`, and `ps -a`.  Use `w` to see who is logged in and what they are doing. It summarises who is logged in, what they are currently doing, and the load of the current activities.  ## Process Groups  A collection of one or more processes. It's used to control the distribution of a signal. When a signal is directed to a process group, the signal is delivered to each process that is a member of the group.  ## Sessions  A collection of one or more process groups. A process may not create a process group that belongs to another session. A process is not permitted to join a process group that is a member of another session. A process is not permitted to migrate from one session to another. "
  },
  {
    "id": "nohup",
    "objectID": "nohup",
    "title": "nohup",
    "tags": "linux,cli",
    "category": "snippet",
    "content": "  Use `nohup` to keep a curl process running even when the terminal (tty?) session autocloses at 3am. "
  },
  {
    "id": "notes-from-an-interview-with-geoffrey-hinton",
    "objectID": "notes-from-an-interview-with-geoffrey-hinton",
    "title": "Notes From An Interview With Geoffrey Hinton",
    "tags": "uncategorized",
    "category": "Non-technical/Learning",
    "content": "  1.  **Read the literature, but don't read too much** of it.  2.  **Trust your intuitions**, because if you don't trust them then there's no point  3.  '**This person is either drunk or stupid**' - feedback on one of his papers that went on to become significant  4.  For creative researchers; read a bit of the literature and notice something that you think everybody is doing wrong. (I guess GH is contrarian in this sense)  5.  Look for a problem that doesn't feel _right_. Then figure out how to do it right.  6.  When people tell you that your (contrarian) approach is just no good, just keep at it.  7.  Either your intuitions are good or they're not. If they are good then you should follow them and you will eventually be successful. If they are bad then it doesn't matter what you do.  8.  You might as well trust your intuitions.  9.  When you try to replicate a published paper you discover all the little tricks needed to make it work.  10. Never stop programming.  11. If you give a student something to do and they are a bad student then they'll come back and say it didn't work. They'll say this because of some little decision they made which they didn't realise was crucial. But if you give it to a good student, you can give them anything and they will come back and say it works  12. Read enough so that you start developing intuitions, and then trust your intuitions and go for it! - Don't be too worried if everybody else says its nonsense.  13. If you think it's a really good idea, and others tell you its complete nonsense, then you know you are really onto something!      One example of this is when Ramford and I first came up with variational methods, I sent a mail explaining it to a former student, who showed it to his colleagues. He told me that they said 'Either this guy is drunk or he is just stupid'. They really really thought is was nonsense.      Maybe that is partly because of how i explained it - I explained it in intuitive terms, but when you have what you think is a good idea and other people think it is complete rubbish, that is the sign of a really good idea.  14. See if you can find an advisor who has beliefs similar to your own, because if you work on stuff that your adviser feels deeply about, then you'll get a lot of good advice and time from them.  15. Read enough so that you can _trust your intuitions_ "
  },
  {
    "id": "notes-from-mastering-vim-quickly",
    "objectID": "notes-from-mastering-vim-quickly",
    "title": "Notes From \"Mastering Vim Quickly\"",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ## Verbs  1.  `s` - delete char under cursor and enter Insert Mode. 2.  `r` - replace char under cursor. 3.  `c/hello` - change until next occurrence of 'hello'  ## Registers  12. `'ayy` yank the entire row into register `a`. 13. `'Ay` yank to register A and append the new text to the existing contents of     the register. 14. `:registers` - preview the contents of your registers.  ## Insert Mode  2. `<C-W>` - delete back one word. 3. `<C-U>` - delete back to the start of the line or start of current insert. 4. `cgn` - if you are searching for a word (either by using `/` or `*` or `#`)    and you want to change each instance of the search result, use `<verb>gn` to    _change_ or _delete_ and then go to the next result. This will let you use    the `.dot` operator to repeat both the steps (moving and changing). 5. `<C-R> 0` - paste. `<C-R><C-P>0` if there are new-line chars causing    trouble.  ## Normal Mode  1. `<C-A>` or `<C-X` increase or decrease a number.  ## Command Mode  1. `set ft?` - find out which filetype is loaded.  ## Visual Block Mode `<C-V>`  1. Select a column of numbers you want to increment, then `g<C-A>` will turn    them into an incremented list.  ## Ranges  1. `:put =range(1,10)` - insert a list of ascending numbers. 2. `:for i in range(1,100) | put ='192.168.1.'.i | endfor` - use a loop to    generate a long list.  ## Searching  1.  `g#` or `g*` for partial matches, like `#` or `*` for exact matches. 2.  Search for the word under the cursor, or similar:     1. Press `/`.     2. `<C-R>` `<C-W>` - this will copy and paste the word under the cursor        into the search box. Edit it as necessary.     3. After you've done your search, `<C-o>` to jump back to where your cursor        was before. 3.  Find and replace whole words only: `:s/<old_word\\>/new/g` 4.  Find and replace either old-word1 or old_word2: `:s/(old_word1\\|old_word2\\)/new/g` 5.  `g <C-G>` - show some stats about current bugger - word count, line count,     char count.  ## Undo  3.  `g-` and `g+` - undo branches. 4.  Under changes within a period of time:     - `:earlier 2d` - undo changes in the last 2 days     - `:later 5m` - redo all changes in the last 5 minutes     - `:earlier 3f` - undo all changes in the last three buffer writes     - `s` seconds, `m` minutes, `h` hours, `d` days, `f` saves 5.  `:g/my_string/normal @a` - Use the global command to execute macro `a` on     all lines of the current buffer containing string 'my_string' 6.  `:g/good/s/bad/ugly/g` - For every line containing “good” substitute all     “bad” with “ugly”  ## Splits  14. `<C-W> r` - rotate the splits from left to right but only if they are split     vertically. `<C-W> R` - rotate the splits from right to left. `<C-W> H` -     move the current split to the far left and make it full height. `<C-W> J` -     move the current split to the bottom of the screen and use the full width. 15. `:only` - close all splits except the current split.  ## Macros  16. `:g/pattern/norm @o` - do the macro stored in buffer `O` on all lines that     match the pattern 'pattern'  ## Other  2.  `<C-O>` in Insert Mode will jump you into Command Mode for one command only     and then put you back into Insert Mode automatically. 3.  The `.dot` command only repeats commands that changes the buffer content. It     wont repeat navigation commands. "
  },
  {
    "id": "nvim-coc",
    "objectID": "nvim-coc",
    "title": "nvim.CoC",
    "tags": "vim",
    "category": "snippet",
    "content": "  I've been trying to replace ALE with CoC. It didn't work. Maybe I have unusually high fixing expectations, but ALE is more capable and easier to setup. So I'll be using CoC and ALE together, which feels messy.  ## Formatting  1.  `pip install pep8 autopep8` 1.  `<leader>fs`  - `<leader>a` - a list of all the wrong things - `vif` - select inside function - `vam` - select method  - `<leader>ac` - see a box with options to fix imports or ignore file "
  },
  {
    "id": "obviously-awesome",
    "objectID": "obviously-awesome",
    "title": "Obviously Awesome",
    "tags": "marketing,positioning,startups,book",
    "category": "Non-technical/Entrepreneurship",
    "content": "  ### Intro  1. In order to do better marketing, understand your value and differentiators    better 2. Understand what makes a best-fit customer 3. Positioning is a fundamental input to every business tactic you use 4. If you fail at positioning, you fail at marketing and sales 5. Positioning is 'conext setting' for products 6. Customers need to be able to easily understand    1. What your product does    2. Why it is special    3. Why it matters to them 7. If your prospects can't figure out what your product does quickly, they will    invent a position for you. It might hide your key strengths or misunderstand    your value. 8. Find people to demo your product to, then ask them to describe it back to    you. Do the same with existing customers. If they're not saying the same    thing then you have a positioning problem. 9. Products with strong positioning:    1. Find the best kind of customer    2. Make the value obvious    3. Sell quickly  ## Part 1  ### Positioning as context  1. Without positioning to guide us, we don't know how to understnad a product 2. Positioning lets us make assumptions about    1. who a product is for    2. what its main features are    3. how much it costs 3. Without it we would be paralyzed by choice, and we wouldnt be able to make    sense of all the products around us. 4. The context and purpose of a product from the founders/engineers perspective    are often different to those of the prospect 5. Products can be positioned in multiple ways, and often the best positioning    is not the default positioning 6. Bad positioning makes it harder for prospects to figure out if your product    is worth thinking about. 7. Positioning requires considering:    1. Customers point of view - what problem/pain does it solve    2. The ways your product is uniquely different    3. The characteristics of a potential customer    4. The best market context to make your value uniquely obvious  ### Five (plus one) components of effective positioning  1. **Competitive Alternatives - if you didn't exist, what would your customers    use instead?**    1. Its what your prospects would use to do the task if your product didn't       exist. It could be excel, or pen and paper. It could be nothing, (in       which case maybe you product doesn't solve a real pain point.)    2. You probably know a lot more about your market, and problem, and       alternative solutions, than your prospects do. ('Doing nothing' could be       an opportunity, not a red flag.)    3. Its important to understand what customers will compare your product       with, because this is how they will define 'better'. Is it 'easier' than       a pen and paper?    4. Customers might never have purchased a solution like yours before. 2. **Unique Attributes - What do you have that alternative do not?**    1. Could be:       1. Delivery Model (online vs offline, installed on-site vs not)       2. Business model (rental vs purchase)       3. Specific expertise (data scientist with financial and back-end web          dev expertise) 3. **Value (and quantifiable objective proof) - What value do the attributes    enable for customers?**    1. If unique attributes are your secret sauce, the value is why someone       might care about your secret sauce    2. Fact based, provable, demonstrable, quantifiable, objective. Third party       opinions are relevant. 4. **Target market characteristics - Who cares a lot about that value?**    1. Focus on customers who are most likely to purchase quickly, wont ask for       discounts, will tell their friends about you.    2. You should clearly identify who these are and    3. Identity what sets them apart from other groups of customers. Why are       they uniquely likely to buy from you when others wouldnt or would take       longer to consider and make a purchase 5. **Market Category - What context makes your value obvious to the ideal    customer?**    1. Declaring that your product exists in a certain market triggers a       powerful set of assumptions    2. make these assumptions help you, not hinder you.    3. When presented with your product, customers will try to use what they       already know to figure out what your product is all about and why its       special. You want them to be able to do this really quickly and easily.    4. Make these assumptions work for you, not against you. You won't have to       list every feature, because most of them will be assumed by the context       of the market category.    5. Get it right, and sales efforts (copy) wont be wasted battling those       assumptions, but can instead build off of them to show secret sauce and       value more obviously. 6. **(Bonus) Relevant Trends - what trends make your product relevant right    now?**    1. Used carefully, trends can show prospoects why they should pay attention       to your product right now. Increases urgency.    2. It can increase urgency, excitement, coolness, credibility    3. but the trend must be directly relevant, practically and objectively       applicable.    4. Blockchains, AI, ML are trends - they are relevant to multiple markets.  Each of these components is relevant to the others "
  },
  {
    "id": "ocean",
    "objectID": "ocean",
    "title": "Live near the ocean",
    "tags": "water",
    "category": "Non-technical/Journal",
    "content": "  ### California  ![California](/static/images/california3.jpg)  ![California](/static/images/california7.jpg)  ![California](/static/images/california9.jpg)  ### Dorset  ![Dorset](/static/images/dorset.jpg)  ![Dorset](/static/images/beach.jpg)  ### Acapulco  ![Acapulco](/static/images/mex1.jpg)  ![Acapulco](/static/images/mex2.jpg)  ### Dublin  ![Dublin](/static/images/dublin.jpg)  ![Dublin](/static/images/dublin1.jpg)  ### The Netherlands  ![Hague](/static/images/hague.jpg)  ![Hague](/static/images/amsterdam3.jpg)  ![Hague](/static/images/amsterdam1.jpg) "
  },
  {
    "id": "pair-programming-using-vim-tmux-ssh",
    "objectID": "pair-programming-using-vim-tmux-ssh",
    "title": "Pair programming using Vim",
    "tags": "pair-programming,vim,tmux,ssh",
    "category": "snippet",
    "content": "  [blog post](https://ptc-it.de/pairing-with-tmux-and-vim/) "
  },
  {
    "id": "pangea",
    "objectID": "pangea",
    "title": "Pangea",
    "tags": "bitnation,pangea",
    "category": "Technical/Cryptocurrencies",
    "content": "  ## The problem  In many countries the ability to create legally binding agreements is not available to average citizens. Legal services are often unaffordable and opaque, or service providers are corrupt. Legal services are in need of disruption.  ## The solution  ### Pangea  Bitnation (who I consult for) intends to address this problem by empowering people to self-organise and self-govern. We are building a platform called Pangea which allows users to create, notarise and arbitrate contracts according to a jurisdiction which each party joins voluntarily, irrespective of their geographical location.  Pangea is a smart phone app that looks and feels like a chat app, the back-end (called Panthalassa) is an encrypted mesh network hooked up to the Ethereum blockchain.  ### Rewarded for doing good, empowered to be a responsible citizen  On Pangea, people are incentivised to be good citizens by receiving rewards for doing good, rather than being coerced by the threat of punishment for bad behaviour.  This platform would fulfil a vast and unmet need, particularly in countries whose legal systems function poorly. On Pangea, a user voluntarily chooses which jurisdiction to be a part of. Contracts are then notarised, executed and arbitrated according to that jurisdiction. Users voluntarily join a decentralised borderless voluntary nation (DBVN) and will receive tokens (Pangea Arbitration Tokens) as a reward for good behaviour. The tokens will be tradable and will be used as payment on Pangea for notarisation and arbitration services.  ### Combining a store of value and access to legal services  Societies cannot escape their need to use currency as stores of value. They also cannot escape their need to create reliable and enforceable agreements (contracts) with each other.  Generating Bitcoin through proof of work occurs because individuals believe that Bitcoin will be continuously used — that it will meet an ongoing need to transact using a decentralised and disintermediated method.  Generating PAT by being a good citizen will occur because individuals believe that Pangea will be continuously used — that it will meet an ongoing need to create enforceable agreements using a voluntary and geographically agnostic (and decentralised) method.  ### Comments  There is much still to say about the Pangea platform and the mechanisms which will make it function. Please give feedback and ask questions in the comments. To find out more, visit the [website](http://bitnation.co). "
  },
  {
    "id": "paul-graham-a-project-of-ones-own",
    "objectID": "paul-graham-a-project-of-ones-own",
    "title": "A Project of One's Own",
    "tags": "paul-graham,meta,learning,school",
    "category": "snippet",
    "content": "  An essay called [A project of ones own](http://paulgraham.com/own.html) by Paul Graham.  - being pushed into a task vs being pulled - skating vs walking "
  },
  {
    "id": "pelican-plugin-guide",
    "objectID": "pelican-plugin-guide",
    "title": "Pelican Plugin Guide",
    "tags": "pelican,plugin,guide",
    "category": "snippet",
    "content": "  A [guide](https://blog.geographer.fr/pelican-plugins) about writing plugins for Pelican.  Thanks [@geographeur](https://twitter.com/geographeur) "
  },
  {
    "id": "pelican",
    "objectID": "pelican",
    "title": "Blogging with Pelican",
    "tags": "pelican,blog,python,static site",
    "category": "Technical/Web",
    "content": "  When I began blogging in 2016, I became more aware of how blogs are designed. Many of my favorting blogs had simple designs which made it easier to focus on the content, and they loaded really fast. (E.g. [unwiredcouch.com](https://unwiredcouch.com) and [CuriousGnu](https://www.curiousgnu.com)). I wanted this for my blog, too. I'd used Wordpress to build and publish my blog which was a great way to begin, but I felt I was compromising on its design and functionality. I wanted to have control over my blog's features.  This led me to static sites which contain only fixed content and are faster to load and easier to design than one built using a dynamic blogging platform such as Wordpress. Because I was already familiar with Python I chose [Pelican](https://blog.getpelican.com/) rather than another static site generator such as Jekyll.  There are plenty of sites to tell you how to start blogging in Pelican, so here I will focus on my experience after the initial set-up. When I was learning how to begin, I found [Amy Hanlons](http://mathamy.com/migrating-to-github-pages-using-pelican.html) blog particularly useful and clear.  ## The learning curve  … was longer than I expected. Since setting out to switch from Wordpress to Pelican, I've taught myself enough of the following tools to hack this site together. I'm really happy about this because these tools could be used in future projects too.  ### HTML  I find HTML quirky but intuitive. Tags make sense, comments are laborious and learning by google is relatively quick. Whatever it is I'm trying to do (like add a link to jump back to the top of the page) someone will have posted the answer somewhere.  ### CSS  Writing CSS feels a lot more concise that HTML but it also felt impossible to learn without taking a step back and reading an introductory course. Usually I learn by hacking new phrases together from existing examples so it was frustrating to go backwards before progressing. There was a lightbulb moment when I realised CSS Selectors were a thing, and realising CSS files get called in the header (usually) of an HTML file…  I ended up using a trial subscription to [Thinkfuls](https://www.thinkful.com/bootcamp/web-development/) Front-end developer course, which is pretty good at explaining how CSS is structured and how to arrange content on a page. If I still had access, I'd be completing the second half of the course :)  ### Jinja templates  Jinja is a tool written in Python to create HTML pages. It doesn't look intuitive to me, but I've been able to get enough done by copy-pasting similar snippets from other parts of the theme I started with ([Thanks Molivier!](https://github.com/molivier/nest)) to make the changes I wanted. I'd like to learn more as it seems really powerful.  ### Pelican  To build a website using Pelican, you need to run commands from the terminal. There are various commands but I found myself using only a few regularly. 'Pelican-quickstart' will generate a project skeleton to get you started. 'make devserver' will initialise a local server and generate output files so that I can view changes locally before uploading (its opposite is 'make stopserver'). Finally 'pelican content -s publishconf.py' generates the html and css for remote hosting. Some of the plugins I use such as 'Assets' which minifies the CSS only work when publshconf.py is called, which confused me initially as I didn't think it was working when I was only using 'make devserver'.  ### Git  This really challenged me, and I still don't feel like I know what I'm doing. Git is far more powerful than I need it to be, when all I want to do is undo some erroneous edits and upload a new version of the site to Github.  I can stage and commit files, I can create local and remote repo's from the command line. I can change a remote's URL, reset a repo and force a push or a pull. That's all. I haven't tried to merge or to create a test branch, and if some part of the process goes wrong it usually takes hours to make it right again.  This is one tool for which the awesome SO and Google cannot magic up the exact right answer immediatly, unfortunately.  For example, there is still an output folder in the source repo that is… mysterious to me. Its not the real output, its a version frozen in time from a few weeks ago, and it has an '@' in its name. I don't know how it got there. It was created one afternoon in a blur of frustrated google queries and copy/paste/hope terminal commands.  I find git's commands the least intuitive of all the tools I use, with its preceeding single dashes and double dashes, and random words thrown into the middle of otherwise reasonable commands.  But Git is ubiquitous and Github is awesome, so I will learn it.  ## Github pages with an external URL  You'll need to add a file called CNAME to the repo containing the output. CNAME should contain the address of your site in lowercase. Simple.  You'll also need to update the DNS records of your domain name to point the name at Github's servers. For Github, you need two 'A Records' with host type '@' and values '192.30.252.153' and '192.30.252.154' respectively. You also need a CNAME record with host type 'www' and the value equal to 'username.github.io'. It took about 12 hours for the changes to propagate, and during that time I had variable success loading the site.  ## Plugins  One thing I didn't want when moving away from Wordpress was a site bloated with features that didn't make the content easier to read. However I found I still needed a few plugins to optimise my site and provide some basic functionality that doesn't come with the vanilla Pelican.  ### iPython notebooks  Super useful, as all I need to do to publish a notebook as a webpage is copy the .ipynb file into the context directory and add a sidecar .ipynb-meta file with standard meta data. This functionality is one of the main reasons why Pelican is popular with data bloggers. (Though [Nikola](https://getnikola.com/) is another option).  ### Neighbors  At the end of a post there should be a link to the previous and next blog posts - I was surprised this wasn't included as standard. After putting the plugin in the plugins folder and updating pelicanconf.py, you need to copy a couple of jinja snippets into a template, and maybe add some css to make the links look nice.  ### Optimise images  Make those images as small as possible to help make the site as fast as possible. Add the plugin, update pelicanconf.py, and thats all.  ### Assets  Before I started working with Pelican, minifying css and JavaScript would have been too advanced. But once [Pingdom](https://tools.pingdom.com/) and Google [Pagespeed](https://developers.google.com/speed/pagespeed/insights/) started criticising me for my multiple .css files, I accepted the challenge.  ## Conclusion  I'm super happy wth the websites design and speed. It's designed the way I want it, and I've learnt a ton of useful stuff along the way.  Update: My second post about blogging in Pelican is [here](pelican_2). "
  },
  {
    "id": "pelican2",
    "objectID": "pelican2",
    "title": "Blogging with Pelican: Design, Plugins, Sharing\n",
    "tags": "pelican,jinja,python,twitter,facebook,blog,static site",
    "category": "Technical/Web",
    "content": "  ## Design  My approach to building my blog is to keep it as simple as possible, only adding features when they make a significant improvement to how the content is understood and used. Therefore I've done away with several features that would normally come baked into a WordPress theme. For example a footer full of links that would never be used, and a sidebar full of distractions.  I opted for a single column design that hopefully presents text-heavy articles clearly and intuitively (please leave a comment and tell me what you think).  ## Plugins  My use of plugins to extend Pelican's functionality reflects this, there is the [Neighbors](https://github.com/getpelican/pelican-plugins/tree/master/neighbors) plugin so that the next or previous post can be accessed from the bottom of a post without going back to the index, and the [Tag Cloud](https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud) plugin to reflect which subjects are written about the most (and provide a link to all relevant articles).  ## Speed  The speed of the site is important because a faster site is more enjoyable to use. Therefore I've minified the CSS and the JavaScript using the [Assets](https://github.com/getpelican/pelican-plugins/tree/master/assets) plugin. I've also set the CSS and JavaScript to load asynchronously. Images are optimised using the [Optimize Images](https://github.com/getpelican/pelican-plugins/tree/master/optimize_images) plugin so that their file size is as small as possible and they download quickly. The site uses CloudFlare's free CDN features so hopefully no matter when you view the site from you get a decent page speed.  ## Jinja templates  I've also arranged the homepage so that posts are shown by their category and then by posting date. This may not work very well with a larger number of posts, but I'll only consider that problem once it presents itself. Designing for hypotheticals or conditions that don't yet exist is a waste of time.  There are examples of how I've used Jinja templates below in the context of sharing my articles on Twitter and Facebook.  ## Plugin: Share Post  I noticed that my posts were beginning to get tweeted about, so I thought it would be useful to have some sharing buttons at the bottom of each post for Twitter, Facebook and Email. Looking at the Pelican Plugins repo on Github showed there was (as usual) a plugin for this (called [Share Post](https://github.com/getpelican/pelican-plugins/tree/master/share_post)), though I noted it hadn't been updated for a couple of years.  Installing and initial set-up was simple thanks to the readme on the git repo. You need to copy the plugin folder to the plugins directory, and add the name of the plugin to the list in pelicanconf.py. Then you need to copy paste some Jinja/HTML into the article.html template. That's enough to make it work.  I noted though that when I shared to Twitter the text to be tweeted was encapsulated in quotes and there was a 'b' at the front. I realised this was due to using Python 3.x when the plugin (which hadn't been updated for 2 years) was likely written for Python 2.x. A quick google and the obligatory trip to SO showed me how to convert a bytes string to a normal text string.  ```python # Python 2 tweet = ('%s%s' % (title, url)).encode('utf-8')  # Python 3 tweet_as_byte = ('%s%s' % (title, url)).encode('utf-8') tweet = str(tweet_as_byte,'utf-8') ```  I also found that an article couldn't be shared to twitter from a mobile device and this was due to the URL being incorrectly formatted. The new URL format required separate arguments for the URL, additional text and the twitter handle:  ```python # Incorrect twitter_link = 'http://twitter.com/home?status=%s' % tweet  # Correnct twitter_link = 'http://twitter.com/share?url=%s&text=%s&via=%s' % (url, tweet, t_handle) ```  ## Using meta-data to specify tweet text  I thought it would be cool to add some default text to a tweet, as I've enjoyed this feature on other blogs when I've found a post I wanted to share on Twitter. - A user may know they want to share an article but if they're in a hurry it might be hard to find the right words, so why not provide a ready-made tweet. The text is editable so it's only a suggestion.  The text would be different for each post so it makes sense to specify it when writing the article. The article 'summary' would be too long, and I know that Pelican supports arbitrary meta-data tags. I assumed that Jinja would pick up the data the same way it picks up the 'standard' meta-data and added a function to share_post.py.  ```python def article_tweet(content):     tweet = ''     if hasattr(content, 'tweet'):         tweet =  BeautifulSoup(content.tweet, 'html.parser').get_text().strip()         return quote(('%s' % (tweet)).strip().encode('utf-8'))     else:         return ' ' ```  Once this function was working it was simply a case of calling the function and assigning the output to a variable I called 'Tweet', and then adding 'Tweet' to the text string to be included in a tweets text:  ```python     tweet = article_tweet(content)     tweet_as_byte = ('%s' % (tweet)).encode('utf-8')     tweet = str(tweet_as_byte,'utf-8')     t_handle = twitter_handle(content) ```  There was a bit of fiddling around to make sure that the number of spaces between each part of the tweet was correct, but nothing as complicated as when making [Time Until](time-until).  ## Specifying the text and image in a Facebook share  Sharing to Facebook worked without any formatting problems, but it bugged me that the opening text of the article was being used in the preview that was shared to Facebook when I had a summary already prepared and that would be much more useful to potential readers. For some articles I also had an article image that I wanted to see being used.  Googling revealed that I needed to use particular meta tags in the webpage's header if I wanted to control what Facebook would pickup. Facebook uses the 'open graph' standards so I would need the headers in my article pages to include the following:  ```HTML `<!-- Open Graph data -->` `<meta property='og:title' content='Title Here' />` `<meta property='og:type' content='article' />` `<meta property='og:url' content='http://www.example.com/' />` `<meta property='og:image' content='http://example.com/image.jpg' />` `<meta property='og:description' content='Description Here' /> ```  I could see that I already had some meta tags being generated using the Jinja templates so I set about copy-pasting and modifying them to build the new tags. I had some issues with trailing white space or line breaks being included within the content string. This was solved like so:  ```jinja2 {# Adding '-' after and before the %'s strips white space and line breaks #} {% block description %} \t{%- if article.summary -%} \t\t{{ article.summary|striptags|truncate(200)|e }} \t{%- else -%} \t\t{{ article.content|striptags|truncate(200)|e }} \t{%- endif -%} {% endblock description %} ```  I also needed to use some blocks more than once, because a description tag was already included but Facebook wants an 'og:description', and Twitter wants a 'Twitter:Description' too. All three of these tags will include the same text (generated in the Jinja2 snippet above). If a block only needs to be used once then it's generated like this;  ```jinja2 <meta name='description' content='{% block description %}{% endblock description %}'> ```  ```jinja2 {% block description %}{% endblock description %} ```  If you call the above more than once Jinja will throw you an error. The documentation (and SO) reveal that the solution is to use:  ```jinja2 <meta property='og:description' content='{{ self.description() }}'> ```  This allows you to reuse blocks multiple times and keep your templates tidy.  Finally, when I was testing Facebook to see if the correct text or image was being picked up I was initially frustrated to see that the new tags were not having any effect. This is because Facebook crawls your site and saves what it finds. If you want it to take a fresh look at your page with its new meta tags, you need to tell Facebook to crawl the page again, using the [Facebook linter/debugger](https://developers.facebook.com/tools/debug/).  You can see the new sharing buttons below, please click them and see what happens!  Note: My first article describing how I began to use Pelican is [here](pelican_blog) "
  },
  {
    "id": "performance-targets",
    "objectID": "performance-targets",
    "title": "Performance Optimizations for the shell prompt",
    "tags": "shell",
    "category": "snippet",
    "content": "  Something should happen within 100ms of the users input in order to maintain a feeling of responsiveness.  If something happens within 50ms of the trigger event, it will feel almost instant.  Also, checkout [hyperfine](https://github.com/sharkdp/hyperfine) for performance benchmarking.  Lots of useful tips in the original [blog post](https://seb.jambor.dev/posts/performance-optimizations-for-the-shell-prompt/). "
  },
  {
    "id": "personal-website-as-a-minigame",
    "objectID": "personal-website-as-a-minigame",
    "title": "Personal website as a mini-game",
    "tags": "web",
    "category": "snippet",
    "content": "  A HN [article](https://news.ycombinator.com/item?id=30656961) about a personal website that has been made in the style of a Pokemon game. Super cool.  - The [site](https://arielroffe.quest/) - The [project code](https://github.com/ariroffe/personal-website) "
  },
  {
    "id": "photographs",
    "objectID": "photographs",
    "title": "Spaarndam",
    "tags": "uncategorized",
    "category": "Non-technical/Photographs",
    "content": "  [  ![dog walker](/static/images/photos/dog_walker.jpeg)/images/photos/dog_walker.jpeg) [  ![stompetoren](/static/images/photos/stompetoren.jpeg)/images/photos/stompetoren.jpeg) [  ![geese_on_polder](/static/images/photos/geese_on_polder.jpeg)/images/photos/geese_on_polder.jpeg) [  ![bridges and gates](/static/images/photos/bridges_and_gates.jpeg)/images/photos/bridges_and_gates.jpeg) [  ![clounds above a lake](/static/images/photos/clouds_and_lake.jpeg)/images/photos/clouds_and_lake.jpeg) [  ![Polder and windmill](/static/images/photos/polder.jpeg)/images/photos/polder.jpeg) "
  },
  {
    "id": "pipe-a-script-files-into-bash",
    "objectID": "pipe-a-script-files-into-bash",
    "title": "Pipe a Script File into Bash",
    "tags": "bash,syntax,shell",
    "category": "snippet",
    "content": "  Probably it's one you just `curl`-ed  ```bash curl -sSfL https://example.com/install.sh | sh -s ``` "
  },
  {
    "id": "pippip.email",
    "objectID": "pippip.email",
    "title": "Pippip.Email",
    "tags": "pippip",
    "category": "Non-technical/Entrepreneurship",
    "content": "  # [PipPip](https://pippip.email)  6 weeks ago I had an idea for a product whilst reading a news article.  It would be great if the writing and sending of important messages could be separated, so that I could write something long before I needed to send it, and know that then sending would happen at the right time without having to think about it. This could be useful for sending my daughter a message on her 15th birthday, or to my wife on our 10th anniversary. I also designed a check-in mechanism, so that messages could be sent if I disappeared or pass away.  [PipPip](https://PipPip.email) is the result - event-driven and scheduled email delivery, from days to decades  We're working on validating the idea and finding the right niche audience. "
  },
  {
    "id": "playing-with-google-cloud-platform",
    "objectID": "playing-with-google-cloud-platform",
    "title": "Playing with Google Cloud Platform",
    "tags": "cloud,google-cloud-platform,serverless",
    "category": "Technical/Engineering",
    "content": "  Building my own [web analytics](analytics) has been a gateway to learning more about Google Cloud Platform. So far I've used DataStore, BigQuery, Cloud Functions, Pub/Sub, Storage Buckets and Scheduler.  ## Version 1  My first version of the analytics tool took the following form:  ### Logger Function  1.  When the browser navigates to a page on the site, a JavaScript beacon is     sent which triggers a cloud function. 1.  The function parses the page URL and the IP address, and creates a record in     the database.  ### Aggregator Function  1.  Each time the analytics page is loaded, a cloud function is triggered that     gets every record from DataStore, parses the data and returns a JSON object     containing the aggregated data. 1.  The browser receives the JSON, parses it and creates some charts and     tables.  The good: It works, it was quick and simple to build.  The bad: Its expensive. Loading the analytics page is slow - when the DataStore was small it took 3 or 4 seconds, after a few thousand page views it took about 40 seconds.  Conclusion - keep the logger function as it is, but improve the aggregator function.  ## Version 2  The second version still used DataStore but was much more efficient. It didn't read the entire database and generate the aggregated results every time the analytics page was viewed.  Instead, a cloud function periodically collected all the records in the datastore database and calculated the results. The results were written to a JSON file and sent to a storage bucket.  When the analytics page was loaded in a browser, the browser collects and processes the JSON file from the bucket. This is much faster, performant and cheaper than creating a new JSON object each time the analytics page is viewed.  The good: The analytics page loads at the same speed regardless of how much data has been aggregated and how frequently the analytics page is being viewed. Performance issues have been solved, though I still don't think DataStore is the best database solution for this use case.  The bad: DataStore seems expensive - I am being charged for AppEngine services (which I don't really understand but is caused by using DataStore). If I can get monthly costs down to about a cup of coffee (about €4/month or €0.15/day) then I don't mind running it indefinitely.  ## Version 3  Use BigQuery instead of DataStore. BigQuery is a Data Warehouse that is well suited for analytics. It is not well suited for transactional use cases - where data is being read, updated or created many times per second.  This is fine for my use case - the Page Logger function writes a record to a BigQuery table each time each time a page view is logged. During times of high traffic it's possible that concurrency issues might arise and some page views will be lost, but this isn't an issue 99% of the time. My site traffic is very light. I believe I could use a newer API that google recently released to solve this problem but for now I'll use the normal API.  The rest of the process is unchanged - the aggregator function periodically reads the (BigQuery) database, crunches that data and sends a JSON file to a storage bucket.  The good: This is completely free. The analytics page can be viewed quickly regardless of the amount of site traffic.  The bad: Under heavy traffic some page views might be lost due to a limit on how quickly new rows can be added to BigQuery tables. Using a new API might resolve this.  ## Conclusion  ### Totally free tools forever  The combination of Cloud Functions, Storage Buckets and Big Query (along with Scheduler and Pub/Sub) seems really versatile and I think there are many interesting things that could be done by combining these services[ref]The question then becomes: 'Just because you could do it, should you do it?'[/ref] .  Using them all for free (my usage is well within the free tier) makes the possibilities even more interesting. Having compute and storage services running indefinitely in the cloud for free is amazing.  [Documentation](https://cloud.google.com/free/docs/gcp-free-tier#free-tier-usage-limits)  ### Aggregate by calendar month  An improvement to this analytics setup would be creating aggregated metrics for each calendar month and storing them in separate JSON files. This would prevent data older than one month being processed repeatedly, and create a cap on the amount of computational effort required (the maximum amount of data processed by one cloud function instance would become capped at one month).  If the browser wanted to display more than one month of data, it would simply request more than one JSON file from the storage bucket.  ### TODO  - [x] Frontend - the DataTables column containing the date should be sorted as a Date object. It is being sorted like a normal string. - [ ] Backend - create separate JSON files for each month. "
  },
  {
    "id": "poissons-equation",
    "objectID": "poissons-equation",
    "title": "Poisson's Equation",
    "tags": "math",
    "category": "snippet",
    "content": "  A great [article](https://mattferraro.dev/posts/poissons-equation) introducing and showing the relevance of Poisson's Equation. "
  },
  {
    "id": "portfolio-image-recognition",
    "objectID": "portfolio-image-recognition",
    "title": "> Portfolio: Image Recognition\n",
    "tags": "uncategorized",
    "category": "Technical/Data",
    "content": "  I've created a [computer vision model]({filename}/pages/azure-image-recognition-demo.md) that recognizes traffic lights. I've also created a page where the model can be queried and the results shown. This needed to be a custom page and not a typical blog article, so its hosted in the portfolio section [here]({filename}/pages/azure-image-recognition-demo.md).  This page will redirect automatically if you view it in a browser, but for those of you reading this using RSS, head on over and see the results! "
  },
  {
    "id": "powerful-python",
    "objectID": "powerful-python",
    "title": "Powerful Python",
    "tags": "python",
    "category": "Technical/Engineering",
    "content": "  Aaron Maxwell's Powerful Python course looks great. It's outstanding because, as far as I can tell, it explains abstract ideas clearly and with practical examples. If becoming exceptionally good at Python ever makes it to the top of my list of professional priorities then I'd certainly take the course. For now though I'm going to make some notes on the marketing emails he send:  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ## Good mental models:  ```python def f(x):     return x+2 ```  Function `f` is a nameless function object tied to a variable called 'f'. You can also think of it as a function called 'f', but the first mental model is more useful. It lets you reason about function factories, passing functions as arguments to other functions, and writing decorators.  Also, apparently, Virginia Satir was such an incredible family therapist that people wrote books about how great she was. She once said _'Most people think the will to survive is the strongest instinct in humans, but it isn't. The strongest instinct is to keep things familiar'_.  ## Staying motivated  Most people think that motivation is about willpower, but its not. It's about creating 'wins'. When you invest your time and effort, you get that 'aha!' moment where you see the computer do something new, or you get that feeling of a little breakthrough. It makes you excited to take another step and go a little further. And get another little win.  ## 95/5 rule  OOP is not just a tool for organizing your code. It's a tool for organizing how you think about code. Here is a roadmap to break into the top 1% of python programmers:  - Create powerful abstractions that accelerate and amplify all the python   you write. - Write automated tests, which lets you break through the ceiling of   complexity, so that you can suddenly write truly complex software as easily   as you used to write simple software. - Create robust high-performance scalability - writing software than gracefully   handles increasing magnitudes of data without breaking a sweat. - Learn how to use the higher-order abstractions that the most important   and prominent python libraries are built on (pandas, flask, django, pytest,   requests).  ## Hidden meaning of '('  ```python class Prefixer:     def __init__(self, prefix):         self.prefix = prefix     def __call__(self, message):         return self.prefix + message ```  Use it like:  ```zsh >>> simonsays = Prefixer('Simon says: ') >>> simonsays('Get up and dance!') 'simon says: Get up and daance!' ```  What is the type of `simonsays`? If you look at just the last line you would think its a function, but it is not. It is an instance of `Prefixer`.  There is a translation step. When you write 'simonsays('foo')' it is translated (kind of) to 'simonsays.**call**('foo')'. In other words, `simonsays(` triggers a function call.  Also:  ```zsh >>> def increment(x): ...     return x+1 ... >>> increment.__call__(2) 3 ```  You can do it with regular functions too. There is a difference between the python that you write, and the python that the compiler perceives. The `(` is replaced with `.__call__(`.  ## Current favourite python book  There are 4 levels of Python code:  1.  Syntax 1.  Idioms 1.  Patterns 1.  Architecture  Check out 'Architecture Patterns with Python' by Harry Percival and Bob Gregory.  ## Secret Instinct  Something that the best programmers have in common:  _They really hate repetitive code._ "
  },
  {
    "id": "practice",
    "objectID": "practice",
    "title": "Practice",
    "tags": "proverb",
    "category": "snippet",
    "content": "  _An amateur practices until they can play it correctly, a professional practices until they can't play it incorrectly._ "
  },
  {
    "id": "prediction",
    "objectID": "prediction",
    "title": "Prediction Markets",
    "tags": "gnosis,prediction,markets,brexit,betting",
    "category": "Technical/Cryptocurrencies",
    "content": "  # Predicting port traffic using prediction markets  ## Background  A [prediction market](https://en.wikipedia.org/wiki/Prediction_market) allows people to bet on an unknown future event. For example, 'What will the Euro-Dollar exchange rate be on date X?'.  In several common forecasting scenarios, prediction markets have been more accurate than polls, expert opinions, and statistical methods[^1] and therefore prediction models are useful for observers (anybody who is interested in the outcome) and not just the market's participants. Prediction markets can be used for categorical events (a specific event that either does or doesn't happen) or scalar events (when the outcome is between a range of values). The predefined source of truth for the outcomes being predicted is called an Oracle.  Prediction markets enables participants to purchase shares or tokens tied to the outcome of a specific future event. Once the event has occurred, holders of the tokens representing the actual outcome will receive a reward of predefined value. This creates an incentive to hold tokens corresponding to the correct outcome, and the market dynamics of supply and demand allow the price to reflect perceived probabilities of different outcomes. Helpfully, the price of each type of token corresponds to the relative probability of each outcome occurring which allows for simple interpretation of the results. If the reward for holding a share corresponding to the correct outcome is $1, and the present price of this share is 50 cents, then the market's estimate of the likelihood of this outcome occurring is 50%.  Shares can be traded continuously. As trading occurs over time the probability of different outcomes will change as new information becomes known, and the changing price of the shares quantify this.  ## An example  Let's describe how this could work with an example:  There is a large degree of uncertainty[^2] around how Britain will continue to trade with the other European countries when it exits the EU on March 29, 2019. A prediction market will likely be a better predictor of the outcome than any other method.  If an adequate agreement isn't achieved, Britain's main port at [Dover](https://en.wikipedia.org/wiki/Port_of_Dover) will certainly experience long delays and large traffic jams. Therefore a prediction market asking 'How many vehicles will be admitted into Britain at the port of Dover between 00:00 and 23:59 on March 29 2019?' will give a useful prediction about the outcome of Britain's trade negotiations - a key component and sticking point in the Brexit negotiations.  Each type of token in the prediction market will correspond to different quantities of vehicles entering the port[^3] - for example there could be four (or more) categories; Less than 8000, between 8000 and 11000, between 11000 and 14000, and more than 14000. The relative price of a share in each category will correspond to the relative probabilities of each possible outcome.  If the number of vehicles is lower than would otherwise be expected, (around 12000) this would likely be due to the impact of Brexit and thus the market will serve as a useful proxy for predicting what kind of Brexit will occur.  ## Stakeholder incentives are aligned  One reason that prediction markets work so well is because they aggregate information from disparate sources and the price shows not only an impartial assessment of the most likely outcome but the aggregated level of confidence that the participants have. Since no one is obliged to participate, those that do believe they have valuable information which gives them a competitive advantage. This creates a mechanism that moves good quality information into the prediction market, with the resulting prices reflecting the probability of a range of outcomes.  In our example, people with relevant information would include port employees, business owners in the UK and in Europe, politicians, civil servants, business analysts, bankers, etc. Whilst it is clear that any of these roles may have useful information or judgement about the outcome, it is not clear how useful each participants role is relative to the others. By allowing a participant to bid for as many shares in as many different categories as they want, each participant's confidence in their information can be quantified.  In this way, prediction markets align the incentives of market participants and observers. If the market is large enough then it becomes prohibitively expensive to distort the market and promote poor quality information, including information designed to create FUD (Fear, Uncertainty, Doubt), fake news, or alternative facts.  ## Market providers  Prediction markets are nothing new, with political betting being used to make predictions as early as the 1500s. However the adoption of the internet and decentralised networks now allow prediction markets to be used more widely and cheaply than ever before. Gnosis is building a platform on the Ethereum blockchain on which others can build new applications which harness the power of prediction markets.  By lowering the cost and complexity of creating a prediction market, observers can benefit from high quality and impartial predictive information about future events, and market participants are rewarded for accurate assessments of likely outcomes. This will enable better decision making and empower observers with previously unobtainable insight. In our example, the market could be created and funded by any organisation that would benefit from knowing the results of the prediction market. This could be the port of Dover itself, news organisations, or market research firms. Any of these businesses would benefit from an accurate prediction.  [^1]: K. J. Arrow, R. Forsythe, M. Gorham, R. Hahn, R. Hanson, J. O. Ledyard, S. Levmore, R. Litan, P. Milgrom, F. D. Nelson, G. R. Neumann, M. Ottaviani, T. C. Schelling, R. J. Shiller, V. L. Smith, E. Snowberg, C. R. Sunstein, P. C. Tetlock, P. E. Tetlock, H. R. Varian, J. Wolfers, and E. Zitzewitz. The promise of prediction markets. Science, 320(5878), 2008. [^2]: For example https://www.nytimes.com/2018/06/03/world/europe/brexit-customs-union-dover-border.html [^3]: Data from https://www.doverport.co.uk/about/performance/ "
  },
  {
    "id": "pretty-print-json-in-typescript",
    "objectID": "pretty-print-json-in-typescript",
    "title": "Pretty print JSON",
    "tags": "typescript,json,syntax",
    "category": "snippet",
    "content": "  ``` console.info(`${JSON.stringify(foo, null, 2)}`); ``` "
  },
  {
    "id": "principles-of-oop",
    "objectID": "principles-of-oop",
    "title": "Principles Of Object Orientated Programming",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  I recently interviewed for a lead developer role at [Lab Digital](https://labdigital.nl/en/)[ref]Unfortunately, I didn't get the job. They wanted a senior Python developer with experience with `Infrastructure As Code`, and also working at an agency. Can't win them all.[/ref] and thought it would be sensible to review some of the fundamental aspects of Object Orientated Programming (OOP).  You might think that's a unusual way to prepare for an interview, and you'd be right. Nothing close to these notes arose during the interview, but I find this stuff interesting. If I'm motivated enough to study it, then I think that's a good enough reason by itself, without a specific reason. These are some brief notes.  Object Orientated Programming has four key aspects:  1. Encapsulation (Hiding information) 2. Abstraction (Hiding the implementation) 3. Inheritance 4. Polymorphism  ## 1. Encapsulation  - Each object keeps its state private, inside a class. - Instance variables/properties/attributes are kept private and accessor methods are made public. - Other objects don’t have direct access to this state. They can only call a list of public functions (methods). - The object manages its own state via methods, no other class can touch it unless explicitly (not default) allowed. - Private variables. - Public methods. - You can define classes within classes, and functions within functions.  ## 2. Abstraction  - A natural extension of encapsulation - A concept or idea that is not associated with any particular instance. - Expresses the intent of the class, rather than a specific implementation. - Programs are often extremely large and separate objects communicate with each other a lot. This makes maintaining large programs difficult, and abstraction tries to solve this. - Applying abstraction means that each object should only expose a high-level mechanism for using it.   - This mechanism should hide internal implementation details. It should only reveal operations relevant for the other objects.   - This mechanism should be easy to use and should rarely change over time. - Implementation changes — for example, a software update — rarely affect the abstraction you use. - e.g. a coffee machine. It does a lot of stuff and makes quirky noises under the hood. But all you have to do is put in coffee and press a button.  ## 3. Inheritance  - In OOP, objects are often similar, sharing similar logic. But they are not 100% the same. - Create a (child) class by deriving from another (parent) class. This way, we form a hierarchy. - child class reuses all fields and methods of the parent class (common part) and can implement its own unique part using method or attribute overloading.  ## 4. Polymorphism  - Gives a way to use a class exactly like its parent so there’s no confusion with mixing types. But each child class keeps its own methods as they are. - This typically happens by defining a (parent) interface to be reused. It outlines a bunch of common methods. Then, each child class implements its own version of these methods. - Any time a collection (such as a list) or a method expects an instance of the parent (where common methods are outlined), the language takes care of evaluating the right implementation of the common method — regardless of which child is passed.  I'd like to be so familiar with the following features that I can use them without referring to notes:  1. Getters and setters. 2. Instance methods compared to class methods. 3. Inheritance, mixins, and decorators. 4. The 'magic' within the `Django` source code that requires `mypy` to use extensions in order to do its static type checking correctly. "
  },
  {
    "id": "product-led-growth",
    "objectID": "product-led-growth",
    "title": "Product-Led Growth",
    "tags": "marketing,startups",
    "category": "Non-technical/Entrepreneurship",
    "content": "  # Part 1: Design your strategy  ## Chapter 1: Why is product-led growth of rising importance?  1. Product-Led Growth is a go-to-market (GTM) strategy that relies on using your product as the main vehicle to acquire, activate and retain customers. 2. Product-Led Growth (PLG) means that every team influences the product:    - Marketing - how can our products generate a demand fly-wheel?    - Sales - how can we use the product to qualify our prospects for us?    - Customer Success - how can we create a product that helps customers become successful beyond our dreams? 3. By having every team focussed on the product, you create a culture that is built around enduring customer value 4. By leading with the product throughout the org, PL companies get    - shorter sales cycles    - lower Customer Acquisition Costs (CACs)    - higher Revenue Per Employee (RPE) 5. A GTM strategy is an action plan that specifies how a company will reach target customers and achieve a competitive advantage 6. In order to select a GTM, you first need to understand:    - market conditions    - competitive positioning    - ideal customer    - product offering 7. Knowing these elements will help you choose the correct GTM that will    acquire, retain and grow you customer base in the most capital-efficient way  ### Sales-Led Go-To-Market Strategies  Profit Centers: Sales, Marketing, Customer Success  Cost Centers: Engineering, Product  Advantages:  - Annual Contract Value (ACV) can be very high - Enterprise first solutions that are very complex and therefore need a high-touch sales model - If the Total Addressable Market (TAM) is very small, because your market is super niche, you can quite easily talk to almost all market participants. (PLG is built for large TAMs) - It's great for new categories of product where education is required, because you need to change how people approach a problem. This takes time and requires education.  This is turn requires that you understand your customers pain points, objections, core problems. If you jump to quickly a PLG GTM strategy then you risk a high church rate because you haven't understood or educated your customers well enough.  Disadvantages:  - Sales cycles are very long - The Life Time Value (LTV) must be high enough to recoup the investment in   CAC. This often requires charging the customer a premium. This premium   price isn't because the product is amazing, or more valuable to the   customer, but because the customer acquisition model is more expensive. - If you use a Sales-Led GTM, you need to watch out for competitors who can   sell more efficiently, or have a more efficient Customer Acquisition   Model. They can steal your market share by offering the same product with   at a lower price. - Customer Acquisition methods are super leaky. Most marketing-qualified leads (MQLs) never result in a closed deal, this is partly because:   - it encourages markets to gate content in order to hit their MQL goals   - it focusses on content consumption as a leading indicator of intent.     (but reading a white-paper or brochure doesn't mean I'm going to buy     the thing).   - the entire process rewards creating friction in the buying process - Consequently, there is often a disconnect between marketing and sales  ### Product-Led Go-To-Market Strategies  - Switching from Sales-Led GTM to Product-Led GTM creates a defensive moat - A product led marketing team asks 'How can we use the product to qualify our prospects for us?' - A product led customer success team asks 'How can we create a product that helps customers be successful without our help?' - A product-led engineering team asks 'How can we create a product with a quick time-to-value?' - Growth is much faster, because:   - you need fewer resources to scale,   - the top of the customer funnel is much wider.   - CAC is much lower   - Higher RPE (revenue per employee)   - User experience is better  ## Chapter 2 - Free, Freemium or Demo  1. Use the MOAT framework to pick the right GTM strategy:    - **M**arket Strategy - Dominant? Disruptive? Differentiated?    - **O**cean Conditions - Blue or Red?    - **A**udience - Do you have a top-down or bottom-up marketing strategy?    - **T**ime to Value - How much time do you need for a customer to      experience the value?  - Dominant - Do it better than the competition _and_ charge a lower price   - Is your TAM big enough?   - Does your product solve a specific job significantly better and at lower cost than anyone else on the market?   - Can the user realize significant ongoing value quickly with little or no help?   - Do you want to be the undisputed market leader? - Differentiated - Pick and win a fight against an industry giant   - Main line of defense against the giant is specialization   - Focus on an underserved niche   - Do a specific job better than the competition but charge significantly more   - This is not a one-size-fits-all model.   - Free trials and demos work well here.   - Because its specialized, combining freemium with quick time-to-value is difficult   - Main competitive advantage is how you solve your customers problems   - Does your market have underserved customers?   - Is the TAM big enough?   - is the ACV high enough?   - Could prospects experience a Magic Moment during a free trial? - Disruptive - Charge less for an inferior product (e.g. Canva, Google docs)   - Build a simpler product that solves a specific pain point, and because its simpler, its faster, you can charge less, and its more appropriate to some over-served or priced-out customers   - It's a scaled-down product   - Costs must be low   - Product must be easy to use   - Is TAM large enough?   - Can on-boarding be completely self-service?   - Freemium model thrives  ## Chapter 3 - Red-Ocean or Blue-Ocean markets?  Red-ocean companies try to outperform their rivals in order to grab a larger share of the existing market. As the market gets crowded, opportunity for profit and growth reduces. Products become commodities. Cut-throat competition turns the waters red.  Blue-ocean companies access untapped market space and create demand. They have opportunity for highly profitable growth. Competition is irrelevant. Create and capture new demand.  Some markets will be red-ocean, but a particular niche within it will be blue ocean.  Blue Oceans require educating the customer to create the demand. This is high-touch, and often a PL GTM strategy isn't going to work. It needs to be sales-led in order to educate the customer enough. But if Time-To-Value (TTV) is short then PLG could be great.  Red Oceans need big wide funnels in order to compete, and PL GTM strategies work great. They're defensible, keep costs low and make sales cycles short.  ## Chapter 4 - Top-Down or Bottom-Up selling strategy?  1. PLG works for bottom-up. 2. High touch sales-led strategies work for Top-Down enterprise sales strategies, where the product is super complex and the sales cyccle is very long.  Top-Down (Sales team is the growth engine):  - High ACV - Additional Services - Lower customer churn - Poor revenue distribution - High CAC - Long sales cycles - Free Trial sometimes works  Bottom-Up (Product is the growth engine):  - Wider top-of-funnel - Low CAC - Predictable sales figures - Revenue diversity - Scalable fast - Small contracts only - non-paying customers - expertise shortage - upfront investment as non-paying customers drain resources - Freemium - Free-Trial  ## Chapter 5 - Time-to-Value  1. How much time until you deliver on your promise to prospects? 2. How much time until the product sells itself? 3. PL GTM strategies require fast time-to-value. 4. Rank your uses across 2 dimensions and group into 4 quadrants. The dimensions are Ability (low - high) and Motivation (low - high) 5. Low Motivation - Low Ability = Mission Impossible 6. High Motivation - Low Ability = Rookie 7. Low Motivation - High Ability = Veteran 8. High Motivation - High Ability = Spoiled 5. Figure out your top two quadrants. Unless all your users are Spoiled, you need to decrease Time-To-Value.  Questions:  - How motivated are your users? - Is your product easy for your target audience to use? - Can users experience the core value (magic moment?) without hand-holding?  # Part 2 - Build Your Foundation  ## Chapter 7 - Build a product-led foundation  A positive feedback loop:  1. **Understand** your value 2. **Communicate** it 3. **Deliver** on your promise 4. Repeat  ## Chapter 8 - Understand your value  If you're selling live-chat software, you're not really selling live-chat software, you are selling a new and better way to acquire customers.  You are selling the outcome, the result, the why.  Pain makes us want to change so that we can avoid or prevent the pain altogether.  Pain is product agnostic.  There are three reasons why people buy a product:  1. Functional Outcome - the core task that needs to get done. 2. Emotional Outcome - how a customer wants to feel or avoid feeling as a result of the functional outcome. 3. Social Outcome - how a customer wants to be perceived by others by using    your product.  In every software, there are usage patterns that point towards to core outcomes that are most important to customers.  One of the biggest differences between sales-led and product-led companies is that SL companies monitor usage patters to see if users are accomplishing meaningful outcomes. These outcomes are referred to as **value-metrics**.  **A value-metric is the way you measure value exchange in your product**. They are the linchpin to successful execution of a product-led GTM strategy because you are aligning your revenue model directly with your customer acquisition model. Because your value metrics play a vital role in how you price your product, set up your monitoring, and build your team.  Value metrics could be:  - for Vimeo, number of videos uploaded by the user. - for Slack, number of messages sent by the user - for PayPal, amount of revenue generated by the user (processed?)  There are **functional** and **outcome based** value metrics. Functional value metrics are 'per user' or 'per 100 videos'. Pricing scales around functions of usage. Outcome based value metrics charge based on the outcome, e.g. how many views a video received, or how much money a customer made when using your payment process method.  Many SaaS companies rely on feature differentiation as a way to justify higher prices, but this produces higher churn.  Value metrics outperform feature differentiation with upto 75% less churn...  Outcome based value metrics reduce church by an additional 40%. Apparently.  1. A good value metric is easy for a customer to understand. They need to immediately understand what they're paying for and where they fit in your packing/pricing structure. If you're in an established market, it makes senses to look at what the competition charges. 2. A good value metric is aligned with the value that the customer receives through the product. Consider the low-level components of your high-level outcome. E.g. what low level actions are necessary to get the end result? Sending lots of messages? Meeting lots of people? Finding lots of things? 3. A good value metric grows with your customers usage of the valuable outcome. If customers get incredible value from the product, charge them more because the product is worth it. Also, if they aren't getting much value from the product, charge them less. 4. Don't do user based pricing if you want to get lots of users - its a conflict of interests. 5. If you're small, you can try different pricing strategies and iterate to success.  Ask yourself:  1. What do my best customers do? 2. What do my best customers not do? 3. What features did my best customers try first when they were on-boarding? 4. What are the similarities along my best customers that led to success? 5. For churned customers, what were the main differences between them and the    best customers? Were they in the ideal audience? Why did they church? What    did they do or not do that good customers didn't? "
  },
  {
    "id": "proverbs-12",
    "objectID": "proverbs-12",
    "title": "Proverbs 12",
    "tags": "bible,proverbs,wisdom",
    "category": "Non-technical/Journal",
    "content": "  The chapter starts with <mark>'Whoever loves discipline loves knowledge, but he who hates reproof is stupid.'</mark> and ends with <mark>'In the path of righteousness is life, and in its pathway there is no death.'</mark>  The opening proverb is jarring to read, maybe because unlike 'wickedness' or 'righteousness', which are concepts I don't hear or think much about day-to-day, 'discipline' and 'knowledge' are very familiar and part of contemporary conversation. So is stupidity. So this proverb feels tangible.  What does it mean? If I love discipline then I am loving knowledge, and in this case I'm confident the opposite is also true - If I avoid or dislike discipline then I avoid or dislike knowledge. Discipline is hard, I guess I need to lean into being disciplined, and remember why.  Encouragingly, the proverb is immediately followed by the reminder that <mark>'A good man obtains favour from the Lord, but a man of evil devices he condemns'</mark>, so make an effort, do good things, and obtain favour. That's a big reason to persevere through discipline.  $^4$<mark>'An excellent wife is the crown of her husband, but she who brings shame is like rottenness in his bones.'</mark> If it were me I'd leave off all the negative second parts of these proverbs, its abrasive. But also if it were me I doubt they'd be worth studying.  Why is the pattern of all these proverbs 'good thing, bad thing' - to make the contrast stronger? To know why to do a thing and also why not to do the opposite? To make it more punchy? I guess if its abrasive you are more likely to remember it, and if you're confident that what you are saying is true then you want it to be remembered.  Back to the proverb, this is a great proverb - I like it. It honors wives, though it does put them in the context of their husbands, and it also speaks to how valuable and precious a good wife is - crowns are precious and rare.  Empirically, it also feels _thruthy_ - marriages are difficult and if either spouse can be considered 'excellent' then that is unusual and valuable. Relationships can give a lot of life and health and happiness, and require a lot of effort and work. To be an excellent spouse is certainly worth desiring and celebrating and protecting.  The next few verses contrast wickedness and righteousness - don't be wicked, be upright!  $^9$ <mark>'Better to be lowly and have a servant that to play the great man and lack bread'</mark>. Don't put appearances before substance? Don't spend money on fancy cars or clothes if you wont have enough for decent food? Prioritize substance (truth?) over appearances and social pressures? Having a servant (or a domestic helper) would certainly be helpful, and of more tangible benefit than receiving shout-outs at networking events.  $^{10}$ <mark>'Whoever is righteous has regard for the life of his beast, but the mercy of the wicked is cruel.'</mark> - animal welfare is important.  $^{11}$ <mark>Whoever works his land will have plenty of bread, but he who follows worthless pursuits lacks sense.</mark>  11 and 12 are both about enjoying the good consequences of honest work, 11 advises against worthless pursuits, and 12 says that is a wicked to covet the profits of evildoers.  Verses 13 - 19 are all about speaking and listening. Each proverb contrasts good and evil or wisdom and foolishness.  - 13 - your own dishonest words will become a trap for you. - 14 - you words and your works will come back to you - invest in them and dividends will be returned. - 17, 18 - these contrast each other. Your words are powerful,   speaking the truth is honest (even when it isn't simple, or if it makes a   situation more complicated) and being rash (acting without careful   consideration of the consequences) can be as violent as wielding a sword. Wise   words bring healing, though.  $^{15}$ Fools think they are right, and because of the contrasting pattern presumably do not listen to (or ask for) advice. This seems similar to the [Dunning-Kruger Effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect) Wise people know that they don't know everything they need to, ask for advice, and listen to it.  $^{16}$ I had to look up _Vexation_ - it means 'the state of being annoyed, frustrated or worried'. Wise people can stay calm and ignore insults. If you get all fired up when someone insults you you're probably (generally speaking) being foolish.  $^{19}$ <mark>Truthful lips endure forever, but a lying tongue is but for a moment.</mark>  Truth endures, lies do not.  Verses 20 - 29 have two themes - the benefits of consistent hard work, and the benefits of being truthful. As usual, each proverb is a comparison of right and wrong or wisdom and foolishness:  $^{21}$ <mark>No ill befalls the righteous, but the wicked are filled with trouble.</mark> This is encouraging to read, and also highlights that proverbs highlight truthful patterns, but are not specific guarantees. - Obviously righteous people will have trouble, this proverb isn't saying that life will be perfectly pleasant. As usual, it is a push towards doing good because of the benefits, a pull away from doing wrong because of the damage.  $^{22}$ <mark>.. those who act faithfully are his delight.</mark> It is wonderful to read that (a good) God would delight in people.  $^{23}$ <mark>A prudent man conceals knowledge, but the heart of a fool proclaims knowledge.</mark> I find it surprising to read that concealing knowledge can be a desirable trait. I guess there are certain questions that must be answered before the answers to other questions can be understood, and I know that for my young children I wouldn't answer particular questions that same as if they were adults.  $^{24}$ <mark>The hand of the diligent will rule, while the slothful will be put to forced labor.</mark> Its ironic, and counter-intuitive, that those who are diligent and able and willing to labor end up in management or leadership positions, and that those who would avoid laborious work end up doing it.  $^{25}$ <mark>Anxiety in a man's heart weighs him down, but a good word makes him glad.</mark> I find it encouraging (again) to read that being weighed down by anxiety is normal, and I like that anxiety isn't described as a weakness or as foolishness. (I don't want to conjecture too much about what isn't written, but there's a long list of things that fools do and the consequences of foolishness, and anxiety isn't on the list.) This proverb also emphasises and encourages the impact of good words.  $^{28}$ <mark>In the path of righteousness is life, and in its pathway there is no death.</mark> How wonderful to know how to find life and avoid death. It's such a pleasing way to end a chapter. "
  },
  {
    "id": "proverbs-13",
    "objectID": "proverbs-13",
    "title": "Proverbs 13",
    "tags": "books,bible,proverbs,wisdom",
    "category": "Non-technical/Journal",
    "content": "  $^{1}$<mark>A wise son hears his father's instruction, but a scoffer does not listen to rebuke.</mark> The chapter opens the same way as the previous chapter - with a proverb about the importance of wisdom, knowledge or instruction. As always, the proverb starts with the good example and then contrasts against it.  $^{2}$<mark>From the fruit of his mouth a man eats what is good, but the desire of the treacherous is violence.</mark> Slightly weird imagery I think, my mouth produces fruit that I can then eat.. Weird. But I can see the principle - the fruit of my mouth is the words I speak, words are powerful for either good or evil. Speaking well will lead to good things that do what good food does - nourish, strengthen, sustain. Treacherous people desire violence. So are people who want to do violent things likely to betray? Maybe.  $^{3}$<mark>He who guards his mouth preserves his life, he who opens wide his lips comes to ruin.</mark> Choose your words carefully.  $^{5}$<mark>The righteous hates falsehood, but the wicked brings shame and disgrace.</mark> It's OK to be strongly opposed to be falsehoods - misrepresentations, lies, manipulation, duplicity.  $^{6}$<mark>Righteousness guards him whose way is blameless, but sin overthrows the wicked.</mark> I guess there are (at least) 2 ways of looking at this - the only way I can be blameless is by Jesus' imputed righteousness, which also saves me literally from death. The alternative is that I am not righteous and am overcome by sin. Alternatively and more prosaically, try to be blameless instead of wicked, and instead of creating trouble for yourself you'll find people bear with you for longer and are nicer to you.  $^{7}$ <mark>One pretends to be rich, yet has nothing. Another pretends to be poor, yet has great wealth.</mark> (I prefer not to use semicolons) I really like this proverb! The last 20 years have seen several degrees of financial wealth or lack, and the reality has often been very different to what I'd expected. I often intuit that things must get easier, or nicer, or more fulfilling if only a certain problem was removed, or a certain something was bought, or recognised, or achieved. The reality is a lot more complicated than that. Wealth isn't what I thought it was, I thought it was mostly financial. Now, I think its freedom. Freedom to be at peace, to be unburdened of my past and present, freedom to still have hope for the future, freedom to have some spare time, freedom to not be crushed by life and be a good dad and husband and friend.  $^{8}$<mark>The ransom of a man's life is his wealth, but a poor man hears no threat.</mark> oh! Incisive! This reminds me of 'no one ever really owns a fortune, it always seems to own them'. There are various troubles and burdens you avoid by being poor, like choosing life instead of material excess. Lose your wealth and choose a rich life.  $^{10}$<mark>By insolence[ref]Insolence: rude and disrespectful behaviour'[/ref] comes nothing but strife, but with those who take advice is wisdom.</mark> Disrespect and rudeness never works, wisdom is acquired when you make a habit of asking for advice.  $^{11}$<mark>Wealth gained hastily will dwindle, but whoever gathers little by little will increase it.</mark> I'm surprised to read this - I didn't realise that the rate of change of ones wealth would likely effect how it can be sustained, and I wouldn't have guessed that this is some general principle that exists across millennia, cultures and geographies.  $^{12}$<mark>Hope deferred makes the heart sick, but a desire fulfilled is a tree of life.</mark> This one I've heard before. I don't really understand it, though. I'm not sure what a sick heart definitely is.  It seems counter-intuitive because we are told to keep on looking forward to and hoping for Jesus to complete his work saving us and bringing history to completion. There is a lot of 'now and not yet' tensions in between the time of Jesus' resurrection and second coming (I know so little about it that I don't particularly want to mention it). So maybe a Christian's heart would be expected to be a little sick?  Also, if _a desire fulfilled is a tree of life_ then I guess I'm desiring the wrong kind of things - most of my desires are chasing after the wind. I desire to eat and then I get hungry again, desire to graduate and then realise the work hasn't even begun, etc. The image of a _Tree of life_ hasn't been used before I don't think, maybe it means something specific which I'm unaware of. There was a tree of life in the garden of Eden...  13 - 16: Don't ignore wisdom, don't be an idiot, be prudent, have good sense. Strong recurring themes. $^{16}$<mark>Every prudent man acts with knowledge, but a fool flaunts his folly</mark> is interesting though - I think prudence is being used in a slightly different sense to what I'm used to. This proverb is saying that one should be informed before acting. And because a fool rushes into action, it will be clear that the don't know what they are doing or talking about.  $^{22}$ <mark>A good man lays up an inheritance for his children's children, but the sinner's wealth is laid up for the righteous.</mark> I remember reading this when I was about 18 and thinking this was quite a burden - to leave an inheritance for grandchildren as well as children.  Seventeen years later it makes a lot of sense - the inheritance isn't primarily money, but wisdom, peace, security. The way that I parent my children will directly effect how they parent their own children, and in this way I will either bless or curse my grandchildren.  If I damage my children, they will suffer and be less able to provide for their own children (emotionally, physically, spiritually). Our own childhoods have a large influence on our adulthoods, and our ability to parent, so I should make sure my children have good childhoods, which is not a trivial endeavour.  23 and 24 break the pattern of 'good example, bad example.'  $^{23}$ <mark>The fallow[ref]Fallow: ploughed and harrowed but left for a period without being sown in order to restore its fertility or to avoid surplus production[/ref] ground of the poor would yield much food, but it is swept away through injustice.</mark> The missed opportunities are real. Poor people are not incapable of productive and fruitful work. It is injustice that prevents fruitfulness. I find this proverb subtly provocative and insightful.  $^{24}$ <mark>Whoever spares the rod hates his son, but he who loves him is diligent to discipline him.</mark> Parents who love their children do not enjoy causing them stress or discomfort, but if they love them and are wise then they discipline diligently, or consistently. Apparently physical punishment is timeless?  $^{25}$ <mark>The righteous has enough to satisfy his appetite, but the belly of the wicked suffers want.</mark> The last proverb in the chapter finishes with encouragement that it is better to be righteous than wicked, because it leads to satisfaction rather than want.  The previous chapter also finished with encouragement specifically about righteousness. Even though the book doesn't have headings it seems like it does have structure, and the author requires you to actually read the text closely in order to pull out meaning. Shocking. Clearly not optimised for engagement, SEO or social media.  [comment]: # "
  },
  {
    "id": "proverbs-14",
    "objectID": "proverbs-14",
    "title": "Proverbs 14",
    "tags": "books,bible,wisdom",
    "category": "Non-technical/Journal",
    "content": "  $^{1}$<mark>The wisest of women builds her house, but folly with her own hands tears it down.</mark> This chapter begins with a proverb about women! And not by juxtaposing men either. It's important that I remember that wisdom - the desirable quality that so much of proverbs is about - is personified as a woman, like in chapter 9:1, _Wisdom has built her house, she has hewn[ref]Hewn: chop or cut with an const[/ref] her seven pillars._  $^{2}$<mark>Whoever walks in uprightness fears the Lord, but he who is devious in his ways despises him.</mark> Fear is contrasted with despising, so I don't think this is supposed to fear of violence or victimisation, but more like a feeling of reverence and profound respect. The Lord loves me, and in the previous chapter it says that parents discipline their children.  $^{4}$<mark>Where there are no oxen, the manger is clean, but abundant crops come by the strength of the ox.</mark> This is really interesting, the point feels modern. The rural imagery is unusual (to me) but otherwise it feels like something you might find on Instagram. What's the lesson? Progress is messy, or doing work creates waste, don't fret about the cleanliness of your manger if you want to have a productive farm..  $^{5}$<mark>A faithful witness does not lie, but a false witness breathes out lies.</mark> It's really important - don't lie. This is a strong recurring message.  $^{6}$<mark>A scoffer seeks wisdom in vain, but knowledge is easy for a man of understanding.</mark> What does he understand? That scoffing is harmful to the scoffer, and what else?  $^{7}$<mark>Leave the presence of a fool, for there you do not meet words of knowledge.</mark> It would be good to have a clearer understanding of the differences between _understanding_ and _knowledge_. This proverb is very similar to modern sayings like 'You become like the 5 people you spend most time with'. What are the marks of a fool? How do you know if you're hanging out with a foolish person? They talk a lot, without thinking about their words. They are quick to become angry or emotional. They are not diligent, or consistently hard working. They don't plan ahead (filling their barns in summer).  $^{8}$<mark>The wisdom of the prudent is to discern his way, but the folly of fools is deceiving.</mark> It's wise, and prudent, to discern a course of action, or series of events and decisions. Discern means 'recognise or find out', I tend to use it to 'look closely for additional clues about what might happen'. 'Prudent' means to 'act or demonstrate care and thought for the future'.  $^{10}$<mark>The heart knows its own bitterness, and no stranger shares its joy.</mark> This, I think, makes total sense to an old person and seems mysterious to young people. When I first read it I thought it said something like 'no-one shares its joy', but it doesn't. Only 'stranger'. Family and close friends can share joy, but they still won't be able to know your bitterness. I'd recommend not holding onto bitterness, and finding out how its possible to forgive because of the work that Jesus completed.  $^{11}$<mark>The house of the wicked will be destroyed, but the tent of the upright will flourish.</mark> Again, don't be wicked, it will go badly for you. If you are upright and living in a humble, fragile, vulnerable tent you can still flourish.  $^{12}$<mark>There is a way that seems right to a man, but it's end is the way to death.</mark>This book doesn't pull any punches. It's an alarming assertion that someone can think they are doing things 'right' but are in fact heading towards death. Don't rely on your own understanding, figure out what God thinks about a thing.  $^{13}$<mark>Even in laughter the heart may ache, and the end of joy may be grief.</mark>At the moment I don't have much experience of grief, but I inevitably will. I know there is sorrow so profound that it becomes physical as well as emotional, and regret that changes what it means to be alive. I guess one of the things this proverb reveals is that its ok to laugh whilst experiencing heart ache, and its natural to feel happy and sad (laughing and heart-aching) at the same time. It's part of being alive emotionally, and shouldn't be considered weird or broken.  14 and 15 reiterate themes I've noted previously.  $^{16}$<mark>One who is wise is cautious and turns away from evil, but a fool is reckless and careless.</mark> It is wise to not do something, even if you could. You don't have to do/see/visit all the things, even if you could. It's ok to risk erring on the side of cautious, because if you are not cautious, you are foolish.  I guess that if you are discerning then you can perceive more clearly and what was originally partially known and therefore risky becomes less risky because there are fewer unknowns. Instead of 'maybe its wrong' it can become 'its almost definitely wrong, or right'  $^{17}$<mark>A man of quick temper acts foolishly, and a man of evil devices is hated.</mark> Don't lose your temper quickly. Losing it slowly is often more difficult.  $^{18}$<mark>The simple inherit folly, but the prudent are crowned with knowledge.</mark> You're supposed to aspire to prudence (and more generally, wisdom). You can't really opt out of this, because if you're not wise then you're a fool. If you're not prudent, you are (too) simple. And bad things happen to fools.  $^{19}$<mark>The evil bow down before the good, the wicked at the gates of the righteous.</mark> It's surprising to read such bold and simple confidence that justice would prevail. No ifs or maybes or conditions, just a simple resolution at the end.  $^{20}$<mark>The poor is disliked even by his neighbour, but the rich has many friends.</mark> Timeless pragmatism. This proverb is an observation, not a commendation. And look at the next proverb.  $^{21}$<mark>Whoever despises his neighbour is a sinner, but the blessed is he who is generous to the poor.</mark>. Be generous, not just theoretically or in your thoughts, but also in your actions and your money (see 23). Don't despise people. Who is your neighbour?  $^{22}$<mark>...Those who devise good meet steadfast love and faithfulness.</mark> Steadfast love and faithfulness.  $^{23}$<mark>In all toil there is profit, but mere talk leads only to poverty.</mark> It's not enough to only talk about loving your neighbour. And don't be convinced that any hard work you do it totally wasted, apparently it is not.  $^{24}$<mark>The crown of the wise is their wealth, but the folly of fools brings folly.</mark> Really? Does _wealth_ here mean something more or different to financial wealth? (I think I asked this in a previous proverb.) Not all wise people are rich, this is certain. And many biblical heroes were financially impoverished. Is it just a wide generalization?  $^{25}$<mark>A truthful witness saves lives..</mark> Literally. Though probably without knowing exactly which lives, and at what moment. Investors refer to this as second order consequences.  $^{26}$<mark>In the fear of the Lord one has strong confidence, and his children will have refuge.</mark> The best that I can understand this is to read it the same as if it said 'In the Lord one has strong confidence..'. What does this proverb mean that my shortened simplified version doesn't?  $^{27}$<mark>The fear of the Lord is a fountain of life, that one may turn away from the snares of death.</mark> Turning away is like physically repenting. A fountain of life is a source of life, and probably health and healing. It is contrasted with death traps. It would be interesting to consider the relative importance of feelings and actions in this book. Is it that feelings lead to actions, but actions are what makes the difference - the judgement between wisdom and foolishness, love and hatred, depends (only) on your actions?  $^{28}$<mark>In a multitude of people is the glory of a king, but without people a prince is ruined.</mark>If a king doesn't have any subjects, what is he king of? If leaders are not followed by any people, they cannot claim to be leaders.  $^{29}$<mark>Whoever is slow to anger has great understanding, but he who has a hasty temper exalts folly.</mark>If you have a quick temper then you are responsible for it, and you are endorsing foolishness. Being slow to anger is a sign of wisdom.  $^{30}$<mark>A tranquil heart gives life to the flesh, but envy makes the bones rot.</mark> Envy is apparently really bad. Tranquility is freedom from disturbance, or being calm. It's good for your health.  $^{31}$<mark>Whoever oppresses a poor man insults his maker, but he who is generous to the needy honors him.</mark> The poor mater, and have dignity, and are worthy of respect, because we are all made. "
  },
  {
    "id": "proverbs-15",
    "objectID": "proverbs-15",
    "title": "Proverbs 15",
    "tags": "books,bible,wisdom",
    "category": "Non-technical/Journal",
    "content": "  $^{1}$<mark>A soft answer turns away wrath, but a harsh word stirs up anger.</mark> A soft answer can diffuse a volatile situation, and speaking harshly leads to anger.  $^{2}$<mark>The tongue of the wise commends knowledge, but the mouths of fools poor out folly.</mark> Knowledge is to be commended. If someone speaks a lot of folly, they are a fool. Folly is 'foolishness or a lack of good sense' - it'll take discernment to judge a lack of good sense. Find someone who commends acquiring knowledge, and learning.  $^{3}$<mark>The eyes of the Lord are in every place, keeping watch on the evil and the good.</mark> Don't mistake God's patience for indifference, know that your good works and faithfulness are seen.  $^{4}$<mark>A gentle tongue is a tree of life, but perverseness in it breaks the spirit.</mark> Yet again, this book teaches that our words are powerful and have great consequence. A gentle tongue, a soft answer, guarded words preserver life, good fruit, fountain of life, now a tree of life. It is unequivocal, as is the inverse.  $^{5}$<mark>A fool despises his father's instruction but whoever heeds reproof is prudent.</mark> I just had a thought that people younger than 10 would have a difficult time heeding or despising, and are too young to be considered wise or foolish. They are children. When proverbs refers to parents and children, I reckon its probably referring to either adult children and maybe teenagers. I have young kids so I'm predisposed to see parenting advice in that context.  $^{7}$<mark>The lips of the wise spread knowledge, not so the hearts of fools.</mark> What you say is important..  $^{8}$<mark>The sacrifice of the wicked is an abomination to the Lord, but the prayers of the upright are acceptable to him.</mark> Integrity matters, and it seems that God is more concerned with motivation than impact. Better to pray quietly and honestly than to hypocritically do good works in public.  $^{11}$<mark>Sheol and Abaddon lie open before the Lord, how much more the hearts of the children of man!</mark> I am guessing that Sheol and Abaddon are some reference to a hellish place - if God can perceive what happens in a completely godless place that is far from him, it is going to be trivial to perceive the thoughts and motivations of your heart. He can read us like an open book.  $^{12}$<mark>A scoffer does not like to be reproved, he will not go to the wise.</mark> Reproof is almost as strong of a theme as words. Reproof is part of growing up and becoming wise. You _must_ be reproved if you are to learn and become wise. If I do not reprove my children then I am negligent. If you want to avoid reproof or do not accept it then you are a fool.  But remember, these are proverbs - they are generally true, most of the time. There will be situations where you parent gives bad advice and you'd be wise to ignore it. But its the exception, not the rule. If everyone else is the problem, then the problem is certainly you.  $^{13}$<mark>A glad heart makes a cheerful face, but by sorrow the spirit is crushed.</mark> This proverb connections emotions, spirit and the physical body. It says they are linked. If you are happy then you will look happy, and vice versa. If you carry around stress and tension then it's going to change how you look. Don't be sad indefinitely, it will crush you.  Grieve, and grow, and move on.  $^{14}$<mark>The heart of him who has understanding seeks knowledge, but the mouths of fools feed on folly.</mark> This isn't talking about the consequences of your words, it says that if you have understanding then your heart will desire knowledge. If you feed on folly, which is like consuming things that are foolish, then you are a fool.  $^{15}$<mark>All the days of the afflicted are evil, but the cheerful of heart has a continual feast.</mark> A pessimist and an optimist could experience the same event and become respectively more pessimistic and more optimistic. As much as you are able, choose to have a cheerful heart. If you are afflicted, then don't give up hope. Affliction doesn't mean you did something wrong or lack wisdom.  $^{16}$<mark>Better is a little with the fear of the Lord, than great treasure and trouble with it.</mark> So the fear of the Lord leads to the avoidance of trouble.. and it is better to live peaceably than deal with trouble.  $^{17}$<mark>Better is a dinner of herbs where love is than a fattened ox and hatred with it.</mark> Better to eat only garnishes, or bait, with people who love you than fine dining with people who do not.  $^{18}$<mark>A hot-tempered man stirs up strife but he who is slow to anger quiets contention.</mark> Don't lose your temper. Blessed are the peace-makers..  $^{22}$<mark>Without counsel plans fail, but with many advisers they succeed.</mark> You're not supposed to know everything and be completely independent. You are supposed to ask for help, weigh the advice, and deliberately look for wise people to be friends with.  $^{23}$<mark>To make an apt[ref]Apt: Appropriate or suitable in the circumstances.[/ref] answer is a joy to a man, and a word in season, how good it is!</mark> It is fun to say something apt? It is a blessing to receive a bit of well-timed advice.  Proverbs talks a lot about words and mouths. For most of history, books have been rare and literacy was not widespread. Therefore most knowledge transfer would occur by speaking. Maybe it still does today because it feels like it requires less effort than reading. I think the same principles can be applied to reading and writing as for hearing and speaking.  $^{25}$<mark>The Lord tears down the house of the proud but maintains the widow's boundaries.</mark> The boundaries are the edges of the land owned by the widow. God really doesn't like proud people, and is soft-hearted towards the vulnerable.  $^{27}$<mark>He who is greedy for unjust gain troubles his own household, but he who hates bribes will live.</mark> Don't be a fool, don't be bribed - directly or indirectly. Love life, look after your family, and hate bribes. Loving one thing means you hate other things. If you're building a business, design for Segregation of Duties.  $^{28}$<mark>The heart of the righteous ponders how to answer but the mouth of the wicked pours out evil things.</mark> It is good, and Godly, to think about your answer _before_ you say it.  $^{33}$<mark>The fear of the Lord is instruction in wisdom, and humility comes before honor.</mark> Ok great - I have a definition for what 'fear of the Lord' means. (And it's a reliable definition too.) I still don't understand _why_ this is what it means, but at least I know _what_ it means. They _why_ question is less foundational that the _what_.  Learn humility, despise pride. Seek wisdom. "
  },
  {
    "id": "proverbs-16",
    "objectID": "proverbs-16",
    "title": "Proverbs 16",
    "tags": "books,bible,wisdom",
    "category": "Non-technical/Journal",
    "content": "  The first 9 verses seem to loosely be about plans and the motivations for various actions. The wisdom and purpose of God's actions are contrasted with the motivations of human plans.  The first proverb is a bit of a riddle. $^{1}$<mark>The plans of the heart belong to man, but the answer of the tongue is from the Lord.</mark> I get the first part, but why would a spoken answer generally be from God? Is it that even if you are wise, and fear God, your plans are still your own but the way you speak about them is different because you fear God?  $^{2}$<mark>All the ways of a man are pure in his own eyes, but the Lord weighs the spirit.</mark> Don't be surprised that foolish, stupid or evil people think that their actions and decisions are upstanding and good. Understand that God says the spirit (motivation or attitude) that produced the plan or the actions is what should be judged. I don't think that God would agree that 'the ends justifies the means'.  $^{3}$<mark>Commit your work to the Lord and your plans will be established.</mark> A good proverb for fridge magnets.  $^{4}$<mark>The Lord has made everything for its purpose, even the wicked for the day of trouble.</mark> The mysteries around moral responsibility from free will and predestination are not unique to the New Testament. I can't think of anything useful to say in order to expand on this. I believe it's true, I don't really know what I would do differently now that I've read this proverb. I can trust God that he knows what he's doing and that he is _good_. I'll add it to my list of things I know about God without taking anything else off the list.  $^{5}$<mark>Everyone who is arrogant[ref]Arrogant: Having or revealing an exaggerated sense of ones own importance or abilities.[/ref] in heart is an abomination to the Lord, be assured he will not go unpunished.</mark> God really doesn't like arrogance, which seems very similar to pride. This is troubling because society seems to have lost any appreciation for humility to the point where we no longer know how to talk about the virtues and vices of humility and pride. Pride is considered a virtue and is conflated with self-worth. We lack the nuance required to reliably discern wisdom from folly.  $^{6}$<mark>By steadfast love and faithfulness iniquity is atoned for, and by the fear of the Lord one turns away from evil.</mark> It is refreshing and pleasant to read about _Steadfast love and faithfulness_.  I don't hear many people talking about these virtues - love has been reduced or redefined as something that can be found or changed quickly.  Faithfulness isn't celebrated or spoken about very much. Maybe because it isn't as dramatic as betrayal. Faithfulness and steadfast love are predicated on humility, which is another concept society seems silent about.  The second half of the proverb is also profound. It tells me how I can turn away from evil. I know that it is easier to say I will change my ways than it is to actually change, consistently.  'Being good' or 'turning away from evil' is not nearly as easy or simple as a child thinks it is, and this proverb tells me how to do it. The last proverb of the previous chapter said that the fear of the lord is instruction in wisdom, and that humility comes before honor.  $^{8}$<mark>Better is a little with righteousness than great revenues with injustice.</mark> In case there was any doubt, here it is. Don't compromise yourself in order to make more money.  $^{9}$<mark>The heart of a man plans his way, but the Lord establishes[ref]Establish: Set up on a firm or permanent basis.[/ref] his steps.</mark> So I can make my own plans, but if my plans are to be successful, or substantial, I need the Lord to make my plans 'firm' or 'permanent'.  $^{10}$<mark>An oracle is on the lips of a king, his mouth does not sin in judgement.</mark> I don't know what this means. An oracle is 'a priest acting as a medium through whom advice or prophecy was sought from the gods.' Kings have certainly sinned when making judgements.  $^{11}$<mark>A just balance and scales are the Lords, all the weights in the bag are his work.</mark> God loves justice, and the instruments or justice are ultimately his, and are from him.  $^{12}$<mark>It is an abomination to kings to do evil, for the throne is established by righteousness.</mark> The kings in verses 12 and 10 are not like kings I have heard about. If 12 is true then perhaps 10 can be true. At a minimum, 12 and 13 provides some standard by which to judge kings.  $^{16}$<mark>How much better to get wisdom than gold! To get understanding is to be chosen rather than silver.</mark> One of the many bits of advice that could come from this would be to prioritise jobs with training and experience over jobs with higher salaries immediately. Especially in your twenties or when you are starting your career. You don't need lots of disposable income, you do need wisdom, training, experience, perspective, time with wise or experienced people.  $^{17}$<mark>The highway of the upright turns aside from evil, whoever guards his way preserves his life.</mark> _Guarding your way_ - this is not a concept or expression I've heard of before. I guess it could mean 'defend the path your life could take', or 'think about the consequences (second order consequences).'  $^{18}$<mark>Pride goes before destruction, and a haughty spirit before a fall.</mark> God really doesn't like pride, and also it leads to destruction. This is not a coincidence. Haughty means 'arrogantly superior or disdainful' which is mostly a synonym for prideful.  $^{19}$<mark>It is better to be of a lowly spirit with the poor than to divide the spoil with the proud.</mark> Avoid prideful people, avoid evil people. Proverbs seems really clear that you are supposed to socialise and spend time with people you want to be like. A lowly spirit is 'low is status, or humble'. Better to hang out with poor people and be humble than to be rich and associate with prideful people.  $^{20}$<mark>Whoever gives thought to a matter will discover good, and blessed is he who trusts in the Lord.</mark> More encouragement to trust God, and to be considerate.  21 and 23 both say that it is wise to speak persuasively or encouragingly. If the words are well intended, then make them more effective by being persuasive.  $^{21}$<mark>The wise of heart is called discerning, and sweetness of speech increases persuasiveness.</mark>  $^{23}$<mark>The heart of the wise makes his speech judicious[ref]Judicious: Having, showing or done with good judgement or sense.[/ref] and adds persuasiveness to his lips.</mark>  $^{24}$<mark>Gracious words are like a honeycomb, sweetness to the soul and health to the body.</mark>Our words affect our bodies, and our souls. Gracious words are really valuable. Gracious means to be kind, courteous, or patient. Let it go, be gentle.  $^{25}$<mark>There is a way that seems right to a man, but its end is the way to death.</mark> Don't be so confident in your own wisdom and judgement. It's not just that your judgement is a bit less good than God's, this proverb says its totally opposite. Expect to be doing things that look like the opposite of what someone might expect. Expect to do unintuitive things.  $^{26}$<mark>A workers appetite works for him, his mouth urges him on.</mark> True that.  $^{32}$<mark>Whoever is slow to anger is better than the mighty, and he who rules his spirit than he who takes a city.</mark> Wow. This is high praise for self control.  ![domino meme](/static/images/proverbs/domino-meme.jpg) "
  },
  {
    "id": "proverbs-chapter-11",
    "objectID": "proverbs-chapter-11",
    "title": "Proverbs 11",
    "tags": "books,bible,proverbs,wisdom",
    "category": "Non-technical/Journal",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # Context  These are my notes from reading Proverbs, one of the books in the bible. Almost the entire book is a collection of proverbs - short sayings that are generally true. I presume there is some structure and themes in their arrangement, taking notes should help these become clearer and hopefully also help me remember and apply them better.  The book is split up into chapters, which are quite short sections of the book. It would probably take about a minute or two to read each one. The chapters are further split up into verses. In Proverbs each verse seems to be one sentence.  Numbering the text like this is useful because it lets you refer precisely to a part of the book. Proverbs does have a few headings, but they are too far apart to provide enough structure on their own, I think.  I've read this book a couple of times before, and appreciated it even when I could feel that I was missing most of the wisdom in it. The book is quite easy to read - the sentences are short and the analogies seem simple enough.  It's refreshing to read something that has existed for thousands of year, has withstood criticisms, and feels approachable. It's practical, despite being old and written in a completely different cultural context. I find this comforting.  # Notes  Each proverb contrasts justice and injustice using a variety of phrases and images. Pride and humility, integrity and crookedness, righteousness and wickedness.  In the context of these qualities, various situations are described: a false balance, disgrace, wisdom, riches.  The proverbs are somewhat exaggerated, which seems reasonable given that they are self contained single sentences tasked with defining and then resolving a problem. The imagery is clear, it does not rely on subtlety.  The biggest themes are that honesty, integrity, righteousness are to be valued, and their opposites are to be avoided at all costs. Each of these qualities are in fact actions, not sentiments, and the consequences of these actions are reliable and consistent, and inevitable. The advice to 'love your neighbor like yourself' is a good summary of many of the proverbs.  Its clarity and confidence is encouraging. Do good and good things will happen, do evil and the consequences are inevitably bad for you.  # Examples  - <mark>The fruit of the righteous is a tree of life, and whoever captures souls is   wise</mark> - _the first part sounds wonderful. Who wouldn't want to produce life?   The second part is surprising. What is the 'capturing souls'?_ - <mark>The desire of the righteous ends only in good, the expectation of the wicked   in wrath.</mark> - _this is encouraging_ - <mark>One gives freely, yet grows all the richer; another withholds what he should   give, and only suffers want.</mark> - _counter-intuitive_ - <mark>Like a gold ring a pig's snout is a beautiful woman without discretion</mark> - _this   doesn't seem to fit in with any proverbs around it. Is this the only mention   of a woman in this section? Why is it important enough to be included? Does   this imply that beauty is discreet? There is surely a big cultural gap   between Amsterdam in 2021 and where ever this was first written._ - <mark>A man who is kind benefits himself, but a cruel man hurts himself.</mark> - _this is good to know_  # Conclusion  - Don't lie, cheat, steal or plot. Treat people like you yourself would want to be   treated. - Make an effort to do good and increase justice, and things will go well   for you. - God delights in blameless people, and he abhors people with crooked   hearts. - Beauty without discretion is an incongruous waste. "
  },
  {
    "id": "psychology-of-computer-programming",
    "objectID": "psychology-of-computer-programming",
    "title": "The Psychology of Computer Programming",
    "tags": "programming,engineering",
    "category": "Technical/Engineering",
    "content": "  From The Psychology of Computer Programming, 1971, here are The Ten Commandments of Egoless Programming:  1. Understand and accept that you will make mistakes. The point is to find them    early, before they make it into production. Fortunately, except for the few of    us developing rocket guidance software at JPL, mistakes are rarely fatal in our    industry. We can, and should, learn, laugh, and move on.  2. You are not your code. Remember that the entire point of a review is to find    problems, and problems will be found. Don’t take it personally when one is    uncovered.  3. No matter how much “karate” you know, someone else will always know more. Such    an individual can teach you some new moves if you ask. Seek and accept input    from others, especially when you think it’s not needed.  4. Don’t rewrite code without consultation. There’s a fine line between “fixing    code” and “rewriting code.” Know the difference, and pursue stylistic changes    within the framework of a code review, not as a lone enforcer.  5. Treat people who know less than you with respect, deference, and patience.    Non-technical people who deal with developers on a regular basis almost    universally hold the opinion that we are prima donnas at best and crybabies at    worst. Don’t reinforce this stereotype with anger and impatience.  6. The only constant in the world is change. Be open to it and accept it with a    smile. Look at each change to your requirements, platform, or tool as a new    challenge, rather than some serious inconvenience to be fought.  7. The only true authority stems from knowledge, not from position. Knowledge    engenders authority, and authority engenders respect – so if you want respect in    an egoless environment, cultivate knowledge.  8. Fight for what you believe, but gracefully accept defeat. Understand that    sometimes your ideas will be overruled. Even if you are right, don’t take    revenge or say “I told you so.” Never make your dearly departed idea a martyr or    rallying cry.  9. Don’t be “the coder in the corner.” Don’t be the person in the dark office    emerging only for soda. The coder in the corner is out of sight, out of touch,    and out of control. This person has no voice in an open, collaborative    environment. Get involved in conversations, and be a participant in your office    community.  10. Critique code instead of people – be kind to the coder, not to the code. As much     as possible, make all of your comments positive and oriented to improving the     code. Relate comments to local standards, program specs, increased performance,     etc.  [source](http://blog.stephenwyattbush.com/2012/04/07/dad-and-the-ten-commandments-of-egoless-programming) "
  },
  {
    "id": "python-notes-2",
    "objectID": "python-notes-2",
    "title": "Python Notes",
    "tags": "python,learning notes",
    "category": "Technical/Developer Tools",
    "content": "  # \\_\\_call\\_\\_()  In Python, every time you call a function or method such as `my_function()` or `my_class.my_method()` the interpreter will replace the `(` with `.__call__(`  ```python >>> def my_function(x): >>>    return x+1  >>> my_function.__call__(2) 3 ```  ```python class Prefixer:     def __init__(self, prefix):        self.prefix = prefix     def __call__(self, message):        return self.prefix + message ```  Then use _prefixer_ like this:  ```bash >>> simonsays = Prefixer('Simon says: ') >>> simonsays('jump up high!') 'Simon says: jump up high!' ```  Every time you call a function or method, you're really just calling a built in `__call__` method.  # There should be one, and preferably only one, obvious way to do something  It's in the 'zen of Python', which is a set of guidelines that help make design decisions. It's a choice that Python made, and other languages do it differently.  There are different [levels]({filename}/articles/python-notes.md#levels-of-python-code) to languages and this applies more to the idiom level than the design pattern level. It applies even less at the architectural level where there can be several equally good ways of organizing business logic and data representations.  Perl has the 'TMTOWTDI' (tim towtdi) principle - 'There's More Than One Way To Do It'. Perl's philosophy is to give users more than one way to do something. "
  },
  {
    "id": "python-notes",
    "objectID": "python-notes",
    "title": "Notes From \"Powerful Python\"",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  The parts of Aaron Maxwell's [Powerful Python](https://twitter.com/powerfulpython) newsletter that I don't want to forget:  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ## Emergent Abstractions  Get used to expecting and letting abstractions emerge from projects. If you find yourself repeatedly solving similar problems in similar ways, what can you do that will simplify the code and the implementation[ref] [Abstraction]({filename}/articles/principles-of-oop.md#2-abstraction) is a principal of OOP[/ref]?  Is it a couple of convenience methods on some helper class?  The code below gives you three ways of instantiating the twitter API client within the same class:  1. A generic 'normal' way 2. A specialized way that looks for certain environment variables 3. A specialized way that looks for a configuration file  ```python import os import twitter # https://pypi.org/project/python-twitter/  class ApiClient:     def __init__(self, consumer_key, consumer_secret,                  access_token_key, access_token_secret):         self.api = twitter.Api(             consumer_key,             consumer_secret,             access_token_key,             access_token_secret)      @classmethod     def from_environ(cls):         return cls(             os.environ['TWITTER_CONSUMER_KEY'],             os.environ['TWITTER_CONSUMER_SECRET'],             os.environ['TWITTER_ACCESS_TOKEN_KEY'],             os.environ['TWITTER_ACCESS_TOKEN_SECRET'])      @classmethod     def from_config_file(cls, path):         with open(path) as config_file:             # ...             return cls(...)      # ... ```  ## Practioner, Engineer, Scientist  1. **Practioner** - You can use a thing (a framework, a tool) 2. **Engineer** - You can use a thing and if you needed to, you could recreate it 3. **Scientist** - You can create frameworks and paradigms that have never existed before  Aim for the engineer level.  ## Sentinel Values  Instead of setting your sentinel value to something that is not quite impossible, like `None` or `'None'` set it to `object()`  This is better because it creates a unique instance of the `object` class and there can be no ambiguity about where it came from.  - A sentinel value is a value you can set a variable to. - It's special because it differs from all other legal or possible values that the variable could have. - It's used as a signal or as a canary that something (bad or unexpected) has happened.  ## Levels of Python Code  1.  **Syntax** - understand what indentation is important, when you need     parenthesis, colons, etc  2.  **Idioms** - the building blocks of a program. 'Paragraphs' of code that     follow common patterns, like for loops, \\_\\_init\\_\\_() methods (boilerplate)     or context managers.  3.  **Design Patterns** - Less well defined that Idioms, but more useful. [More     info](design-patterns).      - Creational Patterns, like Factories     - Structural Patterns, like Adapters or Proxies     - Behavioural Patterns, like `Visitor` or `Strategy`      These tend to be the same across different languages.  4.  **Architectural** - the largest structures in your software system. The     language itself doesn't make a lot of difference, an application would have     the same architecture whether it is written in Python or Java. The interface     between different components would be different, but the 'organs' of the     body would essentially be the same.  ## Read PEPs  A Python Enhancement Proposal is a document that's written to propose a new feature of Python.  It fully details the proposed feature, the arguments for and against it, and lots of sample code.  If the PEP is accepted into a future version of Python, the PEP becomes the authoritative document for that feature and how to use it.  PEPs tend to be written by the best programmers in the world, so hang out with them. "
  },
  {
    "id": "questions-for-good-references",
    "objectID": "questions-for-good-references",
    "title": "Questions for good references",
    "tags": "marketing",
    "category": "Non-technical/Entrepreneurship",
    "content": "  Use the following questions to get better references:  1. What was the problem you had before you used the solution I helped develop? 2. What did the frustration feel like as you tried to solve the problem? 3. What was different about the solution I worked on compared to previous    efforts? 4. Take us to the moment you realized our solution was actually working to solve    the problem? 5. What does life look like now that the problem is being solved?  Customize the text as necessary, for products or services, complete solutions are a component of a larger solution.  I made a [template](/documents/reference-questions.docx).  Source: [Building a story brand](building-a-story-brand) "
  },
  {
    "id": "questions",
    "objectID": "questions",
    "title": "Questions For Interesting Conversations",
    "tags": "uncategorized",
    "category": "Non-technical/Journal",
    "content": "  1.  What’s the **best piece of advice** you ever received?  2.  What would you say to your **18-year-old self** if you had a chat with them today?  3.  Have you ever **lost or rejected a friend**?  4.  Tell me about **a time when you changed your mind**.  5.  What have you been **thinking about lately**? What’s on your mind?  6.  Do you work in a language that's not your mother tongue? **What's it like to live in translation**?  7.  If there is a **choice between remembering and forgetting**, do you lean towards the side of forgetting?  8.  Were you raised for **autonomy or loyalty**?  9.  Was there ever a moment where you thought, **'I’m giving up'** — what did you do?  10. **Was your identity given to you or chosen by you**? "
  },
  {
    "id": "ranger-file-manager",
    "objectID": "ranger-file-manager",
    "title": "Ranger File Manager",
    "tags": "ranger,unix,vim,tools",
    "category": "snippet",
    "content": "  A console based file manager with vi key bindings.  Install it with `brew install ranger`  Launch it with `ranger` "
  },
  {
    "id": "reactance",
    "objectID": "reactance",
    "title": "Reactance",
    "tags": "psychology",
    "category": "snippet",
    "content": "  [Reactance](<https://en.wikipedia.org/wiki/Reactance_(psychology)>) would be a good name for a church.  Also, the [Streisand Effect](https://en.wikipedia.org/wiki/Streisand_effect). "
  },
  {
    "id": "read-and-write-same-file",
    "objectID": "read-and-write-same-file",
    "title": "Read and Write the Same File in Bash",
    "tags": "shell,pipe,syntax,bash",
    "category": "snippet",
    "content": "  I tried to read and write the same file in a pipeline, and got caught out by a race condition (why is the file empty?!). Do this instead:  ```bash some_script < file > smscrpt.$$ \\ && mv smscrpt.$$ file || rm smscrpt.$$ ```  `||` removes the temporary file if it errors.  `$$` is the process ID and ensures that you always have a unique temporary file name. "
  },
  {
    "id": "reading-april-2018",
    "objectID": "reading-april-2018",
    "title": "> Reading: April 2018\n",
    "tags": "reading,learning",
    "category": "Non-technical/Learning",
    "content": "  ## Articles  - [Mental models](https://fs.blog/mental-models/) A comprehensive list organised around different disciplines. It a long read but probably one of the most easy to apply and tangibly useful articles I've read recently.  - [Life is short](http://www.paulgraham.com/vb.html) - Is life actually short, or would we always want more time, no matter how much we could have?  - [Invisible asymptotes](http://www.eugenewei.com/blog/2018/5/21/invisible-asymptotes) - A well written and long look at various facets of business strategy.  - [Factors from scratch](http://osam.com/Commentary/factors-from-scratch) - Investing: A unified framework to explain how factors work.  - [This is tragic](https://kottke.org/18/06/a-sad-update-about-a-scissors-maker-that-went-viral) - '...But I do think this highlights the potential disconnects between mental health & business, publicity & success, and success & happiness. The internet can seem so intimate but ultimately it’s a thin view of an individual’s or company’s reality.'  - [Vim](https://statico.github.io/vim3.html) after 15 years  - [Cryptocurrency regulations around the world](https://www.cnbc.com/2018/03/27/a-complete-guide-to-cyprocurrency-regulations-around-the-world.html?__source=sharebar%7Clinkedin&par=sharebar)  - [On the 2008 financial crisis](https://www.lrb.co.uk/v40/n13/john-lanchester/after-the-fall) - 'I’m not sure if it’s philosophically possible for an action to be both necessary and a disaster, but that in essence is what the bailouts were.'  ## Podcasts  - [Jill Carlson](https://www.youtube.com/whatbitcoindid) on the 'What Bitcoin Did' podcast. “For the first time there is no longer a monopoly on the creation of value or monetary systems, that is really What Bitcoin Did.”  - [Georges St-Pierre](https://youtu.be/deVoaRTfVqs) on the Joe Rogan podcast. A long and candid conversation from one of the world's best athletes.  - [Ricardo Spagni](https://youtu.be/KqhRZfKRriU) a.k.a Fluffypony on Monero vs Bitcoin, EOS, the current bear market, Tari, and ASICs.  ## Resources  - Lots of [data   sets](https://vincentarelbundock.github.io/Rdatasets/datasets.html) "
  },
  {
    "id": "reading-april-2021",
    "objectID": "reading-april-2021",
    "title": "Reading - April 2021",
    "tags": "reading",
    "category": "Non-technical/Journal, Technical/Other",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  Articles and blog posts I saved to read later:  # [The Architecture Behind A One-Person Tech Startup](https://anthonynsimon.com/blog/one-man-saas-architecture/)  An article by [Anthony Najjar Simon](https://twitter.com/anthonynsimon) about how he runs his one-man SaaS using Django.  - Low stress, one-person company, run from a flat. - Self-funded, taking things slow - _he likes taking things slow_. - Grateful to be standing on the shoulders of the open source giants who went ahead and made the OSS stack we all enjoy and benefit from. - Your own context matters when choosing a tech stack. There is no 'holy grail'. I guess this means that you should use what you're familiar with and what is _boring_ for you. - Uses K8s on AWS. He says 'dont fall into the trap of thinking you need to use it too' - expertise with these tools was learnt over several years fighting fires on the day job. - Productive because he used the tools he is most familiar with and he can focus on shipping. - Django, Celery, PostgreSQL, Python, AWS, Redis. - same as MoneyBar and PipPip.  # [Boring tech behind a one person SaaS](https://www.listennotes.com/blog/the-boring-technology-behind-a-one-person-23/)  - The tech-stack keeps evolving - 'Boring' means 'what I'm familiar with so that I can focus on the business' - Most of his time is spent talking to people and thinking. He spends 15% of his time on engineering. Probably it was more when he was setting stuff up. - The methods described in the post are **definitely not the best way**. _It's just one way of doing engineering in a very specific type of business. It's not the only way._ - Django, Celery, PostgreSQL, Python, AWS, Redis. - same as MoneyBar and PipPip. - Uses Ansible for provisioning machines. - YAML files. Should look into this. - 'Good enough for now' - Doesn't use CI tools, he uses Ansible with a shell script he wrote. - Uses [Datadog](https://www.datadoghq.com/) for monitoring and alerting, and PagerDuty. - Uses [Rollbar](https://rollbar.com/), which seems similar to Sentry. - Uses Slack, not to talk with humans, but integrations with Rollbar and Datadog, and also [slack incoming webhooks](https://api.slack.com/messaging/webhooks) to be notified when someone signs up or does something interesting like deletes a thing. - Make a 'ding' sound whenever someone signs up. - He's _always very careful about operational stuff_ to prevent downtime and outages. Servers are over-provisioned to protect against spikes caused by sudden media interest. - Avoids working from home or cafe cos its more productive in an office. Productivity is important - make every minute count. He doesn't often work more than 8 hours/day. - He optimizes for spending less time and making money instead of more time and saving money. - Uses `Vagrant` and `virtualbox` on an MBP so that dev work is on the same systems as prod infra. - Uses 1 monolithic repo. Likes this approach. - _He uses contractors_!! - Usually, the biggest obstacle to building and shipping things is overthinking. What if this, what if that. You are not important at all and no one cares. No one sees. Even if you screw up the initial product launch, no one will care because they're not looking. Only when you've proved that you deserve their attention will you have any attention and visibility. - **[Think big, start small, act fast](https://hackernoon.com/think-big-start-small-act-fast-6fdab1f771ea)**. - Use boring technology, or whatever tech you want. Just make sure you're solving an actual problem. - Ignore the [cargo cult people](https://stevemcconnell.com/articles/cargo-cult-software-engineering/) and ignore the noise. Keep calm and carry on.  # [Django's place in a web development world](https://thenewstack.io/djangos-place-in-a-web-development-world-ruled-by-react/)  - Not everything needs to be an SPA - Django is a back-end framework, it'll work with an front-end framework, because separation of concerns. - To use Django with an SPA, you could use DRF, or just normal views that return JSON. - Reading this makes me want to check out React to see what all the fuss is about.  # <s>[Cache invalidation](https://yihui.org/en/2018/06/cache-invalidation/)</s>  # [Vim abbreviations](https://jovica.org/posts/vim_abbreviations/)  - Cool and all, but not as powerful as snippets I think. - Auto correcting typos: teh -> the - Expanding phrases: kr -> kind regards - Multi-line text expansion. - It really seems similar to what I'm using UltiSnips for. - I found [this](https://stackoverflow.com/questions/30266587/snippets-vs-abbreviations-in-vim) question on SO comparing abbreviations and snippets. TLDR: It's easier to add and maintain snippets than abbreviations, and you have less boilerplate with snippets than abbreviations, especially in complex cases.  # <s>[To fix the social sciences, look to the “dark ages” of medicine](https://thereader.mitpress.mit.edu/social-sciences-dark-ages/)</s>  # [Emotional resilience in leadership report](https://docs.google.com/document/d/18FfZ86PGA_uSFf425EzKXAmiFQLFBPqjqPN7iu1TZRw/preview?pru=AAABdEZGCv8*_gdPBrQH8tAPyvMfLk6Unw)  # [3 virtues of a programmer](http://threevirtues.com/)  - Laziness - The quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so you don't have to answer so many questions about it. - Impatience - The anger you feel when the computer is being lazy. This makes you write programs that don't just react to your needs, but actually anticipate them. Or at least pretend to. - Hubris - The quality that makes you write (and maintain) programs that other people won't want to say bad things about. - Also, I read a quote somewhere saying the mark of a great program is having people use it in ways you didn't expect, or something like that.  # [Is WebAssembly magic performance pixie dust?](https://surma.dev/things/js-to-asc/)  # [Yamauchi No.10 Family Office](https://y-n10.com/)  - A beautifully designed website.  # [Improve and Extend Your Text Objects With targets.vim](https://www.barbarianmeetscoding.com/blog/exploring-vim-plugins-improve-and-extend-your-text-objects-with-targets-vim)  # [A Vim Guide for Adept Users](https://thevaluable.dev/vim-adept)  - How to manipulate multiple quickfix and location lists. - What are digraphs and how to use them. - Useful keystrokes in INSERT mode. - Useful keystrokes in VISUAL mode. - Vim regular expressions. - Using shell commands in Vim. - Folding content.  # [Deep dive in CORS](https://ieftimov.com/post/deep-dive-cors-history-how-it-works-best-practices/)  # [The TTY demystified](http://www.linusakesson.net/programming/tty/index.php)  - `ps 1` - see which processes are running or sleeping. `WCHAN` tells you which   kernel event a waiting processing is awaiting. "
  },
  {
    "id": "regrets-of-the-dying",
    "objectID": "regrets-of-the-dying",
    "title": "Regrets Of The Dying",
    "tags": "uncategorized",
    "category": "Non-technical/Journal",
    "content": "  I wish that:  - I’d had the courage to live a life true to myself, not the life others expected of me. - I hadn't worked so hard. - I’d had the courage to express my feelings. - I had stayed in touch with my friends. - I'd let myself be happier.  ...the five most common regrets of terminally ill patients, as described by a palliative care nurse[ref][source](https://bronnieware.com/blog/regrets-of-the-dying/)[/ref]: "
  },
  {
    "id": "remote-working",
    "objectID": "remote-working",
    "title": "Remote Working",
    "tags": "remote,engineering",
    "category": "snippet",
    "content": "  - I live and work near Amsterdam - My manager is in Berlin - A stakeholder is in Boston - Another stakeholder is in India - Another stakeholder is in Ireland  ¯\\\\\\_(ツ)\\_/¯ "
  },
  {
    "id": "reverse-proxy",
    "objectID": "reverse-proxy",
    "title": "Proxy Servers",
    "tags": "networks",
    "category": "snippet",
    "content": "  ### Reverse proxy server  - A reverse proxy is a server. - It sits in front of other servers and forwards client requests to them. - Is a middleman or broker on behalf of origin servers.  #### Usually used to:  - Increase security (keeping the IP addresses of origin servers private makes   DDoS attacks much harder). - Optimize performance (caching). - Increase reliability (load balancing).  The client thinks that the reverse proxy _is_ the end-point server.  ### Normal proxies  - Also called a web or forwarding (normal) proxy. - Sits between client machines and hosts. - Is a middleman on behalf of the clients.  The server thinks that the client _is_ the proxy.  Source: [cloudflare](https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/) "
  },
  {
    "id": "rich",
    "objectID": "rich",
    "title": "Rich",
    "tags": "python,console,shell",
    "category": "snippet",
    "content": "  [  ![rich module](/static/images/rich-python.png)/images/rich-python.png) `python -m rich` for a demo  Cool Python module to handle terminal output with debugging and logging features. It can even record stack trace errors to html.  - [repo](https://github.com/willmcgugan/rich) - [demo videos](https://calmcode.io/rich/main.html) "
  },
  {
    "id": "ripgrep-regret",
    "objectID": "ripgrep-regret",
    "title": "ripgrep Regret",
    "tags": "ripgrep,fail",
    "category": "snippet",
    "content": "  1. Without noticing, create a .gitignore file with a single \\* in it. 2. Spend a day trying to understand why ripgrep has stopped working for only 1    project. 3. <div className='text-2xl'>&#128557;&#128557;&#128557;</div> "
  },
  {
    "id": "rpc",
    "objectID": "rpc",
    "title": "Remote Procedure Calls",
    "tags": "rpc,linux",
    "category": "snippet",
    "content": "  A RPC is when an executable causes a procedure (subroutine) to execute on another computer, It's coded as if it were a normal (local) subroutine. You don't explicitly code the details for the remote interaction. You write the same code whether the subroutine is local or remote. "
  },
  {
    "id": "running-a-binary-in-debian",
    "objectID": "running-a-binary-in-debian",
    "title": "Running a Binary in Debian",
    "tags": "debian,binary,path",
    "category": "snippet",
    "content": "  I was running a binary in Debian that was complaining about an environment variable not existing. I moved the binary into a &#36;PATH directory and logged in as a sudo user. Why did this solve the problem? "
  },
  {
    "id": "running-a-polkadot-node",
    "objectID": "running-a-polkadot-node",
    "title": "> Polkadot: Running and interacting with a full node\n",
    "tags": "uncategorized",
    "category": "Technical/Cryptocurrencies",
    "content": "  I recently set up a Polkadot node on Google Cloud Platform that could create addresses and make transactions.  Instead of building from source I used Docker. After some troubleshooting, I found the command to run is:  ```bash docker run -it -p 30333:30333 -p 9944:9944 -p 80:9933 -v /mnt/polkadot:/polkadot/.local/share parity/polkadot:latest --rpc-external --rpc-cors=all --chain westend --ws-external ```  This differs from the (current) documentation in two ways:  1.  The data volume needs to point to `/polkadot/.local/share`. The symlink that     is supposed to exist for `/data` appears to be broken in the current image.     See this GitHub [issue](https://github.com/paritytech/polkadot/issues/2482) for details.  2.  Port 9944 needs to be mapped.  3.  One of the first API calls you are likely to make to check that things are     working as expected, particularly for WebSocket connections, is to     open to a WS connection to be notified when your node syncs a new block.     The node only does this once it has caught up with its piers. Whilst it is     still syncing it will only return the current highest block when you make     the initial API call. I ended up chatting to one of the Parity devs about     this issue on discord and then on [Stack Overflow](https://stackoverflow.com/questions/66358685/polkadot-websocket-api-doesnt-listen-for-new-blocks/66365716?noredirect=1#comment117342945_66365716).  Other than that, everything went as described in the documentation. "
  },
  {
    "id": "running-through-adversity",
    "objectID": "running-through-adversity",
    "title": "Running through adversity",
    "tags": "hard-rock,running,sport",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  The toughness of elite ultra-runners is very underrated.  Just one of the problems Sabrina Stanley encountered would be enough to justify dropping out.  <IframeEmbed src='https://youtube.com/embed/bbleNcW2ub8' />  [archive](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/sabrina-stanley-interview.mp4) "
  },
  {
    "id": "rys-git-tutorial",
    "objectID": "rys-git-tutorial",
    "title": "Ry's Git Tutorial",
    "tags": "git,rys,tutorial,ryan hodson",
    "category": "Technical/Developer Tools",
    "content": "  For tracking changes to a collection of files, Git is the ubiquitous solution. It's free, robust, comprehensive, and there is a plethora of resources that are easy to find.  I usually find the commands difficult to remember though, and the concepts which Git is built on often seem counter-intuitive to me. This means I spend a lot of time searching for answers and trying to remember how I can use Git to experiment with a project without fear of losing any hard-won progress.  Ry's Git Tutorial by Ryan Hodson is the best way to learn Git that I have come across. Its simple, practical, and clear. The reader learns how to use Git by creating and maintaining a simple website[ref]This tutorial was also the first time I created a simple website, and it led to so many 'ahah!' moments. It unlocked all the web development progress that followed.[/ref] . This gives the Git commands a meaningful context, which makes them a lot easier to remember and use in the future.  The tutorial was first published in 2012 and the website which originally hosted the examples no longer exists. Each tutorial chapter starts with a link to download the project files up to that point, so the reader doesn't need to start at the beginning but can jump into the guide at any point.  Unfortunately these links no longer work and I'm going to make the materials available here so that they can continue to be useful. If the author would like to get in touch, please do. I'd like to keep this great resource available so that others can benefit from it.  [.epub](/documents/Rys-Git-Tutorial.epub) or [.pdf](/documents/Rys-Git-Tutorial.pdf) versions are available to download.  Download the example files for each module below:  - [Chapter 2: Undoing Changes](/documents/chapter2.zip) - [Chapter 3: Branches I](/documents/chapter3.zip) - [Chapter 4: Branches II](/documents/chapter4.zip) - [Chapter 5: Rebasing](/documents/chapter5.zip) - [Chapter 6: Rewriting History](/documents/chapter6.zip) - [Chapter 7: Remotes](/documents/chapter7.zip) - [Chapter 8: Centralized Workflows](/documents/chapter8.zip) - [Chapter 9: Distributed Workflows](/documents/chapter9.zip) - [Chapter 10: Patch Workflows](/documents/chapter10.zip) - [Chapter 11: Tips & Tricks](/documents/chapter11.zip) - [Chapter 12: Plumbing](/documents/chapter12.zip) - [end](/documents/chapter13.zip) "
  },
  {
    "id": "saas-metrics-that-matter",
    "objectID": "saas-metrics-that-matter",
    "title": "SaaS metrics that matter",
    "tags": "saas,entrepreneurship",
    "category": "snippet",
    "content": "  - A [blog post](https://sacks.substack.com/p/the-saas-metrics-that-matter) about SaaS metrics - A [tool](https://www.saasgrid.com/) for calculating metrics "
  },
  {
    "id": "safe-bash-scripting",
    "objectID": "safe-bash-scripting",
    "title": "Safe Bash Scripting",
    "tags": "bash",
    "category": "snippet",
    "content": "  An [example](https://t.co/MRxnbHgryD?amp=1) of a safe, good, robust bash file skeleton. "
  },
  {
    "id": "shell-comparisons",
    "objectID": "shell-comparisons",
    "title": "Shell Comparisons",
    "tags": "zsh,bash,bsh,linux,cli",
    "category": "snippet",
    "content": "  You can group shells into groups:  1. `ksh` - korn shell and zshell 2. `sh` - bourne shell and bash (the bourne again shell)  Because  - `zsh` isn't a superset of bash. - `bash` is a superset of the bourne shell. "
  },
  {
    "id": "shell",
    "objectID": "shell",
    "title": "A faster zsh",
    "tags": "shell,unix,zsh,bash,profiling",
    "category": "Technical/Developer Tools",
    "content": "  Opening up a new shell was annoyingly slow. Not terrible, but enough to notice. Its a niggle.  I wanted to find out which components were causing the most delay, so I used `time` to measure how long it took to launch a shell. Even though shells might appear to be part of the low level 'guts' of a computer, each shell is just an executable and can be treated as such.  To measure the startup speed of your shell, do:  ```zsh for i in $(seq 1 10); do /usr/bin/time $SHELL -i -c exit; done ```  ![zsh profile](/static/images/zsh_startup_speed.jpg)  This shows that it takes 0.84 seconds to start `zsh` - not terrible, but not great:  You can compare the performance of different shells by replacing `$SHELL` with `zsh`, `bash`, `fish` etc.  Here are the results if I used `BASH` instead of `zsh` - 9.3x faster! (but without useful tools and plugins):  ![bash profile](/static/images/bash_startup_speed.jpg)  Now that I can measure how long it takes to start, it would be useful to know which proccesses are causing the greatest delays. This could be done with something like `zsh -xv` which enables verbose output and xtrace. This creates a tonne of output, but doesnt inlcude timestamps. All I really want is a summary of how much time each subproccess required to run, i.e. an order blind profiler.  Add `zmodload zsh/zprof` at the start of `.zshrc` and `zprof` at the very end. Now when I start `zsh` I see the following:  ![zsh startup components](/static/images/zsh_order_blind_profiling.jpg)  Next steps - make virtualenvwrapper run faster, or asyncronously, or not at all...  Update: `virtualenvwrapper` is the biggest cause of slow loading. Using the [lazy loading](https://virtualenvwrapper.readthedocs.io/en/latest/install.html) option decreased loading time by 0.3s  ![zsh profile](/static/images/zsh_startup_speed_lazy_load.jpg) "
  },
  {
    "id": "silos",
    "objectID": "silos",
    "title": "Introduction to my doctorate research - Silos",
    "tags": "doctorate,granular flow,granular materials,phd,research,engineering,silo,thesis,vienna",
    "category": "Technical/Other",
    "content": "  ## Background  From Spring 2010 until the Autumn of 2013, I was a PhD candidate living in Vienna, Austria and working at the University of Natural Resources and Life Sciences. Before working in Vienna, I completed my Masters degree in Civil and Environmental Engineering at the University of Edinburgh.  My research quantified the effects of changing the amount of gravity acting on granular materials as they poured out of a silo. My [thesis](/documents/Mathews_J_2013_thesis.pdf) and the short [presentation](/documents/Mathews_J_2013_Defence_presentation.pdf) I used to defend it are available.  ![4 silos](/static/images/silos1/4_silos.jpeg)  ![granular materials](/static/images/silos1/granular_materials.jpeg)  Granular materials are a broad class of materials that are encountered everyday - salt, pills, breakfast cereal, sand, rice, soil, landslides are all granular materials. They are ubiquitous and occur in many different sizes and varieties.  Silos are a common type of container for storing granular materials. You pour the granular material in from the top, store it for a while, and then dispense the material in controlled quantities from the bottom.  ## Research focus  My research focussed on quantifying how changes in gravity affected the material contained inside a silo, particularly whilst the silo was being emptied. This is pertinent because engineers and scientists do not yet have a scientific understanding of how granular materials behave. Whilst gravity clearly affects a granular materials, we cannot say exactly how.  This means we can't use analytical methods to quantify the physics that occur in a real system. Instead we use empirical methods (approximations, guesses, rules-of-thumb, and knowledge of what worked in previous similar situations). This isn't necessarily bad, but it is less efficient and less reliable than an analytical approach.  ## Research techniques  ### Physical modelling  I built a small model silo (30cm tall) and put it into quite a large centrifuge (3 metre diameter). By rotating the model silo around the centre of the centrifuge at a constant speed I could simulate a higher gravity. I added high-speed cameras, pressure sensors and weighing scales so that I could measure how the material was moving once I opened the silo outlet and the silo began to empty. Photos of the experimental model I built can be seen below.  ### Numerical modelling  I also programmed a computer model (using the commercial PFC 3D software and working in the FISH scripting language) to simulate and investigate if the same behaviours could be observed numerically as physically.  The class of computer model I used is known as DEM (Discrete Element Modelling). These models work by considering every grain of material individually, usually as a sphere. If one sphere overlaps with another (i.e. the distance between the two particle centres is less than the sum of their radiuses) then a force proportional to the overlap size repels the two spheres away from each other. This simple approach is repeated over every grain or particle in the model, and produces life like behaviour in many situations. It has many advantages over 'continuum' based techniques that model groups of grains as if they were all just one big particle with unusual properties. DEM has one massive limitation, though. It requires huge amounts of computational resources - and this limits its use in industrial scenarios outside. Until computers become much, much more powerful, DEM will only be used for theoretical research and niche applications.  ## Results  When gravity increases by a factor of $x$, both the discharge rate and local velocities within the silo increase by $\\sqrt(x)$ .  That's good to know if you're planning on storing stuff on the moon, but it's also a useful step towards explaining exactly why bulk granular materials behave the way they do.  ## More Information  An overview of my research, my doctorate thesis and published papers can be downloaded below. PDFs containing 3D models and movies require flash to render, and Adobe Reader Desktop must be used in order to view them.  1.  [PhD Thesis (2013)](/documents/Mathews_J_2013_thesis.pdf) 2.  [Modeling silo discharge in a centrifuge (Powder Technology)](/documents/Mathews-Wu_2016_Model-tests-of-silo-discharge-in-a-geotechnical-centrifuge.pdf) 3.  [Experimental investigation of flow and segregation behaviour of bulk solids in silos under high gravity conditions (Particles 2013 conference proceedings)](/documents/Mathews-etal_2013_Experimental-investigation-of-flow-and-segregation-behaviour-of-bulk-solids-in-silos-under-high-gravity-conditions.pdf) 4.  [Centrifugal modelling of granular flows (Eurofuge conference proceedings)](/documents/Cabrera-et-al.pdf) 5.  [Overview of research (PhD defence, 2013)](/documents/Mathews_J_2013_Defence_presentation.pdf)  ![Model silo and camera](/static/images/silos2/model_silo_camera.jpeg)  ![Model silo inside centrifuge](/static/images/silos2/model_silo_in_centrifuge.jpeg)  ![Silo opening mechanism](/static/images/silos2/silo_open_mechanism.jpeg)  ![Centrifuge](/static/images/silos2/centrifuge.jpeg)  ![Silo Model](/static/images/silos2/silo_render.jpeg)  ![Silo wall pressure mesasurements](/static/images/silos2/silo_pressure_pads.jpeg)  ![Particle Image Velocimetry result showing average flow velocities](/static/images/silos2/silo_piv.jpeg) "
  },
  {
    "id": "site-performance",
    "objectID": "site-performance",
    "title": "Optimizing The Performance Of This Blog",
    "tags": "uncategorized",
    "category": "Technical/Web",
    "content": "  I'm coming to the end of redesigning this site. Now that the main changes have been made its fun (and good practice) to optimize the site so that it loads quickly and is optimized for SEO and accessibility.  Lighthouse is a utility built into Chrome that runs a technical audit on a webpage and assesses a wide range of features. It also provides details about how to improve the page.  My site is hosted on Github Pages and is accessed via Cloudflare, which gives me a lot of performance gains including minified HTML and CSS, caching, and super fast server response times.  I'm using Github Pages and Cloudflare for free and I think its amazing that I can get the benefits of these services without needed to pay anything. If someone knows where to look and can teach themselves using free resources, they could be read by anyone anywhere in the world. It's amazing.  Below are the lighthouse results for the blog's index page and for a recent post.  ![lighthouse score for index page](/static/images/lighthouse_index_page.png)  ![lighthouse score for a blog article](/static/images/lighthouse_article_page.png) "
  },
  {
    "id": "slavery",
    "objectID": "slavery",
    "title": "Slavery",
    "tags": "humanity",
    "category": "snippet",
    "content": "  This [article](https://www.ft.com/content/26f1a120-990f-11e5-95c7-d47aa298f769) about how people become slaves is very uncomfortable reading.  It puts a very different perspective on my life, ambitions and perceived risks. "
  },
  {
    "id": "sleep-is-good",
    "objectID": "sleep-is-good",
    "title": "Sleep",
    "tags": "sleep,lifestyle",
    "category": "snippet",
    "content": "  “It enhances your memory and makes you more creative. It makes you look more attractive. It keeps you slim and lowers food cravings. It protects you from cancer and dementia. It wards off colds and the flu. It lowers your risk of heart attacks and stroke, not to mention diabetes. You’ll even feel happier, less depressed, and less anxious.”  Why We Sleep by Dr. Matt Walker "
  },
  {
    "id": "social-media-and-the-tower-of-babel",
    "objectID": "social-media-and-the-tower-of-babel",
    "title": "Why the past 10 years of American life have been uniquely stupid",
    "tags": "social-media,tech,history",
    "category": "snippet",
    "content": "  An [article](https://www.theatlantic.com/magazine/archive/2022/05/social-media-democracy-trust-babel/629369/) in the Atlantic. "
  },
  {
    "id": "socially-acceptable-mistakes",
    "objectID": "socially-acceptable-mistakes",
    "title": "Socially Acceptable Mistakes",
    "tags": "meta,thinking,advice",
    "category": "snippet",
    "content": "  _It's more socially acceptable to make mistakes and errors of omission than commission._ "
  },
  {
    "id": "solo-founder-",
    "objectID": "solo-founder-",
    "title": "Solo founder",
    "tags": "entrepreneur,saas,maker,founder",
    "category": "snippet",
    "content": "  [Corey Zue](https://www.coryzue.com/open/) is an indie maker who made Pegasus (Django boilerplate SaaS) and a wedding place-cards product.  This is a link to his open startup metrics page.  Also check out this [similar post](reading-april-2021) which has similar links for solo SaaS founders. "
  },
  {
    "id": "some-experience-can-be-taught-some-needs-to-be-lived",
    "objectID": "some-experience-can-be-taught-some-needs-to-be-lived",
    "title": "Some experiences can be taught, but some must be lived",
    "tags": "meta,advice",
    "category": "snippet",
    "content": "  'I have learnt that failure is my greatest teacher'  \\- Georges St-Pierre "
  },
  {
    "id": "someone-elses-guiding-principles-after-20-years-of-programming",
    "objectID": "someone-elses-guiding-principles-after-20-years-of-programming",
    "title": "Someone else's guiding principles after 20 years of programming",
    "tags": "advice",
    "category": "Technical/Developer Tools",
    "content": "  This is a copy of a great article on [medium](https://alexewerlof.medium.com/my-guiding-principles-after-20-years-of-programming-a087dc55596c) by Alex Ewerloef.  I've copied it here because an article on Medium could disappear at any moment, and its too good to lose:  ---  I’ve been programming since 1999 and this year I’ve officially coded for 20+ years. I started with Basic but soon jumped into Pascal and C and then learned object oriented programming (OOP) with Delphi and C++. In 2006 I started with Java and in 2011 I started with JavaScript. I’ve worked with a wide range of businesses from robotics, fin tech, med tech to media and telecom. Sometimes I had a different hat as a researcher, CTO, TPM (technical product manager), teacher, system architect or TL (technical leader) but I’ve always been coding. I’ve worked on some products that served millions of people, and some that failed before being released. I worked as a consultant and I even had my own startup. I have spent lots of time on open source projects, closed source projects and internally open source projects (proprietary code that is developed by a community inside the company). I’ve worked with tiny microcontrollers all the way to mobile and desktop apps to cloud servers and lately serverless.  For my 20 years programming anniversary, I tried to list the top principles that have been accumulated over the years as my guiding principles through my career:  1.  Don’t fight the tools: libraries, language, platform, etc. Use as much native     constructs as possible. Don’t bend the technology, but don’t bend the problem     either. Pick the right tool for the job or you’ll have to find the right job for     the tool you got.  1.  You don’t write the code for the machines, you write it for your colleagues     and your future self (unless it’s a throw away project or you’re writing     assembly). Write it for the junior ones as a reference.  1.  Any significant and rewarding piece of software is the result of     collaboration. Communicate effectively and collaborate openly. Trust others and     earn their trust. Respect people more than code. Lead by example. Convert your     followers to leaders.  1.  Divide and conquer. Write isolated modules with separate concerns which are     loosely coupled. Test each part separately and together. Keep the tests close to     reality but test the edge cases too.  1.  Deprecate yourself. Don’t be the go-to person for the code. Optimize it for     people to find their way fixing bugs and adding features to the code. Free     yourself to move on to the next project/company. Don’t own the code or you’ll     never grow beyond that.  1.  Security comes in layers: each layer needs to be assessed individually but     also in relation to the whole. Risk is a business decision and has direct     relation to vulnerability and probability. Each product/organization has a     different risk appetite (the risk they are willing to take for a bigger win).     Often these 3 concerns fight with each other: UX, Security, Performance.  1.  Realize that every code has a life cycle and will die. Sometimes it dies in its     infancy before seeing the light of production. Be OK with letting go. Know the     difference between 4 categories of features and where to put your time and     energy:          - Core: like an engine in a car. The product is meaningless without it.         - Necessary: like a car’s spare wheel. It’s rarely used but when needed, its function decides the success of the system.         - Added value: like a car’s cup-holder. It’s nice to have but the product is perfectly usable without it.         - Unique Selling Point: the main reason people should buy your product instead of your rivals. For example, your car is the best off-road vehicle.  1.  Don’t attach your identity to your code. Don’t attach anyone’s identity to     their code. Realize that people are separate from the artifacts they produce.     Don’t take code criticism personally but be very careful when criticizing     others’ code.  1.  Tech debt is like fast food. Occasionally it’s acceptable but if you get used     to it, it’ll kill the product faster than you think (and in a painful way).  1.  When making decisions about the solution all things equal, go for this     priority:  1.  Security > Reliability > Usability (Accessibility & UX) > Maintainability > Simplicity (Developer experience/DX) > Brevity (code length) > Finance >     Performance  1.  But don’t follow that blindly because it is dependent on the nature of the     product. Like any career, the more experience you earn, the more you can find     the right balance for each given situation. For example, when designing a game     engine, performance has the highest priority, but when creating a banking app,     security is the most important factor.  1.  Bugs’ genitals are called copy & paste. That’s how they reproduce. Always     read what you copy, always audit what you import. Bugs take shelter in     complexity. “Magic” is fine in my dependency but not in my code.  1.  Don’t only write code for the happy scenario. Write good errors that answer     why it happened, how it was detected and what can be done to resolve it.     Validate all system input (including user input): fail early but recover from     errors whenever possible. Assume the user holds a gun: put enough effort into     your errors to convince them to shoot something other than your head!  1.  Don’t use dependencies unless the cost of importing, maintaining, dealing     with their edge cases/bugs and refactoring when they don’t satisfy the needs is     significantly less than the code that you own.  1.  Stay clear from hype-driven development. But learn all you can. Always have     pet projects.  1.  Get out of your comfort zone. Learn every day. Teach what you learn. If     you’re the master, you’re not learning. Expose yourself to other languages,     technologies, culture and stay curious.  1.  Good code doesn’t need documentation, great code is well documented so that     anyone who hasn’t been part of the evolution, trial & error process and     requirements that led to the current status can be productive with it. An     undocumented feature is a non-existing feature. A non-existing feature shouldn’t     have code.  1.  Avoid overriding, inheritance and implicit smartness as much as possible.     Write pure functions. They are easier to test and reason about. Any function     that’s not pure should be a class. Any code construct that has a different     function, should have a different name.  1.  Never start coding (making a solution) unless you fully understand the     problem. It’s very normal to spend more time listening and reading than typing     code. Understand the domain before starting to code. A problem is like a maze.     You need to progressively go through the code-test-improve cycle and explore the     problem space till you reach the end.  1.  Don’t solve a problem that doesn’t exist. Don’t do speculative programming.     Only make the code extensible if it is a validated assumption that it’ll be     extended. Chances are by the time it gets extended, the problem definition looks     different from when you wrote the code. Don’t overengineer: focus on solving the     problem at hand and an effective solution implemented in an efficient manner.  1.  Software is more fun when it’s made together. Build a sustainable community.     Listen. Inspire. Learn. Share.  I don’t claim to be an authority in software development. These are just the wisdom I earned along the way. I’m sure this list will be more mature after another 20 years. "
  },
  {
    "id": "spaarndam-photographs",
    "objectID": "spaarndam-photographs",
    "title": "Mist",
    "tags": "uncategorized",
    "category": "Non-technical/Photographs",
    "content": "  ![boat in the mist](/static/images/photos/boat_in_mist.jpeg)  ![path going nowhere](/static/images/photos/path_to_knowwhere.jpeg)  ![path to the stars](/static/images/photos/path_to_the_stars.jpeg)  ![floating huts](/static/images/photos/floating_huts.jpeg) "
  },
  {
    "id": "spare-time",
    "objectID": "spare-time",
    "title": "Spare time",
    "tags": "habits,advice,reflection",
    "category": "Non-technical/Learning",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  This is a list of interests I want to consider pursuing. I wrote it when I began to study for my last set of exams and my mind filled with things I'd rather be doing instead. Some of these interests are just me reacting to having no spare time for a few months, but others are decent goals and projects. Temporarily losing my spare time made me value it more.  ![free-time](/images/spare_time.jpg)  I wrote this post so that I could compare what I thought was important when I was busy to when I wasn't. Writing the list allowed me to move on without forgetting. Here's a break down of each item:  1.  'Run 10k in 50 minutes' - This is easier than I imagined. When I wrote the     list I could barely run 2k without stopping, but intended to go for a     weekly run whilst studying. I've struggled to stay energetic and healthy     during previous exam phases, so now I have a rule that I must do some mild     exercise even if I think I can't spare the time. I find running really     lowers my stress levels, and increasing my heart rate and working up a     sweat lets me sleep better and concentrate for longer. After a few weeks of     minimal running, I could run 5k easily. If I kept at it, 10k in 50 mins     would be easy. But point 2...  2.  'Be Insanity strong' - As in, do the Insanity workout programme. Again. I thought about it and decided to do P90x instead. Week 1 is going great.  3.  'Read the bible habitually' - When I was 17 I found out about Jesus and     became a Christian. In the months and years after that I'd regularly read my     bible almost every day and pray a lot. I wanted to understand, so I set a     goal of 5 chapters each day.      I read through the new testament repeatedly and read most of the old     testament during this time. I knew the scriptures well enough that a lot of     sermons became boring and obvious - I'd already studied the bible passage     being used. During this time I remember being aware that the way I thought     was different to how it would have been otherwise. My perspectives were     long-term and less me focused. I thought about what I was reading instead     of the days' headlines or social chatter. I remember enjoying the benefits     and thinking that I should keep this habit. The reasons why I think     Christianity is so wonderful are well summarised in [this     sermon](http://messages.destinyedinburgh.com/sermon/the-gospel-we-preach-a-message-for-leaders).      It's now 10 years later, and whilst my convictions are strong, my knowledge     of the bible is sadly pretty fuzzy. My thinking is clouded by the     perspectives contained in the media I consume and the conversations I'm     part of. I strongly suspect I would be acting and thinking differently if I     read my bible more, but I don't know what those differences would be.     Trouble is, it's often not obvious what the immediate benefits of     reading the bible are, you have to work for it a bit. Praying for help is     effective. The books in the bible were written to last through the ages and     across all cultures, so it's not surprising that they're not as easy to     read as something written for an English speaker in a hurry. I should stop     being in a hurry, and stop prioritising only quantifiable goals.  4.  'Think more' - On a similar note to 3, but less supernatural. If I spent     less time consuming content and a little more looking around me or walking,     I reckon I'd be more self-aware and make better decisions. This would     probably lead to a happier, more satisfying life.  5.  'Pray more' - I don't know why, but the creator of the universe wants me to     talk and share my life with him. He cares about me. This makes no sense to     me, at all. If I was God, I would not go out of my way to consider the views     and concerns of a very flawed human. But when I pray, my prayers are very     often answered. I should ask him about this.  6.  'Amazon seller?' - Amazon have this 'Fulfilled by Amazon' service,     which means you don't even need to hold the stock you want to sell.     If I choose the right products, import them cheaply from China and     reselling  them on Amazon at a profit, I end up quids in for minimal     effort and manageable risk. Sounds intriguing.  7.  'Blog about interesting data' - Here I am, blogging. I should stick     to the main topic and get technical. I was inspired by this     [blog](http://www.curiousgnu.com/) in particular.  8.  'Finish Coursera' - The data science specialization is great! It's in R, and I want to focus on Python, but I'd still like to do it. I need to consider the opportunity cost of the time committed, though.  9.  'Read for fun, history, fiction' - When I started my job, in April 2014, I     was half way through [Savage     Continent](https://read.amazon.co.uk/kp/embed?asin=B00796LLLK&asin=B00796LLLK&preview=newtab&linkCode=kpe&ref_=cm_sw_r_kb_dp_GP2Rxb3Q8MYC4),     which is an eye-opening and eye-watering history of Europe in the years     after World War 2. I see Europe through different eyes because of it.     However I only got half way though, and since April '14 I never felt I had     the free time or energy to pick it back up. This should change. When I was a     researcher, and when I was a student, I had so much more opportunity to     develop my own pursuits. Since entering the corporate world, I find myself     fighting a war of attrition to exert my personality onto my lifestyle.      Read for fiction... I'm unconvinced. What do you have at the end of     it? What can you do with it? Maybe I've just been reading the wrong authors,     but I'm going to leave this for now. Sure, you could gain an appreciation of     a different time or place, but that appreciation comes via the fictional     characters and events, its secondary. What about abstract constructs,     perspectives, morals... things that history books are ill-suited for? Great     fiction would be essential for exploring these. But for now, I'll prioritise     point 3.      <IframeEmbed src='https://read.amazon.co.uk/kp/card?asin=B00796LLLK&amp;asin=B00796LLLK&amp;preview=inline&amp;linkCode=kpe&amp;ref_=cm_sw_r_kb_dp_GP2Rxb3Q8MYC4' />  10. 'Do a photography project' - This I would love to do, but probably won't.     It would be a luxury, and the opportunity cost would be too great right     now. I'd like to shoot a series of black and white portraits, and turn them     into large prints. I think good portrait photography is uniquely impactful     and moving, choosing B&W removes distractions and leaves a subjects     humanity more exposed.  11. 'Have a list of business/product ideas' - There's no excuse for this     one, anyone can have several good ideas. It's turning them into     reality that takes skill. Need to have the ideas first, though.  12. 'Do a law MOOC' - i.e Study particular areas of law, in my own time     and at my own pace. I studied a tiny bit of law during the ACA, and     realised employment law or contract law could be really useful.     (Same for the tax system - another surprise). We only had a brief     introduction though, so if I could find the time I'd like to know     more.  13. 'Do an InfoSec or Network Security MOOC' - Its super interesting,     but not likely to be a good use of time.  14. 'Learn to fight - Krav Maga / MMA' - Ever since watching The Bourne     Identity I've wanted to learn Krav Maga, and [Georges     St-Pierre](https://youtu.be/LybrzdG96_8) made me want to train     for MMA. For now though, I'll do P90x. I can reconsider in 90 days.      <IframeEmbed src='https://www.youtube.com/embed/u0_8dzaNxhg' />  15. 'Get out of London' - My contract ends in April 2017, next summer     will be a crossroads. I hate the commute, I hate being constantly     rushed. Living in other cities has been a lot more pleasant. "
  },
  {
    "id": "split-long-output-onto-multiple-lines",
    "objectID": "split-long-output-onto-multiple-lines",
    "title": "Split Long Strings",
    "tags": "bash,linux",
    "category": "snippet",
    "content": "  Split long strings (or command outputs) onto multiple lines Find and replace a particular char (maybe `:`) with a `\\n`.  ``` ... | tr ':' '\\n'  ... | sed 's/:/\\n/g' ``` "
  },
  {
    "id": "ssh-notes",
    "objectID": "ssh-notes",
    "title": "SSH-Notes",
    "tags": "ssh,linux,security",
    "category": "Technical/Developer Tools",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ## TLDR  - Public key only on the remote server. - `ssh-keygen -t rsa <optional:email_address>` Generate a key pair and keep the private key privately on your local remote machine. - The new keys are added to `~/.ssh/id_rsa` and `~/.ssh/id_rsa.pub`. - You could reuse an existing key pair but if it gets compromised you'll need to reset several accounts. - `cat ~/.ssh/id_rsa.pub` to upload or copy a public key. - Copy all the output from the relevant line: `ssh-rsa <long-hash> user@email.com`. - Send the public key to the server. If it's your server, it goes in `~/.ssh/authorized_keys`. This file contains a list of authorized public keys, one per line.  ## Setup `SSH-Agent` to prevent passphrase prompt  - Ensure that `ssh-agent` is running `eval $(ssh-agent -s)` - Ensure that the following is in `~/.ssh/config`:  ```apache     Host *      AddKeysToAgent yes      UseKeychain yes      IdentityFile ~/.ssh/id_rsa ```  - Add the private key to your local ssh-agent `/usr/bin/ssh-add -K ~/.ssh/id_rsa`. Use the full path to ensure that the Apple version of the command is used.  # Authentication  ## Passwords and Keys  1. There are three authentication methods:     1. Keys - very secure.    1. Passwords - less secure than keys.    1. IP white lists - connect without authentication by specifying a particular IP address, I think. Presumably via some VPN or proxy.  2. Passwords are encrypted. They are conceptually familiar but can and will    be brute forced. There are tools that will block repeated attempts (e.g. fail2ban) or    block/allow authentication attempts from particular IP addresses.  3. SSH keys using public and private (or secret) key pairs and are very secure.    Keys are generated in pairs.     - The public key can be shared freely without concern.    - The secret key must be kept as secure and secret as a password.  4. To authenticate using a key pair:     - The client must have both keys (a key pair) on their computer.    - The server must have the public key in a file called `authorized_keys`.    - If the server has the private key then something has gone wrong and you should generate new keys and delete the compromised key.  5. The server stores the public keys of users who can connect as a particular    user in the file `~/.ssh/authorized_keys`. This file contains a list of    public keys, one public key on each row.  ## Handshake  1. When a client wants to connect to a server using SSH, it tells the server    which public key to use. The server then checks in the `authorized_keys` file    for the public key.  2. A unique session ID is generated and shared between the client and server.  3. If the server has the same public key that the client sent when it began    the connection attempt, the server generates a random string and encrypts    it using the public key. This random string can only be decrypted using the    private (secret) key associated with the public key.  4. The server sends the encrypted string to the client. The client decrypts it    using the secret key and combines the original random string with the    session ID. The client then hashes the combined string and sends the hash    back to the server.  5. The server already has the hash of the string combining the original random    string and the session ID. If the hash from the client matches the hash on    the server, the server can be sure that the client has the private key.  # Background  1. Secure Shell lets you securely connect to remote servers. You connect using    an account that exists on the remote server. Once you've connected you'll be    dropped into a shell session.  2. The computer you connect from is the 'local' or 'client' computer. The    computer you connect to is the 'host' or the 'server'.  3. When you're connected to the server using SSH, any commands you input from    the client are sent securely and privately through a _tunnel_ to the remote    computer, where the commands are executed.  4. SSH is implemented using the client-server model. The server must be running    a small app to listen for SSH connections. This kind of app is    called a daemon (_day-mon_). For SSH to work, the host must be    running the SSH daemon. The SSH daemon listens for connections on a specific    port (22), authenticates connections requests, and (if the connection    request is approved) it will spawn the correct environment. The correct    environment is a terminal session.  5. The client (the computer you connect from) must be running an SSH client,    which is a small app that can communicate using the SSH protocol. (A    protocol is a set of rules.) It needs to be able to receive information    about which host to connect to, which user to connect as and which    credentials to use when trying to connect.  # Source  [article](https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys) "
  },
  {
    "id": "staff-engineer",
    "objectID": "staff-engineer",
    "title": "Staff Engineer",
    "tags": "tech,career,todo",
    "category": "snippet",
    "content": "  A [site](https://staffeng.com/) about career paths after reaching 'Senior Software Engineer'. Apparently you have two main branches, either engineering management, or staff engineer.  The site references several good books about the engineering management career path. I should come back to this.  [archive](https://web.archive.org/web/20220313082116/https://staffeng.com/) "
  },
  {
    "id": "starbase-tour-with-elon-musk",
    "objectID": "starbase-tour-with-elon-musk",
    "title": "Starbase Tour with Elon Musk",
    "tags": "elon-musk,starbase,engineering",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Part 1 of an incredible interview and tour of starbase with Elon Musk  <IframeEmbed src='https://youtube.com/embed/t705r8ICkRw' />  [archive](https://us-east1-johnmathews-website.cloudfunctions.net/download?obj=movies/Starbase-Factory-Tour-with-Elon-Musk-Part-1.mp4) "
  },
  {
    "id": "start-with-finance-to-transform-it",
    "objectID": "start-with-finance-to-transform-it",
    "title": "Start with Finance to transform IT",
    "tags": "engineering,organisations,business,corporations",
    "category": "snippet",
    "content": "  Zwischenzugs [blog post](https://zwischenzugs.com/2021/07/12/if-you-want-to-transform-it-start-with-finance/) arguing that to achieve a significant change in an organisation you need need to:  1. Get funding. 1. Persuade the finance department to give you money. 1. Understand what they value. 1. Understand their cash flows. 1. Understand how and why customers or clients part with their money. 1. Understand business constraints (legal, reg, operating).  The [five whys](https://www.mindtools.com/pages/article/newTMC_5W.htm) approach to problem solving  _'Consider a deeper structural cause of cultural problems in change management: how money flows through the organisation.'_  _'If you want to transform IT in an enterprise, start with finance. If you can crack that, you've a chance to succeed with sec and controls functions. If you don’t know why it’s important to start with finance, you’ll definitely fail '_ "
  },
  {
    "id": "startup-code-audit",
    "objectID": "startup-code-audit",
    "title": "Learnings from 5 years of tech startup code audits",
    "tags": "security,startup",
    "category": "snippet",
    "content": "  A super [blog post](https://kenkantzer.com/learnings-from-5-years-of-tech-startup-code-audits/) about how to write secure code. "
  },
  {
    "id": "startup-engineering-lessons",
    "objectID": "startup-engineering-lessons",
    "title": "Startup Engineering Lessons",
    "tags": "startup,engineering",
    "category": "snippet",
    "content": "  [Lessons of a startup engineer](https://twolfson.com/2021-06-24-lessons-of-a-startup-engineer) is a great blog post from Todd Wolfson. So great that I might write notes on it like I would a book.  [archive](https://twolfson.com/2021-06-24-lessons-of-a-startup-engineer) "
  },
  {
    "id": "stoicism",
    "objectID": "stoicism",
    "title": "Stoicism",
    "tags": "philosophy",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Yesterday the YouTube algorithm suggested a video by [Daily Stoic](https://www.youtube.com/c/DailyStoic).  <IframeEmbed src='https://youtube.com/embed/X5JwF5pwR34' /> "
  },
  {
    "id": "stop-prepending-sudo-to-docker-commands",
    "objectID": "stop-prepending-sudo-to-docker-commands",
    "title": "Stop Prepending sudo to Docker Commands",
    "tags": "sudo,docker,linux",
    "category": "snippet",
    "content": "  ```bash sudo groupadd docker -> make the group sudo gpasswd -a $USER docker -> add $USER to the docker group newgrp docker -> activate the changes ``` "
  },
  {
    "id": "stop-reading-the-news",
    "objectID": "stop-reading-the-news",
    "title": "Stop reading the news",
    "tags": "humanity,culture,web",
    "category": "snippet",
    "content": "  An [article](https://fs.blog/2013/12/stop-reading-news/) from the Farnham Street blog. "
  },
  {
    "id": "sunlight",
    "objectID": "sunlight",
    "title": "Don't avoid sunlight",
    "tags": "health",
    "category": "snippet",
    "content": "  An [article](https://www.outsideonline.com/health/wellness/sunscreen-sun-exposure-skin-cancer-science/) in Outside Magazine about the health benefits of sunshine. "
  },
  {
    "id": "sync-bitcoin-core-node",
    "objectID": "sync-bitcoin-core-node",
    "title": "Sync a BTC node, quickly",
    "tags": "bitcoin,btc-core,blockchain",
    "category": "Technical/Cryptocurrencies",
    "content": "  In order to run your own bitcoin node, or lightning node, you'll need to download the entire bitcoin blockchain and then validate it. This takes ages on a magnetic disk due to the random access speed of the contents of the chainstate directory.  To remove this bottleneck, move the chainstate directory to an SSD (its only a few GB) and symlink to it from the bitcoin data directory. More details are [on the Bitcoin wiki](https://en.bitcoin.it/wiki/Splitting_the_data_directory). When the sync is complete, replace the symlink with the actual chainstate directory. "
  },
  {
    "id": "teaching-kids-about-money",
    "objectID": "teaching-kids-about-money",
    "title": "Teaching Kids About Money",
    "tags": "parenting,kids,money,teaching",
    "category": "snippet",
    "content": "  _Teaching my kids about money and work is having an effect._  _Yesterday, my daughter made a painting for me and asked my to buy it using pretend money._ "
  },
  {
    "id": "test-driven-development",
    "objectID": "test-driven-development",
    "title": "Test Driven Development",
    "tags": "python,django,testing,web-app",
    "category": "Technical/Developer Tools",
    "content": "  Test Driven Development was mind-bending when I first grappled with it:  - 'Write a test for the code before you write the code' - 'Assert that your code matches your expectations by understanding _all_ the inputs and _all_ the outputs for _every_ function or method I write'.  Last summer I was building a web app and began to break things unintentionally when adding new features. This soon led to lots of clicking around different pages to test if stuff was still working each time I made an update.  This led to me thinking there must be a better way, which eventually brought me to Test Driven Development (TDD).  It should have just led me to writing tests, which it did. But googling whatever I googled got me down the TDD rabbit hole rather than just the 'write some tests' rabbit hole. Write tests for your code before you write the code. Write tests for bugs you've fixed to check they stay fixed. Write tests as a kind of documentation to show what stuff is supposed to be doing. Errr...  Django was a big enough pile of abstractions as it was. Views, ORMs, mixins, serializers... Trying to add factories and fixtures into that took some getting used to. But eventually I made some progress, and now I quite enjoy running coverage reports to keep coverage _close_ to 100%[ref]Which is fun and all, but testing for the sake of it doesn't necessarily stop bad things happening. Its very possible to write a test that covers the code you've just written without ensuring that _only_ the intended behaviours happen.[/ref].  Some of the main things I've learnt about writing tests:  1. Use PyTest as much as possible rather than other testing libraries - its `assert` statements are more intuitive than Django's own testing framework, and you can use it in any Python codebase, not just Django. It has lots of extensions and seems good at getting the job done fairly easily. 2. Write tests as you go. I haven't (yet) reached the elevated level of writing    tests before I write the code to be tested, though I see why that would    sometimes be useful. I do think writing tests sooner rather than later is    best though, ideally as soon as you've got a basic version of your feature working. 3. Use `Coverage` to show you which code is covered by your tests, and which    branches or edge cases are not. But be warned, it doesn't tell you if the    test is useful or not, only that it passes and which methods or functions it    uses. 4. Fixtures are great for keeping tests fairly DRY. `Freezegun` is great for    testing anything to do with dates and times. 5. Static type checkers, like `Mypy`, get more attractive in proportion to    codebase complexity and size. "
  },
  {
    "id": "the-3-2-1-backup-rule",
    "objectID": "the-3-2-1-backup-rule",
    "title": "The 3-2-1 backup rule",
    "tags": "archive,data",
    "category": "snippet",
    "content": "  - **3 copies, 2 types of media, 1 copy off-site** - Have 1 primary backup and 2 duplicates, in additional to the original data. - NAS, USB drive, Cloud storage, Server, Glacier, etc  For example, your laptop could be backed up to a NAS, a server, and glacier storage. Or 2 NAS and 1 archival cloud storage. "
  },
  {
    "id": "the-dangers-of-social-media",
    "objectID": "the-dangers-of-social-media",
    "title": "The dangers of social media",
    "tags": "technology,mobile,social-media",
    "category": "snippet",
    "content": "  A [ledger](https://ledger.humanetech.com/) (what's a ledger? It's a webpage) from the 'Center For Humane Technology' showing some of the dangers of social media.  The 'Do unto others' section is outstanding. It describes the views of some tech company leaders, including how they limit usage of devices and social media for themselves and their kids. "
  },
  {
    "id": "the-worst-volume-control-ui",
    "objectID": "the-worst-volume-control-ui",
    "title": "The Worst Volume Control UI",
    "tags": "ui",
    "category": "snippet",
    "content": "  Hilarious article from [UI Collecitve](https://uxdesign.cc/the-worst-volume-control-ui-in-the-world-60713dc86950) showing the results of a competition to design the worst possible volume control interface. 😂 😂 😂 "
  },
  {
    "id": "thomas-aquinas",
    "objectID": "thomas-aquinas",
    "title": "Thomas Aquinas",
    "tags": "theology,history",
    "category": "snippet",
    "content": "  His [works](https://aquinas.cc/la/en/~ST.I) in English and Latin. "
  },
  {
    "id": "time-until",
    "objectID": "time-until",
    "title": "Übersicht widget: Time Until\n",
    "tags": "applescript,coffeescript,javascript,time until,übersicht,widgets",
    "category": "Technical/Web",
    "content": "  In a [previous post](time-since) I described how I was introduced to CoffeeScript via [Übersicht](http://tracesof.net/uebersicht/), the desktop widget app for OS X, and eventually published the '[Time Since](http://tracesof.net/uebersicht-widgets/#time_since)' widget.  Seeing a few people download the widget was really satisfying, and I was soon wondering what else I could publish. As a pragmatic engineer, it seemed clear to me what the next widget should do: If my first widget calculated the time since an event, the next should calculate the time until an event. I set out to create the companion to 'Time Since' and improve upon the underlying code.  My first code design choice was to cut out the use of an Apple Script and calculated everything in one CoffeeScript file. It would be more efficient and easier to read.  Unfortunately I soon began to realise why the original widget I'd based 'Time Since' on had used AppleScript to calculate the time elapsed. Date-Times are fiddly to work with in many languages, and this is true in JavaScript also.  My code began to look increasingly like spaghetti as I tried to achieve 6 key features:  1.  Calculate the number of months and days between two dates     (complicated by the varying number of days in different months) 2.  Add the option to specify the level of detail in the output text (to     the minute, to the hour, to the day, etc.) 3.  Remove any 0 amounts from the output ('2 Months and 5 Hours' not '2     Months, 0 Days and 5 Hours') 4.  Add the option to abbreviate times ('years' → 'y', 'hours' → 'h',     'and' → '&', etc.) 5.  Output a grammatically correct sentence (correct pluralisation and     comma separated terms, with an 'and' between the last two terms) 6.  Prepend and append users defined strings  After a few frustrating hours, it was clear that it would be a lot easier to modify the existing AppleScript rather than reinvent the wheel in JavaScript. I decided to use it instead of using only JavaScript as I knew the AppleScript file could correctly consider the number of days in the months between the 2 dates (feature 1), and it contains a function to pluralise the correct parts of the string (feature 5).  The remaining features were added by using a combination of if statements and arrays. The if statements simply ask if an amount is equal to zero. If not, then it's appended to an array of terms to include in the output. At the end of this code chunk it's possible to ask how many non-zero terms to include in the output. An array with length one less than the number of output terms is created and filled with commas with an 'and' in the final position.  The two arrays are combined in the correct order by looping through the index of the longer array and appending each term to a final array. The final array is the output.  _'[Time Until](http://tracesof.net/uebersicht-widgets/#time_until)'_ can be downloaded from the [Übersicht](http://tracesof.net/uebersicht/) [widgets gallery](http://tracesof.net/uebersicht-widgets/). I think another useful feature would be an option to specify the output only in terms of a chosen amount, such as weeks or days. Maybe I'll do that in the future. "
  },
  {
    "id": "tmux-sessions",
    "objectID": "tmux-sessions",
    "title": "Tmux sessions",
    "tags": "tmux,cli",
    "category": "snippet",
    "content": "  - List of sessions: `<prefix> s` - Last session: `<prefix> Z` - Rename session: `<prefix> $` - Rename window: `<prefix> ,`  - Previous session: `<prefix> (`  For last session I used the following key bind:  ``` bind Z switch-client -l ``` "
  },
  {
    "id": "tmux-window-reorg",
    "objectID": "tmux-window-reorg",
    "title": "Reorganize tmux windows",
    "tags": "tmux,macos,linux,cli",
    "category": "snippet",
    "content": "  `swap-window -s 3 -t 1` "
  },
  {
    "id": "tmux",
    "objectID": "tmux",
    "title": "Tmux tutorials",
    "tags": "tmux",
    "category": "snippet",
    "content": "  A handy [site](https://waylonwalker.com/tmux-nav-2021/) with lots of tmux info, including how to open a pop-up window to fzf another session. "
  },
  {
    "id": "tools-to-help-children-learn-to",
    "objectID": "tools-to-help-children-learn-to",
    "title": "Tools to help children learn to",
    "tags": "children,learning",
    "category": "Snippet",
    "content": "  A [list](https://jamilhallal.blogspot.com/2022/02/6-interesting-resources-to-encourage-your-child-to-learn-to-code.html) of sites that help children learn to code. "
  },
  {
    "id": "tove-lo-habits",
    "objectID": "tove-lo-habits",
    "title": "Tove Lo - Habits",
    "tags": "pop",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Brutal loneliness.  <IframeEmbed src='https://youtube.com/embed/SYM-RJwSGQ8' />  [wikipedia](https://en.wikipedia.org/wiki/Tove_Lo#Songwriting) "
  },
  {
    "id": "trainging-knowledge-confidence-victory",
    "objectID": "trainging-knowledge-confidence-victory",
    "title": "Training → Knowledge → Confidence → Victory",
    "tags": "quote,caesar,wisdom",
    "category": "snippet",
    "content": "  'Without training, they lacked knowledge. Without knowledge, they lacked confidence. Without confidence, they lacked victory.”  \\- Julius Caesar "
  },
  {
    "id": "training-zones",
    "objectID": "training-zones",
    "title": "Training Zones",
    "tags": "running,training,exercise",
    "category": "snippet",
    "content": "  import IframeEmbed from '../components/IframeEmbed'  Jack Daniels' book about [running](https://www.amazon.com/Daniels-Running-Formula-Jack-Tupper/dp/1450431836) has a training plan that seems to be highly regarded.  ![training](/static/images/training-graph.png)  - LT1 - 75% of maximum heart rate. ~145BPM maybe (for running). - LT2 - Average heart rate for a maximum sustained effort for 1 hour.  ### Zone 1  - Trains your body to use fat stores as energy. - Increases your oxidative capacity. - Trains slow-twitch muscle fibres. - You can speak a full sentence without taking a breath.  ### Zone 3  - Trains your body to use carbohydrates as energy. - Trains your glycolytic system. - Increases your ability to mitigate lactic acid. - Trains fast-twitch muscle fibres. - You can barely speak in this zone.  ### Training  - Zone 2 is not a good place to train, it's middle of the road and not an efficient use of time or effort. - 80% of training should be in zone 1. - We have much more energy stored as fat than we do as carbs.  <IframeEmbed src='https://youtube.com/embed/F3QcX58i3WE' /> "
  },
  {
    "id": "tweets-april-2021",
    "objectID": "tweets-april-2021",
    "title": "Tweets - April 2021",
    "tags": "twitter",
    "category": "Non-technical/Journal, Technical/Other",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # Front-End  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'> 6 website for top landing page inspiration<br></br><br></br>• onepagelove .com by <a href='https://twitter.com/robhope?ref_src=twsrc%5Etfw'>@robhope</a> <br></br>• lapa .ninja by <a href='https://twitter.com/nguyendangtinh?ref_src=twsrc%5Etfw'>@nguyendangtinh</a> <br></br>• landingfolio .com by <a href='https://twitter.com/dannypostmaa?ref_src=twsrc%5Etfw'>@dannypostmaa</a><br></br>• saasframe .io by <a href='https://twitter.com/AntoineMilkoff?ref_src=twsrc%5Etfw'>@AntoineMilkoff</a><br></br>• saaslandingpage .com by <a href='https://twitter.com/Cruip_com?ref_src=twsrc%5Etfw'>@Cruip_com</a> <br></br>• saaspages .xyz by <a href='https://twitter.com/Versoly?ref_src=twsrc%5Etfw'>@Versoly</a></p>&mdash; Jim Raptis (@d__raptis) <a href='https://twitter.com/d__raptis/status/1382240459288895491?ref_src=twsrc%5Etfw'>April 14, 2021</a> </blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  # Entrepreneurship  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'>anyone interested in a fun <a href='https://twitter.com/microacquire?ref_src=twsrc%5Etfw'>@microacquire</a> challenge?<br></br><br></br>maybe 90 or 180 days from start to finish to build and sell a tiny company in public?<br></br><br></br>would be really great M&amp;A practice for my fellow founders</p>&mdash; Jim Bisenius (@jim_bisenius) <a href='https://twitter.com/jim_bisenius/status/1382169652403564546?ref_src=twsrc%5Etfw'>April 14, 2021</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  ## Mental Models  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Tobi&#39;s favorite example of FIRST PRINCIPLES is a Truck driver.<br></br><br></br>His truck was sat still for 8 HOURS on THANKSGIVING waiting for his cargo to be unloaded when he realized...<br></br><br></br>&quot;Why not take the WHOLE trailer off the back of my ship rather than unloading + reloading each item?&quot;</p>&mdash; George Mack (@george__mack) <a href='https://twitter.com/george__mack/status/1262509025515786248?ref_src=twsrc%5Etfw'>May 18, 2020</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'>LUTKE LEARNING 6 - TALENT STACK LED BY CURIOSITY &gt; MBA <br></br><br></br>He didn&#39;t have an MBA. He didn&#39;t grind 100-hour workweeks. <br></br><br></br>Instead, he played video games (which led to coding) and he snowboarded (which led to an online snowboarding store). <br></br><br></br>This &#39;Talent Stack&#39; led to Shopify.</p>&mdash; George Mack (@george__mack) <a href='https://twitter.com/george__mack/status/1262509059841953801?ref_src=twsrc%5Etfw'>May 18, 2020</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  A super long thread, worth reading it all:  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Josh Waitzkin might be the most INTERESTING person alive.<br></br><br></br>He doesn&#39;t have Twitter. And he barely uses the internet.<br></br><br></br>I&#39;ve compiled my favorite 5 MENTAL MODELS of his below.<br></br><br></br>THREAD...</p>&mdash; George Mack (@george__mack) <a href='https://twitter.com/george__mack/status/1292206014746558471?ref_src=twsrc%5Etfw'>August 8, 2020</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  ## Agency  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'>1/ HIGH AGENCY <br></br><br></br>Once you SEE it - you can never UNSEE it. <br></br><br></br>Arguedbly the most important personality trait you can foster. <br></br><br></br>I&#39;ve thought about this concept every week for the last two years since I heard <a href='https://twitter.com/EricRWeinstein?ref_src=twsrc%5Etfw'>@EricRWeinstein</a> discuss it on <a href='https://twitter.com/tferriss?ref_src=twsrc%5Etfw'>@tferriss</a>&#39; podcast. <br></br><br></br>THREAD...</p>&mdash; George Mack (@george__mack) <a href='https://twitter.com/george__mack/status/1068238562443841538?ref_src=twsrc%5Etfw'>November 29, 2018</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  ## Razors  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'>THREAD: 15 of the most useful razors and rules I&#39;ve found.<br></br><br></br>Rules of thumb that simplify decisions.</p>&mdash; George Mack (@george__mack) <a href='https://twitter.com/george__mack/status/1350513143387189248?ref_src=twsrc%5Etfw'>January 16, 2021</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  # Crypto  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'> Now let’s compare this to the stock-to-flow model. Below I added in the S2F model, which is the aforementioned inflation rate regressed against price. /10 <a href='https://t.co/eGRXIux6K2'>pic.twitter.com/eGRXIux6K2</a></p>&mdash; Jurrien Timmer (@TimmerFidelity) <a href='https://twitter.com/TimmerFidelity/status/1382026424014548995?ref_src=twsrc%5Etfw'>April 13, 2021</a></blockquote><script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script>  <blockquote class='twitter-tweet'><p lang='en' dir='ltr'><a href='https://twitter.com/hashtag/Bitcoin?src=hash&amp;ref_src=twsrc%5Etfw'>#Bitcoin</a> is looking strong at RSI 92. Still not above RSI 95 like 2017, 2013 and 2011 bull markets. I calculated BTC price needed for RSI 95 at April close: $92K. Let&#39;s see what the Coinbase IPO will do today🚀 <a href='https://t.co/UTvdFWFhDK'>pic.twitter.com/UTvdFWFhDK</a></p>&mdash; PlanB (@100trillionUSD) <a href='https://twitter.com/100trillionUSD/status/1382282077429719040?ref_src=twsrc%5Etfw'>April 14, 2021</a></blockquote> <script async src='https://platform.twitter.com/widgets.js' charSet='utf-8'></script> "
  },
  {
    "id": "two-years-of-vim",
    "objectID": "two-years-of-vim",
    "title": "Two Years Of Vim",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  I've been feeling very comfortable with my Vim + Tmux setup recently. Navigating around shells and files isn't taking much mental effort anymore. Wohoo!  It's taken about 2 years of working full time with vim to get to the stage where the commands are so intuitive that:  1.  I pepper text files outside of vim (email, notes, etc) with vim keys     accidentally - `j` `k` `x` etc  2.  I can't remember what the command is to do something if I'm not actually     doing it. When I need to do an action, I do it from muscle     memory and I only pay attention to the underlying key press if something     goes wrong.      This is noticeable when trying to find an unbound key combination for some     new action, or when reading an article about vim and thinking 'that's new'     when actually I've been doing it without noticing.  3.  A pleasant surprise has been that it doesn't take much effort to     rebind a single command and retrain myself to use it. This is presumably     because the mental effort for all the other commands has become negligible.     In the early days, retraining a key combination took a lot more effort     because I was already making an effort to get used to doing things in Vim.  4.  I can work even when my vision is blurry (and my speech slurred and my head     heavy) because I can use text objects and navigation commands to get to     where I know text is. I'm not saying I _should_ work when I'm that tired,     but I can, if I'm already familiar with the code/file.. "
  },
  {
    "id": "ultra-running-benchmarks",
    "objectID": "ultra-running-benchmarks",
    "title": "Ultra-running benchmarks",
    "tags": "courtney-dauwalter,running,150km,jeff-pelletier",
    "category": "snippet",
    "content": "  - 7 days/week - 25 km/day - Start easy. Last 50% begin to move through the field. - 40% - 50% of entrants DNF - 90% of the course is runnable - 50km: 6:10 min/km (Diez Vista 50km) - 50km: 7:25 - 8:00 min/km (Beaver Flat 50 JP) - 160km: 10:35 min/km (JP) - 150km: 6:30 - 8:00 min/km (UTMB CD) - training: 6:10 is slow enough to stay fresh. 5:10-5:30 is fast. "
  },
  {
    "id": "understanding-all-of-python-through-its-built-ins",
    "objectID": "understanding-all-of-python-through-its-built-ins",
    "title": "Understanding all of Python, through its built-ins - Notes",
    "tags": "python,programming",
    "category": "Technical/Developer Tools",
    "content": "  A long and interesting article [article](https://sadh.life/post/builtins/) about Python.  Also this [article](https://treyhunner.com/2019/05/python-builtins-worth-learning/) by Trey Hunner.  On a related nots, I remember Aaron Maxwell (of Powerful Python) suggesting that reading the source code for modules you use all the time is a great way to see high quality code and to stretch your understanding.  Notes on 'Understanding all of Python, through its built-ins': [wip] "
  },
  {
    "id": "understanding-gcp-charges",
    "objectID": "understanding-gcp-charges",
    "title": "Understanding GCP charges",
    "tags": "google-cloud-platform",
    "category": "snippet",
    "content": "  A clear [article](https://www.theappliedarchitect.com/what-the-heck-are-these-cloud-storage-buckets/) solving most of my problems around understanding why I'm incurring charges on Google Cloud Platform (Gcloud, GCP) when I'm clearly within their free usage limits.  The deployment costs section in [this page](https://cloud.google.com/functions/pricing#deployment_costs) is also useful. "
  },
  {
    "id": "uninstall-all-pip-packages",
    "objectID": "uninstall-all-pip-packages",
    "title": "Uninstall all pip packages",
    "tags": "python",
    "category": "snippet",
    "content": "  In case you want to reset your virtualenv:  ```python pip freeze | xargs pip uninstall -y ``` "
  },
  {
    "id": "unison-helper",
    "objectID": "unison-helper",
    "title": "Unison helper",
    "tags": "linux,syncronization",
    "category": "Technical/Developer Tools",
    "content": "  [Unison](https://www.cis.upenn.edu/~bcpierce/unison/) is a file synchronization tool that works across operating systems. It can sync in both directions and works for collections of directories and files.  I wanted to sync projects between my local machine and a dev machine reliably and simply. Using git to push to an origin and then pull from the other side wasn't simple enough.  Unison can power the synrconization, but I wanted some nice convenient way to run the syncronization steps for an entire project, even if I were in a subdirectory. I also wanted the location of the project on the other machine to be found automatically, so that I didn't need to think about paths and couldn't accidentally move files to the wrong location.  With that in mind, I decided that:  1.  The project root is the same as the git root. The git project root can be found using: `localProjectRoot=$(git rev-parse --show-toplevel)` 1.  The location of the project on the remote dev-box should be specified in     some configuration file. I decided to create a `.remoteprojectroot` file the project's (local) root directory: `remoteProjectRoot=$(cat $localProjectRoot/.remoteroot)`  I then created the following function which lets me run `uni` from anywhere within the project on my local machine, and have the project state synced to the remote dev-box.  ```shell uni() {   host=<host>   user=<user>   localProjectRoot=$(git rev-parse --show-toplevel)   remoteProjectRoot=$(cat $localProjectRoot/.remoteroot)   echo 'Local Project Root: '$localProjectRoot   echo 'Remote Project Root: '$remoteProjectRoot   unison -batch -color true $localProjectRoot ssh://$host@$user/$remoteProjectRoot } ```  TODO:  1.  Stop syncronization if `remoteProjectRoot` can't be found. "
  },
  {
    "id": "unison",
    "objectID": "unison",
    "title": "Unison",
    "tags": "syncronization,linux,macos,infrastructure",
    "category": "snippet",
    "content": "  - If you can `ssh` into the server then Unison should work. - Install the same version on the client and on the server.  To sync the contents of `dir b` into `dir a`:  ```shell unison -batch -color true <dir-a> ssh://<user>@a<host>/<dir-b> ```  ## Setup  1.  Download the binary file with `wget` 1.  `chmod +x &lt;file&gt;` 1.  copy the executable somewhere on your path like `/usr/local/bin` 1.  `unison -doc tutorial` > `remote method` > `remote shell method` 1.  use a filewatcher to sync on change, or use cron to sync every n minutes  You can also use unison to sync files on the same computer.  ## References  [gist](https://gist.github.com/asksven/ee38dbe5bdab7e39aa133a1df24dd034)  ## Background  Recently I needed to work on a codebase that was on a remote machine whilst still using my local workflow and developer tools.  Vim's built in `scp://` functionality isn't versatile enough - i wanted to use `fzf.vim` to search for text across the code base. This led me to `rsync`, `sshfs`, and eventually `unison`. "
  },
  {
    "id": "upgrading-cryptographic-libraries",
    "objectID": "upgrading-cryptographic-libraries",
    "title": "Upgrading Cryptographic Libraries",
    "tags": "hashing,versioning",
    "category": "snippet",
    "content": "  [Blog post](https://gcollazo.com/eventually-you-will-need-to-upgrade-the-crypto/) about how to make it easier to upgrade a cryptographic or hashing library.  Django encodes passwords for database storage like this:  ```text <algorithm>$<iterations>$<salt>$<hash> ```  Interestingly, Giovanni Collazo emphasises that we should **design systems for change**, which initially seems pretty close to contradicting **YAGNI**, but the answer lies in the context. "
  },
  {
    "id": "useful-blog",
    "objectID": "useful-blog",
    "title": "An interesting blog",
    "tags": "linux,shell,fzf,workflow,zsh,bash,builtin",
    "category": "snippet",
    "content": "  Just found a really useful [blog](https://seb.jambor.dev)  Interesting [discussion](https://seb.jambor.dev/posts/cd-is-not-a-program/) about the difference between builtins and executables,  Nice examples of using `fzf` to [improve workflows](https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/). "
  },
  {
    "id": "useful-business",
    "objectID": "useful-business",
    "title": "Useful Business",
    "tags": "entrepreneur,saas",
    "category": "snippet",
    "content": "  _[analystsnow.com](http://analystsnow.com) looks like a really useful business._ "
  },
  {
    "id": "using-rss",
    "objectID": "using-rss",
    "title": "Using RSS",
    "tags": "uncategorized",
    "category": "Non-technical / Learning",
    "content": "  ### Updated: 10 Feb 2021  I found a [blog post](https://brandur.org/fragments/rss-abandon) which is surprisingly similar to my thoughts on RSS feeds, but better presented and thought through. The post mentions the idea that 'RSS is about capturing the long tail of blogs that don't post frequently' [ref][https://marco.org/2013/03/26/power-of-rss](https://marco.org/2013/03/26/power-of-rss)[/ref].  This idea crystalised why I was so glad I'd started using RSS feeds again. If readers use RSS, then authors don't need to concern themselves with attention. This removes pressure on the author to post frequently and lets them focus on quality over quantity. News feeds and ad supported platforms have fundamentally different mechanics and incentives.  With RSS I can let good quality content come to me, on its own schedule. I don't need to remember to look for it, and the authors don't need to remind me that they exist.  ## Google Reader  RSS is a very effective way of having good quality information come to you. Back in 2008, I used to use Google Reader to subscribe to RSS feeds. I was an aspiring photographer back then and I remember being subscribed to around 80 blogs. Each day I'd read articles from whoever had posted something new, without needing to visit their websites or remember who they are or that I'd subscribed to their blog. The authors didn't need to optimize their output according to an opaque and changing algorithm either - they didn't need to optimize article length, tags, post frequency, image inclusion or linked content. They could write how they wanted to, which I suspect leads to higher quality content.  ## Social Media  A few years later Google Reader was closed down, presumably because using RSS didn't fit with Googles advertising model. I was unaware of it at the time but I imagine it sent shockwaves through blogging communities and probably upended many businesses. I mostly stopped reading blogs.  Facebook was growing fast, Instagram felt new and exciting, and content was moving onto 'platforms', or into walled gardens. And as they kept on growing the average quality of the content decreased.  Twitter is like this now I think. There are some real diamonds to be found from time to time, but there's a lot of mud too. Mostly its just mud, but the occasional diamond can have outsized benefits.  RSS isn't like this. I choose the contents of my 'news feed', and each article can be much longer than a Tweet, or a caption to a photo, or a status update. It's hard to write well and to create an interesting or useful blog post, and that makes it harder to dilute quality with entertaining distractions. I have complete control about what content I see, and I can change it whenever I want. The process is designed around me.  ## Reeder5  I used `netNewsWire` for a few weeks, but it couldn't sync between my laptop and phone, so I bought `Reeder 5`. It's got a few unusual design patterns, but it works well and has all the features I want. I've been unsubscribing from email newsletters and subscribing to the RSS feed instead.  It keeps my inbox quieter, and it feels good to have a 'separation of concerns'. It makes it easier to read interesting content without being distracted. "
  },
  {
    "id": "using-unix-utilities-to-analyse-and-update-multiple-files",
    "objectID": "using-unix-utilities-to-analyse-and-update-multiple-files",
    "title": "Unix: Utilities To Analyse And Update Multiple Text Files\n",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  As part of the redesign of this blog I wanted to make an article's category more meaningful. Previously, I simply picked a handful of categories and then assigned a single category to each post. This method becomes limiting when an article is relevant to multiple categories.  Also, using nested categories seems like a good way of grouping similar content and allowing more nuanced filtering of interests.  As I considered how to update the categories of existing articles, I realised this would be a good opportunity to practice analyzing and updating text files using unix utilities.  Here is how I reviewed and updated the categories of my existing articles:  I use Pelican to generate the static files for this site. It converts markdown into HTML. Metadata for each article is set at the beginning of a file, the title is set by typing `Title: ...` and similarly the category is set by typing `Category: ...` on its own line.  To locate, analyse and update my existing categories, I would therefore need to find all the markdown files which have a row that begins with `Category: `  - `grep -h ‘Category:’ **/*.md` - prints each search result. - `grep -h ‘Category:’ **/*.md | sort` - prints and sorts each search result. - `grep -h ‘Category:’ **/*.md | sort | uniq -c` prints and sorts each search   result, then counts how many occurrences of each unique result there are.  I had some repeat results though because some rows had white space at the end, so in order to make these the same, I needed to remove trailing whitespace:  - `grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c`  This gave me the following results:  ```shell 6 Category: 2 Category:Data 16 Category:Disintermediation 2 Category:Engineering 2 Category:Front-end 15 Category:General 15 Category:Startups 8 Category:Tools ```  Category is repeated and isn't needed:  - `grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c | sort | sed 's/Category://g'`  This gives me the following output, which is acceptable:  ```shell 2 Data 2 Engineering 2 Front-end 6 8 Tools 15 General 15 Startups 16 Disintermediation ```  ## New Categories  The next stage was to begin updating these categories with the new, nested categories. I've decided to try splitting the categories into technical and non-technical groups.  I can imagine splitting `Technical > Data` even more in future, perhaps having `Data Analytics`, `Data Science`, and `Data Engineering` as sub categories.  - Technical   - Data   - Developer Tools   - Web   - Cryptocurrency   - Civil Engineering - Not technical   - Entrepreneurship   - Family   - Self   - Career  I `cd` into the directory containing the markdown files, and then to change all the articles with `Category: Tools` to `Category: Technical/Developer Tools` I did:  - `grep -l 'Category: Tools' *.md | xargs sed -i 's/Category: Tools/Category: Technical\\/Developer Tools/g'`  If I want to see a list of files containing `Category: General`:  - `grep -H 'Category: General' *.md`  If I want to see just the file names, then:  - `grep -l 'Category: General' *.md`  # Update  Since writing this post I've modified the categories a few times. The commands I run to switch out categories are as follows:  ```sh export oldName=Lifestyle; export newName=Living grep -l 'Category: .*Non-technical/$oldName' content/articles/*.md | xargs sed -i '' 's/Non-technical\\/$oldName/Non-technical\\/$newName/g' ```  Notes:  - Double quotes are not the same as single quotes. You need to use them if you   want to access variables or commands inside a string. - `.*` is a wildcard operator allowing any number of characters. It's   required when an article belongs to multiple categories. "
  },
  {
    "id": "validating-cloudflare-analytics",
    "objectID": "validating-cloudflare-analytics",
    "title": "Validating CloudFlare analytics",
    "tags": "uncategorized",
    "category": "Technical/Web",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  ## A mystery  CloudFlare give me two different measures of how many people have visited my website, one using their Analytics product and other from their new Web Analytics product. I get very different results for page views and number of visitors. I also get a third distinct set of results from my own [analytics tool](analytics).  ## Possible Reasons  The reasons for this don't seem to be explained anywhere obvious, but I think it could be caused by ad blockers preventing the JavaScript used for the Web Analytics product. The normal, (not Web) Analytics product might derive its results from server side events, which would catch everything including bots and RSS clients, and be unaffected by ad blockers.  Most of my visitors read the technical articles and therefore the audience is probably very technical and likely to be using an ad blocker. If this is the case then one way to test my hypothesis would be to write some articles that appeal to a non-technical audience who are less likely to use an ad blocker. In this case I would expect the two analytics methods to agree more closely.  ## Comparison  I made some screen shots at 11pm on June 29$^{th}$ and compared the results from the CloudFlare [Analytics](https://www.cloudflare.com/analytics/), CloudFlare [Web Analytics](https://www.cloudflare.com/web-analytics/), and my own [analytics tool]({filename}/pages/website-analytics.md).  CloudFlare's (normal) analytics say I've had 234 unique visitors. But their Web Analytics tool says I've had 11 visitors. My own tool reports 12 unique visitors.  Why are these results so different? Maybe one measure might be including bots and another might only be trying to report real people using normal browsers, but the difference seems too high for that.[ref]CloudFlare do tell me they've blocked 199 attacks in the last month, but I don't think this explains the difference.[/ref] I'd also expect real usage to fall when its night in the countries I get most traffic from, which I don't see. Perhaps the difference is caused by 95% of my readers are using an ad blocker.  My own analytics [tool]({filename}/pages/website-analytics.md) can't give results from a rolling 24 hour window, it only groups data by day. Therefore I recorded the values at 11pm, which should be close enough. My simple method of logging IP addresses when a page is loaded and counting the unique IP addresses each day says that I've had 12 unique users. Much closer to the CloudFlare analytics beta result, but I wouldn't expect my bespoke tool to be blocked by an Ad Blocker.  If it were as simple as concluding that my own results agree with the CloudFlare analytics beta then that might be enough. But they only agree on this particular metric. I've logged 47 page views today using my own tool but the CloudFlare Analytics beta reports only 11 page views[ref]With an average load time of 90ms - pretty snappy if it can be believed.[/ref].  Please let me know on [twitter](https://twitter.com/johnmathews) if you have any ideas!  ## CloudFlare Analytics  [  ![cloudflare analytics tab](/static/images/cloudflare/cloudflare analytics tab.png)/images/cloudflare/cloudflare analytics tab.png)  ## CloudFlare Web Analytics  [  ![cloudflare analytics beta](/static/images/cloudflare/cloudflare analytics beta.png)/images/cloudflare/cloudflare analytics beta.png)  ## My own analytics tool  [  ![homebrew analytics](/static/images/cloudflare/homebrew_analytics_visitors.png)/images/cloudflare/homebrew_analytics_visitors.png) "
  },
  {
    "id": "view-and-change-settings-for-gcloud-cli",
    "objectID": "view-and-change-settings-for-gcloud-cli",
    "title": "View and change settings for GCloud CLI",
    "tags": "google-cloud-platform,cli",
    "category": "snippet",
    "content": "  ```bash gcloud config set account email@example.com ```  ```bash gcloud auth list ``` "
  },
  {
    "id": "vim-built-in-color-names",
    "objectID": "vim-built-in-color-names",
    "title": "Vim built-in color names",
    "tags": "vim",
    "category": "snippet",
    "content": "  Script to output colors in a buffer:  ```vim :so $VIMRUNTIME/syntax/colortest.vim ```  SO [question](https://vi.stackexchange.com/questions/13458/make-vim-show-all-the-colors) with reference image. "
  },
  {
    "id": "vim-debug-mapping",
    "objectID": "vim-debug-mapping",
    "title": "View a List of Keyboard Mappings in Vim",
    "tags": "vim",
    "category": "snippet",
    "content": "  `:map` → show a list of the current keyboard mappings for _normal_, _visual_, _select_ and _operator pending_ modes.  `:map!` → show a list of the current keyboard mappings for _insert_ and _command-line_ mode  Top put all the mappings into a convenient text file:  ```vim :redir! > vim_maps.txt :map :map! :redir END ```  [source](https://stackoverflow.com/questions/2483849/detect-if-a-key-is-bound-to-something-in-vim) [another source](https://vi.stackexchange.com/questions/7722/how-to-debug-a-mapping) "
  },
  {
    "id": "vim-for-large-projects",
    "objectID": "vim-for-large-projects",
    "title": "Using Vim with large codebases",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  I use Vim as my text editor and IDE. I like that its free, open source and customizable. Below are some of the most useful plugins and features I've started using this year when I was building Moneybar and learning how to use Django.  There's a copy of my `.vimrc` at the end.  I'm happy to invest time and effort learning how to make the most of Vim and its plugins. I'm confident that I'll still be using it twenty years from now.  1.  Filetype plugins - if you want some settings to be active only for     particular filetypes, like `.py` (python) or `.txt` (text) then create a file in     `~/.vim/ftplugin/<filetype>.vim`.      Vim will look in this file when it opens a buffer of the corresponding     file type. Good for formatting options like line length, tab spaces, vim     commands that are language specific.      You can't activate plugins in these files though. All the plugins have to be     activated in your `.vimrc` in the usual way.  2.  `janko-m/vim-test` - this plugin lets you runs tests without leaving vim.     You can run the test that's nearest the cursor, or all the tests in the     current buffer. It's very customizable. I wish it could be a bit faster, but     I could probably improve that myself by changing some settings.  3.  `dense-analysis/ale` - The incredible Asyncronous Linting Engine (A.L.E)     applies fixers and linters to various filetypes, when you want and how you want.     Super useful for writing tidy code and catching mistakes before the code is     run.  4.  `junegunn/fzf` and `junegunn/fzf.vim` - It took a little getting used to at     first, but now I can't imagine not using a tool like this (this could be     said about so many vim-related things). Use `fzf` to switch between open     buffers, open a new file, search for files using the filename, or search     within all the files in the project for specific text.  5.  `majutsushi/tagbar` - This plugin opens a sidebar which contains a list of     of functions and classes and methods (tags). You can use it to see which     methods a class contains, and jump to the part of the buffer where a tag     is defined.  This is my `.vimrc` during January 2021.  ```vim ' ========== Global ========== set nocompatible              ' always put it at the top of .vimrc. effects mappings, undo, etc. set encoding=utf-8            ' utf-8 encoding set termguicolors set t_Co=256                  ' number of colors set noerrorbells vb t_vb=     ' no error bells, yes screnflash. set linespace=8 set scrolloff=2               ' minimum number of screen lines above and below the cursor set shortmess-=S              ' show how many times a search result occurs in current buffer, and index of current match set hidden set number relativenumber     ' Line numbers set splitbelow set splitright ' set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab set undofile                  ' Maintain undo history between sessions set undodir=~/.vim/undo       ' put all the undo files in this dir  filetype on                   ' enables filetype detection filetype plugin indent on     ' detection on, plugin on, indent on. To see the current status, type: :filetype syntax on                 ' syntax highlighting - try 'syntax on/enable' set noesckeys\t\t\t' might break stuff, should make <ESC> delay smaller set timeoutlen=350            ' timeoutlen is used for mapping delays set ttimeoutlen=10             ' ttimeoutlen is used for key code delays  'Search/Find/Highlight ====================================== set incsearch  ignorecase  smartcase  hlsearch highlight Search guibg=purple guifg='NONE' highlight Search cterm=none ctermbg=green ctermfg=black highlight CursorColumn guibg=blue guifg=red highlight CursorColumn ctermbg=red ctermfg=blue nnoremap // :nohlsearch<CR> nnoremap # #`` nnoremap * *``  ' close buffers properly go to previous buffer, then delete the buffer you were just in. nnoremap <Leader>bd :bp\\|bd #<CR> inoremap <Leader>bd :bp\\|bd #<CR>  ' Spell check ============================================== set spelllang=en nnoremap <leader>ss :setlocal spell!<CR> nnoremap <leader>sf z=1<CR><CR>  ' ========== Set leader and local leader =================== let mapleader='\\<Space>' let localleader='\\\\'  ' insert 1 space to the right, without leaving normal mode nnoremap <localleader><space> i<Space><Right><ESC>  ' Flash the cursor row (and column) colors are set after color scheme ======== ' nnoremap <leader>f :call Flash()<CR> ' function! Flash() '     ' set cursorline cursorcolumn '     set cursorline '     redraw '     sleep 110m '     set nocursorline ' endfunction  ' Edit/Reload the .vimrc file nnoremap <silent> <leader>ve :e $MYVIMRC<CR> nnoremap <silent> <leader>vr :so $MYVIMRC<CR>  augroup VimReload     autocmd!     autocmd BufWritePost $MYVIMRC source $MYVIMRC augroup END  ' Yank to clipboard vnoremap <C-c> '+y if has('clipboard')   set clipboard=unnamed ' copy to the system clipboard    if has('unnamedplus') ' X11 support     set clipboard+=unnamedplus   endif endif  ' Go into NORMAL mode inoremap jk <ESC>  ' view working directory nnoremap <leader>pwd :cd %:p:h<CR>  ' toggle line wrap nnoremap <leader>lw :set nowrap!<CR>  ' toggle line numbers nnoremap <leader>ln :set relativenumber!<CR>  ' Insert current datetime nnoremap <leader>dt A ()<ESC>hh '=strftime('\\%Y-\\%m-\\%d')<CR>gp  ' map w to ` nnoremap ` w  ' Swap : and ; nnoremap ; : nnoremap : ; vnoremap ; : vnoremap : ;  ' Navigation & movemement ' save buffer if it has been changed nnoremap ww :update<CR> ' close Vim, but not if there are unsaved changes nnoremap qa :qa<CR> ' save all changes nnoremap wa :wa<CR> ' close buffer nnoremap qq :bp\\|bd #<CR> nnoremap wq :update<CR>:bp\\|bd #<CR> ' switch buffers nnoremap <silent> + :bn<CR> nnoremap <silent> _ :bp<CR>  ' Split navigations nmap <Leader>h  <C-W><C-H> nmap <Leader>j  <C-W><C-J> nmap <Leader>k  <C-W><C-K> nmap <Leader>l  <C-W><C-L> nmap <Leader>ww  <C-W><C-W> nmap <Leader>wq  <C-W><C-Q>  ' split (pane) resize nnoremap <C-k> :resize +2<CR> nnoremap <C-j> :resize -2<CR> nnoremap <C-h> :vertical resize +2<CR> nnoremap <C-l> :vertical resize -2<CR>  ' open help in vertical split by default cabbrev vhelp vert help  ' Natural cursor movement over wrapped lines nnoremap j gj nnoremap k gk  ' Insert blank lines in normal mode nnoremap <leader>o o<ESC>k nnoremap <leader>O O<ESC>j  '***************************** '========== PLUGINS ========== '*****************************  call plug#begin('~/.vim/plugged')  ' numbers as text objects Plug 'MisanthropicBit/vim-numbers'   'run shell commands async in vim8' Plug 'skywind3000/asyncrun.vim' let g:asyncrun_open = 10  ' When using :python or :!python, access the packages in venv ' :VirtualEnvList ' :VirtualEnvActivate <tab> Plug 'jmcantrell/vim-virtualenv'  ' force quickfix to be full widtth au FileType qf wincmd J  ' testing - many languages and test runners Plug 'janko-m/vim-test' let test#strategy = 'asyncrun_background' let test#python#runner = 'pytest' let test#python#pytest#options = '-x' let test#vim#term_position = 'belowright'  nnoremap <silent> t<LEADER>n :TestNearest<CR> nnoremap <silent> t<LEADER>f :TestFile<CR> nnoremap <silent> t<LEADER>s :TestSuite<CR> nnoremap <silent> t<LEADER>l :TestLast<CR> nnoremap <silent> t<LEADER>g :TestVisit<CR>  ' toggle the quickfix window function! ToggleQuickFix()     if empty(filter(getwininfo(), 'v:val.quickfix'))         copen 15 \tsetlocal norelativenumber     else         cclose     endif endfunction  nnoremap <silent> cc :call ToggleQuickFix()<cr>   ' generates an index (or tag) file of language objects found in source files ' <C-]> jump to definition ' <C-O> jump back ' g] see a list of multiple matches ' <C-t> Plug 'universal-ctags/ctags'  ' (re)generate tags file in the bg Plug 'ludovicchabant/vim-gutentags' let g:gutentags_ctags_exclude = ['.json', '.mypy_cache/**']  ' sidebar that displays the ctags-generated tags of the current file, ordered by their scope Plug 'majutsushi/tagbar' nnoremap <F2> :TagbarToggle<CR> nnoremap <F2> :TagbarToggle<CR>  ' add python library code to tags file, goto def with <C-]> let pyEnvLib = $VIRTUAL_ENV let pyEnvLib .= '/lib/python3.8/'  ' Async linting engine Plug 'dense-analysis/ale' let g:ale_lint_on_enter = 0 let g:ale_lint_on_save = 0  ' ALE completion let g:ale_completion_enabled = 0 set omnifunc=ale#completion#OmniFunc let g:ale_completion_autoimport = 1  nnoremap <leader>at :ALEToggle<CR> nnoremap <leader>af :ALEFix<CR> nnoremap <silent> <leader>aj :ALENext<cr> nnoremap <silent> <leader>ak :ALEPrevious<cr>  ' iSort Plug 'fisadev/vim-isort' ' track the snippets engine Plug 'sirver/ultisnips' ' Snippets are separated from the engine. Add this if you want them: Plug 'honza/vim-snippets' ' Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe. let g:UltiSnipsExpandTrigger='<c-a>' let g:UltiSnipsJumpForwardTrigger='<c-b>' let g:UltiSnipsJumpBackwardTrigger='<c-z>' ' If you want :UltiSnipsEdit to split your window. ' let g:UltiSnipsEditSplit='vertical'  Plug 'Valloric/YouCompleteMe' Plug 'davidhalter/jedi' Plug 'maksimr/vim-jsbeautify'  nnoremap <leader>x  :YcmCompleter GoTo<CR> ' the subcommands add entries to Vim's 'jumplist' so you can use ' 'CTRL-O' to jump back to where you were before invoking the command (and ' 'CTRL-I' to jump forward; see ':h jumplist' for details) let g:ycm_confirm_extra_conf = 0 let g:ycm_autoclose_preview_window_after_completion=1 let g:ycm_collect_identifiers_from_tags_files = 1 let g:ycm_use_ultisnips_completer = 1 let g:ycm_seed_identifiers_with_syntax = 1 let g:ycm_complete_in_comments = 1 let g:ycm_complete_in_strings = 1 let g:ycm_collect_identifiers_from_tags_files = 1   ' autoclose parens, brackets etc ' Plug 'townk/vim-autoclose'  ' vim-tmux focus events Plug 'tmux-plugins/vim-tmux-focus-events'  ' Code folding ' Plug 'konfekt/fastfold'  ' match m of n https://vimawesome.com/plugin/indexedsearch ' Plug 'henrik/vim-indexed-search'  ' adds vertical lines to easily show indent levels Plug 'yggdroot/indentline'  ' Fugitive Plug 'tpope/vim-fugitive'  ' Marks Plug 'kshenoy/vim-signature'  ' Latex Vimtex Plug 'lervag/vimtex' let g:tex_flavor = 'latex' autocmd Filetype tex set updatetime=1 let g:livepreview_previewer = 'open -a Preview' let g:tex_IgnoredWarnings =     \\'Underfull'.'\\n'.     \\'Overfull'.'\\n'.     \\'specifier changed to'.'\\n'.     \\'You have requested'.'\\n'.     \\'Missing number, treated as zero.'.'\\n'.     \\'There were undefined references'.'\\n'.     \\'Citation %.%# undefined'.'\\n'.     \\'Double space found.'.'\\n' let g:Tex_IgnoreLevel = 8  ' Rainbow parenthesis let blacklist = ['html', 'md', 'wiki'] autocmd BufWritePre * if index(blacklist, &ft) < 0 | Plug 'luochen1990/rainbow' let g:rainbow_active = 1 let g:rainbow_conf = {     \\'guifgs': ['green', 'magenta1', 'gold', 'red', 'deepskyblue'],     \\'guis': ['bold','standout','undercurl','italic','strikethrough']     \\}  ' Set color scheme. set background=dark  Plug 'chriskempson/base16-vim' ' colorscheme base16-default-dark colorscheme badwolf let g:badwolf_darkgutter = 1 let g:badwolf_html_link_underline = 1 let g:badwolf_css_props_highlight = 1  ' colorscheme modifications highlight Comment ctermfg=cyan guifg=cyan highlight pythonComment ctermfg=cyan guifg=cyan highlight LineNr ctermfg=cyan guifg=cyan hi nontext term=bold ctermfg=Cyan guifg=#80a0ff gui=bold hi vimLineComment term=bold ctermfg=Cyan guifg=#80a0ff gui=bold ' SpecialKey - use :set list to toggle visibility of EOL, CR, etc hi specialKey term=bold ctermfg=Cyan guifg=#80a0ff gui=bold  ' colors for flashing cursorline and cursorcolumn hi CursorLine   cterm=NONE ctermbg=green ctermfg=black guibg=green guifg=black hi CursorColumn cterm=NONE ctermbg=green ctermfg=black guibg=green guifg=black  ' query what kind of syntax is this color? - wc nnoremap wc :echo 'hi<' . synIDattr(synID(line('.'),col('.'),1),'name') . '> trans<' . synIDattr(synID(line('.'),col('.'),0),'name') .'> lo<' . synIDattr(synIDtrans(synID(line('.'),col('.'),1)),'name') . '>'<CR>  ' fuzzy file, buffer, tag finder set rtp+=/usr/local/opt/fzf  ' ensure you have the latest version Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } Plug 'junegunn/fzf.vim'  nnoremap <silent> <Leader>e :Files<CR> nnoremap <silent> <Leader>r :Buffers<CR> nnoremap <silent> <Leader>t :Tags<CR> nnoremap <silent> <Leader>ff :Rg<CR> ' nnoremap <silent> <Leader>ff :Ag<CR> nnoremap <silent> <Leader>la :BLines<CR> nnoremap <silent> <Leader>ll :Lines<CR> nnoremap <silent> <Leader>' :Marks<CR> nnoremap <silent> <Leader>fh :Helptags<CR> nnoremap <silent> <Leader>fs :Snippets<CR> nnoremap <silent> <Leader>fc :Commits<CR> nnoremap <silent> <Leader>fbc :BCommits<CR> nnoremap <silent> <Leader>hh :History<CR> nnoremap <silent> <Leader>h: :History:<CR> nnoremap <silent> <Leader>h/ :History/<CR>  ' let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline' ' let $FZF_DEFAULT_COMMAND='rg --files --hidden'  let g:fzf_buffers_jump = 0 let g:fzf_layout = { 'down': '~50%' } ' let g:fzf_preview_window = '' let g:fzf_preview_window = 'right:0%'  function! s:copy_results(lines)   let joined_lines = join(a:lines, '\\n')   if len(a:lines) > 1     let joined_lines .= '\\n'   endif   let @+ = joined_lines endfunction  let g:fzf_action = {   \\ 'ctrl-t': 'tab split',   \\ 'ctrl-x': 'split',   \\ 'ctrl-v': 'vsplit',   \\ 'ctrl-o': function('s:copy_results'),   \\ }  let g:fzf_colors = \\ { 'fg':      ['fg', 'Normal'],   \\ 'bg':      ['bg', 'Normal'],   \\ 'hl':      ['fg', 'Comment'],   \\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],   \\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],   \\ 'hl+':     ['fg', 'Statement'],   \\ 'info':    ['fg', 'PreProc'],   \\ 'prompt':  ['fg', 'Conditional'],   \\ 'pointer': ['fg', 'Exception'],   \\ 'marker':  ['fg', 'Keyword'],   \\ 'spinner': ['fg', 'Label'],   \\ 'header':  ['fg', 'Comment'] }   ' grep in vim - shows results in a split window Plug 'mileszs/ack.vim'  ' session tracking Plug 'tpope/vim-obsession'  ' pairs of handy bracket mapping Plug 'tpope/vim-unimpaired'  ' https://vimawesome.com/plugin/surround-vim Plug 'tpope/vim-surround'  ' repeat commands from plugin mappings Plug 'tpope/vim-repeat'  ' vinegar Plug 'tpope/vim-vinegar' let g:netrw_liststyle = 3  ' CSV Plug 'chrisbra/csv.vim'  ' nerdtree Plug 'scrooloose/nerdtree'  nnoremap <Leader>n :NERDTreeToggle<CR> let g:nerdtree_tabs_autoclose=1 let NERDTreeAutoDeleteBuffer = 1 ' Automatically delete the buffer of the file you just deleted let g:nerdtree_tabs_open_on_gui_startup=2 ' 2 - open nerdtree only if directory was given as startup argument let g:nerdtree_tabs_smart_startup_focus=2 ' always focus file window after startup let NERDTreeShowHidden=0  ' Status bars Plug 'vim-airline/vim-airline' Plug 'vim-airline/vim-airline-themes' let g:airline_powerline_fonts = 1 let g:hybrid_custom_term_colors = 0 let g:hybrid_reduced_contrast = 0 let g:airline_statusline_ontop=0 let g:airline_section_y='' ' remove encoding status let g:airline_skip_empty_sections = 1 let g:airline_theme='badwolf' let g:airline#extensions#fugitiveline#enabled = 1 let g:airline#extensions#tmuxline#enabled = 1 let g:airline#extensions#gutentags#enabled = 1 let g:airline#extensions#virtualenv#enabled = 1 let g:airline#extensions#ale#enabled = 1 let g:airline#extensions#csv#enabled = 0 let g:airline#extensions#tagbar#enabled = 0 let g:airline#extensions#vimtex#enabled = 0 let g:airline#extensions#tabline#enabled = 0 let g:airline#extensions#tabline#formatter = 'unique_tail_improved'  ' comments Plug 'scrooloose/nerdcommenter' let g:NERDSpaceDelims = 1 let g:NERDCompactSexyComs = 1 let g:NERDDefaultAlign = 'left' let g:NERDCommentEmptyLines = 0 let g:NERDTrimTrailingWhitespace = 1  ' markdown. tabular is required Plug 'plasticboy/vim-markdown' Plug 'godlygeek/tabular' let g:vim_markdown_fenced_languages = ['python=py'] let g:vim_markdown_follow_anchor = 0 let g:vim_markdown_conceal_code_blocks = 0 let g:vim_markdown_folding_disabled = 1 let g:vim_markdown_conceal = 0 let g:tex_conceal = '' let g:vim_markdown_math = 1 let g:vim_markdown_new_list_item_indent = 4 let g:vim_markdown_strikethrough = 1  ' writing prose Plug 'reedes/vim-pencil' Plug 'junegunn/goyo.vim'  augroup pencil   autocmd!   autocmd FileType wiki,md,txt call pencil#init()   autocmd FileType wiki,md,txt :PencilSoft augroup END  let g:pencil#wrapModeDefault = 'soft'  autocmd! User GoyoEnter autocmd! User GoyoLeave  ' Ensure :q to quit even when Goyo is active function! s:goyo_enter()   let b:quitting = 0   let b:quitting_bang = 0   autocmd QuitPre <buffer> let b:quitting = 1   cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!   setlocal wrap endfunction  ' Quit Vim if this is the only remaining buffer function! s:goyo_leave()   if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1     if b:quitting_bang       qa!     else       qa     endif   endif endfunction  autocmd! User GoyoEnter call <SID>goyo_enter() autocmd! User GoyoLeave call <SID>goyo_leave()  nnoremap <Leader>g :Goyo<CR>  ' python linting ' F7 checks flake8 Plug 'nvie/vim-flake8' Plug 'vim-scripts/pylint.vim'  'Flagging Unnecessary Whitespace highlight BadWhitespace ctermbg=red guibg=darkred  Plug 'sheerun/vim-polyglot' let g:polyglot_disabled = ['latex', 'html'] let g:python_highlight_all = 1 let g:graphql_javascript_tags = []  ' javaScript Plug 'pangloss/vim-javascript' let g:javascript_plugin_jsdoc = 1 let g:javascript_plugin_flow = 1 ' format .JSON files by using the jq cli tool com! JQ %!jq  ' HTML/JINJA Plug 'glench/vim-jinja2-syntax' Plug 'valloric/matchtagalways' ' Plug 'alvan/vim-closetag' let g:closetag_filenames = '*.html, *.xhtml, *.phtml'  call plug#end() ``` "
  },
  {
    "id": "vim-notes-goto-tag-definition",
    "objectID": "vim-notes-goto-tag-definition",
    "title": "Vim: GoTo Tag Definition\n",
    "tags": "uncategorized",
    "category": "Technical/Developer Tools",
    "content": "  ## Update (2021-03-31):  Just use neovim.coc instead of YouCompleteMe or Syntastic.  It's faster, easier to setup, and works intuitively. ALE is still wonderful and useful, though there's a lot of overlap - coc can lint as well.  ## Jump Lists and Change Lists  If you're going to be jumping around to where things are defined, you will need to know how to jump back again. It seems there are two lists you need to be aware of, the _jump list_[ref]`:help jumplist`[/ref] and the _change list_[ref]`:help changelist`[/ref].  ### Jump List  - A list of locations that the cursor has jumped to. - `<C-O>` move up the jump list - `<C-I>` mode down the jump list - Jumping to a definition, or a search result  ### Change List  - `g;` and `g,` → move up and down the change list - A list of locations where a change was made. - `'.` → go to the location of your last edit (`.` is a mark). - `''` → go back to where you were before your last jump  ## Original Post:  There are multiple ways of doing anything with vim, including going to where a function or object is defined, and I usually need to do something at least 3 times before I can do it without breaking my focus or train of thought.  My memory is hazy but I remember spending a 1/2 day looking into this and considering which solution I wanted to commit to.[ref]The more powerful the tool, the more worthwhile it is to take a closer look at what it can and can't do.[/ref] My options seemed to be between [YouCompleteMe](https://github.com/ycm-core/YouCompleteMe) and [ALE](https://github.com/dense-analysis/ale). [Update![ref]YCM and ALE work fine for goto definition and linting, but they don't give me satisfactory autocompletion. `neoclide/coc.nvim` looks like it might offer some improvements. [neoclide/coc.nvim](https://www.vimfromscratch.com/articles/vim-for-python/)[/ref]]  I can't remember everything I read and tried, but I trust my conclusions. Looking in my `.vimrc` I see that I have `<leader>x` mapped to `:YcmCompleter GoTo` and it works just fine, even when a module is imported from somewhere outside the current project. The tool was working and ready to use, I just hadn't internalized it yet.  ## Commands to remember:  - `<Leader>x` - GoTo definition - YCMs best guess at an 'intelligent' goto   command, whether its a declaration or a definition. - `<F2>` - Toggle tagbar "
  },
  {
    "id": "vim-regex",
    "objectID": "vim-regex",
    "title": "Vim Regex",
    "tags": "vim,regex",
    "category": "snippet",
    "content": "  This is a great article about using regular expressions in Vim:  [marcelfischer.eu/blog/2019/checkbox-regex/](https://marcelfischer.eu/blog/2019/checkbox-regex/) "
  },
  {
    "id": "vim-save-sudo",
    "objectID": "vim-save-sudo",
    "title": "vim save sudo",
    "tags": "vim,macos,linux",
    "category": "snippet",
    "content": "  Save (write) a (read only) Vim file with sudo when you opened it without sudo-ing:  `:w !sudo tee % > /dev/null` "
  },
  {
    "id": "vim-sneak",
    "objectID": "vim-sneak",
    "title": "Vim Sneak",
    "tags": "vim,plugin",
    "category": "snippet",
    "content": "  - Invoked with `s` followed by 2 chars. - `S` goes backwards. - `F`, `f`, `T`, and `t` are enabled to work across lines. - Jump back with `<C-O>` - `;` or `,` to go to next/previous highlighted text. - `5sxy` searches for the next instance of `xy` within 5 lines. - `3dzqt` delete up to the third instance of `qt`.  [repo](https://github.com/justinmk/vim-sneak) "
  },
  {
    "id": "vim-snippets",
    "objectID": "vim-snippets",
    "title": "Vim Snippets",
    "tags": "vim,netrw",
    "category": "snippet",
    "content": "  A useful collection of [gists](https://gist.github.com/romainl/4b9f139d2a8694612b924322de1025ce) by [Romain Lafourcade](https://gist.github.com/romainl)  A [gist](https://gist.github.com/t-mart/610795fcf7998559ea80) about `netrw`. "
  },
  {
    "id": "vim-spell",
    "objectID": "vim-spell",
    "title": "Vim spellcheck commands",
    "tags": "vim",
    "category": "snippet",
    "content": "  - `[s` or `]s` → go to next/previous bad word - `z=` → list of suggestions - `zg` → add word to good word list - `zug` → remove word from good word list - `zw` → add word to bad word list - `zuw` → remove word from bad word list "
  },
  {
    "id": "vim-split-rearranging",
    "objectID": "vim-split-rearranging",
    "title": "Rearrange splits in Vim",
    "tags": "vim",
    "category": "snippet",
    "content": "  `<C-w>x` - swap buffers, but keep arrangement the same  `<C-w>H` - make the current split cover the left of the screen.  J, K, L covers the bottom, top, right of the screen  - [blog post](https://thoughtbot.com/blog/vim-splits-move-faster-and-more-naturally) - [stack overflow](https://stackoverflow.com/questions/6053301/easier-way-to-navigate-between-vim-split-panes) "
  },
  {
    "id": "vim-text-objects",
    "objectID": "vim-text-objects",
    "title": "Better Text Objects",
    "tags": "vim",
    "category": "snippet",
    "content": "  - target function arguments - more types of object - consistent searching/jumping if you're not inside the thing you're targeting - jump forward or backward - look for the nth occurrence - select white space around/inside object  [Github](https://github.com/wellle/targets.vim)   [Article about a plugin](https://www.barbarianmeetscoding.com/blog/exploring-vim-plugins-improve-and-extend-your-text-objects-with-targets-vim) "
  },
  {
    "id": "vim-yanked-text-buffer",
    "objectID": "vim-yanked-text-buffer",
    "title": "Vim register for yanked text",
    "tags": "vim,linux,text",
    "category": "snippet",
    "content": "  It's annoying when you delete something and overwrite your yanked text.  Use numbered registers! `'0` to `'9`  `'0` contains the most recent yank. `'1` contains the most recent deleted text  `'0p` - paste the most recent yank, even if you deleted something after yanking it "
  },
  {
    "id": "vim",
    "objectID": "vim",
    "title": "Vim!",
    "tags": "vim ",
    "category": "Technical/Developer Tools",
    "content": "  Vim is a text editor renowned for its efficiency and its use of keyboard shortcuts. It's based on the Vi text editor from the 1970's. It was first released in 1991 and is still being developed today. It comes pre-installed on Unix systems (including MacOS) and can be run from the terminal.  Vim is famous in another way too - for being difficult to learn. I found some good and remarkably creative tools to begin learning its concepts and controls. This was necessary because there is no GUI. There is a *game* [here](http://vim-adventures.com/), and there is [this interactive tutorial](http://www.openvim.com/). There's also a built-in vim tutorial - just type 'vimtutor' into Terminal.  Vim is designed so that you don't need to take your hands off your keyboard and use a mouse. It has the 'insert' mode where you enter text as usual, and the 'command' mode where you can make use of a comprehensive and flexible shortcut language to move around, edit and search the text. With no GUI or toolbar, it's a very different approach to text editing than I'm used to.  You can run Vim from the terminal, but there are also versions that run as apps. MacVim on MacOS has the option to show a tool bar of simple commands like a normal program, and lets the arrow keys move the cursor in addition to VIM's 'hjkl' functionality. This makes getting started a little simpler.  There are also a lot of plugins to extend Vim's functionality and turn it from a text editor into an IDE. [This post](https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/) walks you through setting up Vim as a Python IDE and explains how to manage various add-ons.  I recommend Daniel Mieslers [blog post](https://danielmiessler.com/study/vim/) for a quick overview of how to use Vim. "
  },
  {
    "id": "virtual-environments-and-python-versions",
    "objectID": "virtual-environments-and-python-versions",
    "title": "Virtual environments and python versions",
    "tags": "python,pyenv,virtualenv,virtual-environment",
    "category": "Technical/Developer Tools",
    "content": "  Contents: <TOCInline toc={props.toc} exclude='Overview' toHeading={2} />  # Recipe  ## Create and activate a new virtualenv  - `pyenv versions` or `pyenv install -l` - list available versions - **`pyenv virtualenv <python version> <environment name>`** - **`pyenv local <environment name>`**   - this creates a `.python-version` file in the current directory   - the environment will be automatically activated and deactivated because `eval '$(pyenv virtualenv-init -)'` is in the `.zshrc` file. - `python -V` - `python -m test`  If you did not configure `eval '$(pyenv virtualenv-init -)'` to run in your shell then  - `pyenv activate <environment name>` - `pyenv deactivate`  # Background  - `pyenv` manages multiple versions of Python itself. - `virtualenv/venv` manages virtual environments for a specific Python version. - `pyenv-virtualenv` is a pyenv plugin that plays nicely with `virtualenv`. It manages virtual environments across varying versions of Python. - `python -V` - shows which python version is currently being used. - `which python` - shows the path or location of the current python.  # Python versions  ## Installing new python versions  - `pyenv install --list | grep ' 3\\.9\\.'` - list versions - `pyevn install <name>` - install a new version - pyenv python versions are installed at `~/.pyenv/versions/` - You can uninstall a pyenv python version by   - `rm -rf ..` the subdir in `~/.pyenv/versions/...`   - `pyenv uninstall <name>`  ## Set a particular python version  - `pyenv versions` - list available versions - `pyenv global <name>` - set system default python version - `pyenv global system` - back to how things were before pyenv - `pyenv local <name>` - set default version for this current dir - this creates a `.python-version` file in the current directory. If pyenv is   active in your environment then the version specified in this file will be   activated  ## Other commands  - `pyenv uninstall <version>` - `pyenv rehash` - run after installing a new version, or install a package   that provides binaries  [source](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)  ## Tests  - `python -m test` - run some tests to be confident everything is ok  ## Source  [Real Python article](https://realpython.com/intro-to-pyenv/)  # Code editor integration using `activate_this.py`  So that code editors like vim can respond to the currently active virtual environment and update `path`, `sys.path` and `sys.prefix` (for example when running Django test suites) virtualenv uses `activate_this.py` to make these changes.  For some reason it isn't available on my setup, so here is a copy I found somewhere. It's different to the version hosted on the [virtualenv repo](https://github.com/pypa/virtualenv/blob/main/src/virtualenv/activation/python/activate_this.py) and I haven't looked at why yet. Copy paste the version below into `~/.pyenv/versions/<version>/envs/<environment name>/bin/activate_this.py`  **activate_this.py**  ```Python # -*- coding: utf-8 -*- # https://github.com/pypa/virtualenv/blob/main/src/virtualenv/activation/python/activate_this.py  '''Activate virtualenv for current interpreter: Use exec(open(this_file).read(), {'__file__': this_file}). This can be used when you must use an existing Python interpreter, not the virtualenv bin/python. ''' import os import site import sys  try:     abs_file = os.path.abspath(__file__) except NameError:     raise AssertionError('You must use exec(open(this_file).read(), {'__file__': this_file}))')  bin_dir = os.path.dirname(abs_file) base = bin_dir[: -len('__BIN_NAME__') - 1]  # strip away the bin part from the __file__, plus the path separator  # prepend bin to PATH (this file is inside the bin directory) os.environ['PATH'] = os.pathsep.join([bin_dir] + os.environ.get('PATH', '').split(os.pathsep)) os.environ['VIRTUAL_ENV'] = base  # virtual env is right above bin directory  # add the virtual environments libraries to the host python import mechanism prev_length = len(sys.path) for lib in '__LIB_FOLDERS__'.split(os.pathsep):     path = os.path.realpath(os.path.join(bin_dir, lib))     site.addsitedir(path.decode('utf-8') if '__DECODE_PATH__' else path) sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]  sys.real_prefix = sys.prefix sys.prefix = base ``` "
  },
  {
    "id": "visual-mathematical-proofs",
    "objectID": "visual-mathematical-proofs",
    "title": "Visual mathematical proofs",
    "tags": "math",
    "category": "snippet",
    "content": "  A [question](https://math.stackexchange.com/questions/733754/visually-stunning-math-concepts-which-are-easy-to-explain) on Stack Overflow asking for great visual proofs of mathematical ideas  - trigonometry, angles - Fourier transforms - right angle triangles - the area of a circle  [archive](https://web.archive.org/web/20210911092903/https://math.stackexchange.com/questions/733754/visually-stunning-math-concepts-which-are-easy-to-explain) "
  },
  {
    "id": "wallet",
    "objectID": "wallet",
    "title": "Hardware Wallets",
    "tags": "wallet,crypto,blockchain,bitcoin",
    "category": "Technical/Cryptocurrencies",
    "content": "  ##What is a hardware wallet A hardware wallet (HW wallet) is a physical device that stores the information required to access digital currency or assets. It is plugged into a computer via USB in order to initiate or confirm transactions on the Bitcoin, Ethereum or other digital asset blockchain networks.  They are a secure method of storing cryptographic data. They are so secure that they can be used on a compromised computer. All that is needed to access funds using a HW wallet (in addition to the device itself) is a PIN code which the user chooses. A single HW wallet can store multiple currencies in multiple accounts.  HW wallets are an easier solution than remembering a good password, and safer than storing the data in a file on my computer or online.  The best known hardware wallet brands are [Ledger](https://www.ledgerwallet.com/) and [Trezor](https://trezor.io/).  ##The problem HW wallets are technically great, but their size and shape creates a bad user experience. A good hardware wallet should be convenient to use multiple times each day, like a credit card is.  Current hardware wallets don't fit into a (money) wallet and people don't want to carry more any objects in their pockets. They are too big and are a bad shape.  HW wallets look like they might belong on a keyring, but it's inconvenient and insecure to attach a credit card to a keyring and the same is true for an HW wallet. I might store my keys on a hook by my door, but I would never leave my wallet there overnight. I often want to keep my keys and money separate because I need my keys when I’m near my house, where I don’t need to buy stuff, and I need my money when I’m away from my house where I don’t need to unlock anything.  I want to keep my bank cards and cash together in one safe place, and I don’t want to carry around a dongle as well. It's inconvenient.  It’s easier to have a separate dongle lost or stolen than something that would fit next to my credit card in my wallet. The inconvenience is a barrier to enjoying the advantages of digital currencies.  ##The goal Create a HW wallet that is the size and shape of a credit card, it could be 3 times thicker than a credit card and still fit in a normal wallet. It needs  1. a display - it could be a low resolution b&w display 2. two or more buttons 3. to plug into a USB port 4. securely sign transactions and create addresses "
  },
  {
    "id": "what-happens-next",
    "objectID": "what-happens-next",
    "title": "Predicting the Future using Human Nature and Technology",
    "tags": "uncategorized",
    "category": "Non-technical/Social",
    "content": "  Predicting the future sounds like a tough problem, but we try to do it all the time without realising it.  We predict the future when we think about how risky or scary something is, or when we think about what's really going to change because of an announcement or press release. We try to predict the future when we're at the supermarket checkouts and we try to pick the queue that will move the fastest. I always seem to pick the wrong one.  There must be a million ways of trying to predicting the future but all the good ones are models which reduce complexity and emphasise key considerations. One of them could be comparing the influence of human nature and technology on the outcome, and then comparing the event to what's happened before.  Human nature doesn't change, so if something is driven by fear or greed then it probably doesn't matter what century it occurs in. Technology _is_ change, and if something is enabled or prevented due to technological progress then the date is important.  What is driving the scenario? Is it human nature or technology? Supermarket checkouts are mostly manual and require a couple of adults to work together, so human nature has a much bigger role on efficiency than tech. Young men will stack and pack quickly, old women will be the opposite. What types of shopping bags they have, or how they pay, or even how many items they're buying, are probably not going to lead you to the right decision.  The same probably works for getting through airport security. "
  },
  {
    "id": "whats-so-different-about-now",
    "objectID": "whats-so-different-about-now",
    "title": "What's So Different About Now",
    "tags": "uncategorized",
    "category": "Non-technical/Social",
    "content": "  I think we are less aware of our ignorance than previous generations. It is easy to implicitly assume that all useful information is available to us, and that we are therefore more informed than we really are.  I think this is because the internet has made information more accessible and global air travel have made the world feel smaller.  Whilst an individual would hopefully never pretend to know everything, I think its easy to assume that the right information exists and is being used by the people to whom it is relevant.  But the accessibility of all information has put us in a situation similar to information scarcity. We still need to actively search for the information we want, because the information that comes to us easily or for free is not equal to what we find when we apply effort.  I can easily have so many short pieces of news or information that I am always slightly overwhelmed. The pace of modern communications encourages me to never slow down enough to form my own questions or frame my own arguments. I can always find _an_ answer to my questions, but when was the last time I checked that whoever gave it to me wasn't going to profit from it? "
  },
  {
    "id": "when-bitcoin-top",
    "objectID": "when-bitcoin-top",
    "title": "Where and when will the current Bitcoin market peak?",
    "tags": "bitcoin,finance,markets",
    "category": "Technical/Cryptocurrencies",
    "content": "  # Buying Checklist  1.  Cyclic bottom when price is close-ish to the 200 week moving average  ![200 Week moving average](/static/images/btc_price_charts/200-week-moving-average.png)  # Selling Checklist  1. Top Cap &thickapprox; Market Cap [chart](https://charts.woobull.com/bitcoin-valuations/) 2. MVRV > 4 [chart](http://charts.woobull.com/bitcoin-price-models/) 3. S2F deflection > 3, but noisy [chart](https://twitter.com/s2fmultiple/status/1387991423400689664/photo/3) 4. 0.875 &times; Delta Cap &thickapprox; Realised Cap [chart](http://charts.woobull.com/bitcoin-price-models/). 5. HODL waves - 45% moved in the last 6 months [chart](https://unchained-capital.com/hodlwaves/) 6. 12 Month RSI > 90 [chart](https://www.tradingview.com/chart/BTCUSD/Wf6Nuiof-BTC-USD-12-month-RSI/) 7. 3-month coin days destroyed - check glassnode, STH and LTH [chart](https://studio.glassnode.com/metrics?a=BTC&category=&m=indicators.Cdd90AgeAdjusted)  # Summary  1. S2F model suggests a peak around the beginning of 2021Q4, in the region of **&#36;300,000**. 1. The rainbow chart seems to broadly agree with S2F. 1. If the age-adjusted 3-month coin days destroyed goes above 550,000 then get ready to sell. 1. Willy Woos 'double top' chart suggests a peak around **&#36;400,000**. 1. RationalRoot's comparison of bull runs suggests a market top around **14 September** and a maximum price around **&#36;2,000,000** [sic]. 1. RationalRoot's comparison of 12 months RSI suggests that the market top is reached shortly after a **12 month RSI exceeds 90**. This seems less reliable than the above points 1. Jurrien Timmer suggests a peak price around &#36;100,000 if price shoots up unexpectedly quickly. I expect the market top to be significantly higher. 1. &#36;100k will be a massive psychological level. If the price does increase to this level before approximately July then the optimal sell price would therefore not be exactly &#36;100,000. 1. Market top is expected around **September 2021 at the earliest**. 1. The behaviour of the market will change as its participants change. There hasn't been a bull run with significant institutional investors before. 1. Sell using a cost averaging strategy.  ## Awareness  - Buy when everyone is selling, sell when everyone is buying. Be brave when there is fear, if there is no fear then its about to get very messy. - If everyone is super confident that prices are definitely going to go up, something bad is about to happen. A lack of uncertainty is a big warning bell. - **14 September, &#36;300,000.**  # Threshold Values  ## MVRV  - MVRV > 3 → Local top - MVRV > 4 → Macro top - MVRV has historically been one of the best on-chain predictors of market tops and bottoms. - The ratio of Market Value to Realised Value is calculated by dividing Bitcoin’s market cap by its realised cap. - [chart](http://charts.woobull.com/bitcoin-price-models/)  ## Top Cap  - Top Cap is 35 x Average Cap - Market top when Top Cap is equal to Market Cap.  ## Delta Cap  - Delta cap is Average Cap subtracted from Realised Cap. - When Delta Cap is almost Realised Cap, it's a market top. - When Delta cap touches Average Cap, it's a market bottom. - Market Top when Delta cap is within 20%­15% of Realised Cap  ## S2F Deflection  - Get key ratio values - If s2F deflection > 3, but its [noisy](https://studio.glassnode.com/metrics?a=BTC&category=&m=indicators.StockToFlowDeflection)  ## HODL Waves  - \\>45% of supply has been moved in the last 180 days (6 months) → Sell - \\>70% of supply has been held over 180 days → Buy - [chart](https://unchained-capital.com/hodlwaves/) - hover the cursor over todays date and add up all the age brackets from 24hr to 3-6 months  ## 12 month RSI > 90  - 14 month RSI > 95 → Sell - 12 month RSI > 90 → Sell - Noisy - defer to other metrics.  ## SOPR  - Use 7 day average. - 1.04 → Sell - 0.97 → Buy - Noisy - defer to other metrics.  ## Realised Cap > NVT Cap  - Realised Cap should be lower than NVT Cap. - Sell when Realised Cap almost exceeds NVT cap - See chart below, there have been false positives. - Realised Cap is lower than NVT cap during a bull market only. - Noisy, could be a miss.  # Charts  ## Stock to Flow Model  [  ![bitcoin stock to flow model](/static/images/btc_price_charts/bitcoin-stock-to-flow-model.png)/images/btc_price_charts/bitcoin-stock-to-flow-model.png)  ## Rainbow Model  [  ![bitcoin rainbow price bands](/static/images/btc_price_charts/bitcoin-when-to-sell.jpg)/images/btc_price_charts/bitcoin-when-to-sell.jpg)  ## Top Cap  [  ![Top Cap is 35*Average Cap](/static/images/btc_price_charts/TopCap.png)/images/btc_price_charts/TopCap.png)  ## Realised Cap, NVT  [  ![Realised Cap and NVT](/static/images/btc_price_charts/RealisedCapVsNVT.png)/images/btc_price_charts/RealisedCapVsNVT.png)  ## Delta Cap  [  ![Delta Cap until 2019](/static/images/btc_price_charts/delta2019.jpg)/images/btc_price_charts/delta2019.jpg)  ## 3 month coin days destroyed  [  ![bitcoin 3 month coin days destroyed](/static/images/btc_price_charts/3monthCoindaysDestroyed.png)/images/btc_price_charts/3monthCoindaysDestroyed.png)  ## Double top  [  ![bitcoin historical double tops](/static/images/btc_price_charts/woobull_double_top_first_top_now.jpg)/images/btc_price_charts/woobull_double_top_first_top_now.jpg)  ## Similarities to previous bull runs  Version 1: [  ![bitcoin price comparison of historical bullruns](/static/images/btc_price_charts/bull_run_comparison.jpg)/images/btc_price_charts/bull_run_comparison.jpg)  Version 2: [  ![bitcoin price comparison of historical bullruns](/static/images/btc_price_charts/bull_run_comparison2.jpeg)/images/btc_price_charts/bull_run_comparison2.jpeg)  Halving model: [  ![bitcoin historical price oriented around historical halving](/static/images/btc_price_charts/halving_model.jpg)/images/btc_price_charts/halving_model.jpg)  12 Month RSI comparison [  ![bitocin historical RSI](/static/images/btc_price_charts/rsi_comparison.jpg)/images/btc_price_charts/rsi_comparison.jpg)  ## Bitcoin price history  [  ![bitcoin price history](/static/images/btc_price_charts/btcPriceHistoryLog.png)/images/btc_price_charts/btcPriceHistoryLog.png)  ## Lowest price forward model  [  ![bitcoin lowest price forward](/static/images/btc_price_charts/btc_minimum_price_forecast.jpg)/images/btc_price_charts/btc_minimum_price_forecast.jpg)  # Key metrics and terms  ## Average Cap  The 'forever' moving average of market cap. It is the cumulative sum total of daily market cap values divided by the age of the market in days.  ## Top Cap  Average Cap multipled by 35.  ## NVT Cap  A valuation using monetray velocity. Checkout CoinMetrics for more info.  ## MVRV  The ratio of Market Value to Realised Value is calculated by dividing Bitcoin's market cap by its realised cap.  ## Realised Cap  The sum of the products of each UTXO and the market price of Bitcoin when the UTXO was generated.  ## Market Cap  The price of the most recent Bitcoin transaction multipled by the number of Bitcoin  ## UTXO  _Unspent Transaction Outputs_. These are kind of like unspent coins. If you have 1.5 BTC then you might have bought 2 and sold 0.5. The total value of UTXOs in your wallet will be 1.5.  ## SOPR  The _Spent Output Profit Ratio_ is a measure of the average profit or loss on a coin. Is a coin is moved when the price is higher than when it was received the SOPR increases, if a coin is moved when the price is lower than when the coin was received then SOPR decreases.  It won't be accurate for individual coins but in aggregate it gives an idea of whether coins are being sold at a loss or for profit.  Market participants who have owned BTC for 3 months behave differently to those that have held BTC for 3 years. A more experienced investor will likely make more measured and less rash decisions.  By segregating the UTXOs according to age you can compare old coins and new coins, experienced and inexperienced investors (in aggregate).  Weak hands will sell before stronger hands, and when market price decrease it's useful to know aggregate age data for the coins being sold. If coins are moving from young wallets then the selling is likely much less significant than if coins are being moved onto exchanges from old wallets.  ## aSOPR  The _Adjusted Spent Output Profit Ratio_ is the same as SOPR but it ignores coins less than 1 hour old.  If profits are taken by old coins, aSOPR trends higher. It will trend lower when older (and therefore profitable) coins remain dormant.  The higher aSOPR is, the more profit has been taken off the table.  When aSOPR is less than 1, spent coints are moved at an aggregate loss.  ## URPD  _UTXO Realised Price Distribution_ - If a lot of coins have moved within a particular price band, it is likely that there is strong price support and resistance at this price.  This would be truer and more reliable in a mature market. Because the market for Bitcoin is expanding so rapidly and the price is so volatile, the attitudes and expectations of market participants is also much more malleable than in traditional finance. For example, what was considered a very high price 12 months ago would be considered a disaster today.  ## RSI  The _Relative Strength Index_ is borrowed directly from traditional finance. You can calculate it over different time periods.  ## Miner Net Position  _Miner Net Position_ shows the degree to which, on aggregate, Bitcoin miners are profiting from the coins they've generated from mining. Miners are expected to be among the most bullish of all market participants, and therefore it is notable when they start moving coins from their mining wallets into exchange wallets.  ## Stock-to-Flow  A stock to flow model is used to measure the scarcity of a commodity. It's a calculation based on the ratio of existing supply and how much is being produced. The higher the ratio, the longer it will take for supply to meet existing demand.  Gold has a stock to flow ratio of 66, which means it would take 66 years at the current rate of production to produce the amount of gold currently in circulation. Silver has a S2F ratio of 74. BTC has a S2F of about 50.  # Background  Over the past 8 years, Bitcoin has gone through phases of rapid price increase followed by periods of rapid decrease. The price has been driven by increasing market size and a decreasing rate of issuance, and has been so volatile (compared to traditional finance) that '1 month in cryptocurrency markets is like 1 year in traditional markets'. However volatility is decreasing and we are seeing lower highs and higher lows during each subsequent market cycle.  The single biggest factor driving multi-year market cycles appears to be the decreasing rate of supply increase (the issuance rate). The last 3 halvings[ref]Every 210,000 blocks, the number of bitcoin awarded to the miner for successfully adding a block is halved. The last halving occurred in May 2020 and the rate of issuance halved from 12.5 BTC/block to 6.25 BTC/block[/ref] seem to have provoked the last 3 bull cycles. We are in the third bull cycle now (April 2021) and I fully expect it to be followed by a bear cycle.  As an amateur investor, I want to buy low and sell high. I'd like to time the top and bottom of the market with reasonable accuracy, just like everyone else. But I'm aware that my methods are less nuanced than professional traders and analysts - I have access to less data than them and I'm not willing to put in as much effort as they are. I'm happy to do this [Pareto](https://en.wikipedia.org/wiki/Pareto_principle) style - I'll give it 20% of my maximum effort and I'll be happy with 80% of an ideal result[ref]I realise this probably isn't, strictly, what Mr. Pareto was thinking when he published his research. I hope you get my intention.[/ref].  This is a review of what I consider to be the best sources of metrics and analysis that I've come across. All the resources used in this article are attributed to the original author and have been made freely available on Twitter. I hope its OK for me to repost them here, if it's not then let me know and I'll edit the post.  ### Hopefully helpful links  This article assumes some familiarity with blockchains and financial markets. Some more general articles on this site are:  1. [Bitcoin compared to Gold]({filename}../articles/bitcoin.md) 2. [How to buy bitcoin]({filename}../articles/buying-btc.md)  # Analysts  These insights, metrics and charts are the work of the following people and organisations:  1. [Willy Woo](https://twitter.com/woonomic) 2. [Timothy Peterson](https://twitter.com/nsquaredcrypto) 3. [PlanB](https://twitter.com/100trillionUSD) 4. [Glass Node](https://twitter.com/glassnode) 5. [therationalroot](https://twitter.com/rationalroot) 6. [CoinMetrics](https://twitter.com/coinmetrics) 7. [Jurrien Timmer](https://twitter.com/TimmerFidelity/status/1382026394541174787?s=20) "
  },
  {
    "id": "where-command",
    "objectID": "where-command",
    "title": "All Known Locations of an Executable",
    "tags": "unix,macos,cli,bash",
    "category": "snippet",
    "content": "  `where <executable>`  See a list of all builtin commands `man where` "
  },
  {
    "id": "where-was-a-setting-set-",
    "objectID": "where-was-a-setting-set-",
    "title": "See where Vim is setting an option",
    "tags": "vim",
    "category": "snippet",
    "content": "  See where an option was set in vim using the following command:  `:verbose set textwidth?` "
  },
  {
    "id": "why-i-want-to-write-regularly",
    "objectID": "why-i-want-to-write-regularly",
    "title": "Why I Want To Write Regularly",
    "tags": "uncategorized",
    "category": "Non-technical/Learning",
    "content": "  I've started writing more frequently. I want to do this because I often have thoughts which I'd like to explore and develop further but rarely do. Writing forces me to organise my thoughts and look at how substantial they really are, or aren't.  There is truth in the saying that 'to know a thing you need to be able to teach it' [ref]Wikipedia [article](https://en.wikipedia.org/wiki/Learning_by_teaching), and some [external validation](https://web.archive.org/web/20210118112910/https://digest.bps.org.uk/2018/05/04/learning-by-teaching-others-is-extremely-effective-a-new-study-tested-a-key-reason-why/).[/ref] , and writing well has several similarities to teaching. Can I really copy a collection of thoughts from my head to yours?  Powerful ideas are resilient and have many consequences. The older I get the more I believe that ideas matter[ref]A complimentary notion is that asking the right question is more important than finding the right answer. I guess asking the right question is always necessary, but finding the right answer is only sometimes [sufficient](https://en.wikipedia.org/wiki/Necessity_and_sufficiency). Sometimes you can get the answer a bit wrong if you asked the right question, and still get enough benefits to avoid the problem.[/ref]. They have so many subtle consequences. They are the first [dominos](https://en.wikipedia.org/wiki/Domino_effect).  I don't expect writing regularly to become a permanent habit - it doesn't need to be. But I do want to focus on it for awhile so that I become significantly better. It's a skill that has too many benefits to be ignored.  The blogs I remember most are focussed and unapologetic about their priorities. Most of them have a lot of text and do not focus on design. They make it easy to read content and don't spend time or attention on header images or styling.  Before I redesigned this blog I had default settings that asked me to supply an image for each post, and for a summary, and a suggested tweet. None of it was necessary and whilst they all tried to make the blog better they ended up making it harder to write. These peripheral features added complexity and distracted from the main thing.  They're are still there if I want to use them but they are not set up to be used by default anymore. They've been moved to the background and if I forget they exist then that's OK - it just shows they weren't as important in practice as I thought they would be. I was probably just having fun adding new features and working out how to build them.  [You Ain't Gonna Need It](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it), mate. "
  },
  {
    "id": "wtf-python",
    "objectID": "wtf-python",
    "title": "WTF Python",
    "tags": "python,programming",
    "category": "snippet",
    "content": "  A [repo](https://github.com/satwikkansal/wtfpython) of curious syntax features. "
  },
  {
    "id": "your-bashrc-doesn-t-have-to-be-a-mess",
    "objectID": "your-bashrc-doesn-t-have-to-be-a-mess",
    "title": "Your .bashrc doesn't have to be a mess",
    "tags": "bash,shell,zsh",
    "category": "snippet",
    "content": "  [Blog post](https://write.as/bpsylevc6lliaspe) demonstrating how to split a `.bashrc` file into 'submodules' and keep it maintainable.  ```bash BASHRC_D=~/.config/bashrc.d [[ -r ${BASHRC_D}/bootstrap ]] && . ${BASHRC_D}/bootstrap ```  ```bash for file in ${BASHRC_D}/*.sh; do   [[ -r $file ]] && . $file done unset file ``` "
  },
  {
    "id": "zsh-commands-exec-vs-source",
    "objectID": "zsh-commands-exec-vs-source",
    "title": "> Zsh commands: exec vs source\n",
    "tags": "zsh,shell",
    "category": "snippet",
    "content": "  `source` and `exec` are both built-ins.  `source` evaluates or runs the content of a file. For example, if you `source ~/.zshrc` you apply the content of the file to the currently running Zsh process. You can source and valid Zsh code.  `exec` replaces the current shell process with another process. Your terminal (`tty`) session is running a shell. Replace it with another shell without launching another tty. It could be the same shell with different settings or flags.  The `tty` (teletypewriter) command prints the name of the terminal you're using. "
  },
  {
    "id": "zsh-suspend-or-push-function",
    "objectID": "zsh-suspend-or-push-function",
    "title": "zsh suspend or push function",
    "tags": "zsh",
    "category": "snippet",
    "content": "  In zsh you can suspend a command whilst typing it.  This clears the current line, lets you run another command, and then when it finishes the original unfinished text is put back.  This is useful if whilst typing a command you realise you need to run another command first, like:  - `ls` to check the name for an argument. - creating a location before moving something into that location. - checking `man` or `tldr` for a command flag.  Zsh has built-in functions `push-line` and `push-input`.  [blog post](https://sgeb.io/posts/bash-zsh-half-typed-commands/) and also this [SO answer](https://unix.stackexchange.com/a/10851/235350)  [zsh widgets](https://sgeb.io/posts/zsh-zle-custom-widgets/) [zsh documentation](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets) "
  }
]
